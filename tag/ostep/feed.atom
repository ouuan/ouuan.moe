<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ouuan.moe/tag/ostep</id>
    <title>ouuan's blog: 标签: ostep</title>
    <updated>2024-02-06T16:51:36.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>ouuan</name>
        <uri>https://github.com/ouuan</uri>
    </author>
    <link rel="alternate" href="https://ouuan.moe/tag/ostep"/>
    <link rel="self" href="https://ouuan.moe/tag/ostep/feed.atom"/>
    <subtitle>标签: ostep - ouuan 的博客。</subtitle>
    <icon>https://ouuan.moe/favicon.ico</icon>
    <rights>Copyright © 2022 - 2024 ouuan
Licensed under CC BY-SA 4.0</rights>
    <entry>
        <title type="html"><![CDATA[OSTEP 学习笔记 —— Virtualization]]></title>
        <id>https://ouuan.moe/post/2024/01/ostep-virtualization</id>
        <link href="https://ouuan.moe/post/2024/01/ostep-virtualization"/>
        <updated>2024-02-06T16:51:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/"><span class="mojikumi-line-start">《</span>Operating Systems: Three Easy Pieces<span class="mojikumi-line-end">》</span></a>第一部分 Virtualization 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/"><span class="mojikumi-line-start">《</span>Operating Systems: Three Easy Pieces<span class="mojikumi-line-end">》</span></a>第一部分 Virtualization 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="a-dialogue-on-virtualization" class="heading"><a href="#a-dialogue-on-virtualization" class="heading-anchor" aria-label="章节： A Dialogue on Virtualization" tabindex="-1"></a><span>A Dialogue on Virtualization</span></h2>
<p><s>我觉得这个比喻很怪<span class="mojikumi-line-end">，</span>peach 怎么能 virtualize<span class="mojikumi-line-end">，</span>感觉不如举个别的例子<span class="mojikumi-line-end">。</span>但挑 <code>og:image</code> 的时候想了想<span class="mojikumi-line-end">，</span>这不<span class="mojikumi-line-end">，</span><a href="https://www.bilibili.com/video/av55053935/">桃 channel</a> 吗<span class="mojikumi-line-start">（</span></s></p>
<h2 id="the-abstraction-the-process" class="heading"><a href="#the-abstraction-the-process" class="heading-anchor" aria-label="章节： The Abstraction: The Process" tabindex="-1"></a><span>The Abstraction: The Process</span></h2>
<p>所谓 <dfn>process</dfn><span class="mojikumi-line-end">，</span>就是 <i>a running program</i><span class="mojikumi-line-end">。</span></p>
<p>一个 process 的 machine state 包括 memory<span class="mojikumi-line-end">、</span>register<span class="mojikumi-line-start">（</span>包括 PC<span class="mojikumi-line-end">、</span>stack pointer 等<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>I/O information<span class="mojikumi-line-start">（</span>例如打开的文件列表<span class="mojikumi-line-end">）</span>等<span class="mojikumi-line-end">。</span></p>
<p>在创建 process 时<span class="mojikumi-line-end">，</span>OS 需要 (lazy) load program code 和 data<span class="mojikumi-line-end">，</span>初始化 stack 和 heap<span class="mojikumi-line-end">，</span>设置 <code>argc</code><span class="mojikumi-line-end">、</span><code>argv</code><span class="mojikumi-line-end">，</span>设置 <code>stdin</code><span class="mojikumi-line-end">、</span><code>stdout</code><span class="mojikumi-line-end">、</span><code>stderr</code> 三个 file descriptor<span class="mojikumi-line-end">。</span></p>
<p>一个 process 有三种 state<span class="mojikumi-line-end">：</span>running<span class="mojikumi-line-end">、</span>blocked<span class="mojikumi-line-end">、</span>ready<span class="mojikumi-line-end">。</span></p>
<div class="flex justify-center dark:hidden"><svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 468.875 140" style="max-width: 468.875px; background-color: transparent;" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="100%" id="__mermaid-default-gTbVL"><style>#__mermaid-default-gTbVL{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#333;}#__mermaid-default-gTbVL .error-icon{fill:#552222;}#__mermaid-default-gTbVL .error-text{fill:#552222;stroke:#552222;}#__mermaid-default-gTbVL .edge-thickness-normal{stroke-width:2px;}#__mermaid-default-gTbVL .edge-thickness-thick{stroke-width:3.5px;}#__mermaid-default-gTbVL .edge-pattern-solid{stroke-dasharray:0;}#__mermaid-default-gTbVL .edge-pattern-dashed{stroke-dasharray:3;}#__mermaid-default-gTbVL .edge-pattern-dotted{stroke-dasharray:2;}#__mermaid-default-gTbVL .marker{fill:#333333;stroke:#333333;}#__mermaid-default-gTbVL .marker.cross{stroke:#333333;}#__mermaid-default-gTbVL svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#__mermaid-default-gTbVL .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#333;}#__mermaid-default-gTbVL .cluster-label text{fill:#333;}#__mermaid-default-gTbVL .cluster-label span,#__mermaid-default-gTbVL p{color:#333;}#__mermaid-default-gTbVL .label text,#__mermaid-default-gTbVL span,#__mermaid-default-gTbVL p{fill:#333;color:#333;}#__mermaid-default-gTbVL .node rect,#__mermaid-default-gTbVL .node circle,#__mermaid-default-gTbVL .node ellipse,#__mermaid-default-gTbVL .node polygon,#__mermaid-default-gTbVL .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#__mermaid-default-gTbVL .flowchart-label text{text-anchor:middle;}#__mermaid-default-gTbVL .node .label{text-align:center;}#__mermaid-default-gTbVL .node.clickable{cursor:pointer;}#__mermaid-default-gTbVL .arrowheadPath{fill:#333333;}#__mermaid-default-gTbVL .edgePath .path{stroke:#333333;stroke-width:2.0px;}#__mermaid-default-gTbVL .flowchart-link{stroke:#333333;fill:none;}#__mermaid-default-gTbVL .edgeLabel{background-color:#e8e8e8;text-align:center;}#__mermaid-default-gTbVL .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#__mermaid-default-gTbVL .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#__mermaid-default-gTbVL .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#__mermaid-default-gTbVL .cluster text{fill:#333;}#__mermaid-default-gTbVL .cluster span,#__mermaid-default-gTbVL p{color:#333;}#__mermaid-default-gTbVL div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#__mermaid-default-gTbVL .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#__mermaid-default-gTbVL :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 0 L 10 5 L 0 10 z"/></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 5 L 10 10 L 10 0 z"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-default-gTbVL_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-default-gTbVL_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><g class="root"><g class="clusters"/><g class="edgePaths"><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Blocked" id="L-Running-Blocked-0" d="M64.11931818181819,60.5L76.03693181818183,53.166666666666664C87.95454545454545,45.833333333333336,111.78977272727273,31.166666666666668,133.82014678030305,23.833333333333332C155.85052083333332,16.5,176.07604166666667,16.5,186.18880208333334,16.5L196.3015625,16.5"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Blocked LE-Ready" id="L-Blocked-Ready-0" d="M273.5234375,16.5L283.7786458333333,16.5C294.0338541666667,16.5,314.5442708333333,16.5,334.64286059978446,23.3297774229965C354.74145036623554,30.159554845993004,374.4282132324711,43.81910969198601,384.2715946655888,50.64888711498251L394.1149760987066,57.478664537979014"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Ready LE-Running" id="L-Ready-Running-0" d="M391.625,90.34647433025714L382.1966145833333,94.45539527521429C372.7682291666667,98.56431622017142,353.9114583333333,106.78215811008572,328.234375,110.89107905504285C302.5572916666667,115,270.0598958333333,115,236.82161458333334,115C203.58333333333334,115,169.60416666666666,115,143.26924866479138,111.38810426477647C116.93433066291608,107.77620852955295,98.24366132583218,100.55241705910589,88.89832665729023,96.94052132388236L79.55299198874826,93.32862558865884"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Ready" id="L-Running-Ready-0" d="M74.609375,77L84.77864583333333,77C94.94791666666667,77,115.28645833333333,77,142.4453125,77C169.60416666666666,77,203.58333333333334,77,236.82161458333334,77C270.0598958333333,77,302.5572916666667,77,327.3510416666667,77C352.14479166666666,77,369.2348958333334,77,377.7799479166667,77L386.325,77"/></g><g class="edgeLabels"><g transform="translate(135.625, 16.5)" class="edgeLabel"><g transform="translate(-36.015625, -9)" class="label"><foreignObject height="18" width="72.03125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">initiate I/O</span></div></foreignObject></g></g><g transform="translate(335.0546875, 16.5)" class="edgeLabel"><g transform="translate(-31.5703125, -9)" class="label"><foreignObject height="18" width="63.140625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">finish I/O</span></div></foreignObject></g></g><g transform="translate(237.5625, 115)" class="edgeLabel"><g transform="translate(-32.0234375, -9)" class="label"><foreignObject height="18" width="64.046875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">schedule</span></div></foreignObject></g></g><g transform="translate(237.5625, 77)" class="edgeLabel"><g transform="translate(-40.921875, -9)" class="label"><foreignObject height="18" width="81.84375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">deschedule</span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(37.3046875, 77)" data-id="Running" data-node="true" id="flowchart-Running-0" class="node default default flowchart-label"><rect height="33" width="74.609375" y="-16.5" x="-37.3046875" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-29.8046875, -9)" style="" class="label"><rect/><foreignObject height="18" width="59.609375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Running</span></div></foreignObject></g></g><g transform="translate(237.5625, 16.5)" data-id="Blocked" data-node="true" id="flowchart-Blocked-1" class="node default default flowchart-label"><rect height="33" width="71.921875" y="-16.5" x="-35.9609375" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-28.4609375, -9)" style="" class="label"><rect/><foreignObject height="18" width="56.921875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Blocked</span></div></foreignObject></g></g><g transform="translate(422.25, 77)" data-id="Ready" data-node="true" id="flowchart-Ready-2" class="node default default flowchart-label"><rect height="33" width="61.25" y="-16.5" x="-30.625" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-23.125, -9)" style="" class="label"><rect/><foreignObject height="18" width="46.25"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Ready</span></div></foreignObject></g></g></g></g></g></svg></div><div class="justify-center dark:important-flex" style="display:none;"><svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 468.875 140" style="max-width: 468.875px; background-color: transparent;" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="100%" id="__mermaid-dark-gTbVL"><style>#__mermaid-dark-gTbVL{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}#__mermaid-dark-gTbVL .error-icon{fill:#a44141;}#__mermaid-dark-gTbVL .error-text{fill:#ddd;stroke:#ddd;}#__mermaid-dark-gTbVL .edge-thickness-normal{stroke-width:2px;}#__mermaid-dark-gTbVL .edge-thickness-thick{stroke-width:3.5px;}#__mermaid-dark-gTbVL .edge-pattern-solid{stroke-dasharray:0;}#__mermaid-dark-gTbVL .edge-pattern-dashed{stroke-dasharray:3;}#__mermaid-dark-gTbVL .edge-pattern-dotted{stroke-dasharray:2;}#__mermaid-dark-gTbVL .marker{fill:lightgrey;stroke:lightgrey;}#__mermaid-dark-gTbVL .marker.cross{stroke:lightgrey;}#__mermaid-dark-gTbVL svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#__mermaid-dark-gTbVL .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#ccc;}#__mermaid-dark-gTbVL .cluster-label text{fill:#F9FFFE;}#__mermaid-dark-gTbVL .cluster-label span,#__mermaid-dark-gTbVL p{color:#F9FFFE;}#__mermaid-dark-gTbVL .label text,#__mermaid-dark-gTbVL span,#__mermaid-dark-gTbVL p{fill:#ccc;color:#ccc;}#__mermaid-dark-gTbVL .node rect,#__mermaid-dark-gTbVL .node circle,#__mermaid-dark-gTbVL .node ellipse,#__mermaid-dark-gTbVL .node polygon,#__mermaid-dark-gTbVL .node path{fill:#1f2020;stroke:#81B1DB;stroke-width:1px;}#__mermaid-dark-gTbVL .flowchart-label text{text-anchor:middle;}#__mermaid-dark-gTbVL .node .label{text-align:center;}#__mermaid-dark-gTbVL .node.clickable{cursor:pointer;}#__mermaid-dark-gTbVL .arrowheadPath{fill:lightgrey;}#__mermaid-dark-gTbVL .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#__mermaid-dark-gTbVL .flowchart-link{stroke:lightgrey;fill:none;}#__mermaid-dark-gTbVL .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#__mermaid-dark-gTbVL .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#__mermaid-dark-gTbVL .labelBkg{background-color:rgba(87.75, 87.75, 87.75, 0.5);}#__mermaid-dark-gTbVL .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#__mermaid-dark-gTbVL .cluster text{fill:#F9FFFE;}#__mermaid-dark-gTbVL .cluster span,#__mermaid-dark-gTbVL p{color:#F9FFFE;}#__mermaid-dark-gTbVL div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#__mermaid-dark-gTbVL .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#__mermaid-dark-gTbVL :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 0 L 10 5 L 0 10 z"/></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 5 L 10 10 L 10 0 z"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-dark-gTbVL_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-dark-gTbVL_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><g class="root"><g class="clusters"/><g class="edgePaths"><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Blocked" id="L-Running-Blocked-0" d="M64.11931818181819,60.5L76.03693181818183,53.166666666666664C87.95454545454545,45.833333333333336,111.78977272727273,31.166666666666668,133.82014678030305,23.833333333333332C155.85052083333332,16.5,176.07604166666667,16.5,186.18880208333334,16.5L196.3015625,16.5"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Blocked LE-Ready" id="L-Blocked-Ready-0" d="M273.5234375,16.5L283.7786458333333,16.5C294.0338541666667,16.5,314.5442708333333,16.5,334.64286059978446,23.3297774229965C354.74145036623554,30.159554845993004,374.4282132324711,43.81910969198601,384.2715946655888,50.64888711498251L394.1149760987066,57.478664537979014"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Ready LE-Running" id="L-Ready-Running-0" d="M391.625,90.34647433025714L382.1966145833333,94.45539527521429C372.7682291666667,98.56431622017142,353.9114583333333,106.78215811008572,328.234375,110.89107905504285C302.5572916666667,115,270.0598958333333,115,236.82161458333334,115C203.58333333333334,115,169.60416666666666,115,143.26924866479138,111.38810426477647C116.93433066291608,107.77620852955295,98.24366132583218,100.55241705910589,88.89832665729023,96.94052132388236L79.55299198874826,93.32862558865884"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Ready" id="L-Running-Ready-0" d="M74.609375,77L84.77864583333333,77C94.94791666666667,77,115.28645833333333,77,142.4453125,77C169.60416666666666,77,203.58333333333334,77,236.82161458333334,77C270.0598958333333,77,302.5572916666667,77,327.3510416666667,77C352.14479166666666,77,369.2348958333334,77,377.7799479166667,77L386.325,77"/></g><g class="edgeLabels"><g transform="translate(135.625, 16.5)" class="edgeLabel"><g transform="translate(-36.015625, -9)" class="label"><foreignObject height="18" width="72.03125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">initiate I/O</span></div></foreignObject></g></g><g transform="translate(335.0546875, 16.5)" class="edgeLabel"><g transform="translate(-31.5703125, -9)" class="label"><foreignObject height="18" width="63.140625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">finish I/O</span></div></foreignObject></g></g><g transform="translate(237.5625, 115)" class="edgeLabel"><g transform="translate(-32.0234375, -9)" class="label"><foreignObject height="18" width="64.046875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">schedule</span></div></foreignObject></g></g><g transform="translate(237.5625, 77)" class="edgeLabel"><g transform="translate(-40.921875, -9)" class="label"><foreignObject height="18" width="81.84375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">deschedule</span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(37.3046875, 77)" data-id="Running" data-node="true" id="flowchart-Running-0" class="node default default flowchart-label"><rect height="33" width="74.609375" y="-16.5" x="-37.3046875" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-29.8046875, -9)" style="" class="label"><rect/><foreignObject height="18" width="59.609375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Running</span></div></foreignObject></g></g><g transform="translate(237.5625, 16.5)" data-id="Blocked" data-node="true" id="flowchart-Blocked-1" class="node default default flowchart-label"><rect height="33" width="71.921875" y="-16.5" x="-35.9609375" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-28.4609375, -9)" style="" class="label"><rect/><foreignObject height="18" width="56.921875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Blocked</span></div></foreignObject></g></g><g transform="translate(422.25, 77)" data-id="Ready" data-node="true" id="flowchart-Ready-2" class="node default default flowchart-label"><rect height="33" width="61.25" y="-16.5" x="-30.625" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-23.125, -9)" style="" class="label"><rect/><foreignObject height="18" width="46.25"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Ready</span></div></foreignObject></g></g></g></g></g></svg></div>
<p>OS 的 scheduler 需要决定如何调度 process state<span class="mojikumi-line-end">，</span>以优化性能<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>一个 process initiate I/O 后应当 schedule 到另一个 ready 的 process<span class="mojikumi-line-end">。</span></p>
<p>OS 需要维护 process list<span class="mojikumi-line-end">，</span>记录 process memory address<span class="mojikumi-line-end">、</span>kernel stack address<span class="mojikumi-line-end">、</span>register context<span class="mojikumi-line-end">、</span>process state<span class="mojikumi-line-end">、</span>pid<span class="mojikumi-line-end">、</span>parent<span class="mojikumi-line-end">、</span>killed<span class="mojikumi-line-end">、</span>opened files<span class="mojikumi-line-end">、</span>cwd<span class="mojikumi-line-end">、</span>trap frame 等信息<span class="mojikumi-line-end">。</span></p>
<h2 id="interlude-process-api" class="heading"><a href="#interlude-process-api" class="heading-anchor" aria-label="章节： Interlude: Process API" tabindex="-1"></a><span>Interlude: Process API</span></h2>
<p><code>fork()</code><span class="mojikumi-line-end">、</span><code>wait()</code><span class="mojikumi-line-end">、</span><code>exec()</code> 以及 signals 参见 <a href="/post/2022/11/csapp-8#process-control">CS:APP 第八章</a><span class="mojikumi-line-end">。</span></p>
<p><code>fork()</code> 和 <code>exec()</code> 通常配合使用<span class="mojikumi-line-end">，</span>而被设计成了分离的两个 API<span class="mojikumi-line-end">，</span>所以可以在它们之间插入其他代码<span class="mojikumi-line-end">，</span>以修改 child process 的执行环境<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 shell 中执行命令可以创建 child process 然后 wait<span class="mojikumi-line-end">，</span>如果需要 redirect output<span class="mojikumi-line-end">，</span>可以在 <code>fork()</code> 和 <code>exec()</code> 之间执行 <code>close()</code> 和 <code>open()</code><span class="mojikumi-line-end">。</span></p>
<a id="a-fork-in-the-road" name="a-fork-in-the-road" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>A <code>fork()</code> in the road</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><ul>
<li>论文<span class="mojikumi-line-end">：</span><a href="https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf">A fork() in the road</a></li>
<li>相关讨论<span class="mojikumi-line-end">：</span><a href="https://lwn.net/Articles/785430/">LWN</a><span class="mojikumi-line-end">、</span><a href="https://www.reddit.com/r/programming/comments/bbic2e/a_fork_in_the_road/">Reddit</a><span class="mojikumi-line-end">、</span><a href="https://news.ycombinator.com/item?id=19621799">Hacker News</a></li>
</ul><p><code>fork()</code> 的设计有很多缺点<span class="mojikumi-line-end">：</span>新功能的设计需要考虑到 <code>fork()</code><span class="mojikumi-line-start">（</span>新的状态如何复制<span class="mojikumi-line-end">）</span>而变得复杂<span class="mojikumi-line-end">，</span>有时需要特殊修改软件来适配 <code>fork()</code><span class="mojikumi-line-start">（</span>例如 buffered I/O 在 fork 前需要 flush<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有的硬件<span class="mojikumi-line-start">（</span>例如 GPU<span class="mojikumi-line-end">）</span>不支持复制状态<span class="mojikumi-line-end">，</span><code>fork()</code> 不 thread-safe<span class="mojikumi-line-end">，</span>将所有信息共享给 child process 可能泄露信息<span class="mojikumi-line-end">，</span>保持 memory layout 不变可能导致 ASLR 失效<span class="mojikumi-line-end">，</span>不必要地复制整个 address space 会影响性能<span class="mojikumi-line-end">，</span>不管剩余 RAM 有多少就分配 copy-on-write memory<span class="mojikumi-line-start">（</span>overcommit<span class="mojikumi-line-end">）</span>可能导致 OOM<span class="mojikumi-line-end">，</span>支持 copy-on-write 会鼓励 monolith kernel……</p><p><code>fork()</code> 历史悠久<span class="mojikumi-line-end">，</span>使用广泛<span class="mojikumi-line-end">，</span>如果 OS 不实现则会使得很多程序无法运行<span class="mojikumi-line-end">。</span>但在理论上<span class="mojikumi-line-end">，</span><code>fork()</code> 可能可以被替换<span class="mojikumi-line-end">：</span></p><ul>
<li><code>fork()</code> + <code>exec()</code> 创建 child process 可以替换为合二为一的 (<code>posix_</code>)<code>spawn()</code><span class="mojikumi-line-end">。</span></li>
<li><code>spawn()</code> 的参数可能不够灵活<span class="mojikumi-line-end">，</span>可以添加 cross-process operation 来代替位于 <code>fork()</code> 和 <code>exec()</code> 之间的任意操作<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>但这样的替代可能不够简洁直观<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>使用 <code>fork()</code> 来实现 multi-process 可以替换为 multi-thread<span class="mojikumi-line-end">，</span>或者创建全新的 child process<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>但这样的话就不能共享初始化<span class="mojikumi-line-end">，</span>可能会有一定的性能损失<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>可以增加新的 API 来代替使用 <code>fork()</code> 获取 copy-on-write memory<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>可能仍会面临 overcommit 的问题<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>对于少量仍需使用 <code>fork()</code> 而性能要求不高的场景<span class="mojikumi-line-end">，</span>或者是为了兼容使用 <code>fork()</code> 的软件<span class="mojikumi-line-end">，</span>可以抛弃 low-level 的 <code>fork()</code> 而在 high-level<span class="mojikumi-line-start">（</span>低效地<span class="mojikumi-line-end">）</span>实现这一功能<span class="mojikumi-line-end">。</span></li>
</ul></div></div></aside>
<h2 id="mechanism-limited-direct-execution" class="heading"><a href="#mechanism-limited-direct-execution" class="heading-anchor" aria-label="章节： Mechanism: Limited Direct Execution" tabindex="-1"></a><span>Mechanism: Limited Direct Execution</span></h2>
<p><span class="mojikumi-line-start">“</span>direct execution<span class="mojikumi">”</span> 就是直接执行一个 program<span class="mojikumi-line-end">，</span>但这样做无法对 user program 进行限制<span class="mojikumi-line-end">，</span>例如可能访问包括 kernel memory<span class="mojikumi-line-end">、</span>其他 process 在内的任意 memory<span class="mojikumi-line-end">、</span>一直运行而不把 control 交给 OS<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>OS 需要采用 <i>limited direct execution</i><span class="mojikumi-line-end">，</span>对 process 施加限制<span class="mojikumi-line-end">。</span>这样做虽然 <span class="mojikumi">“</span>limited<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>但依然是 CPU 直接执行 user program instruction<span class="mojikumi-line-end">，</span>所以不会有太多的 overhead<span class="mojikumi-line-end">。</span></p>
<h3 id="problem-1-restricted-operations" class="heading"><a href="#problem-1-restricted-operations" class="heading-anchor" aria-label="章节： Problem #1: Restricted Operations" tabindex="-1"></a><span>Problem #1: Restricted Operations</span></h3>
<p>为了限制 user program 的行为<span class="mojikumi-line-end">，</span>CPU 的执行分为 <i>user mode</i> 和 <i>kernel mode</i><span class="mojikumi-line-end">。</span>kernel mode 具有更高的权限<span class="mojikumi-line-end">，</span>例如可以直接访问 memory<span class="mojikumi-line-end">、</span>执行 I/O<span class="mojikumi-line-end">。</span></p>
<p>user program 需要通过 <i>system call</i> 来进入 kernel mode<span class="mojikumi-line-end">，</span>由 OS 执行相应的操作<span class="mojikumi-line-end">。</span>system call 是一种特殊的 <i>trap</i><span class="mojikumi-line-start">（</span>exception<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>通过 trap instruction 进入 <i>trap handler</i> 并把 register 等状态存下来<span class="mojikumi-line-end">，</span>操作执行完毕后再 return-from-trap 回到 user program 调用 system call 之后的位置并恢复 register 等状态<span class="mojikumi-line-end">。</span></p>
<p>在系统启动时<span class="mojikumi-line-end">，</span>OS 会设置 <i>trap table</i><span class="mojikumi-line-end">，</span>即各种 trap 对应的 handler address<span class="mojikumi-line-end">。</span><i>system-call number</i><span class="mojikumi-line-start">（</span>放在特定 register 或 stack 特定位置<span class="mojikumi-line-end">）</span>用来指定要执行哪个 system call<span class="mojikumi-line-end">。</span>trap table 只能由 OS 设定<span class="mojikumi-line-end">，</span>以避免 user program 任意指定 kernel mode 下跳转到的位置<span class="mojikumi-line-end">。</span></p>
<h3 id="problem-2-switching-between-processes" class="heading"><a href="#problem-2-switching-between-processes" class="heading-anchor" aria-label="章节： Problem #2: Switching Between Processes" tabindex="-1"></a><span>Problem #2: Switching Between Processes</span></h3>
<p>在一个 process 占用着 CPU 时<span class="mojikumi-line-end">，</span>OS 没有运行<span class="mojikumi-line-end">，</span>自然无法实现 control<span class="mojikumi-line-end">，</span>所以需要 user program 把 control 交给 OS<span class="mojikumi-line-end">。</span>这有两种方式<span class="mojikumi-line-end">，</span>一种是 cooperative approach<span class="mojikumi-line-end">，</span>即调用 system call<span class="mojikumi-line-end">；</span>一种是 non-cooperative approach<span class="mojikumi-line-end">，</span>即使用 timer interrupt<span class="mojikumi-line-end">，</span>每隔一段时间就把 control 强制交给 OS<span class="mojikumi-line-end">，</span>以避免单个 process 连续运行过长时间甚至进入死循环而只能重启<span class="mojikumi-line-end">。</span></p>
<p>决定了要切换 process 时<span class="mojikumi-line-end">，</span>OS 会进行 <i>context switch</i><span class="mojikumi-line-end">，</span>主要操作是从 process A 的 registers 和 kernel stack 切换到 process B 的 registers 和 kernel stack<span class="mojikumi-line-end">，</span>之后 return-from-trap 时就会返回到 process B 之前离开的地方<span class="mojikumi-line-end">。</span></p>
<h2 id="scheduling-introduction" class="heading"><a href="#scheduling-introduction" class="heading-anchor" aria-label="章节： Scheduling: Introduction" tabindex="-1"></a><span>Scheduling: Introduction</span></h2>
<p>OS scheduler 需要决定 schedule 到哪个 process<span class="mojikumi-line-end">，</span>这表现为 <i>scheduling policy</i> (<i>discipline</i>)<span class="mojikumi-line-end">。</span></p>
<h3 id="workload-assumptions" class="heading"><a href="#workload-assumptions" class="heading-anchor" aria-label="章节： Workload Assumptions" tabindex="-1"></a><span>Workload Assumptions</span></h3>
<p>在这一部分<span class="mojikumi-line-end">，</span>我们先对 <i>workload</i><span class="mojikumi-line-end">，</span>即需要运行的 processes<span class="mojikumi-line-start">（</span>即 jobs<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>作一些<span class="mojikumi-line-start">（</span>不切实际的<span class="mojikumi-line-end">）</span>assumption 以简化问题<span class="mojikumi-line-end">，</span>后面再逐步丢弃这些 assumption<span class="mojikumi-line-end">：</span></p>
<ol>
<li>每个 job 用时相同<span class="mojikumi-line-end">。</span></li>
<li>每个 job 同时 arrive<span class="mojikumi-line-end">。</span></li>
<li>每个 job 一旦开始就一直运行到结束<span class="mojikumi-line-end">，</span>不被打断<span class="mojikumi-line-end">。</span></li>
<li>每个 job 都只使用 CPU<span class="mojikumi-line-end">，</span>不使用 I/O<span class="mojikumi-line-start">（</span>没有 system call<span class="mojikumi-line-end">，</span>不会 blocked<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>每个 job 的用时是已知的<span class="mojikumi-line-end">。</span></li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>4 和 5 是最不切实际的<span class="mojikumi-line-end">：</span>没有 I/O 的 program 运行了没有任何意义<span class="mojikumi-line-end">；</span>scheduler 无法预知 job 要运行多久<span class="mojikumi-line-start">（</span>连是否停机都无法预知<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="turnaround-time" class="heading"><a href="#turnaround-time" class="heading-anchor" aria-label="章节： Turnaround Time" tabindex="-1"></a><span>Turnaround Time</span></h3>
<p><i>turnaround time</i> 是一个 <i>scheduling metric</i><span class="mojikumi-line-end">，</span>它指的是一个 job 从 arrival 到 completion 的用时<span class="mojikumi-line-end">，</span>用来衡量总体性能<span class="mojikumi-line-end">。</span></p>
<p>FIFO (first in first out / FCFS, first come first served) 是一种最简单的 scheduling policy<span class="mojikumi-line-end">。</span>在所有 5 个 assumption 下<span class="mojikumi-line-end">，</span>任何 scheduling policy 都是一样的<span class="mojikumi-line-end">，</span>FIFO 就可以达到最优<span class="mojikumi-line-end">。</span></p>
<p>如果丢弃 assumption 1 而继续使用 FIFO<span class="mojikumi-line-end">，</span>当排在最前的 job 用时很长时<span class="mojikumi-line-end">，</span>会造成 <i>convoy effect</i><span class="mojikumi-line-end">，</span>堵住后面用时短的其他 job<span class="mojikumi-line-end">，</span>使得 turnaround time 变得很大<span class="mojikumi-line-end">。</span>此时<span class="mojikumi-line-end">，</span>可以采用 SJF (shortest job first) 达到最优解<span class="mojikumi-line-end">。</span></p>
<p>如果进一步丢弃 assumption 2<span class="mojikumi-line-end">，</span>有可能最长的 job 最先到<span class="mojikumi-line-end">，</span>短的 job 紧随其后<span class="mojikumi-line-end">，</span>SJF 就失效了<span class="mojikumi-line-end">。</span>此时<span class="mojikumi-line-end">，</span>需要再丢弃 assumption 3<span class="mojikumi-line-end">，</span>来允许 scheduler <i>preempt</i> 一个 job 而 schedule 到另一个<span class="mojikumi-line-start">（</span>不这样做的 scheduler 被称作 <i>non-preemptive</i> scheduler<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>然后就可以采用 STCF (shortest time-to-completion first / PSJF, preemptive shortest job first) 达到最优解<span class="mojikumi-line-end">：</span>在新 job arrive 时<span class="mojikumi-line-end">，</span>如果它的总用时比当前 job 的剩余用时还短<span class="mojikumi-line-end">，</span>可以 schedule 到新 job<span class="mojikumi-line-end">。</span></p>
<h3 id="response-time" class="heading"><a href="#response-time" class="heading-anchor" aria-label="章节： Response Time" tabindex="-1"></a><span>Response Time</span></h3>
<p>为了让用户在交互中获得更好的体验<span class="mojikumi-line-end">，</span>turnaround time 是不够的<span class="mojikumi-line-end">，</span>还需要引入新的 metric<span class="mojikumi-line-end">，</span><i>response time</i><span class="mojikumi-line-end">，</span>它可以用一个 job 从 arrival 到 first run 的用时衡量<span class="mojikumi-line-end">。</span></p>
<p>上面提到的各种 scheduling policy<span class="mojikumi-line-end">，</span>例如 STCF<span class="mojikumi-line-end">，</span>response time 都很差<span class="mojikumi-line-end">，</span>被排到后面运行的 job 需要等待很久<span class="mojikumi-line-end">。</span></p>
<p>Round-Robin (RR) policy 会让每个 job 运行一个 <i>time slice</i> (<i>scheduling quantum</i>)<span class="mojikumi-line-end">，</span>然后切换到下一个 job<span class="mojikumi-line-end">，</span>所以 RR 也被称作 <i>time-slicing</i><span class="mojikumi-line-end">。</span>time slice 越小 response time 也就越小<span class="mojikumi-line-end">，</span>但如果 time slice 过小<span class="mojikumi-line-end">，</span>context switching<span class="mojikumi-line-start">（</span>包括存储/恢复 register<span class="mojikumi-line-end">，</span>以及 cache miss penalty<span class="mojikumi-line-end">）</span>在用时中的占比就会过大<span class="mojikumi-line-end">，</span>从而显著影响性能<span class="mojikumi-line-end">，</span>所以需要一定大小的 time slice 来 <i>amortize</i> 掉 context switching cost<span class="mojikumi-line-end">。</span>RR 的 response time 较小<span class="mojikumi-line-end">，</span>但 turnaround time 很大<span class="mojikumi-line-end">，</span>比 FIFO 还大<span class="mojikumi-line-end">。</span></p>
<p>一般来说<span class="mojikumi-line-end">，</span>如果一个 policy 是 <i>fair</i> 的<span class="mojikumi-line-end">，</span>均等地将 CPU 分配给各个 job<span class="mojikumi-line-end">，</span>就会有较差的 turnaround time 和较好的 response time<span class="mojikumi-line-end">；</span>如果一个 policy unfair<span class="mojikumi-line-end">，</span>就可以有较好的 turnaround time<span class="mojikumi-line-end">，</span>但 response time 会较大<span class="mojikumi-line-end">。</span>这是一个固有的 trade-off<span class="mojikumi-line-end">：</span>鱼与熊掌<span class="mojikumi-line-end">，</span>不可兼得<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-cake" id="user-content-fnref-cake" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<h3 id="incorporating-io" class="heading"><a href="#incorporating-io" class="heading-anchor" aria-label="章节： Incorporating I/O" tabindex="-1"></a><span>Incorporating I/O</span></h3>
<p>如果进一步丢弃 assumption 4<span class="mojikumi-line-end">，</span>即允许 job 进行 I/O<span class="mojikumi-line-end">，</span>则需要处理 blocked 的情况<span class="mojikumi-line-end">。</span></p>
<p>一般来说<span class="mojikumi-line-end">，</span>可以将一个 job 视作被 I/O 分割成的多个 sub-job<span class="mojikumi-line-end">，</span>然后按照之前的 policy 进行 schedule<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>使用 STCF 时<span class="mojikumi-line-end">，</span>在 sub-job 的视角下<span class="mojikumi-line-end">，</span>会优先运行 I/O 密集的 job<span class="mojikumi-line-end">，</span>这可以达成 <i>overlap</i><span class="mojikumi-line-end">，</span>让 CPU 和 I/O 同时工作<span class="mojikumi-line-end">，</span>更加充分地利用系统资源<span class="mojikumi-line-end">。</span></p>
<h2 id="scheduling-the-multi-level-feedback-queue" class="heading"><a href="#scheduling-the-multi-level-feedback-queue" class="heading-anchor" aria-label="章节： Scheduling: The Multi-Level Feedback Queue" tabindex="-1"></a><span>Scheduling: The Multi-Level Feedback Queue</span></h2>
<p>之前这些简单的 scheduling policy 面临两大问题<span class="mojikumi-line-end">，</span>一是 turnaround time 和 response time 之间的矛盾<span class="mojikumi-line-end">，</span>二是 SJF/STCF 对 perfect knowledge<span class="mojikumi-line-start">（</span>assumption 5<span class="mojikumi-line-end">）</span>的依赖<span class="mojikumi-line-end">。</span></p>
<p>Multi-level Feed-back Queue (MLFQ) 是目前被广泛使用的一种 scheduling policy<span class="mojikumi-line-end">，</span>同时解决了这两大问题<span class="mojikumi-line-end">。</span></p>
<h3 id="basic-rules" class="heading"><a href="#basic-rules" class="heading-anchor" aria-label="章节： Basic Rules" tabindex="-1"></a><span>Basic Rules</span></h3>
<p>MLFQ 的基本思路是<span class="mojikumi-line-end">，</span>workload 可以分为两类<span class="mojikumi-line-end">，</span>一类是 short-running interactive job<span class="mojikumi-line-start">（</span>被 I/O 切成了小块<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>一类是 long-running CPU-intensive job<span class="mojikumi-line-end">。</span>interactive job 更需要优先运行<span class="mojikumi-line-end">，</span>这既是 SJF/STCF 的基本思想<span class="mojikumi-line-end">，</span>同时也是因为 interactive job 对 response time 的要求更高<span class="mojikumi-line-end">。</span></p>
<p>MLFQ 的基本运行规则为<span class="mojikumi-line-end">：</span>有多个不同 priority 的 job queue<span class="mojikumi-line-end">，</span>每次会选择 priority 最高的 queue<span class="mojikumi-line-end">，</span>在同一个 queue 内使用 RR<span class="mojikumi-line-end">。</span></p>
<p>理想情况下<span class="mojikumi-line-end">，</span>interactive job 的 priority 会更高<span class="mojikumi-line-end">，</span>从而逼近 STCF<span class="mojikumi-line-end">。</span></p>
<h3 id="priority-adjustment" class="heading"><a href="#priority-adjustment" class="heading-anchor" aria-label="章节： Priority Adjustment" tabindex="-1"></a><span>Priority Adjustment</span></h3>
<p>因为 scheduler 无法预先知道 job 的类型<span class="mojikumi-line-end">，</span>priority 是根据程序的运行情况动态设置的<span class="mojikumi-line-end">。</span></p>
<p>job arrive 时会先放在 priority 最高的 queue<span class="mojikumi-line-end">，</span>如果运行太久就会降低 priority<span class="mojikumi-line-end">。</span>具体来说<span class="mojikumi-line-end">，</span>一个 job 在每一级 queue 会获得一段 <i>time allotment</i><span class="mojikumi-line-end">，</span>在这一级 queue 的累计运行时长如果超过 allotment 就会降低 priority 到下一级 queue<span class="mojikumi-line-end">。</span></p>
<p>在这样的机制下<span class="mojikumi-line-end">，</span>会有两个问题<span class="mojikumi-line-end">：</span></p>
<ul>
<li>CPU 可能被几个 interactive job 占满<span class="mojikumi-line-end">，</span>导致 priority 低的 long-running job 一点 CPU 都拿不到<span class="mojikumi-line-start">（</span>这被称作 <i>starvation</i><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>一个 job 的行为可能随时间变化<span class="mojikumi-line-end">，</span>如果经过一段 CPU-intensive 后 priority 到了最低<span class="mojikumi-line-end">，</span>然后变为 interactive<span class="mojikumi-line-end">，</span>priority 无法恢复<span class="mojikumi-line-end">。</span></li>
</ul>
<p>为了解决这两个问题<span class="mojikumi-line-end">，</span>可以每隔一段时间进行 <i>priority boost</i><span class="mojikumi-line-end">，</span>将所有 job 的 priority 设为最高<span class="mojikumi-line-end">。</span></p>
<a id="game-the-scheduler" name="game-the-scheduler" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>Game the scheduler</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>如果 allotment 不是计算累计用时<span class="mojikumi-line-end">，</span>而是每次运行时单独判断这次有没有到一个 threshold<span class="mojikumi-line-end">，</span>没达到就不降低甚至提高 priority<span class="mojikumi-line-end">，</span>是否可以达到同样的效果<span class="mojikumi-line-end">，</span>甚至自动检测到 long-running 转变为 short-running 而提升 priority？</p><p>答案是<span class="mojikumi-line-end">，</span>这样会允许一个 program 恶意地 <i>game the scheduler</i><span class="mojikumi-line-end">，</span>每次都恰好在 threshold 之前一点点执行 I/O<span class="mojikumi-line-end">，</span>从而在长时间占用 CPU 的同时维持最高的 priority<span class="mojikumi-line-end">，</span>最终达到接近独占 CPU 的效果<span class="mojikumi-line-end">。</span>这在多个用户共享 CPU 时<span class="mojikumi-line-start">（</span>例如在云服务器上<span class="mojikumi-line-end">）</span>可能造成安全问题<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="tuning-mlfq" class="heading"><a href="#tuning-mlfq" class="heading-anchor" aria-label="章节： Tuning MLFQ" tabindex="-1"></a><span>Tuning MLFQ</span></h3>
<p>MLFQ 有很多可以设置的参数<span class="mojikumi-line-end">：</span>queue (level) 的数量<span class="mojikumi-line-end">，</span>每个 level 的 time slice 和 allotment<span class="mojikumi-line-end">，</span>多久进行一次 priority boost<span class="mojikumi-line-end">。</span>一般来说<span class="mojikumi-line-end">，</span>priority 越高<span class="mojikumi-line-end">，</span>time slice 和 allotment 越长<span class="mojikumi-line-end">。</span></p>
<p>MLFQ 不一定真的要实现为多个 queue<span class="mojikumi-line-end">，</span>也可以统计每个 job 的 CPU usage<span class="mojikumi-line-end">，</span>根据 usage 计算出 priority<span class="mojikumi-line-end">，</span>而让 usage 随时间 <i>decay</i> 来代替 priority boost<span class="mojikumi-line-end">，</span>这称作 <i>decay-usage</i> scheduling<span class="mojikumi-line-end">。</span></p>
<p>priority 不一定要完全基于 feedback<span class="mojikumi-line-end">，</span>也可以参考由用户提供的 <i>advice</i><span class="mojikumi-line-end">，</span>例如使用 <code>nice</code> 命令可以设置 <i>niceness</i> 来影响 job priority<span class="mojikumi-line-end">。</span></p>
<h2 id="scheduling-proportional-share" class="heading"><a href="#scheduling-proportional-share" class="heading-anchor" aria-label="章节： Scheduling: Proportional Share" tabindex="-1"></a><span>Scheduling: Proportional Share</span></h2>
<p>这章讨论的是一种不同的 scheduler<span class="mojikumi-line-end">，</span>它的主要目标是按一定的比例将 CPU 分配给各个 job<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 virtualized data center / cloud 中<span class="mojikumi-line-end">，</span>可以将 CPU 均等地分配给各个用户<span class="mojikumi-line-end">。</span></p>
<h3 id="lottery-scheduling" class="heading"><a href="#lottery-scheduling" class="heading-anchor" aria-label="章节： Lottery Scheduling" tabindex="-1"></a><span>Lottery Scheduling</span></h3>
<p>在 <i>lottery scheduling</i> 中<span class="mojikumi-line-end">，</span>每个 job 被分配了一定数量的 <i>ticket</i><span class="mojikumi-line-end">，</span>每个 time slice 结束时随机选择一个 winning ticket<span class="mojikumi-line-end">，</span>schedule 到对应的 job<span class="mojikumi-line-end">，</span>时间久了之后会趋近于按 ticket 数量的 CPU 分配<span class="mojikumi-line-end">。</span></p>
<p>lottery scheduling 还会提供一些 ticket mechanism<span class="mojikumi-line-end">：</span></p>
<ul>
<li>可以给每个 user 一些 ticket<span class="mojikumi-line-end">，</span>每个 user 再将 ticket 分给各个 job<span class="mojikumi-line-end">。</span></li>
<li>一个 job 可以将自己的 ticket transfer 给其他 job<span class="mojikumi-line-end">。</span></li>
<li>如果各个 job 之间互相信任<span class="mojikumi-line-end">，</span>可以进行 ticket inflation<span class="mojikumi-line-end">，</span>一个 job 需要更多 CPU 时直接给自己更多 ticket 即可<span class="mojikumi-line-end">，</span>不需要和其他 job 沟通<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="stride-scheduling" class="heading"><a href="#stride-scheduling" class="heading-anchor" aria-label="章节： Stride Scheduling" tabindex="-1"></a><span>Stride Scheduling</span></h3>
<p>stride scheduling 不依赖于随机<span class="mojikumi-line-end">，</span>可以确定性地达到设定的比例<span class="mojikumi-line-end">。</span></p>
<p>用一个大数除以每个 job 的 ticket value 得到每个 job 的 <i>stride</i><span class="mojikumi-line-end">，</span>对每个 job 维护一个 <i>pass</i><span class="mojikumi-line-end">，</span>每次运行一个 job 后将 pass 加上 stride<span class="mojikumi-line-end">，</span>schedule 到 pass 最低的 job<span class="mojikumi-line-end">。</span>每个循环内都会精确地达到设定的比例<span class="mojikumi-line-end">。</span></p>
<p>stride scheduling 的一个劣势是新加入的 job 的 pass 不好设定<span class="mojikumi-line-end">，</span>而 lottery scheduling 不需要维护状态<span class="mojikumi-line-end">，</span>可以轻松地添加新的 job<span class="mojikumi-line-end">。</span></p>
<h3 id="the-linux-completely-fair-scheduler-cfs" class="heading"><a href="#the-linux-completely-fair-scheduler-cfs" class="heading-anchor" aria-label="章节： The Linux Completely Fair Scheduler (CFS)" tabindex="-1"></a><span>The Linux Completely Fair Scheduler (CFS)</span></h3>
<p>Linux 的 Completely Fair Scheduler (CFS) 高效而 scalable 地实现了 fair-share scheduling<span class="mojikumi-line-end">。</span></p>
<p>CFS 会记录每个 job 的 <i>virtual runtime</i> (<code>vruntime</code>)<span class="mojikumi-line-end">，</span>每次运行后加上这次运行的时长<span class="mojikumi-line-end">，</span>schedule 到 <code>vruntime</code> 最低的 job<span class="mojikumi-line-end">。</span>time slice 是不固定的<span class="mojikumi-line-end">，</span>由 <code>sched_<wbr>latency</code> 除以 job 数量决定<span class="mojikumi-line-end">，</span>并会与 <code>min_<wbr>granularity</code> 取较大值<span class="mojikumi-line-end">，</span>防止 time slice 过小导致 context switching 过多<span class="mojikumi-line-end">。</span>time slice 可能不是 timer interrupt 的整数倍<span class="mojikumi-line-end">，</span>但 <code>vruntime</code> 会精确记录实际用时<span class="mojikumi-line-end">。</span></p>
<p>可以通过设置 <code>niceness</code> 调整一个 job 的 <code>weight</code><span class="mojikumi-line-end">，</span><code>niceness</code> 越低 <code>weight</code> 越高<span class="mojikumi-line-end">，</span>呈指数降低的关系<span class="mojikumi-line-end">。</span>设置了 <code>niceness</code> 后<span class="mojikumi-line-end">，</span>time slice 会按照 <code>weight</code> 分配<span class="mojikumi-line-end">，</span>而 <code>vruntime</code> 每次增加的值会再调整回来<span class="mojikumi-line-end">，</span>即 <code>weight</code> 大的会获得更大的 time slice 而增长同样多的 <code>vruntime</code><span class="mojikumi-line-end">。</span></p>
<p>CFS 使用 red-black tree 维护各个 job 的 <code>vruntime</code> 以快速取出最小值<span class="mojikumi-line-end">。</span>一个 job blocked 时会从树上移除<span class="mojikumi-line-end">，</span>而再插入到树上时其 <code>vruntime</code> 会设为此时树上的最小值<span class="mojikumi-line-end">，</span>以避免一个长期 blocked 的 job 恢复后独占 CPU<span class="mojikumi-line-end">，</span>但这样会导致 I/O 频繁或长期 sleep 的 job 实际上没有拿到 fair share<span class="mojikumi-line-end">。</span></p>
<p>作为一个得到了广泛实际应用的 scheduler<span class="mojikumi-line-end">，</span>CFS 还有很多其他 feature<span class="mojikumi-line-end">，</span>例如通过一些手段优化了 cache performance<span class="mojikumi-line-end">，</span>可以高效处理有多个 CPU 的情形<span class="mojikumi-line-end">，</span>可以将多个 process 视作一个 group 而不是对每单个 process 进行 schedule<span class="mojikumi-line-end">。</span></p>
<h2 id="multiprocessor-scheduling" class="heading"><a href="#multiprocessor-scheduling" class="heading-anchor" aria-label="章节： Multiprocessor Scheduling" tabindex="-1"></a><span>Multiprocessor Scheduling</span></h2>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-gray-2 dark:bg-gray-11 b-gray-6" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-timer-sand text-gray" data-v-a2ab257f></span><!--v-if--><span data-v-a2ab257f>WIP</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><blockquote>
<p>As this topic is relatively advanced, it may be best to cover it after you have studied the topic of concurrency in some detail (i.e., the second major <span class="mojikumi">“</span>easy piece<span class="mojikumi">”</span> of the book).</p>
</blockquote></div></div></aside>
<h2 id="the-abstraction-address-spaces" class="heading"><a href="#the-abstraction-address-spaces" class="heading-anchor" aria-label="章节： The Abstraction: Address Spaces" tabindex="-1"></a><span>The Abstraction: Address Spaces</span></h2>
<p>为了支持 time sharing<span class="mojikumi-line-end">，</span>需要在 physical memory 中同时存放多个 process 的 memory<span class="mojikumi-line-end">。</span>为了便于使用<span class="mojikumi-line-end">，</span>OS 需要将 physical memory virtualize<span class="mojikumi-line-end">，</span>提供称作 <i>address space</i> 的 abstraction<span class="mojikumi-line-end">。</span></p>
<p>一个 process 的 address space 包括 code<span class="mojikumi-line-end">、</span>stack<span class="mojikumi-line-end">、</span>heap<span class="mojikumi-line-end">、</span>data 等部分<span class="mojikumi-line-end">，</span>各个部分一般有较为固定的 layout<span class="mojikumi-line-end">，</span>但其对应的 physical memory address 是不固定的<span class="mojikumi-line-end">。</span></p>
<p>virtual memory (VM) 需要达到若干个目标<span class="mojikumi-line-end">：</span></p>
<ul>
<li>transparency: process 感受不到 VM 的存在<span class="mojikumi-line-end">，</span>像是独占了整个巨大的 physical memory<span class="mojikumi-line-end">。</span></li>
<li>efficiency: time 和 space 两方面的 overhead 都不能太大<span class="mojikumi-line-end">，</span>需要 hardware 的配合<span class="mojikumi-line-end">。</span></li>
<li>protection / isolation: 每个 process 只能访问自己的 address space<span class="mojikumi-line-end">，</span>不能访问其他 process 或者 OS 自身的 memory<span class="mojikumi-line-end">。</span></li>
</ul>
<p>user-level program 使用的所有 address 都是 virtual address<span class="mojikumi-line-end">，</span>只有 OS<span class="mojikumi-line-start">（</span>以及 hardware<span class="mojikumi-line-end">）</span>能接触到 physical address<span class="mojikumi-line-end">。</span></p>
<h2 id="interlude-memory-api" class="heading"><a href="#interlude-memory-api" class="heading-anchor" aria-label="章节： Interlude: Memory API" tabindex="-1"></a><span>Interlude: Memory API</span></h2>
<p>C program 可以使用 stack memory 或 heap memory<span class="mojikumi-line-end">。</span></p>
<p>stack memory 的 allocation 和 deallocation 都是 implicit 的<span class="mojikumi-line-end">，</span>又称作 <i>automatic</i> memory<span class="mojikumi-line-end">。</span></p>
<p>heap memory 需要使用 <code>malloc()</code> allocate<span class="mojikumi-line-end">，</span>使用 <code>free()</code> deallocate<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>double<wbr> *<wbr>d<wbr> = <wbr>malloc<wbr>(<wbr>sizeof<wbr>(*<wbr>d<wbr>))</code></li>
<li><code>int<wbr> *<wbr>x<wbr> = <wbr>malloc<wbr>(<wbr>sizeof<wbr>(*<wbr>x<wbr>) * <wbr>10<wbr>)</code></li>
<li><code>char<wbr> *<wbr>s<wbr> = <wbr>malloc<wbr>(<wbr>strlen<wbr>(<wbr>buf<wbr>) + <wbr>1<wbr>)</code></li>
<li><code>free(x)</code></li>
</ul>
<p>heap memory 的使用很容易出错<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<dl>
<dt>null pointer dereference</dt>
<dd>使用前没有 allocate
</dd>
<dt>uninitialized read</dt>
<dd>没有初始化内容就读取<span class="mojikumi-line-start">（</span>以为内容会是 0<span class="mojikumi-line-end">）</span>
</dd>
<dt>buffer overflow</dt>
<dd>allocate 的 memory 不够大<span class="mojikumi-line-end">，</span>例如字符串没有在长度的基础上加一
</dd>
<dt>memory leak</dt>
<dd>long-running program 的 heap memory 使用完毕后没有 free
</dd>
<dt>use after free</dt>
<dd>在 free 之后继续使用 <i>dangling pointer</i>
</dd>
<dt>double free</dt>
<dd>free 之后再次 free
</dd>
</dl>
<a id="tip-if-it-compiles-it-works" name="tip-if-it-compiles-it-works" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>Tip: if it compiles it works</span></h3><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><blockquote>
<p>Just because a program compiled(!) or even ran once or many times correctly does not mean the program is correct.</p>
</blockquote><blockquote>
<p>Get to work and debug it before you blame those other components.</p>
</blockquote><p><s>这边建议您用 Rust<span class="mojikumi-line-start">（</span></s></p></div></details></aside>
<p><code>malloc()</code> 和 <code>free()</code> 不是 system call<span class="mojikumi-line-end">，</span>而是 library call<span class="mojikumi-line-end">。</span>malloc library 使用 system call <code>brk()</code>/<code>sbrk()</code> 设置 program 的 <i>break</i><span class="mojikumi-line-start">（</span>heap 末尾的 address<span class="mojikumi-line-end">）</span>来获取 memory<span class="mojikumi-line-end">，</span>进而分配给用户<span class="mojikumi-line-end">。</span></p>
<p>另外还有 <code>calloc</code> 可以用来初始化 malloc 得到的 memory<span class="mojikumi-line-end">，</span><code>realloc</code> 可以用来调整一块已分配的 heap memory 的大小<span class="mojikumi-line-end">。</span></p>
<p>可以用 <code>mmap</code> 进行 memory mapping<span class="mojikumi-line-end">，</span>例如可以 map 到 anonymous file 来获取一块 memory<span class="mojikumi-line-end">。</span></p>
<h2 id="mechanism-address-translation" class="heading"><a href="#mechanism-address-translation" class="heading-anchor" aria-label="章节： Mechanism: Address Translation" tabindex="-1"></a><span>Mechanism: Address Translation</span></h2>
<p>为了高效且灵活地 virtualize memory<span class="mojikumi-line-end">，</span>基本思想是 <i>(hardware-based) address translation</i><span class="mojikumi-line-end">，</span>将 memory access 从 virtual address 翻译为 physical address<span class="mojikumi-line-end">。</span>OS 会管理 memory<span class="mojikumi-line-end">，</span>配置 hardware<span class="mojikumi-line-end">，</span>最终由 hardware 高效地进行 address translation<span class="mojikumi-line-end">。</span></p>
<p>我们先做一些简化<span class="mojikumi-line-end">，</span>假设每个 process 的 address space 都映射到了 physical memory 中连续的<sup><a href="#user-content-fn-contiguous" id="user-content-fnref-contiguous" data-footnote-ref aria-describedby="footnote-label">2</a></sup>一段<span class="mojikumi-line-end">，</span>且各个 process 的 address space 都一样大<span class="mojikumi-line-start">（</span>比 physical memory 小<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<a id="software-based-relocation" name="software-based-relocation" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>Software-based Relocation</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>在早期还没有 hardware support 时<span class="mojikumi-line-end">，</span>有的系统使用了一种 software-based relocation<span class="mojikumi-line-end">，</span>其原理是在 load program 时进行 address translation<span class="mojikumi-line-end">。</span></p><p>这样做不能提供 protection<span class="mojikumi-line-start">（</span>没有限制可以访问的 address<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而且很难再次 relocate<span class="mojikumi-line-start">（</span>移动 address space 对应的 physical memory<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>所以后来被抛弃了<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="base-and-bounds" class="heading"><a href="#base-and-bounds" class="heading-anchor" aria-label="章节： Base and Bounds" tabindex="-1"></a><span>Base and Bounds</span></h3>
<p>在 1950<span class="mojikumi-narrow-left">’</span>s<span class="mojikumi-line-end">，</span>当时的计算机使用了被称作 <i>base and bounds</i><sup><a href="#user-content-fn-bounds" id="user-content-fnref-bounds" data-footnote-ref aria-describedby="footnote-label">3</a></sup> / <i>dynamic relocation</i> 的技术实现简单高效且能提供 protection 的 VM<span class="mojikumi-line-end">。</span></p>
<p>CPU 中添加两个 register<span class="mojikumi-line-end">，</span><i>base</i> 和 <i>bounds</i><span class="mojikumi-line-end">。</span>base 即 virtual address 0 对应的 physical address<span class="mojikumi-line-end">，</span>在 access memory 时进行 address translation<span class="mojikumi-line-end">，</span>用 base 加上 virtual address 计算 physical address<span class="mojikumi-line-end">。</span>bounds 是 address space 的大小<span class="mojikumi-line-end">，</span>会检查 virtual address 不超过 bounds<span class="mojikumi-line-end">。</span></p>
<h3 id="hardware-support" class="heading"><a href="#hardware-support" class="heading-anchor" aria-label="章节： Hardware Support" tabindex="-1"></a><span>Hardware Support</span></h3>
<p>为了实现 base and bounds<span class="mojikumi-line-end">，</span>需要若干 hardware support<span class="mojikumi-line-end">：</span></p>
<ul>
<li>支持 kernel mode 和 user mode<span class="mojikumi-line-end">。</span></li>
<li>在 <i>memory management unit</i> (MMU) 中提供 base register 和 bounds register<span class="mojikumi-line-end">。</span></li>
<li>提供特殊的 privileged instruction 来修改 base 和 bounds<span class="mojikumi-line-end">，</span>只有 OS 能修改它们<span class="mojikumi-line-end">，</span>否则一个 user process 将可以 wreak havoc<sup><a href="#user-content-fn-wreak" id="user-content-fnref-wreak" data-footnote-ref aria-describedby="footnote-label">4</a></sup><span class="mojikumi-line-end">。</span></li>
<li>在 memory access 超出 bounds 时 generate exception<span class="mojikumi-line-end">，</span>调用 exception handler<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="operating-system-issues" class="heading"><a href="#operating-system-issues" class="heading-anchor" aria-label="章节： Operating System Issues" tabindex="-1"></a><span>Operating System Issues</span></h3>
<p>OS 需要做的工作有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 create process 时为其分配 memory<span class="mojikumi-line-end">。</span></li>
<li>在 terminate process 时回收 memory<span class="mojikumi-line-end">。</span></li>
<li>在 context switch 时存储<span class="mojikumi-line-end">、</span>设置 base 和 bounds<span class="mojikumi-line-end">。</span>此时可以进行 relocate<span class="mojikumi-line-end">：</span>将 base 修改为与上次 schedule 到这个 process 时不同的位置<span class="mojikumi-line-end">，</span>并将数据复制过去<span class="mojikumi-line-end">。</span></li>
<li>提供 out-of-bounds memory access 的 exception handler<span class="mojikumi-line-end">，</span>一般会 kill 掉这个 process<span class="mojikumi-line-end">。</span></li>
</ul>
<p>在我们简单的假设下<span class="mojikumi-line-end">，</span>可以使用一个 <i>free list</i> 维护空闲的 memory slots<span class="mojikumi-line-end">。</span></p>
<h2 id="segmentation" class="heading"><a href="#segmentation" class="heading-anchor" aria-label="章节： Segmentation" tabindex="-1"></a><span>Segmentation</span></h2>
<p>在 Base and Bounds 中<span class="mojikumi-line-end">，</span>heap 和 stack 之间的空位一般不会用满<span class="mojikumi-line-end">，</span>但没有使用的空间也会占用 physical memory<span class="mojikumi-line-end">，</span>这会造成严重的浪费<span class="mojikumi-line-start">（</span><i>internal fragmentation</i><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>并且<span class="mojikumi-line-end">，</span>Base and Bounds 不支持运行 address space 比 physical memory 大的 program<span class="mojikumi-line-end">。</span>所以我们需要更灵活高效的机制来支持 large address space<span class="mojikumi-line-end">。</span></p>
<p>我们可以使用 <i>segmentation</i><span class="mojikumi-line-end">，</span>将 memory space 划分成多个 <i>segment</i><span class="mojikumi-line-end">，</span>例如 code<span class="mojikumi-line-end">、</span>stack 和 heap<span class="mojikumi-line-end">，</span>每个 segment 是连续的<span class="mojikumi-line-end">，</span>但整体不必连续<span class="mojikumi-line-end">，</span>从而可以更加灵活地进行分配<span class="mojikumi-line-end">，</span>减少 internal fragmentation<span class="mojikumi-line-end">。</span></p>
<h3 id="hardware-support-2" class="heading"><a href="#hardware-support-2" class="heading-anchor" aria-label="章节： Hardware Support" tabindex="-1"></a><span>Hardware Support</span></h3>
<p>为了支持 segmentation<span class="mojikumi-line-end">，</span>需要将整体的一对 base and bounds register 变成每个 segment 各一对<span class="mojikumi-line-end">。</span></p>
<p>在进行 address translation 时<span class="mojikumi-line-end">，</span>需要先识别一个 address 属于哪个 segment<span class="mojikumi-line-end">。</span>explicit approach 通过 address 的最高几位作为 segment 标识<span class="mojikumi-line-end">，</span>而 implicit approach 通过地址的生成方式<span class="mojikumi-line-start">（</span>是否来自 PC / stack pointer<span class="mojikumi-line-end">）</span>判断 segment<span class="mojikumi-line-end">。</span></p>
<p>stack 是 grow backwards 的<span class="mojikumi-line-end">，</span>需要特殊支持<span class="mojikumi-line-end">。</span>可以在 hardware 中添加表示 grow 方向的 flag bit<span class="mojikumi-line-end">，</span>对于 grow backwards 的 segment<span class="mojikumi-line-end">，</span>其 base 是这段 address 的上界<span class="mojikumi-line-end">，</span>offset 是负数<span class="mojikumi-line-end">，</span>越界判断也有所不同<span class="mojikumi-line-end">。</span></p>
<p>为了支持 shared memory<span class="mojikumi-line-end">，</span>尤其是 code sharing<span class="mojikumi-line-end">，</span>需要添加 protection bits<span class="mojikumi-line-end">，</span>表示一个 segment 是否可以 read / write / execute<span class="mojikumi-line-end">。</span>进行 code sharing 时<span class="mojikumi-line-end">，</span>可以将权限设为 read-execute<span class="mojikumi-line-end">，</span>禁止修改<span class="mojikumi-line-end">，</span>从而既能 share 又能 isolate<span class="mojikumi-line-end">。</span>这也能避免 stack / heap 被执行<span class="mojikumi-line-end">，</span>一定程度上避免一些攻击<span class="mojikumi-line-end">。</span></p>
<p>只分成 code<span class="mojikumi-line-end">、</span>stack<span class="mojikumi-line-end">、</span>heap 等少量几个 segment 被称作 <i>coarse-grained</i> segmentation<span class="mojikumi-line-end">。</span>有的系统支持成百上千个 segment<span class="mojikumi-line-end">，</span>称作 <i>fine-grained</i> segmentation<span class="mojikumi-line-end">，</span>这需要存储 <i>segment table</i><span class="mojikumi-line-end">。</span></p>
<h3 id="os-support" class="heading"><a href="#os-support" class="heading-anchor" aria-label="章节： OS Support" tabindex="-1"></a><span>OS Support</span></h3>
<p>为了支持 segmentation<span class="mojikumi-line-end">，</span>OS 需要做的事情有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 context switch 时存储<span class="mojikumi-line-end">、</span>切换 segment registers</li>
<li>管理 physical memory 的 free space<span class="mojikumi-line-end">，</span>从而支持<span class="mojikumi-line-end">：</span>
<ul>
<li>创建新的 address space</li>
<li>segment grow<span class="mojikumi-line-end">，</span>例如 <code>sbrk()</code></li>
</ul>
</li>
</ul>
<p>由于 segment 的 size 是不固定的<span class="mojikumi-line-end">，</span>physical memory 中各个 segment 之间可能会出现很多空洞<span class="mojikumi-line-end">，</span>这被称作 <i>external fragmentation</i><span class="mojikumi-line-end">，</span>导致 free space management 非常困难<span class="mojikumi-line-end">。</span></p>
<p>一种解决方式是进行 <i>compact</i><span class="mojikumi-line-end">，</span>通过挪移 segment 来消除 external fragmentation<span class="mojikumi-line-end">，</span>但这需要频繁移动大量数据<span class="mojikumi-line-end">，</span>非常 expensive<span class="mojikumi-line-end">，</span>效率很低<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>一般不会进行 compact<span class="mojikumi-line-end">，</span>而是会使用其他方式尽量减少 internal fragmentation<span class="mojikumi-line-end">。</span></p>
<h2 id="free-space-management" class="heading"><a href="#free-space-management" class="heading-anchor" aria-label="章节： Free-Space Management" tabindex="-1"></a><span>Free-Space Management</span></h2>
<p>如果 memory 被分成了 fixed-size units<span class="mojikumi-line-end">，</span>以 unit 为分配的基本单位<span class="mojikumi-line-end">，</span>则 free-space management 会比较容易<span class="mojikumi-line-end">。</span>如果分配出的每一块 memory 大小各异<span class="mojikumi-line-end">，</span>则容易造成 external fragmentation<span class="mojikumi-line-end">，</span>需要一些机制来优化<span class="mojikumi-line-end">。</span></p>
<p>参见 <a href="/post/2022/11/csapp-9#dynamic-memory-allocation">CS:APP 第九章 Dynamic Memory Allocation</a><span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-cake">
<p>作者推荐阅读<span class="mojikumi-line-end">：</span><a href="https://en.wikipedia.org/wiki/You_can%27t_have_your_cake_and_eat_it">You can't have your cake and eat it - Wikipedia</a><br>
<span class="mojikumi-line-start">“</span>The best part of this page is reading all the similar idioms from other languages.<span class="mojikumi-line-end">”</span> <a href="#user-content-fnref-cake" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-contiguous">
<p>注意是 <span class="mojikumi">“</span>contiguous<span class="mojikumi">”</span> 而不是 <span class="mojikumi">“</span>continuous<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span><s>discrete topology 下随便 map 都 continuous<span class="mojikumi-line-start">（</span></s> <a href="#user-content-fnref-contiguous" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-bounds">
<p><strong>bound</strong> noun (formal) 蹦跳<span class="mojikumi-line-end">；</span>跳跃<br>
<strong>bounds</strong> noun [pl.] 限制范围<span class="mojikumi-line-end">；</span>极限 <a href="#user-content-fnref-bounds" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-wreak">
<p><span class="mojikumi-line-start">“</span>Is there anything other than <span class="mojikumi-narrow-right">‘</span>havoc<span class="mojikumi-narrow-left">’</span> that can be <span class="mojikumi-narrow-right">‘</span>wreaked<span class="mojikumi">’</span>?<span class="mojikumi-line-end">”</span><br>
我想作者可能需要一本牛津词典或者 <a href="http://www.just-the-word.com/">http<wbr>://<wbr>www<wbr>.<wbr>just<wbr>-<wbr>the<wbr>-<wbr>word<wbr>.<wbr>com<wbr>/</a> <span class="mojikumi">（</span> <a href="#user-content-fnref-wreak" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content>
        <category label="ostep" term="https://ouuan.moe/tag/ostep"/>
        <category label="学习笔记" term="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <category label="WIP" term="https://ouuan.moe/tag/WIP"/>
    </entry>
</feed>