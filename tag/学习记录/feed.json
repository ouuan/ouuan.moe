{
    "version": "https://jsonfeed.org/version/1",
    "title": "ouuan's blog: 标签: 学习记录",
    "home_page_url": "https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95",
    "feed_url": "https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/feed.json",
    "description": "标签: 学习记录 - 欢迎来到 ouuan 的博客！本博客以技术向内容为主，包括 Web、系统、Linux、大学生活等方面的学习笔记和经验分享。",
    "author": {
        "name": "ouuan",
        "url": "https://github.com/ouuan"
    },
    "items": [
        {
            "id": "https://ouuan.moe/post/2023/03/digital-logic",
            "content_html": "<p>谁会愿意天天用一个课六个字的全名来叫它呢<span class=\"mojikumi-line-end\">，</span>但是数字逻辑电路是数电<span class=\"mojikumi-line-end\">，</span>数字逻辑设计是数设<span class=\"mojikumi-line-end\">，</span>数字逻辑实验总不能是 <code>/数[字逻]?实验?/</code><span class=\"mojikumi-line-end\">，</span>但叫它数电实验或者数设实验好像都不太对<span class=\"mojikumi-line-end\">，</span>草<span class=\"mojikumi-line-start\">（</span></p>\n<p>上课的时候也是<span class=\"mojikumi-line-end\">，</span>老师一会儿一个<span class=\"mojikumi-line-start\">“</span>如果你是数设的同学<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>一会儿一个<span class=\"mojikumi-line-start\">“</span>如果你没报上数设但想把数电学成数设<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>这课也太乱了<span class=\"mojikumi-line-start\">（</span></p>\n<p>我写游记都得把两个课放一起写<span class=\"mojikumi-line-end\">，</span>课就不能合成一个吗<span class=\"mojikumi-line-start\">（</span></p>\n\n<p>这篇就是个游记<span class=\"mojikumi-line-end\">，</span>具体学的内容如果我有时间的话会放在 <a href=\"/tag/ddpp\">DDPP 学习笔记</a><span class=\"mojikumi-line-end\">，</span>没时间<span class=\"mojikumi-line-start\">（</span>没时间写笔记 or 没时间学 DDPP 只能跟着上课<span class=\"mojikumi-line-end\">）</span>的话大概就不会放上来了<span class=\"mojikumi-line-start\">（</span></p>\n<p><s>某些人学都学不完了<span class=\"mojikumi-line-end\">，</span>还有空写游记？<span class=\"mojikumi-line-start\">（</span></s></p>\n<h2 id=\"sv-班的开设\" class=\"heading\"><a href=\"#sv-班的开设\" class=\"heading-anchor\" aria-label=\"章节： sv 班的开设\" tabindex=\"-1\"></a><span>sv 班的开设</span></h2>\n<p>DDPP5 讲的是 Verilog<span class=\"mojikumi-line-end\">，</span>以后造机应该也是用 Verilog<span class=\"mojikumi-line-end\">，</span>但数字逻辑实验似乎是 VHDL<span class=\"mojikumi-line-end\">。</span>就像软工强迫我把技术栈全换一遍一样<span class=\"mojikumi-line-end\">，</span>多学一门语言也可以称作<span class=\"mojikumi-line-start\">“</span>技多不压身<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>而且说到底我也还没学 Verilog<span class=\"mojikumi-line-start\">（</span><span class=\"mojikumi-line-end\">，</span>但终究是有些难受的<span class=\"mojikumi-line-end\">。</span>所以看到第一节课的课件上说可以选择报 SystemVerilog 小班我还是很开心的<span class=\"mojikumi-line-end\">，</span>顿时感觉这个课科学了许多<span class=\"mojikumi-line-start\">（</span></p>\n<blockquote>\n<p>优势<span class=\"mojikumi-line-end\">：</span>对后续课程有帮助</p>\n<p>劣势<span class=\"mojikumi-line-end\">：</span>花时间<span class=\"mojikumi-line-end\">，</span>费精力<span class=\"mojikumi-line-end\">。</span><span class=\"mojikumi-line-end\">。</span><span class=\"mojikumi-line-end\">。</span></p>\n</blockquote>\n<p>课件上是这么写的<span class=\"mojikumi-line-end\">，</span>但 Verilog 本身应该不会比 VHDL 费精力<span class=\"mojikumi-line-end\">，</span>课程内容的区别是多了个内存实验<span class=\"mojikumi-line-end\">，</span>我猜这个 warning 的主要意义在于<span class=\"mojikumi-line-end\">，</span>这是个新开的课<span class=\"mojikumi-line-end\">，</span>可能各种出锅<span class=\"mojikumi-line-end\">，</span>要让大家做好心理准备<span class=\"mojikumi-line-start\">（</span>同样是新开的 <a href=\"/post/2022/08/learn-rust\">Rust</a> 就非常科学<span class=\"mojikumi-line-start\">（</span><s>起码完全自学人感觉很科学</s><span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">，</span>我似乎反而更希望课是新开的<span class=\"mojikumi-line-end\">，</span>而且这个 sv 班似乎也是 tuna 群友当助教<span class=\"mojikumi-line-start\">（</span></p>\n<p>但这个 sv 班的开设实在是有些坎坷<span class=\"mojikumi-line-end\">，</span>说起来也有些冗长<span class=\"mojikumi-line-end\">，</span>就折起来了<span class=\"mojikumi-line-end\">。</span></p>\n<a id=\"sv-班坎坷的开设过程\" name=\"sv-班坎坷的开设过程\" aria-hidden=\"true\"></a>\n<aside role=\"note\" data-v-5d308038><details class=\"shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue\" data-v-5d308038><summary class=\"p-3 flex justify-between items-center cursor-pointer\" data-v-5d308038><h3 class=\"flex items-center gap-1 font-bold\" data-v-5d308038><span class=\"text-5 i-mdi-pencil text-blue\" data-v-5d308038></span><span class=\"sr-only\" data-v-5d308038>Note</span><span data-v-5d308038>sv 班坎坷的开设过程</span></h3><span class=\"details-icon text-5\" data-v-5d308038></span></summary><div class=\"overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover\" data-v-5d308038><p>简单来说<span class=\"mojikumi-line-end\">，</span>数字逻辑实验有 5-1<span class=\"mojikumi-line-end\">、</span>5-3<span class=\"mojikumi-line-end\">、</span>5-4 三个班<span class=\"mojikumi-line-end\">，</span>其中 5-1<span class=\"mojikumi-line-end\">、</span>5-3 有开设 sv 班的机会<span class=\"mojikumi-line-end\">，</span>但要求是 5-1 报名人数在 25~28 之间<span class=\"mojikumi-line-end\">，</span>5-3 报名人数在 27~28 之间<span class=\"mojikumi-line-end\">，</span>才分别能开班<span class=\"mojikumi-line-end\">。</span></p><p>是不是感觉非常神秘<span class=\"mojikumi-line-start\">（</span><span class=\"mojikumi-line-end\">，</span>这确实很神秘<span class=\"mojikumi-line-end\">，</span>但它背后竟然真的能有确切的原因<span class=\"mojikumi-line-start\">（</span></p><ul>\n<li>数字逻辑实验的课容量是 85<span class=\"mojikumi-line-end\">，</span>5-1<span class=\"mojikumi-line-end\">、</span>5-3<span class=\"mojikumi-line-end\">、</span>5-4 分别有 85<span class=\"mojikumi-line-end\">、</span>87<span class=\"mojikumi-line-start\">（</span>草<span class=\"mojikumi-line-end\">，</span>听说可能是因为重修？<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">、</span>69 人<span class=\"mojikumi-line-start\">（</span>印象中当时的数据<span class=\"mojikumi-line-end\">，</span>现在有点小变化<span class=\"mojikumi-line-end\">）</span></li>\n<li>因为设备<span class=\"mojikumi-line-end\">、</span>实验室等资源限制<span class=\"mojikumi-line-end\">，</span>一个普通班只能容纳 30 人<span class=\"mojikumi-line-end\">，</span>一个 sv 班只能容纳 28 人<span class=\"mojikumi-line-end\">，</span>一个时间段只能有三个班</li>\n</ul><p>虽然说在这些限制下似乎也能在 5-4 开一个班<span class=\"mojikumi-line-start\">（</span>9~28 人即可<span class=\"mojikumi-line-end\">，</span>满足人数限制且不影响该时间段分班数量<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">，</span>但不知道是不是懒得再开一个班还是什么原因<span class=\"mojikumi-line-end\">，</span>5-4 想报 sv 班的同学只能遗憾离场<span class=\"mojikumi-line-start\">（</span></p><p>同学们当然觉得这样搞很毒瘤<span class=\"mojikumi-line-end\">，</span>但老师似乎也知道这样很毒瘤<span class=\"mojikumi-line-end\">，</span>说是之前申请过搞成二级选课<span class=\"mojikumi-line-end\">，</span>但没通过<span class=\"mojikumi-line-end\">。</span></p><p>一开始我担心的是很快报满报不上<span class=\"mojikumi-line-end\">，</span>后来发现完全担心错了<span class=\"mojikumi-line-start\">（</span><span class=\"mojikumi-line-end\">，</span>真正的问题在于人数不够<span class=\"mojikumi-line-end\">，</span>而且这个是先报先得<span class=\"mojikumi-line-end\">，</span>我是通知发出来 7min 就报了<span class=\"mojikumi-line-end\">，</span><s>虽然在选课系统里 7s 可能就慢了<span class=\"mojikumi-line-end\">，</span>但是</s> 最后看名单我是第一个报的<span class=\"mojikumi-line-start\">（</span></p><p>前两天大家都不吭声<span class=\"mojikumi-line-end\">，</span>到了报名的 ddl 当天下午我才在群里问了下人数<span class=\"mojikumi-line-end\">，</span>当时是 5-1 22 人 5-3 21 人<span class=\"mojikumi-line-end\">。</span>于是我开始在班群推销<span class=\"mojikumi-line-end\">，</span>也看到有人在课程群推销<span class=\"mojikumi-line-end\">，</span>反正主要就是以后总得学 Verilog<span class=\"mojikumi-line-end\">，</span>报 sv 班可以少学一门语言<span class=\"mojikumi-line-start\">（</span></p><p>晚上 6 点 5-1 就开班了<span class=\"mojikumi-line-end\">，</span>但 5-3 只有 24 个人报<span class=\"mojikumi-line-end\">。</span>到了 23:44 还是 24<span class=\"mojikumi-line-start\">（</span>实际上是 25<span class=\"mojikumi-line-end\">，</span>我室友报了结果因未知原因被漏掉了<span class=\"mojikumi-line-end\">，</span>草<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">，</span>就很崩溃<span class=\"mojikumi-line-end\">。</span></p><p>当时我想了两个备选方案<span class=\"mojikumi-line-end\">：</span></p><ul>\n<li>改成 5-4 开 sv 班<span class=\"mojikumi-line-end\">，</span>但我提出后被否了<span class=\"mojikumi-line-end\">，</span>说是不方便再调整<span class=\"mojikumi-line-end\">。</span></li>\n<li>去 5-1 的 sv 班<span class=\"mojikumi-line-end\">，</span>结果得知 5-1 已经报了 31 人<span class=\"mojikumi-line-end\">。</span><s>早知道不推销了</s></li>\n</ul><p>好在第二天又说报名 ddl 延长半天<span class=\"mojikumi-line-end\">，</span>然后中午的时候竟然就报满了<span class=\"mojikumi-line-end\">。</span>5-3 的 28 人有 10 个是信计的<span class=\"mojikumi-line-end\">，</span><s>简单估计一下<span class=\"mojikumi-line-end\">，</span>信计有 28/30 想报 sv</s><span class=\"mojikumi-line-end\">，</span>实际上 5-1 的 sv 班只有两个信计<span class=\"mojikumi-line-end\">，</span>只不过群里 5-4 求换课的还有好几个信计<span class=\"mojikumi-line-end\">，</span>可惜都没换上<span class=\"mojikumi-line-end\">，</span><s>再简单估计一下<span class=\"mojikumi-line-end\">，</span>sv 班 12/56 是信计<span class=\"mojikumi-line-end\">，</span>信计应该一共有 52 人</s><span class=\"mojikumi-line-start\">（</span></p></div></details></aside>\n<h2 id=\"数设第二次课（第三章）\" class=\"heading\"><a href=\"#数设第二次课（第三章）\" class=\"heading-anchor\" aria-label=\"章节： 数设第二次课（第三章）\" tabindex=\"-1\"></a><span>数设第二次课<span class=\"mojikumi-line-start\">（</span>第三章<span class=\"mojikumi-line-end\">）</span></span></h2>\n<p>这节课讲了一堆数电背后的模电原理<span class=\"mojikumi-line-end\">，</span>而且还是 TTL 电路<span class=\"mojikumi-line-end\">，</span>不是 DDPP5 放在第 14 章的 CMOS<span class=\"mojikumi-line-end\">。</span>感觉完全没听懂<span class=\"mojikumi-line-end\">，</span>只不过说到底这一节是物理课不是计算机课<span class=\"mojikumi-line-start\">（</span><span class=\"mojikumi-line-end\">，</span>后面又说讲的大部分东西不考<span class=\"mojikumi-line-end\">，</span>讲这些是为了补充一些数字电路发展的历史<span class=\"mojikumi-line-end\">，</span>弥补思维上的跳跃<span class=\"mojikumi-line-end\">。</span></p>\n<p>我是完全没听懂<span class=\"mojikumi-line-end\">，</span>其他同学大概也是没完全听懂<span class=\"mojikumi-line-end\">。</span>老师吐槽说<span class=\"mojikumi-line-end\">，</span>现在我们培养方案里电路知识几乎为零<span class=\"mojikumi-line-end\">，</span>数设要从头开始讲<span class=\"mojikumi-line-end\">，</span>不像他们那时候<span class=\"mojikumi-line-end\">，</span>本科上五年<span class=\"mojikumi-line-end\">，</span>什么物理都学了<span class=\"mojikumi-line-end\">。</span>本来我还在想<span class=\"mojikumi-line-end\">，</span>为什么我们只能上四年甚至三年<span class=\"mojikumi-line-end\">，</span>要学这么多东西<span class=\"mojikumi-line-end\">，</span>结果老师说他五年修了双学位 600+ 学分<span class=\"mojikumi-line-end\">，</span>而且学分是和现在一样的学时<span class=\"mojikumi-line-end\">，</span>震撼全班<span class=\"mojikumi-line-end\">。</span></p>",
            "url": "https://ouuan.moe/post/2023/03/digital-logic",
            "title": "数字逻辑实验到底是数电实验还是数设实验（x",
            "summary": "<p>谁会愿意天天用一个课六个字的全名来叫它呢<span class=\"mojikumi-line-end\">，</span>但是数字逻辑电路是数电<span class=\"mojikumi-line-end\">，</span>数字逻辑设计是数设<span class=\"mojikumi-line-end\">，</span>数字逻辑实验总不能是 <code>/数[字逻]?实验?/</code><span class=\"mojikumi-line-end\">，</span>但叫它数电实验或者数设实验好像都不太对<span class=\"mojikumi-line-end\">，</span>草<span class=\"mojikumi-line-start\">（</span></p>\n<p>上课的时候也是<span class=\"mojikumi-line-end\">，</span>老师一会儿一个<span class=\"mojikumi-line-start\">“</span>如果你是数设的同学<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>一会儿一个<span class=\"mojikumi-line-start\">“</span>如果你没报上数设但想把数电学成数设<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>这课也太乱了<span class=\"mojikumi-line-start\">（</span></p>\n<p>我写游记都得把两个课放一起写<span class=\"mojikumi-line-end\">，</span>课就不能合成一个吗<span class=\"mojikumi-line-start\">（</span></p>\n",
            "date_modified": "2023-03-02T03:46:54.000Z",
            "tags": [
                "digital-design",
                "学习记录"
            ]
        },
        {
            "id": "https://ouuan.moe/post/2022/08/learn-rust",
            "content_html": "\n\n<p>早就想学 Rust 了<span class=\"mojikumi-line-end\">，</span>但一直咕着<span class=\"mojikumi-line-end\">。</span>这次小学期的程设训练开了 Rust 课堂<span class=\"mojikumi-line-end\">，</span>就毫不犹豫地选了<span class=\"mojikumi-line-end\">，</span>也以此为契机学了 Rust<span class=\"mojikumi-line-end\">。</span></p>\n<p>这篇就是简单记录一下大体上的学习过程<span class=\"mojikumi-line-end\">，</span>如果有什么心得体会<span class=\"mojikumi-line-end\">、</span>经验分享之类应该会开新的文章<span class=\"mojikumi-line-end\">。</span></p>\n<p>顺便也算是程设训练的游记了（<span class=\"mojikumi\">“</span>游记<span class=\"mojikumi-line-end\">”</span>这个词来源于 OI 时期的习惯<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">。</span></p>\n\n<h2 id=\"初学------the-rust-programming-language\" class=\"heading\"><a href=\"#初学------the-rust-programming-language\" class=\"heading-anchor\" aria-label=\"章节： 初学 —— The Rust Programming Language\" tabindex=\"-1\"></a><span>初学 —— The Rust Programming Language</span></h2>\n<p>不同于 Python<span class=\"mojikumi-line-end\">、</span>JavaScript<span class=\"mojikumi-line-end\">，</span>这次学 Rust 更像是当初学 C++<span class=\"mojikumi-line-end\">，</span>不是先魔改代码<span class=\"mojikumi-line-end\">、</span>用啥搜啥<span class=\"mojikumi-line-end\">、</span>StackOverflow<span class=\"mojikumi-line-end\">，</span>而是在还没怎么接触过时就直接看书<span class=\"mojikumi-line-end\">。</span></p>\n<p>虽然没有细看中文翻译的质量如何<span class=\"mojikumi-line-end\">，</span>但至少术语是不好翻译的<span class=\"mojikumi-line-end\">，</span>就直接看了英文版的 <a href=\"https://doc.rust-lang.org/book/\">The Rust Programming Language</a><span class=\"mojikumi-line-end\">。</span></p>\n<p>这本书看下来给我的感觉是<span class=\"mojikumi-line-end\">，</span>很多地方没有按知识点依赖关系的拓扑排序来讲<span class=\"mojikumi-line-end\">，</span>而似乎是以某种由浅入深的顺序来的<span class=\"mojikumi-line-end\">，</span>很多后面才学到的概念在前文就出现<span class=\"mojikumi-line-end\">，</span>而前面学的概念的完全不需要后面知识的扩展又在后面才补充<span class=\"mojikumi-line-end\">，</span>还有一些零碎的知识是在 project chapter 讲的<span class=\"mojikumi-line-end\">。</span></p>\n<p>反正<span class=\"mojikumi-line-end\">，</span>每天看两三章<span class=\"mojikumi-line-end\">，</span><s>还能有不少时间摸鱼<span class=\"mojikumi-line-end\">，</span>摸个</s> 一两周就看得差不多了<span class=\"mojikumi-line-start\">（</span></p>\n<h2 id=\"初步练习------洛谷\" class=\"heading\"><a href=\"#初步练习------洛谷\" class=\"heading-anchor\" aria-label=\"章节： 初步练习 —— 洛谷\" tabindex=\"-1\"></a><span>初步练习 —— 洛谷</span></h2>\n<p>看书的同时在 <a href=\"https://www.luogu.com.cn/\">洛谷</a> 上随便挑了点入门题和板子题写<span class=\"mojikumi-line-end\">。</span>只不过一开始没学 io 之类的<span class=\"mojikumi-line-end\">，</span>会再多语法也做不动题<span class=\"mojikumi-line-end\">，</span><s>但幸好有 GitHub Copilot</s><span class=\"mojikumi-line-end\">。</span></p>\n<p>在这放个读入的例子<span class=\"mojikumi-line-end\">：</span></p>\n<section class=\"code-block relative my-6 shadow\" data-v-ad49d235><div class=\"h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex\" style=\"display:none;\" data-v-ad49d235><h3 class=\"text-3 text-footer\" aria-label=\"plain text 代码块\" data-v-ad49d235>plain text</h3><ile-root id=\"ile-1\"><button title=\"复制到剪贴板\" class=\"copy-button b-footer text-footer\" data-v-9288569d><span class=\"i-mdi-content-copy\" data-v-9288569d></span><span class=\"sr-only\" role=\"status\" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class=\"light:hidden\" data-v-ad49d235><pre class=\"shiki dark\" style=\"background-color: #011627\" tabindex=\"0\"><samp><span><span style=\"color: #d6deeb\">6 0</span></span>\n<span><span style=\"color: #d6deeb\">1 1 4 5 1 4</span></span></samp></pre></div><div class=\"light:important-block\" style=\"display:none;\" data-v-ad49d235><pre class=\"shiki light\" style=\"background-color: #FBFBFB\" tabindex=\"0\"><samp><span><span style=\"color: #403f53\">6 0</span></span>\n<span><span style=\"color: #403f53\">1 1 4 5 1 4</span></span></samp></pre></div></section>\n<section class=\"code-block relative my-6 shadow\" itemprop=\"hasPart\" itemscope itemtype=\"https://schema.org/SoftwareSourceCode\" data-v-ad49d235><div class=\"h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex\" style=\"display:none;\" data-v-ad49d235><h3 class=\"text-3 text-footer\" itemprop=\"programmingLanguage\" aria-label=\"rust 代码块\" data-v-ad49d235>rust</h3><ile-root id=\"ile-2\"><button title=\"复制到剪贴板\" class=\"copy-button b-footer text-footer\" data-v-9288569d><span class=\"i-mdi-content-copy\" data-v-9288569d></span><span class=\"sr-only\" role=\"status\" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class=\"light:hidden\" itemprop=\"text\" data-v-ad49d235><pre class=\"shiki dark\" style=\"background-color: #011627\" tabindex=\"0\"><code><span><span style=\"color: #C792EA\">fn</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #D6DEEB\">() {</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">stdin</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> std</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #D6DEEB\">io</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #82AAFF\">stdin</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">mut</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">input</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> String</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #82AAFF\">new</span><span style=\"color: #D6DEEB\">();</span></span>\n<span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C5E478\">stdin</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">read_line</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #7FDBCA\">&amp;</span><span style=\"color: #C792EA\">mut</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">input</span><span style=\"color: #D6DEEB\">)</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">mut</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">parts</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">input</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">split_whitespace</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">n</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">parts</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">next</span><span style=\"color: #D6DEEB\">()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">parse</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #D6DEEB\">&lt;u32&gt;()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #82AAFF\">assert_eq!</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #C5E478\">n</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">6</span><span style=\"color: #D6DEEB\">);</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">m</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">parts</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">next</span><span style=\"color: #D6DEEB\">()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">parse</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #D6DEEB\">&lt;u32&gt;()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #82AAFF\">assert_eq!</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #C5E478\">m</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #D6DEEB\">);</span></span>\n<span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C5E478\">input</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">clear</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C5E478\">stdin</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">read_line</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #7FDBCA\">&amp;</span><span style=\"color: #C792EA\">mut</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">input</span><span style=\"color: #D6DEEB\">)</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #C792EA\">let</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">a</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C792EA\">=</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">input</span></span>\n<span><span style=\"color: #D6DEEB\">        </span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">split_whitespace</span><span style=\"color: #D6DEEB\">()</span></span>\n<span><span style=\"color: #D6DEEB\">        </span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">map</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #C792EA\">|</span><span style=\"color: #C5E478\">x</span><span style=\"color: #C792EA\">|</span><span style=\"color: #D6DEEB\"> </span><span style=\"color: #C5E478\">x</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">parse</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #D6DEEB\">&lt;i32&gt;()</span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">unwrap</span><span style=\"color: #D6DEEB\">())</span></span>\n<span><span style=\"color: #D6DEEB\">        </span><span style=\"color: #7FDBCA\">.</span><span style=\"color: #82AAFF\">collect</span><span style=\"color: #7FDBCA\">::</span><span style=\"color: #D6DEEB\">&lt;Vec&lt;</span><span style=\"color: #C5E478\">_</span><span style=\"color: #D6DEEB\">&gt;&gt;();</span></span>\n<span><span style=\"color: #D6DEEB\">    </span><span style=\"color: #82AAFF\">assert_eq!</span><span style=\"color: #D6DEEB\">(</span><span style=\"color: #C5E478\">a</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #82AAFF\">vec!</span><span style=\"color: #D6DEEB\">[</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #D6DEEB\">, </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #D6DEEB\">]);</span></span>\n<span><span style=\"color: #D6DEEB\">}</span></span></code></pre></div><div class=\"light:important-block\" style=\"display:none;\" data-v-ad49d235><pre class=\"shiki light\" style=\"background-color: #FBFBFB\" tabindex=\"0\"><code><span><span style=\"color: #994CC3\">fn</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">main</span><span style=\"color: #403F53\">() {</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">stdin</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> std</span><span style=\"color: #0C969B\">::</span><span style=\"color: #403F53\">io</span><span style=\"color: #0C969B\">::</span><span style=\"color: #4876D6\">stdin</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">mut</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">input</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> String</span><span style=\"color: #0C969B\">::</span><span style=\"color: #4876D6\">new</span><span style=\"color: #403F53\">();</span></span>\n<span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">stdin</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">read_line</span><span style=\"color: #403F53\">(</span><span style=\"color: #0C969B\">&amp;</span><span style=\"color: #994CC3\">mut</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">input</span><span style=\"color: #403F53\">)</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">mut</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">parts</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">input</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">split_whitespace</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">n</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">parts</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">next</span><span style=\"color: #403F53\">()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">parse</span><span style=\"color: #0C969B\">::</span><span style=\"color: #403F53\">&lt;u32&gt;()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">assert_eq!</span><span style=\"color: #403F53\">(</span><span style=\"color: #4876D6\">n</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">6</span><span style=\"color: #403F53\">);</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">m</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">parts</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">next</span><span style=\"color: #403F53\">()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">parse</span><span style=\"color: #0C969B\">::</span><span style=\"color: #403F53\">&lt;u32&gt;()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">assert_eq!</span><span style=\"color: #403F53\">(</span><span style=\"color: #4876D6\">m</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">0</span><span style=\"color: #403F53\">);</span></span>\n<span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">input</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">clear</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">stdin</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">read_line</span><span style=\"color: #403F53\">(</span><span style=\"color: #0C969B\">&amp;</span><span style=\"color: #994CC3\">mut</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">input</span><span style=\"color: #403F53\">)</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #994CC3\">let</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">a</span><span style=\"color: #403F53\"> </span><span style=\"color: #994CC3\">=</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">input</span></span>\n<span><span style=\"color: #403F53\">        </span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">split_whitespace</span><span style=\"color: #403F53\">()</span></span>\n<span><span style=\"color: #403F53\">        </span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">map</span><span style=\"color: #403F53\">(</span><span style=\"color: #994CC3\">|</span><span style=\"color: #4876D6\">x</span><span style=\"color: #994CC3\">|</span><span style=\"color: #403F53\"> </span><span style=\"color: #4876D6\">x</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">parse</span><span style=\"color: #0C969B\">::</span><span style=\"color: #403F53\">&lt;i32&gt;()</span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">unwrap</span><span style=\"color: #403F53\">())</span></span>\n<span><span style=\"color: #403F53\">        </span><span style=\"color: #0C969B\">.</span><span style=\"color: #4876D6\">collect</span><span style=\"color: #0C969B\">::</span><span style=\"color: #403F53\">&lt;Vec&lt;</span><span style=\"color: #4876D6\">_</span><span style=\"color: #403F53\">&gt;&gt;();</span></span>\n<span><span style=\"color: #403F53\">    </span><span style=\"color: #4876D6\">assert_eq!</span><span style=\"color: #403F53\">(</span><span style=\"color: #4876D6\">a</span><span style=\"color: #403F53\">, </span><span style=\"color: #4876D6\">vec!</span><span style=\"color: #403F53\">[</span><span style=\"color: #AA0982\">1</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">1</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">4</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">5</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">1</span><span style=\"color: #403F53\">, </span><span style=\"color: #AA0982\">4</span><span style=\"color: #403F53\">]);</span></span>\n<span><span style=\"color: #403F53\">}</span></span></code></pre></div></section>\n<h2 id=\"复习------a-half-hour-to-learn-rust\" class=\"heading\"><a href=\"#复习------a-half-hour-to-learn-rust\" class=\"heading-anchor\" aria-label=\"章节： 复习 —— A half-hour to learn Rust\" tabindex=\"-1\"></a><span>复习 —— A half-hour to learn Rust</span></h2>\n<p>之前在 Hacker News 上看到了 <a href=\"https://fasterthanli.me/articles/a-half-hour-to-learn-rust\">A half-hour to learn Rust</a> 这篇文章<span class=\"mojikumi-line-end\">。</span>如果真的是看这个东西来学 Rust<span class=\"mojikumi-line-end\">，</span>不说能不能学会<span class=\"mojikumi-line-end\">，</span>肯定是学不扎实的<span class=\"mojikumi-line-end\">。</span>但是<span class=\"mojikumi-line-end\">，</span>看完书之后很多语法也忘了<span class=\"mojikumi-line-end\">，</span>看这个用来复习还是非常不错的<span class=\"mojikumi\">。</span><wbr><span class=\"mojikumi-line-start\">（</span>另外<span class=\"mojikumi-line-end\">，</span>我感觉这个的顺序貌似比书更有条理一些<span class=\"mojikumi-line-end\">，</span>虽然初学不一定友好 🤔<span class=\"mojikumi-line-end\">）</span></p>\n<h2 id=\"深入了解------the-rust-standard-library\" class=\"heading\"><a href=\"#深入了解------the-rust-standard-library\" class=\"heading-anchor\" aria-label=\"章节： 深入了解 —— The Rust Standard Library\" tabindex=\"-1\"></a><span>深入了解 —— The Rust Standard Library</span></h2>\n<p>其实看书的时候就感觉到了<span class=\"mojikumi-line-end\">，</span>很多时候不懂一段代码不是不懂语法<span class=\"mojikumi-line-end\">，</span>而是不懂 <a href=\"https://doc.rust-lang.org/stable/std/\">标准库</a> 的实现<span class=\"mojikumi-line-end\">，</span>而把 API 理解成了没学过的语法<span class=\"mojikumi-line-end\">。</span>了解标准库<span class=\"mojikumi-line-end\">，</span>不仅是提升编码和运行的效率<span class=\"mojikumi-line-end\">，</span>也是能够看懂很多基础代码的关键<span class=\"mojikumi-line-end\">。</span></p>\n<p>看文档的时候发现<span class=\"mojikumi-line-end\">，</span>不仅是学到了很多有用的 methods<span class=\"mojikumi-line-end\">，</span>也学到了很多其它东西<span class=\"mojikumi-line-end\">。</span>比如说<span class=\"mojikumi-line-end\">：</span></p>\n<ul>\n<li>一般来说都可以用 <a href=\"https://doc.rust-lang.org/stable/std/cmp/fn.max.html\"><code>std<wbr>::<wbr>cmp<wbr>::<wbr>max</code></a> 来取 max<span class=\"mojikumi-line-end\">，</span>但 <a href=\"https://doc.rust-lang.org/stable/std/primitive.f32.html#method.max\"><code>f32</code> 专门有一个 <code>pub fn max(self, other: f32) -> f32</code></a><span class=\"mojikumi-line-end\">，</span>这是因为浮点数有 NaN 这个特殊情况导致 <code>f32</code> 没有 impl <a href=\"https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html\"><code>Ord</code></a><span class=\"mojikumi-line-end\">，</span>而 <code>std<wbr>::<wbr>cmp<wbr>::<wbr>max</code> 需要 <code>Ord</code></li>\n<li>书里貌似没讲到的 <a href=\"https://doc.rust-lang.org/stable/std/keyword.ref.html\">keyword <code>ref</code></a><span class=\"mojikumi-line-start\">（</span>以及在 pattern matching 中和 <code>&#x26;</code> 的区别<span class=\"mojikumi-line-end\">）</span></li>\n<li>引用之间进行比较时会自动转成指向的值<span class=\"mojikumi-line-end\">，</span>即实际进行比较的是指向的值<span class=\"mojikumi-line-start\">（</span>可以通过 <a href=\"https://doc.rust-lang.org/stable/std/ptr/fn.eq.html\"><code>std<wbr>::<wbr>ptr<wbr>::<wbr>eq</code></a> 来比较地址<span class=\"mojikumi-line-end\">）</span></li>\n<li>从标准库的 API 设计能领会到很多 trait 和 generic 的用法<span class=\"mojikumi-line-end\">，</span>体会到它们组合在一起的强大</li>\n<li><a href=\"https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator\"><code>Iterator</code> 自动有 <code>IntoIterator</code></a><span class=\"mojikumi-line-end\">，</span>所以用 <code>IntoIterator</code> 代替 <code>Iterator</code> 作为 trait bound 可以让函数更灵活</li>\n<li>……</li>\n</ul>\n<p>简单看一看就能知道 the book 里涉及到的真的只是冰山一角<span class=\"mojikumi-line-end\">，</span>学 Rust 标准库的意义会比学 C++ 的 STL 大得多<span class=\"mojikumi-line-start\">（</span>个人感觉<span class=\"mojikumi\">）</span><wbr><span class=\"mojikumi-line-start\">（</span>也可能是我 C++ 水平太低 / 没认真学 STL 😢<span class=\"mojikumi\">）</span><wbr><span class=\"mojikumi-line-start\">（</span>或者 Primer Plus 讲的全一些<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">。</span></p>\n<h2 id=\"上课\" class=\"heading\"><a href=\"#上课\" class=\"heading-anchor\" aria-label=\"章节： 上课\" tabindex=\"-1\"></a><span>上课</span></h2>\n<h3 id=\"class-1\" class=\"heading\"><a href=\"#class-1\" class=\"heading-anchor\" aria-label=\"章节： Class 1\" tabindex=\"-1\"></a><span>Class 1</span></h3>\n<p>因为自学过了<span class=\"mojikumi-line-end\">，</span>所以上课就基本上是把老师的声音当作 bgm 偶尔听一下<span class=\"mojikumi-line-end\">，</span>然后继续看标准库文档<span class=\"mojikumi-line-start\">（</span></p>\n<p>上课的时候老师提到 Rust 编译器可以提示如何修改<span class=\"mojikumi-line-end\">，</span>于是我顺势在课程群里发了个 <a href=\"https://twitter.com/st1page/status/1477168761744805891\">rust 程序员现状</a> 的截图<span class=\"mojikumi-line-start\">（</span></p>\n<p><picture><source type=\"image/webp\" srcset=\"/assets/rust-programmers-be-like.b8596e6d.webp\"><img srcset=\"/assets/rust-programmers-be-like.a720f87c.jpeg\" loading=\"lazy\" src=\"/assets/rust-programmers-be-like.a720f87c.jpeg\" width=\"706\" height=\"900\" alt=\"rust程序员现状\"></picture></p>\n<p>课后把 OJ 上的作业速通后发现榜不是公开的 😢</p>\n<p>后来还发现自己一道题写了个 <code>collect</code> 得到的 <code>Vec</code> 只用在一个 <code>for</code> 里<span class=\"mojikumi-line-start\">（</span>就是说可以直接把迭代器用在 <code>for</code> 不用先 <code>collect</code><span class=\"mojikumi-line-end\">）</span>😵 想改过来<span class=\"mojikumi-line-end\">，</span>但虽然没有公开榜<span class=\"mojikumi-line-end\">，</span>还是不想承受可能的罚时<span class=\"mojikumi-line-start\">（</span></p>\n<h3 id=\"class-2\" class=\"heading\"><a href=\"#class-2\" class=\"heading-anchor\" aria-label=\"章节： Class 2\" tabindex=\"-1\"></a><span>Class 2</span></h3>\n<p>第二节课前后共一天多的时间<span class=\"mojikumi-line-end\">，</span>写了 16h 左右<span class=\"mojikumi-line-end\">，</span>把 Wordle 大作业的基础功能写完了<span class=\"mojikumi\">。</span><wbr><span class=\"mojikumi-line-start\">（</span><s>本来以为 Wordle 挺好写的<span class=\"mojikumi-line-end\">，</span>没想到需求这么多<span class=\"mojikumi-line-end\">，</span>需求文档模糊不清的地方还有的要问有的要自己设计<span class=\"mojikumi-line-end\">。</span></s><span class=\"mojikumi-line-end\">）</span></p>\n<p>感觉课上讲的又快<span class=\"mojikumi-line-end\">，</span>大作业需要的知识又没讲全<span class=\"mojikumi-line-end\">，</span>很难想象如果不自学该怎么应对这个课<span class=\"mojikumi-line-start\">（</span></p>\n<h3 id=\"class-3\" class=\"heading\"><a href=\"#class-3\" class=\"heading-anchor\" aria-label=\"章节： Class 3\" tabindex=\"-1\"></a><span>Class 3</span></h3>\n<p>修了一些文档说明不清导致的 bug<span class=\"mojikumi-line-end\">，</span>然后研究了一下扩展功能怎么写<span class=\"mojikumi-line-end\">。</span></p>\n<p>不知道为什么把单词按信息熵排序写了半天<span class=\"mojikumi-line-end\">，</span>明明挺简单的<span class=\"mojikumi-line-end\">。</span>可能是听着老师讲课没法专心想算法<span class=\"mojikumi-line-end\">。</span></p>\n<p>后来试着用 <a href=\"https://docs.rs/rayon/latest/rayon/\">rayon</a> 把信息熵计算并行化了<span class=\"mojikumi-line-end\">，</span>在我本机除了第一次猜测基本上都能秒出结果<span class=\"mojikumi-line-end\">，</span>感觉很爽 <s><span class=\"mojikumi-line-end\">，</span>甚至玩了半天意义不明的照着提示输入</s><span class=\"mojikumi-line-end\">。</span></p>\n<p>再后来发现用 release 模式编译的优化比并行还大 🌚</p>\n<h3 id=\"第一次大作业验收\" class=\"heading\"><a href=\"#第一次大作业验收\" class=\"heading-anchor\" aria-label=\"章节： 第一次大作业验收\" tabindex=\"-1\"></a><span>第一次大作业验收</span></h3>\n<p>验收在 THUWC 去过的东主楼<span class=\"mojikumi-line-end\">，</span>但上大学后还是第一次去<span class=\"mojikumi-line-end\">，</span>结果走错了<span class=\"mojikumi-line-end\">，</span>迟到了 5min 😵 然后非常慌张地展示提高功能<span class=\"mojikumi-line-end\">，</span>都没太演示全<span class=\"mojikumi-line-end\">，</span><s>感觉白写了</s><span class=\"mojikumi-line-start\">（</span></p>\n<h3 id=\"class-48\" class=\"heading\"><a href=\"#class-48\" class=\"heading-anchor\" aria-label=\"章节： Class 4~8\" tabindex=\"-1\"></a><span>Class 4~8</span></h3>\n<p>略<span class=\"mojikumi-line-start\">（</span></p>\n<h3 id=\"第二次大作业验收\" class=\"heading\"><a href=\"#第二次大作业验收\" class=\"heading-anchor\" aria-label=\"章节： 第二次大作业验收\" tabindex=\"-1\"></a><span>第二次大作业验收</span></h3>\n<p>这次真的有比 pretests 强很多的 system test 了<span class=\"mojikumi-line-end\">，</span>还好没 FST<span class=\"mojikumi-line-start\">（</span>助教<span class=\"mojikumi-line-end\">：</span>这个点你为什么能过啊<span class=\"mojikumi-line-start\">（</span>x</p>\n<p>可能是因为这个课不是学前端的<span class=\"mojikumi-line-end\">，</span>而且助教只简单看了一下界面演示没看代码<span class=\"mojikumi-line-end\">，</span>槽点很多的前端被夸了很科学<span class=\"mojikumi-line-start\">（</span></p>\n<p>可能是因为这个课不是学数据库的<span class=\"mojikumi-line-end\">，</span>而且听说有其他同学数据库里全是 JSON<span class=\"mojikumi-line-end\">，</span>普普通通的建表被夸了很科学<span class=\"mojikumi-line-start\">（</span></p>\n<h3 id=\"关于课上的一些翻译\" class=\"heading\"><a href=\"#关于课上的一些翻译\" class=\"heading-anchor\" aria-label=\"章节： 关于课上的一些翻译\" tabindex=\"-1\"></a><span>关于课上的一些翻译</span></h3>\n<p>为什么什么都要翻译出来啊<span class=\"mojikumi-line-start\">（</span>虽然如果英语母语的话看原文应该也很尬 🤣</p>\n<p><picture><source type=\"image/webp\" srcset=\"/assets/rust-translations.cc150348.webp\"><img srcset=\"/assets/rust-translations.5ccc7df9.jpeg\" loading=\"lazy\" src=\"/assets/rust-translations.5ccc7df9.jpeg\" width=\"500\" height=\"651\" alt=\"trait: 特型；panic: 恐慌；poisoned: 中毒；crate: 箱；library crate: 库箱\"></picture></p>\n<h2 id=\"async-rust\" class=\"heading\"><a href=\"#async-rust\" class=\"heading-anchor\" aria-label=\"章节： Async Rust\" tabindex=\"-1\"></a><span>Async Rust</span></h2>\n<p>先是看了 <a href=\"https://rust-lang.github.io/async-book/\">Asynchronous Programming in Rust</a><span class=\"mojikumi-line-end\">，</span>感觉看得一知半解的<span class=\"mojikumi-line-start\">（</span>尤其是 <code>Pin</code><span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">，</span>好像大概知道 <code>Future</code> 在干什么又不完全知道<span class=\"mojikumi-line-start\">（</span><s>而且这本书好咕啊<span class=\"mojikumi-line-end\">，</span><code>TODO</code> 的章节应该是有生之年了</s></p>\n<p>没看完 async book<span class=\"mojikumi-line-end\">，</span>直接去看 <a href=\"https://tokio.rs/tokio/tutorial\">Tokio Tutorial</a> 和 <a href=\"https://book.async.rs/\">Async programming in Rust with async-std</a> 了<span class=\"mojikumi-line-end\">。</span>作为 async runtime 的教程<span class=\"mojikumi-line-end\">，</span>它们涉及到的具体原理和实现少一些<span class=\"mojikumi-line-end\">，</span>更注重怎么实际使用<span class=\"mojikumi-line-end\">，</span>读起来会容易理解一些<span class=\"mojikumi-line-end\">。</span>因为 Tokio 更 popular<span class=\"mojikumi-line-end\">，</span>主要看的是 Tokio 的教程<span class=\"mojikumi-line-end\">。</span></p>\n<h2 id=\"数据库-diesel\" class=\"heading\"><a href=\"#数据库-diesel\" class=\"heading-anchor\" aria-label=\"章节： 数据库: Diesel\" tabindex=\"-1\"></a><span>数据库: Diesel</span></h2>\n<p>感觉 <a href=\"https://diesel.rs/guides/\">diesel 的教程</a> 写的挺简略的<span class=\"mojikumi-line-end\">，</span>但对着 examples 硬查文档也勉强能看懂基本用法<span class=\"mojikumi-line-end\">。</span>ORM 看着就很<span class=\"mojikumi-line-start\">“</span>安全<span class=\"mojikumi\">”</span><span class=\"mojikumi-line-end\">，</span>只不过实在是太类型体操了<span class=\"mojikumi-line-end\">，</span>不仅文档查起来有点小麻烦<span class=\"mojikumi-line-end\">，</span>代码复用也经常因为繁琐的 trait bounds 写不太动<span class=\"mojikumi-line-start\">（</span>也可能是我没学会<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">。</span></p>\n<p><a href=\"https://crates.io/crates/diesel-derive-enum\">diesel-derive-enum</a> 是好用的<span class=\"mojikumi-line-end\">。</span></p>\n<p>Sqlite 的 <code>RETURNING</code> 语句需要启用 <code>returning_<wbr>clauses_<wbr>for_<wbr>sqlite_<wbr>3_<wbr>35</code> feature flag<span class=\"mojikumi-line-start\">（</span>并且需要至少 3.35 版本的 Sqlite<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">。</span>没启用的时候对着一堆 trait bound 不满足的错误信息<span class=\"mojikumi-line-start\">（</span>就和 C++ 模板感觉差不多了..<span class=\"mojikumi-line-end\">）</span>根本发现不了错误原因<span class=\"mojikumi-line-end\">，</span>还是翻文档翻半天发现的<span class=\"mojikumi-line-end\">。</span></p>\n<p>还遇到一个 Sqlite 锁死的坑<span class=\"mojikumi-line-end\">，</span>通过 <a href=\"https://stackoverflow.com/a/57717533\">使用 r2d2 设定 <code>busy_timeout</code></a> 并 <a href=\"https://github.com/the-lean-crate/criner/issues/1\">使用 WAL mode 以及 immediate transaction</a> <span class=\"mojikumi\">（</span>hopefully<span class=\"mojikumi-line-end\">）</span>解决了<span class=\"mojikumi-line-end\">。</span></p>",
            "url": "https://ouuan.moe/post/2022/08/learn-rust",
            "title": "初学 Rust",
            "summary": "\n\n<p>早就想学 Rust 了<span class=\"mojikumi-line-end\">，</span>但一直咕着<span class=\"mojikumi-line-end\">。</span>这次小学期的程设训练开了 Rust 课堂<span class=\"mojikumi-line-end\">，</span>就毫不犹豫地选了<span class=\"mojikumi-line-end\">，</span>也以此为契机学了 Rust<span class=\"mojikumi-line-end\">。</span></p>\n<p>这篇就是简单记录一下大体上的学习过程<span class=\"mojikumi-line-end\">，</span>如果有什么心得体会<span class=\"mojikumi-line-end\">、</span>经验分享之类应该会开新的文章<span class=\"mojikumi-line-end\">。</span></p>\n<p>顺便也算是程设训练的游记了（<span class=\"mojikumi\">“</span>游记<span class=\"mojikumi-line-end\">”</span>这个词来源于 OI 时期的习惯<span class=\"mojikumi\">）</span><span class=\"mojikumi-line-end\">。</span></p>\n",
            "date_modified": "2022-08-15T15:11:45.000Z",
            "tags": [
                "Rust",
                "学习记录"
            ]
        }
    ]
}