<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ouuan's blog: 标签: 学习记录</title>
        <link>https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95</link>
        <description>标签: 学习记录 - ouuan 写东西的地方，涵盖了 Web 开发、计算机系统、Linux 使用、大学学习生活等多个主题。</description>
        <lastBuildDate>Sat, 04 Mar 2023 03:42:29 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>Copyright © 2022 - 2023 ouuan
Licensed under CC BY-SA 4.0</copyright>
        <atom:link href="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[当你的技术栈与软工交集为空（x]]></title>
            <link>https://ouuan.moe/post/2023/03/thuse</link>
            <guid>https://ouuan.moe/post/2023/03/thuse</guid>
            <pubDate>Sat, 04 Mar 2023 03:42:29 GMT</pubDate>
            <description><![CDATA[


<p>很好<span class="mojikumi-line-end">，</span>你已经学会了 Vue<span class="mojikumi-line-end">、</span>Rust<span class="mojikumi-line-end">、</span>Actix<span class="mojikumi-line-end">、</span>GitHub Actions<span class="mojikumi-line-end">、</span>pnpm<span class="mojikumi-line-end">、</span>Vitest<span class="mojikumi-line-end">、</span>Caddy</p>
<p>现在你可以使用 React<span class="mojikumi-line-end">、</span>Python<span class="mojikumi-line-end">、</span>Django<span class="mojikumi-line-end">、</span>GitLab CI<span class="mojikumi-line-end">、</span>yarn<span class="mojikumi-line-end">、</span>Jest<span class="mojikumi-line-end">、</span>Nginx 来完成软工作业了<span class="mojikumi-line-start">（</span></p>
]]></description>
            <content:encoded><![CDATA[


<p>很好<span class="mojikumi-line-end">，</span>你已经学会了 Vue<span class="mojikumi-line-end">、</span>Rust<span class="mojikumi-line-end">、</span>Actix<span class="mojikumi-line-end">、</span>GitHub Actions<span class="mojikumi-line-end">、</span>pnpm<span class="mojikumi-line-end">、</span>Vitest<span class="mojikumi-line-end">、</span>Caddy</p>
<p>现在你可以使用 React<span class="mojikumi-line-end">、</span>Python<span class="mojikumi-line-end">、</span>Django<span class="mojikumi-line-end">、</span>GitLab CI<span class="mojikumi-line-end">、</span>yarn<span class="mojikumi-line-end">、</span>Jest<span class="mojikumi-line-end">、</span>Nginx 来完成软工作业了<span class="mojikumi-line-start">（</span></p>

<p><picture><source type="image/webp" srcset="/assets/tech-stack.2c5179c8.webp"><img srcset="/assets/tech-stack.4ab32981.jpeg" loading="lazy" src="/assets/tech-stack.4ab32981.jpeg" width="500" height="626" alt="技术栈交集为空的 meme"></picture></p>
<p><span class="mojikumi-line-start">（</span>其实这里面比较有问题的就只有 React<span class="mojikumi-line-end">，</span>其他都还好<span class="mojikumi-line-end">，</span><s>只是数量多凑一点 meme 效果更好</s><span class="mojikumi-line-end">）</span></p>
<h2 id="小作业" class="heading"><a href="#小作业" class="heading-anchor" aria-label="章节： 小作业" tabindex="-1"></a><span>小作业</span></h2>
<h3 id="django-后端小作业" class="heading"><a href="#django-后端小作业" class="heading-anchor" aria-label="章节： Django 后端小作业" tabindex="-1"></a><span>Django 后端小作业</span></h3>
<p>每一处需要修改的代码都列出来了<span class="mojikumi-line-end">，</span>还有详细的注释告诉你要干什么<span class="mojikumi-line-end">。</span>Django 完全没学<span class="mojikumi-line-end">，</span>就根据提示查了一处文档<span class="mojikumi-line-end">，</span>代码的整体逻辑也没搞清楚<span class="mojikumi-line-end">。</span></p>
<p>感觉写完之后理解了 ChatGPT<span class="mojikumi-line-end">，</span>看着注释和示例补全代码根本就不需要学会如何写代码嘛<span class="mojikumi-line-start">（</span></p>
<h3 id="学-react" class="heading"><a href="#学-react" class="heading-anchor" aria-label="章节： 学 React" tabindex="-1"></a><span>学 React</span></h3>
<p>小作业应该不需要怎么学 React<span class="mojikumi-line-end">，</span>但还是把 <a href="https://beta.reactjs.org/learn">Learn React (Beta)</a> 完整过了一遍<span class="mojikumi-line-end">。</span></p>
<p>之前都在 Twitter 上云 React<span class="mojikumi-line-end">，</span>学了之后终于有喜欢 Vue 的自信了<span class="mojikumi-line-start">（</span><s>所以说 X 自信就是要允许 Y 才能有<span class="mojikumi-line-end">，</span>以 X 自信为名打压 Y 到底是什么操作</s></p>
<a id="vue-用户初学-react-感到不适的一些点" name="vue-用户初学-react-感到不适的一些点" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>Vue 用户初学 React 感到不适的一些点</span></h4><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><ul>
<li>我希望 HTML 放在统一<span class="mojikumi-line-end">、</span>独立的位置<span class="mojikumi-line-end">，</span>不分散在多处<span class="mojikumi-line-end">，</span>不和 JS 代码在结构上混在一起<span class="mojikumi-line-end">。</span></li>
<li><code>v-if</code> 要用 if-else / <code>?:</code> / <code>&#x26;&#x26;</code> 实现<span class="mojikumi-line-end">：</span>我不希望在 JSX 外部写 if-else<span class="mojikumi-line-end">；</span>表达式的括号可能引入额外的缩进<span class="mojikumi-line-end">；</span><code>?:</code> 实现多级 else if 可能看不清<span class="mojikumi-line-end">；</span>修改代码时不像 <code>v-if</code> 只需要添加一行不影响其他行<span class="mojikumi-line-end">。</span>总之就是感觉很丑<span class="mojikumi-line-start">（</span></li>
<li><code>v-for</code> 要自己使用 JS 计算得到<span class="mojikumi-line-end">。</span></li>
<li>不支持 named slot<span class="mojikumi-line-start">（</span>可以用 prop 替代但感觉不是很优雅<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>event handler 不能 <code>count += 1</code> 必须 <code>() => count += 1</code><span class="mojikumi-line-end">。</span></li>
<li>虽然只是个语法糖<span class="mojikumi-line-end">，</span>但似乎没有 <code>v-model</code> 等价物<span class="mojikumi-line-end">。</span></li>
<li>没有 event modifier (<code>@<wbr>click<wbr>.<wbr>stop</code>)<span class="mojikumi-line-end">，</span>需要手动 <code>e<wbr>.<wbr>stopPropagation<wbr>()</code><span class="mojikumi-line-end">。</span></li>
<li>需要用 setter function 来修改 state<span class="mojikumi-line-end">，</span><code>useState</code> 返回两个变量<span class="mojikumi-line-end">。</span></li>
<li>state 是 snapshot<span class="mojikumi-line-end">，</span>反直觉<span class="mojikumi-line-end">。</span>教程里说这样可以避免一些 timing mistake<span class="mojikumi-line-end">，</span>但我感觉在 Vue 里一般只要传值而不是 ref 就行？确实有一定意义但我还是更希望符合直觉<span class="mojikumi-line-end">。</span></li>
<li>修改 object / array state 很麻烦<span class="mojikumi-line-end">，</span>使用 Immer 的话似乎就和 Vue 差不多了<span class="mojikumi-line-end">。</span></li>
<li>state 绑定在树的每个位置上<span class="mojikumi-line-end">，</span>而非存在 component 里<span class="mojikumi-line-end">。</span></li>
<li><code>useMemo</code> 需要手动指定依赖<span class="mojikumi-line-end">，</span><code>computed</code> 不需要<span class="mojikumi-line-end">。</span></li>
</ul><p>本来想把 <code>useEffect</code> 也列出来<span class="mojikumi-line-end">，</span>但 React 的 <a href="https://beta.reactjs.org/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective">这种设计思路</a> 似乎也有一定道理<span class="mojikumi-line-end">。</span></p><p>但当我写出 <code>useEffect<wbr>(() => () => <wbr>clearInterval<wbr>(<wbr>timerRef<wbr>.<wbr>current<wbr>), [])</code> 的时候我还是不明白了<span class="mojikumi-line-end">，</span>这也能<span class="mojikumi-line-start">“</span>从 Effect 的角度思考<span class="mojikumi-line-end">”</span>吗<span class="mojikumi-line-end">，</span>给个 <code>onUnmounted</code> 不好吗<span class="mojikumi-line-end">。</span></p></div></details></aside>
<a id="高情商与低情商" name="高情商与低情商" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>高情商与低情商</span></h4><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>我在群里问了个问题<span class="mojikumi-line-end">，</span>结果助教全都跑来加我好友<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-start">（</span></p><p>那我也不客气了<span class="mojikumi-line-end">，</span>上来就问为什么换成 React<span class="mojikumi-line-end">，</span>bksw<span class="mojikumi-line-start">（</span></p><p><picture><source type="image/webp" srcset="/assets/eq.9ae66d49.webp"><img srcset="/assets/eq.a2547205.png" loading="lazy" src="/assets/eq.a2547205.png" width="383" height="850" alt="和助教的消息记录"></picture></p><p><s>不难看出<span class="mojikumi-line-end">，</span>这里面情商最低的是我</s></p></div></details></aside>
<h3 id="react-next-js-前端小作业" class="heading"><a href="#react-next-js-前端小作业" class="heading-anchor" aria-label="章节： React (Next.js) 前端小作业" tabindex="-1"></a><span>React (Next.js) 前端小作业</span></h3>
<p>上来就看到 ESLint 是 4 空格缩进<span class="mojikumi-line-end">、</span>优先双引号<span class="mojikumi-line-end">，</span>这能忍吗<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">。</span>特意去确认了一下<span class="mojikumi-line-end">，</span>除了前端助教参与的几个项目<span class="mojikumi-line-end">，</span>随便找一个项目都是 2 空格缩进<span class="mojikumi-line-end">、</span>优先单引号<span class="mojikumi-line-start">（</span></p>
<p>再一写代码<span class="mojikumi-line-end">，</span>发现不对劲<span class="mojikumi-line-end">，</span>这个 ESLint 有啥 rule 啊<span class="mojikumi-line-end">，</span>怎么怎么写都没 lint error<span class="mojikumi-line-end">，</span>给我整不会了<span class="mojikumi-line-start">（</span></p>
<p>于是直接上了 <a href="https://github.com/ouuan/eslint-config"><code>@<wbr>ouuan<wbr>/<wbr>eslint<wbr>-<wbr>config<wbr>-<wbr>ts</code></a><span class="mojikumi-line-end">，</span>理论上来说我应该整一个给 tsx 用的 config<span class="mojikumi-line-end">，</span>但 ts 的 config 配合上小作业模板原有的应该也凑合着能用吧<span class="mojikumi-line-start">（</span></p>
<p>写完后的感觉和 Django 小作业差不多<span class="mojikumi-line-end">，</span>React 都白学了<span class="mojikumi-line-end">，</span>啥都不会就能写完<span class="mojikumi-line-start">（</span></p>
<blockquote>
<p>这是你前端小作业的最后一个 Step 了<span class="mojikumi-line-end">，</span>如果你已经完成了<span class="mojikumi-line-end">，</span>我相信你已经充分掌握了 Next.js 的入门知识<span class="mojikumi-line-end">。</span></p>
<p>事实上这份前端小作业几乎可以作为大作业的起始框架<span class="mojikumi-line-end">。</span>除了 Next.js 框架本身<span class="mojikumi-line-end">，</span>其包含了<span class="mojikumi-line-end">：</span></p>
<ul>
<li>代码风格检查与修正插件 ESLint<span class="mojikumi-line-end">，</span>配置文件为 <code>.<wbr>eslintrc<wbr>.<wbr>json</code></li>
<li>单元测试框架 Jest</li>
</ul>
</blockquote>
<p>不是<span class="mojikumi-line-end">，</span>你是认真的吗<span class="mojikumi-line-end">，</span>先不谈学会多少能算是<span class="mojikumi-line-start">《</span>充分掌握了入门知识<span class="mojikumi">》</span><span class="mojikumi-line-end">，</span>这个 eslintrc 真的能用吗<span class="mojikumi-line-start">（</span></p>
<p>第二天早上起来再看了下代码<span class="mojikumi-line-end">，</span>发现组件 unmount 时没有 <code>clearInterval</code><span class="mojikumi-line-end">，</span>而这需要在允许<span class="mojikumi-line-start">（</span>推荐<span class="mojikumi-line-end">）</span>的代码范围之外进行修改<span class="mojikumi-line-end">，</span>怎么回事<span class="mojikumi-line-start">（</span></p>
<p>网络请求也是<span class="mojikumi-line-end">，</span>unmount 时没有 abort / ignore<span class="mojikumi-line-end">，</span>但要改的话交互逻辑也会有些变化<span class="mojikumi-line-end">，</span>就懒得修了<span class="mojikumi-line-end">，</span>一个简陋的小作业而已<span class="mojikumi-line-start">（</span></p>
<h3 id="cicd-小作业" class="heading"><a href="#cicd-小作业" class="heading-anchor" aria-label="章节： CI/CD 小作业" tabindex="-1"></a><span>CI/CD 小作业</span></h3>
<p><a href="https://tuna.moe/event/2023/welcome-and-ipsec/">前一天的 Power TUNA</a> 上还有人问为什么 TUNA 有很多海外流量<span class="mojikumi-line-end">，</span>第二天就看到了在 Dockerfile 里硬编码 TUNA<span class="mojikumi-line-start">（</span></p>
<h3 id="为子目录设置-commit-邮箱" class="heading"><a href="#为子目录设置-commit-邮箱" class="heading-anchor" aria-label="章节： 为子目录设置 commit 邮箱" tabindex="-1"></a><span>为子目录设置 commit 邮箱</span></h3>
<p>作业经常会需要<span class="mojikumi-line-start">（</span>或者说最好需要<span class="mojikumi-line-end">）</span>使用一些与平时不同的 commit 邮箱<span class="mojikumi-line-end">，</span>而 SECoder 的邮箱验证似乎还坏了<span class="mojikumi-line-end">，</span>就更需要了<span class="mojikumi-line-end">。</span></p>
<p>以前碰到这种需求我都在每个 repo 设 local git config<span class="mojikumi-line-end">，</span>但在软工可能有好几个 repo<span class="mojikumi-line-end">，</span>不仅麻烦而且可能忘记<span class="mojikumi-line-end">，</span>就需要更好的解决方案<span class="mojikumi-line-end">。</span></p>
<p>其实简单搜一下就很容易搜到<span class="mojikumi-line-end">，</span>毕竟这是个很常见的需求<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>在 <code>~/.<wbr>gitconfig</code> 中添加</p>
<section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h4><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">[includeIf &quot;gitdir:~/some/path/**&quot;]</span></span>
<span><span style="color: #d6deeb">    path = ~/some/path/.gitconfig</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">[includeIf &quot;gitdir:~/some/path/**&quot;]</span></span>
<span><span style="color: #403f53">    path = ~/some/path/.gitconfig</span></span></samp></pre></div></section>
</li>
<li>
<p>在 <code>~/<wbr>some<wbr>/<wbr>path<wbr>/.<wbr>gitconfig</code> 中添加</p>
<section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h4><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">[user]</span></span>
<span><span style="color: #d6deeb">    email = 2021000000@secoder.net</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">[user]</span></span>
<span><span style="color: #403f53">    email = 2021000000@secoder.net</span></span></samp></pre></div></section>
</li>
</ul>
<h3 id="小作业的一些锅" class="heading"><a href="#小作业的一些锅" class="heading-anchor" aria-label="章节： 小作业的一些锅" tabindex="-1"></a><span>小作业的一些锅</span></h3>
<p>deploy 之后发现一堆锅<span class="mojikumi-line-end">，</span>它们不影响我的小作业得分<span class="mojikumi-line-end">，</span>只会影响我能不能交上数学课作业<span class="mojikumi-line-end">，</span>但我还是修了<span class="mojikumi-line-end">，</span>数学课作业则是没写完就交了<span class="mojikumi-line-start">（</span></p>
<p>说到这就得怀念程设训练了<span class="mojikumi-line-end">，</span>还有 5 分的<span class="mojikumi-line-start">“</span>课堂参与<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>额外加在 100 分之外<span class="mojikumi-line-end">，</span>回答几个同学的提问<span class="mojikumi-line-end">、</span>开一些 issue 帮忙修锅就拿满了<span class="mojikumi-line-end">，</span><s>虽然最后这 5 分对 A+ 毫无帮助<span class="mojikumi-line-end">，</span>要是能移到软工就好了</s><span class="mojikumi-line-end">。</span></p>
<h4 id="next-js-static-html-export-有-dynamic-route-时报错" class="heading"><a href="#next-js-static-html-export-有-dynamic-route-时报错" class="heading-anchor" aria-label="章节： Next.js static HTML export 有 dynamic route 时报错" tabindex="-1"></a><span>Next.js static HTML export 有 dynamic route 时报错</span></h4>
<p>在 Next.js 13.0.7 之前<span class="mojikumi-line-end">，</span>具体来说是 <a href="https://github.com/vercel/next.js/releases/tag/v13.0.7-canary.5">13.0.7-canary.5</a> 之前<span class="mojikumi-line-end">，</span>通过 <code>next export</code> 得到 static HTML export 后<span class="mojikumi-line-end">，</span>如果访问一个能匹配上 dynamic route 的 static route<span class="mojikumi-line-end">，</span>会报<span class="mojikumi-line-start">“</span>Application error: a client-side exception has occurred<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>有 <code>pages<wbr>/[<wbr>id<wbr>].<wbr>tsx</code> 和 <code>pages<wbr>/<wbr>list<wbr>.<wbr>tsx</code> 时<span class="mojikumi-line-end">，</span>访问 <code>/list.html</code> 就会报错<span class="mojikumi-line-end">。</span></p>
<p>简单看了一下这个版本的 changelog<span class="mojikumi-line-end">，</span>有几个疑似和这个 bug 相关的<span class="mojikumi-line-end">，</span>但我没能确认具体是哪个<span class="mojikumi-line-end">。</span>本来想在本地 build Next.js 来进一步确认<span class="mojikumi-line-end">，</span>但我一 build 就报一万个类型错误<span class="mojikumi-line-end">，</span>搞了半天也没搞好<span class="mojikumi-line-end">，</span>就放弃了<span class="mojikumi-line-end">。</span>反正 bump 一下就修好了<span class="mojikumi-line-end">，</span><s>开课前为啥不 bump 一下啊</s><span class="mojikumi-line-end">。</span></p>
<h4 id="next-js-static-html-export-的-nginx-路由配置" class="heading"><a href="#next-js-static-html-export-的-nginx-路由配置" class="heading-anchor" aria-label="章节： Next.js static HTML export 的 Nginx 路由配置" tabindex="-1"></a><span>Next.js static HTML export 的 Nginx 路由配置</span></h4>
<p>感觉网上搜到的一些 Nginx 路由配置都很迷惑<span class="mojikumi-line-end">：</span><code>$uri</code> 是匹配不到 HTML 文件的<span class="mojikumi-line-end">，</span>需要 <code>$uri.html</code><span class="mojikumi-line-end">；</span><code>$uri/</code> 则可能匹配到目录<span class="mojikumi-line-end">，</span>导致 403<span class="mojikumi-line-end">；</span>动态路由如果不专门写路由配置的话<span class="mojikumi-line-end">，</span>就不能直接访问到正确的 HTML<span class="mojikumi-line-end">，</span>static HTML export 的作用就没有了<span class="mojikumi-line-end">，</span>而且<span class="mojikumi-line-end">，</span>fallback 到 <code>/<wbr>index<wbr>.<wbr>html</code> 可能导致加载一些不需要的页面内容和 JS<span class="mojikumi-line-end">，</span>实际上比直接 SPA 更劣<span class="mojikumi-line-end">。</span></p>
<h4 id="用户名格式检查" class="heading"><a href="#用户名格式检查" class="heading-anchor" aria-label="章节： 用户名格式检查" tabindex="-1"></a><span>用户名格式检查</span></h4>
<p>说来惭愧<span class="mojikumi-line-end">，</span>我一开始也没意识到用户名没校验格式的问题<span class="mojikumi-line-end">，</span>还是配路由的时候才想到用户名里会不会有 slash<span class="mojikumi-line-end">。</span></p>
<p>现在要修的话确实麻烦<span class="mojikumi-line-end">，</span>所以只要归结为<span class="mojikumi-line-start">《</span>由于小作业的简化<span class="mojikumi-line-end">》</span>就好了<span class="mojikumi-line-start">（</span></p>
<h4 id="忘记关测试用-docker-container" class="heading"><a href="#忘记关测试用-docker-container" class="heading-anchor" aria-label="章节： 忘记关测试用 Docker container" tabindex="-1"></a><span><s>忘记关测试用 Docker container</s></span></h4>
<p>第二天早上起来一看<span class="mojikumi-line-end">，</span>Plausible 特别卡<span class="mojikumi-line-end">，</span>再一看<span class="mojikumi-line-end">，</span>load avg 都快两位数了<span class="mojikumi-line-end">，</span>原来是在 VPS 上测试后端部署忘关了 🌚 不要随便在生产环境顺便测小作业<span class="mojikumi-line-start">（</span></p>
<h3 id="玩小作业" class="heading"><a href="#玩小作业" class="heading-anchor" aria-label="章节： 玩小作业" tabindex="-1"></a><span>玩小作业</span></h3>
<p>把 game of life 当成冬日绘板画画<span class="mojikumi-line-end">，</span>动态更新时钟<span class="mojikumi-line-end">，</span>从 LifeWiki 获取随机 pattern<span class="mojikumi-line-end">，</span>这是一个作业写不完的人能干的出来的吗<span class="mojikumi-line-end">，</span>共享后端是这样用的吗<span class="mojikumi-line-start">（</span></p>
<p>第二天早上起来一看<span class="mojikumi-line-start">（</span><s>怎么每段都有个第二天早上起来</s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>大家都在画些啥<span class="mojikumi-line-end">，</span>我还是太保守了<span class="mojikumi-line-start">（</span></p>
<h3 id="回答同学提问" class="heading"><a href="#回答同学提问" class="heading-anchor" aria-label="章节： 回答同学提问" tabindex="-1"></a><span>回答同学提问</span></h3>
<p>软工的公开提问貌似只能在微信群<span class="mojikumi-line-end">，</span>而且助教有十几个<span class="mojikumi-line-end">，</span>回复速度实在是太快了<span class="mojikumi-line-end">。</span>程设训练的时候我还能偶尔抢在助教之前回答问题<span class="mojikumi-line-end">，</span>现在根本做不到<span class="mojikumi-line-start">（</span></p>
<h3 id="偷窥同学代码" class="heading"><a href="#偷窥同学代码" class="heading-anchor" aria-label="章节： 偷窥同学代码" tabindex="-1"></a><span>偷窥同学代码</span></h3>
<p>偶然间发现 SonarQube 上可以看到同学的代码<span class="mojikumi-line-end">，</span>因为我的小作业已经交了而且分都给了<span class="mojikumi-line-end">，</span>所以我就放心大胆地偷窥了<span class="mojikumi-line-start">（</span></p>
<p>本来想给助教报告一下问题等权限修复<span class="mojikumi-line-end">，</span>结果说是懒得修了<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">《</span>希望没多少人发现<span class="mojikumi">》</span><span class="mojikumi-line-end">，</span><s>导致我甚至不能在迟交 ddl 之前在博客吐槽</s><span class="mojikumi-line-start">（</span>要是下学期还不修<span class="mojikumi-line-end">，</span>大家都学会了这个操作<span class="mojikumi-line-end">，</span>那只能说不是我的锅了<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>那我只好趁机来认真看一看同学们都写了一些什么奇妙代码<span class="mojikumi-line-start">（</span></p>
<ul>
<li>
<p>冗余的类型标注<span class="mojikumi-line-start">（</span>看到文档里讲 TS 的时候举例全是冗余类型标注时<span class="mojikumi-line-end">，</span>我就知道同学们肯定会写一万个 <code>let count: number = 0</code><span class="mojikumi-line-end">）</span></p>
</li>
<li>
<p>只需条件修改 prop 时<span class="mojikumi-line-end">，</span>条件渲染 prop 不同的两个组件</p>
</li>
<li>
<p>手写八遍而不是使用 <code>for</code> 来遍历网格的邻居</p>
</li>
<li>
<p>更新 React state 时即使结果是常量依然使用回调函数</p>
</li>
<li>
<p>回调函数写成 <code>() => { foo(); }</code> 而不是 <code>foo</code></p>
</li>
<li>
<p>冗余的 <code>flex<wbr>-<wbr>direction<wbr>: <wbr>row</code></p>
</li>
<li>
<p>复制二维数组<span class="mojikumi-line-end">，</span>有看到用 <code>for</code> 一个个 <code>push</code> 的<span class="mojikumi-line-end">，</span>也有看到直接 <code>JSON<wbr>.<wbr>parse<wbr>(<wbr>JSON<wbr>.<wbr>stringify<wbr>)</code> 的<span class="mojikumi-line-end">；</span>正确写法应该是 <code>old<wbr>.<wbr>map<wbr>((<wbr>row<wbr>) => <wbr>row<wbr>.<wbr>slice<wbr>())</code><span class="mojikumi-line-end">。</span>数组大小为 1000x1000 时<span class="mojikumi-line-end">，</span>在 Firefox 中<span class="mojikumi-line-end">，</span>这两种写法的用时都大约是 <code>map</code> &#x26; <code>slice</code> 的 10 倍<span class="mojikumi-line-end">，</span>在 Chrome 中<span class="mojikumi-line-end">，</span>一个个 <code>push</code> 的用时是 <code>map</code> &#x26; <code>slice</code> 的 3 倍<span class="mojikumi-line-end">，</span><code>JSON<wbr>.<wbr>parse<wbr>(<wbr>JSON<wbr>.<wbr>stringify<wbr>)</code> 的用时是 40 倍<span class="mojikumi-line-end">。</span>而且<span class="mojikumi-line-end">，</span>由于小作业中需要的是复制其他所有<span class="mojikumi-line-end">，</span>但修改一个<span class="mojikumi-line-end">，</span>很多同学在 <code>for</code> 里面写 <code>if</code><span class="mojikumi-line-end">，</span>这样效率更低<span class="mojikumi-line-end">，</span>应该把 <code>if</code> 写在 <code>for</code> 外面<span class="mojikumi-line-end">。</span></p>
<p>但是还看到一种写法<span class="mojikumi-line-end">，</span>只深复制修改了的那一行<span class="mojikumi-line-end">，</span>其他行浅复制<span class="mojikumi-line-end">。</span>草<span class="mojikumi-line-end">，</span>这样确实性能更好<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>依赖于效果为 toggle 的按钮不会在 toggle 完成前被点击两次<span class="mojikumi-line-end">：</span></p>
<ul>
<li>问题背景<span class="mojikumi-line-end">：</span>一个 start 按钮和一个 stop 按钮<span class="mojikumi-line-end">，</span>修改一个 <code>playing</code> 的 state<span class="mojikumi-line-end">，</span>处于 playing 状态时需要一个 <code>setInterval</code></li>
<li>问题 1<span class="mojikumi-line-end">：</span>在 start / stop 时将 <code>playing</code> 修改为 <code>!playing</code> 而非 <code>true</code>/<code>false</code></li>
<li>问题 2<span class="mojikumi-line-end">：</span>只在 stop 时 <code>clearInterval</code><span class="mojikumi-line-end">，</span>没有在 start 时 <code>clearInterval</code></li>
</ul>
<p>正常的交互很难做到 toggle 完成前被点击两次<span class="mojikumi-line-end">，</span>基本上只能通过在 console 连续调用两次 <code>click</code> 实现<span class="mojikumi-line-end">，</span>但最好还是不要依赖于这一点<span class="mojikumi-line-end">。</span></p>
</li>
</ul>
<h3 id="node-js-和浏览器的不同-timer" class="heading"><a href="#node-js-和浏览器的不同-timer" class="heading-anchor" aria-label="章节： Node.js 和浏览器的不同 timer" tabindex="-1"></a><span>Node.js 和浏览器的不同 timer</span></h3>
<p>队友问了一个神奇的 bug<span class="mojikumi-line-end">，</span>说是 <code>clearInterval</code> clear 不掉<span class="mojikumi-line-end">，</span>我看了半天都没发现问题<span class="mojikumi-line-end">，</span>最后发现开头有个 <code>import<wbr> { <wbr>setInterval<wbr> } <wbr>from<wbr> '<wbr>timers<wbr>'</code><span class="mojikumi-line-end">。</span></p>
<p>之前还真没注意过<span class="mojikumi-line-end">，</span>timer 有 Node.js 和浏览器两个版本<span class="mojikumi-line-end">，</span>Node.js 的 <code>setInterval</code> 返回的是一个 object<span class="mojikumi-line-end">，</span>浏览器返回的是一个 <code>number</code><span class="mojikumi-line-end">。</span></p>
<ul>
<li>直接写 <code>setInterval</code> 时<span class="mojikumi-line-end">，</span>在 TypeScript 中会被认为返回 <code>NodeJS<wbr>.<wbr>Timer</code><span class="mojikumi-line-end">，</span>而实际运行时在哪运行就用哪个版本的函数<span class="mojikumi-line-end">。</span></li>
<li>如果写的是 <code>window<wbr>.<wbr>setInterval</code><span class="mojikumi-line-end">，</span>在 TypeScript 中会被认为返回 <code>number</code><span class="mojikumi-line-end">，</span>在 Node.js 中运行会报错<span class="mojikumi-line-end">。</span></li>
<li>如果是 <code>import<wbr> { <wbr>setInterval<wbr> } <wbr>from<wbr> '<wbr>timers<wbr>'</code><span class="mojikumi-line-end">，</span>即使是在浏览器中运行也会使用 Node.js 版本的函数<span class="mojikumi-line-end">。</span></li>
</ul>
<p>这里比较重要的是 <code>setInterval</code> 和 <code>clearInterval</code> 要配套<span class="mojikumi-line-end">，</span>不能一个用 Node.js 的一个用浏览器的<span class="mojikumi-line-end">，</span>否则会 clear 不掉甚至报错<span class="mojikumi-line-end">。</span></p>
<p>一般来说直接写<span class="mojikumi-line-start">（</span>不 <code>window.</code> 也不 <code>import from 'timers'</code><span class="mojikumi-line-end">）</span>就是最好的<span class="mojikumi-line-end">，</span>虽然看起来 TypeScript 会将 <code>number</code> 误认为是 <code>NodeJS<wbr>.<wbr>Timer</code><span class="mojikumi-line-end">，</span>但这个 <code>number</code> 本来就不该被当作一个 <code>number</code> 来使用<span class="mojikumi-line-end">，</span>这样的 typing 反而是好的<span class="mojikumi-line-end">。</span></p>
<p>这里如果再仔细研究一下可以单独写一篇博客了<span class="mojikumi-line-end">，</span>但还是算了吧<span class="mojikumi-line-start">（</span></p>
<h3 id="小作业即将截止" class="heading"><a href="#小作业即将截止" class="heading-anchor" aria-label="章节： 小作业即将截止" tabindex="-1"></a><span>小作业即将截止</span></h3>
<blockquote>
<p>小作业 将于 3 月 16 日<span class="mojikumi-line-start">（</span>周四<span class="mojikumi-line-end">）</span>23:59 截止<span class="mojikumi-line-end">。</span></p>
<p>请注意截止时间不是 21:55<span class="mojikumi-line-end">。</span></p>
<p>……</p>
</blockquote>
<p>后面省略的几句也是模仿的 DSA<span class="mojikumi-line-end">，</span><s>DNS</s> <span class="heimu">前几天某位助教答疑的时候把 dns typo 成了 dna</span> DNA 动了<span class="mojikumi-line-end">，</span>好评<span class="mojikumi-line-end">，</span>但开头这个对偶的 ddl 绷不住了<span class="mojikumi-line-start">（</span></p>
<h2 id="大作业" class="heading"><a href="#大作业" class="heading-anchor" aria-label="章节： 大作业" tabindex="-1"></a><span>大作业</span></h2>
<h3 id="组队" class="heading"><a href="#组队" class="heading-anchor" aria-label="章节： 组队" tabindex="-1"></a><span>组队</span></h3>
<p>在另外一个通识课上体验了一下差点没组上队<span class="mojikumi-line-start">（</span>虽然后来得知还有不少人比我更晚组上队<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>最后完全 rand 组队<span class="mojikumi-line-end">。</span>所以真的很感谢上学期就找我来组队的队友<span class="mojikumi-line-end">。</span></p>
<h3 id="起队名" class="heading"><a href="#起队名" class="heading-anchor" aria-label="章节： 起队名" tabindex="-1"></a><span>起队名</span></h3>
<blockquote>
<p>HardToName / 起个名好难队</p>
</blockquote>
<p><s>这是什么引用啊</s></p>
<p>队友提出了三个队名<span class="mojikumi-line-end">：</span>啊对对队<span class="mojikumi-line-end">、</span>BUG 全调队<span class="mojikumi-line-end">、</span>[redacted] 队<span class="mojikumi-line-end">。</span>前两个都被占了<span class="mojikumi-line-end">，</span>后一个太魔幻了<span class="mojikumi-line-end">，</span>于是最后还是用的我提出的队名<span class="mojikumi-line-end">：</span>lazy / 这个队特别懒<span class="mojikumi-line-end">，</span>什么都没留下~</p>
<p><span class="mojikumi-line-start">（</span>这 SECoder 怎么还在用这个很有年代感的个人描述 placeholder 啊<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/lazy-placeholder.65e936a3.webp"><img srcset="/assets/lazy-placeholder.aba50ccc.png" loading="lazy" src="/assets/lazy-placeholder.aba50ccc.png" width="1873" height="597" alt="学生列表，满屏都是“这个人特别懒，什么都没留下~”"></picture></p>
<p>俗话说得好<span class="mojikumi-line-end">，</span>贱名好养活<span class="mojikumi-line-end">，</span><s>取名叫 lazy 一定摆不起来<span class="mojikumi-line-start">（</span></s></p>
<p>其实本来还想过利用五个人的名字缩写之类的组一个队名<span class="mojikumi-line-end">，</span>但人脑去想一个符合要求且有意思的队名太难了<span class="mojikumi-line-end">，</span>输入法给出的候选词也没啥意思<span class="mojikumi-line-end">，</span>所以我还尝试了用 ChatGPT 来生成<span class="mojikumi-line-end">，</span>本来只是以为它会生成一些没意思的队名<span class="mojikumi-line-end">，</span>没想到它生成出来的队名不仅没意思<span class="mojikumi-line-end">，</span>而且拼音首字母甚至字数都完全不符合要求<span class="mojikumi-line-end">，</span>无论怎么拷打都认错不改 🌚</p>
<h3 id="分工-技术栈" class="heading"><a href="#分工-技术栈" class="heading-anchor" aria-label="章节： 分工 &#x26; 技术栈" tabindex="-1"></a><span>分工 &#x26; 技术栈</span></h3>
<p>听说代码可能要求有队友审核<span class="mojikumi-line-end">，</span>所以放弃了一个人写前端<span class="mojikumi-line-start">（</span>可能来个人写测试<span class="mojikumi-line-end">）</span>的想法<span class="mojikumi-line-start">（</span></p>
<p>几乎是理所当然地就决定了用 Vue<span class="mojikumi-line-end">，</span>没有一点反对<span class="mojikumi-line-end">，</span>感觉这个不需要学 React 的 React 小作业<s>没有九分也有十分的功劳</s><span class="mojikumi-line-end">。</span></p>
<p>给队友布置学习任务的时候感觉<span class="mojikumi-line-end">，</span>我好像也不会多少东西<span class="mojikumi-line-end">，</span>像是前端的测试以及 Nuxt 都还得学<span class="mojikumi-line-end">，</span>JS/TS/Vue 说到底也就那么点东西<span class="mojikumi-line-end">，</span>我的优势可能主要还是在经验方面<span class="mojikumi-line-end">，</span>但其实也没写过什么复杂的前后端交互<span class="mojikumi-line-end">，</span>大作业和博客 / Codle 这种东西还是差别挺大<span class="mojikumi-line-end">，</span>写这个博客的时候很多时间也是花在一些 blog-specific 的不重要的细节上<span class="mojikumi-line-end">。</span><s>说的我都有点慌了<span class="mojikumi-line-start">（</span></s></p>
<p><a href="https://archive.ph/6o0gs">咕了一周</a>的 Nuxt 3.3 终于在大作业开始前发出来了<span class="mojikumi-line-end">，</span>避免了刚开始写不久就要 bump minor version<span class="mojikumi-line-end">。</span>yysy 我选的这些技术栈还是挺最新最热的<span class="mojikumi-line-end">，</span><s>要是真的出锅了都不知道怎么向队友交代<span class="mojikumi-line-start">（</span></s></p>
<p>紧接着就看到 TypeScript 5.0 也发了<span class="mojikumi-line-end">，</span>更新更热了<span class="mojikumi-line-end">，</span>害怕<span class="mojikumi-line-start">（</span></p>
<h3 id="摇号" class="heading"><a href="#摇号" class="heading-anchor" aria-label="章节： 摇号" tabindex="-1"></a><span>摇号</span></h3>
<blockquote>
<p>3月14日24:00后进行项目志愿的摇号</p>
</blockquote>
<p>结果还真是<span class="mojikumi-line-start">“</span>24:00<strong>后</strong><span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>手动 ddl 🌚</p>
<p>本来晚上 11 点还看到我们队的一志愿的一志愿数量从 7 变成了 6<span class="mojikumi-line-end">，</span>就是 2/3 的概率抽上<span class="mojikumi-line-end">，</span>结果早上起来一看还是掉了<span class="mojikumi-line-end">，</span>寄<span class="mojikumi-line-end">。</span>这下和不是队友的室友一个选题了<span class="mojikumi-line-end">。</span>好在例会还是 4-3<span class="mojikumi-line-end">，</span>要是 4-4 的话整个下午就消失了<span class="mojikumi-line-start">（</span></p>
<h3 id="大例会-1" class="heading"><a href="#大例会-1" class="heading-anchor" aria-label="章节： 大例会 1" tabindex="-1"></a><span>大例会 1</span></h3>
<p>第一次例会竟然就要写分工以及完整的进度安排<span class="mojikumi-line-end">，</span>虽然说是随便画饼也没事<span class="mojikumi-line-end">，</span>但还是感觉不太敏捷<span class="mojikumi-line-start">（</span></p>
<p>顺便练习了一下 <a href="https://sli.dev/">Slidev</a><span class="mojikumi-line-end">，</span>在本机莫名 export 失败了<span class="mojikumi-line-end">，</span>结果扔到 VPS 上就成功了<span class="mojikumi-line-end">，</span>神秘<span class="mojikumi-line-end">。</span>但在 VPS 上还得装上中文字体<span class="mojikumi-line-end">，</span>并且配字体设置<span class="mojikumi-line-end">。</span></p>
<p>无奖竞猜<span class="mojikumi-line-end">，</span>下面这些队名都是啥<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span></p>
<blockquote>
<p>下午的展示顺序是</p>
<ol start="0">
<li>我</li>
<li>蛋白质</li>
<li>迷</li>
<li>对对对</li>
<li>懒</li>
</ol>
</blockquote>
<a id="答案" name="答案" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>答案</span></h4><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f><s>给你一次再想一想的机会</s></span></h5><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><ol>
<li>青蛙补充蛋白质</li>
<li>迷失分析LAS</li>
<li>阿对对队</li>
<li>这个队特别懒<span class="mojikumi-line-end">，</span>什么都没留下~</li>
</ol></div></details></aside></div></details></aside>
<p>感觉这个第一次例会总体上传达的意思就是<span class="mojikumi-line-end">，</span>看起来难的功能要想简单点<span class="mojikumi-line-end">，</span>差不多得了<span class="mojikumi-line-start">（</span></p>
<h3 id="大作业第一周" class="heading"><a href="#大作业第一周" class="heading-anchor" aria-label="章节： 大作业第一周" tabindex="-1"></a><span>大作业第一周</span></h3>
<h4 id="需求细化" class="heading"><a href="#需求细化" class="heading-anchor" aria-label="章节： 需求细化" tabindex="-1"></a><span>需求细化</span></h4>
<p>第一次例会上是我提的问题最多<span class="mojikumi-line-end">，</span>之后也基本上只有我在群里问需求细节问题<span class="mojikumi-line-end">。</span>回答大部分都是两种之一<span class="mojikumi-line-end">，</span>要么是<span class="mojikumi-line-start">“</span>这样也可以<span class="mojikumi-line-end">，</span>但那样也可以<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>要么是<span class="mojikumi-line-start">“</span>这样更好<span class="mojikumi-line-end">，</span>但没分<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>程设训练的时候也是这样<span class="mojikumi-line-end">，</span>似乎是我的问题<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>正常的想法是不是应该是只要不说清楚就可以混过去<span class="mojikumi-line-end">，</span>而不是害怕没搞清楚而写错<span class="mojikumi-line-start">（</span></p>
<h4 id="四个阶段" class="heading"><a href="#四个阶段" class="heading-anchor" aria-label="章节： 四个阶段" tabindex="-1"></a><span>四个阶段</span></h4>
<p>第一周总体上分成四个阶段<span class="mojikumi-line-end">：</span></p>
<ol>
<li>设计任务计划<span class="mojikumi-line-end">，</span>编写让队友知道要干什么的文档和 issue</li>
<li>ping &#x26; push 队友</li>
<li>回答队友提问 &#x26; 指出队友代码里的问题</li>
<li>马上就要例会了<span class="mojikumi-line-end">，</span>放弃指导队友<span class="mojikumi-line-end">，</span>上手自己写<span class="mojikumi-line-start">（</span></li>
</ol>
<p>感觉最后总的工作量还是超过了自己一个人把所有活干完<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>希望以后能好一点<span class="mojikumi-line-end">，</span>要一直是这样其他课真寄了<span class="mojikumi-line-end">。</span>而且我本来就没打算管后端<span class="mojikumi-line-end">，</span>就没学 Django<span class="mojikumi-line-end">，</span>结果不仅要搞一点后端的规划设计<span class="mojikumi-line-end">，</span>回答队友提问<span class="mojikumi-line-end">，</span>还得赶着 ddl 硬上写代码<span class="mojikumi-line-end">，</span>开发环境都没配好<span class="mojikumi-line-end">。</span></p>
<h4 id="数据库配置" class="heading"><a href="#数据库配置" class="heading-anchor" aria-label="章节： 数据库配置" tabindex="-1"></a><span>数据库配置</span></h4>
<p>你见过只能挂载目录<span class="mojikumi-line-end">，</span>不能设置环境变量<span class="mojikumi-line-end">，</span>也不能挂载单个文件的 Docker 容器管理吗<span class="mojikumi-line-start">（</span></p>
<p>这个 SECoder 实在是有些过于离谱<span class="mojikumi-line-end">，</span>最后只能把环境变量写在 Dockerfile 里<span class="mojikumi-line-end">，</span>用 build 出来的数据库镜像<span class="mojikumi-line-end">。</span></p>
<h4 id="小例会-1" class="heading"><a href="#小例会-1" class="heading-anchor" aria-label="章节： 小例会 1" tabindex="-1"></a><span>小例会 1</span></h4>
<p>主要就是聊了一下数据库和 API 的设计<span class="mojikumi-line-end">，</span>也没检查 CI/CD<span class="mojikumi-line-end">，</span>结束之后才想起来架构设计也没说<span class="mojikumi-line-end">。</span>毕竟是小例会<span class="mojikumi-line-end">，</span>确实比较轻松<span class="mojikumi-line-end">，</span>感觉上午白着急把数据库跑起来了<span class="mojikumi-line-start">（</span></p>
<h3 id="大作业第二周" class="heading"><a href="#大作业第二周" class="heading-anchor" aria-label="章节： 大作业第二周" tabindex="-1"></a><span>大作业第二周</span></h3>
<h4 id="secoder-ssh-卡住" class="heading"><a href="#secoder-ssh-卡住" class="heading-anchor" aria-label="章节： SECoder SSH 卡住" tabindex="-1"></a><span>SECoder SSH 卡住</span></h4>
<p>之前就偶尔碰到 SECoder SSH 卡住的情况<span class="mojikumi-line-end">，</span>今天发现是回了寝室连有线网就卡住<span class="mojikumi-line-end">，</span>换成 Tsinghua Secure 就不卡了<span class="mojikumi-line-end">，</span>怀疑和 IP 切换有关<span class="mojikumi-line-end">，</span>不是很懂<span class="mojikumi-line-end">。</span></p>
<h4 id="nuxt-与-typescript-5-0" class="heading"><a href="#nuxt-与-typescript-5-0" class="heading-anchor" aria-label="章节： Nuxt 与 TypeScript 5.0" tabindex="-1"></a><span>Nuxt 与 TypeScript 5.0</span></h4>
<p>之前还说有点太新太热了<span class="mojikumi-line-end">，</span>果然一堆锅<span class="mojikumi-line-end">。</span></p>
<p>之前一直随机报错 <code>The "path" argument must be of type string. Received an instance of Array</code><span class="mojikumi-line-end">，</span>后来发现是我直接用了最新最热的 <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#supporting-multiple-configuration-files-in-extends">tsconfig 里 <code>extends</code> 写数组</a><span class="mojikumi-line-end">，</span>然后 Nuxt 读取 tsconfig 的时候寄了<span class="mojikumi-line-end">。</span>改成单个 <code>extends</code> 或者把 Nuxt 更新到 edge channel 就 ok 了<span class="mojikumi-line-end">。</span></p>
<p>另外还碰到 <a href="https://github.com/nuxt/nuxt/issues/15113">一个 bug</a><span class="mojikumi-line-end">，</span>只能把路径改成英文<span class="mojikumi-line-end">。</span></p>
<h4 id="npmmirror-更新不及时" class="heading"><a href="#npmmirror-更新不及时" class="heading-anchor" aria-label="章节： npmmirror 更新不及时" tabindex="-1"></a><span>npmmirror 更新不及时</span></h4>
<p>CI 挂在了奇怪的地方<span class="mojikumi-line-end">，</span>是 npmmirror 更新不及时<span class="mojikumi-line-end">，</span>一个刚更新几分钟的包下不下来<span class="mojikumi-line-end">。</span>npmmirror 的首页写的是每 10min 更新一次<span class="mojikumi-line-end">，</span>但我等了它半小时还没更新<span class="mojikumi-line-end">。</span>然后看到 npmmirror 上每个包的页面上有一个<span class="mojikumi-line-start">“</span>SYNC<span class="mojikumi-line-end">”</span>按钮<span class="mojikumi-line-end">，</span>点一下就可以更新<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-start">（</span></p>
<h4 id="pnpm-v8" class="heading"><a href="#pnpm-v8" class="heading-anchor" aria-label="章节： pnpm v8" tabindex="-1"></a><span>pnpm v8</span></h4>
<p>感觉这个软工就和最新最热扯不开关系了<span class="mojikumi-line-start">（</span></p>
<p>碰到一个非常神秘的<span class="mojikumi-line-end">，</span>一个 up-to-date with master 的 MR 在合并之后挂 CI<span class="mojikumi-line-end">，</span>说是 lock file 有问题<span class="mojikumi-line-end">。</span>本来我都没想管了<span class="mojikumi-line-end">，</span>结果晚上发现博客也挂 CI 了<span class="mojikumi-line-end">，</span>再一看<span class="mojikumi-line-end">，</span>原来是 pnpm 发布 v8 了<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-end">。</span></p>
<h4 id="nuxt-dev-报错-“body-is-unusable”" class="heading"><a href="#nuxt-dev-报错-“body-is-unusable”" class="heading-anchor" aria-label="章节： nuxt dev 报错 “Body is unusable”" tabindex="-1"></a><span>nuxt dev 报错 <span class="mojikumi">“</span>Body is unusable<span class="mojikumi-line-end">”</span></span></h4>
<p><a href="https://github.com/nuxt/nuxt/issues/19245">Body is unusable (undici) · Issue #19245 · nuxt/nuxt</a> 是一个非常玄学的 issue<span class="mojikumi-line-end">，</span>我在部署到 SECoder 的时候遇到了<span class="mojikumi-line-end">，</span>队友在 WSL2 上遇到了<span class="mojikumi-line-end">，</span>但我在本地<span class="mojikumi-line-start">（</span>Arch Linux<span class="mojikumi-line-end">）</span>没遇到过<span class="mojikumi-line-end">。</span>我让队友试着在 Docker 里跑 dev<span class="mojikumi-line-end">，</span>似乎和 issue 里描述的一样<span class="mojikumi-line-end">，</span>偶尔会遇到<span class="mojikumi-line-end">，</span>但重试一下就好了<span class="mojikumi-line-end">；</span>而且 WSL2 里加载非常慢<span class="mojikumi-line-end">，</span>直接在 Windows 上运行 Docker 会快很多<span class="mojikumi-line-end">。</span></p>
<p>HMR 需要 WebSocket<span class="mojikumi-line-end">，</span>于是在 Docker 里跑 dev 的时候发现 Vite 默认的 ws 端口是 24678<span class="mojikumi-line-end">，</span>唤醒了一些远古的回忆<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">；</span>结果去搜索引擎确认 <s>自己的 DNA 没有刻错</s> 的时候搜到的全是<span class="mojikumi-line-start">“</span>原神<span class="mojikumi-line-start">‘</span>港口驶过几艘船<span class="mojikumi-line-end">，</span>二四六七八<span class="mojikumi-line-end">’</span>任务攻略<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>绷不住了<span class="mojikumi-line-start">（</span></p>
<h4 id="大例会-2" class="heading"><a href="#大例会-2" class="heading-anchor" aria-label="章节： 大例会 2" tabindex="-1"></a><span>大例会 2</span></h4>
<p>例会前 CI 一直在排长队<span class="mojikumi-line-end">，</span>一开始还只用多等一会儿<span class="mojikumi-line-end">，</span>后来甚至会等待超时而直接挂掉<span class="mojikumi-line-end">，</span>差点没部署上<span class="mojikumi-line-start">（</span></p>
<p>最后发现我们部署的 dev 环境可用 prod 环境不可用<span class="mojikumi-line-end">，</span>直接用的 dev 环境做演示<span class="mojikumi-line-end">，</span>没人问为什么地址里有个 dev<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">；</span>后来发现确实是暴力改掉 migration 后数据库没重启的问题<span class="mojikumi-line-end">，</span>但我是一开始试图重启了但还是挂<span class="mojikumi-line-end">，</span>以为是其他问题<span class="mojikumi-line-end">，</span>但实际上是 SECoder 的容器重启需要等待<span class="mojikumi-line-end">，</span>而且不知道为什么有时候等好久也没重启成功<span class="mojikumi-line-end">，</span>非常玄学<span class="mojikumi-line-end">。</span></p>
<p>其他队都看上去做了很多功能<span class="mojikumi-line-end">，</span>我们能演示的只有注册登录<span class="mojikumi-line-end">。</span>虽然我们的注册登录确实相对来说更加完善<span class="mojikumi-line-end">，</span>而其他队的其他功能也一堆问题<span class="mojikumi-line-end">，</span>但感觉在差不多得了的氛围下<span class="mojikumi-line-end">，</span>似乎还是赶上进度更重要<span class="mojikumi-line-end">。</span></p>
<h3 id="大作业第三周" class="heading"><a href="#大作业第三周" class="heading-anchor" aria-label="章节： 大作业第三周" tabindex="-1"></a><span>大作业第三周</span></h3>
<h4 id="nitro-proxy-与-set-cookie" class="heading"><a href="#nitro-proxy-与-set-cookie" class="heading-anchor" aria-label="章节： Nitro proxy 与 set-cookie" tabindex="-1"></a><span>Nitro proxy 与 set-cookie</span></h4>
<p>说来实在是绷不住<span class="mojikumi-line-end">。</span></p>
<p>我在一个未登录时返回 403 的 API 设置 CSRF cookie<span class="mojikumi-line-end">，</span>在前后端对接测试时发现这个 <code>set-cookie</code> 在经过前端 proxy 之后就没了<span class="mojikumi-line-end">，</span>于是我以为是 Nitro 的 proxy 不转发 <code>set-cookie</code><span class="mojikumi-line-end">，</span>又马上要例会了<span class="mojikumi-line-end">，</span>就赶紧换成了 Nginx 反代<span class="mojikumi-line-end">。</span></p>
<p>例会结束后<span class="mojikumi-line-end">，</span>我从 Nitro 源码翻到 h3 源码<span class="mojikumi-line-end">，</span>再翻到 undici 的 issue<span class="mojikumi-line-end">，</span>发现 <a href="https://github.com/nodejs/undici/issues/1262">Undici strips out set-cookie headers, even when "credentials: 'include'" is set</a><span class="mojikumi-line-end">，</span>又用 <a href="https://httpbin.org/cookies/set/cookie/test">https://httpbin.org/cookies/set/cookie/test</a> 进行测试发现真的没有 <code>set-cookie</code><span class="mojikumi-line-end">，</span>还以为找到原因了<span class="mojikumi-line-end">。</span>但又发现 <a href="https://github.com/nodejs/undici/pull/1469">feat: remove headers filtering</a><span class="mojikumi-line-end">，</span>感觉很奇怪<span class="mojikumi-line-end">。</span></p>
<p>于是我再仔细看了一下<span class="mojikumi-line-end">，</span>发现 <a href="https://httpbin.org/cookies/set/cookie/test">https://httpbin.org/cookies/set/cookie/test</a> 返回的是 302<span class="mojikumi-line-end">，</span>而重定向之后就没有 <code>set-cookie</code> 了<span class="mojikumi-line-end">。</span>而一开始那个 API 没有返回 <code>set-cookie</code> 则是因为它返回的不是 200<span class="mojikumi-line-end">，</span>改成 200 就正常了<span class="mojikumi-line-end">。</span>但凡我测试了一个返回 200 的也不至于..</p>
<p>上午因为这个问题差点没在例会前部署好<span class="mojikumi-line-end">，</span>例会后一直研究到晚上<span class="mojikumi-line-end">，</span>几乎是搞了一整天<span class="mojikumi-line-end">，</span>破防了<span class="mojikumi-line-start">（</span></p>
<h4 id="姓游就要用尤大的-vue，yóu-だけにっ！" class="heading"><a href="#姓游就要用尤大的-vue，yóu-だけにっ！" class="heading-anchor" aria-label="章节： 姓游就要用尤大的 Vue，yóu だけにっ！" tabindex="-1"></a><span><s>姓游就要用尤大的 Vue<span class="mojikumi-line-end">，</span>yóu だけにっ！</s></span></h4>
<p>突然发现另一个队长姓游的队也用的 Vue<span class="mojikumi-line-end">，</span>而其他队暂时没发现有用 Vue 的<span class="mojikumi-line-start">（</span>我暂时只找到了 1/4 队伍的域名<span class="mojikumi-line-end">，</span>剩下有找不到的也有懒得找的<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span><s>难道是因为和尤大一样姓 yóu 吗<span class="mojikumi-line-end">，</span>这下<a href="https://zh.moegirl.org.cn/%E5%AE%AB%E4%B8%8B%E7%88%B1"><span class="text-aisan">爱姐</span></a>狂喜了<span class="mojikumi-line-start">（</span></s></p>
<h4 id="undici-发送带-content-length-0-的-delete-请求" class="heading"><a href="#undici-发送带-content-length-0-的-delete-请求" class="heading-anchor" aria-label="章节： undici 发送带 Content-Length: 0 的 DELETE 请求" tabindex="-1"></a><span>undici 发送带 <code>Content<wbr>-<wbr>Length<wbr>: <wbr>0</code> 的 DELETE 请求</span></h4>
<p>这是第 114514 次被 undici 背刺了<span class="mojikumi-line-end">，</span>具体请看 <a href="https://github.com/nodejs/undici/issues/2046">Sending a DELETE request with "Content-Length: 0" fails with a RequestContentLengthMismatchError · Issue #2046 · nodejs/undici</a><span class="mojikumi-line-end">。</span></p>
<p>而这个 <code>Content<wbr>-<wbr>Length<wbr>: <wbr>0</code> 是由已经没在维护的 <a href="https://github.com/http-party/node-http-proxy"><code>http-proxy</code></a> 加上的<span class="mojikumi-line-end">。</span>不知为何<span class="mojikumi-line-end">，</span>甚至不是给其他 method 加 Content-Length 的时候忘记排除 DELETE 了<span class="mojikumi-line-end">，</span>而是专门给 DELETE 加的<span class="mojikumi-line-end">。</span>更神秘的是<span class="mojikumi-line-end">，</span>这段代码是在十年前只有一百多行的 <a href="https://github.com/http-party/node-http-proxy/commit/4d131567211bcefc6ef0b0592d374fef7bd5abd8#diff-0855adca187963032d89850159dc18eacfb9f206c036887e19b1877e69cc0ac1R20">initial commit</a> 就加上了<span class="mojikumi-line-end">。</span>反正给这段打个 patch 就好了<span class="mojikumi-line-end">。</span></p>
<h4 id="secoder-commit-统计" class="heading"><a href="#secoder-commit-统计" class="heading-anchor" aria-label="章节： SECoder commit 统计" tabindex="-1"></a><span>SECoder commit 统计</span></h4>
<p>之前还在想 SECoder 的数据统计什么时候开<span class="mojikumi-line-end">，</span>没想到一开吓一跳<span class="mojikumi-line-start">（</span></p>
<p>它似乎是统计了所有 commit<span class="mojikumi-line-end">，</span>包括没 merge 到 master 的以及被 force-push 覆盖掉的<span class="mojikumi-line-end">，</span>结果我差不多到了 rk2 的两倍<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>但要是只算 master 的话其实进 top10 都还差一点<span class="mojikumi-line-end">。</span>应该主要是搭前端代码框架的时候<span class="mojikumi-line-end">，</span>有 20 多个 commit rebase 了好几次<span class="mojikumi-line-end">，</span>后来也经常 force-push 修小的 typo<span class="mojikumi-line-end">。</span>这么说来 GitHub 只统计 master 还是挺好的<span class="mojikumi-line-end">，</span>虽然我个人项目也经常会在 master 上疯狂 force-push<span class="mojikumi-line-start">（</span></p>
<p>但是 SECoder 没有 MR 评论数量的统计<span class="mojikumi-line-end">，</span>其实我觉得这个才是我应该霸榜的地方<span class="mojikumi-line-start">（</span></p>
<h3 id="大作业第四周" class="heading"><a href="#大作业第四周" class="heading-anchor" aria-label="章节： 大作业第四周" tabindex="-1"></a><span>大作业第四周</span></h3>
<p>期中周事比较多<span class="mojikumi-line-end">，</span>稍微有点拖<span class="mojikumi-line-end">，</span>于是寄了<span class="mojikumi-line-end">。</span></p>
<blockquote>
<p>整体开发过程中存在大量开发进度不协调的问题<span class="mojikumi-line-end">：</span>前后端对接不协调<span class="mojikumi-line-end">，</span>开发新功能与审核<span class="mojikumi-line-end">、</span>测试之间不协调<span class="mojikumi-line-end">，</span>没有按测试需要的拓扑顺序进行开发导致先开发的功能要等着后面的功能才能测试<span class="mojikumi-line-end">，</span>对开发计划认识不统一<span class="mojikumi-line-end">，</span>还没修完当周计划的锅就开始写之后的功能……</p>
</blockquote>
<p>我本来以为后端搭起基本框架之后我就不用管了<span class="mojikumi-line-end">，</span>可以让队友自己搞<span class="mojikumi-line-end">，</span>结果到了最后才发现全是锅<span class="mojikumi-line-end">。</span>虽然队友有各种奇妙操作<span class="mojikumi-line-end">，</span>但不得不说很多都是我可以提早发现来避免的<span class="mojikumi-line-end">，</span>还有很多是沟通上出了问题<span class="mojikumi-line-end">，</span>并且我自己的活也干得有点晚<span class="mojikumi-line-end">。</span>这毕竟是软工而不是大号程设训练<span class="mojikumi-line-end">，</span>只能承认<span class="mojikumi-line-end">，</span>我软工是真的菜<span class="mojikumi-line-end">，</span>做好规划安排以及与人沟通协作的基本能力非常欠缺<span class="mojikumi-line-end">。</span></p>
<p><s>要是有万能的<a href="https://zh.moegirl.org.cn/%E5%AE%AB%E6%A3%AE%E8%91%B5">喵森</a>来协调大家的开发进度就好了</s><span class="mojikumi-line-end">；</span><span class="heimu">软工中的总集篇<span class="mojikumi-line-end">：</span>要是部署挂了赶紧换一个旧版镜像<span class="mojikumi-line-end">，</span>可以说是没写完而不是部署挂了<span class="mojikumi-line-end">，</span>就可以只扣 1 分而不是 2 分了<span class="mojikumi-line-end">。</span></span> 突然想到的<span class="mojikumi-line-end">，</span>但这么一想<span class="mojikumi-line-end">，</span>好想在软工结束后的暑假二周目一下白箱<span class="mojikumi-line-end">，</span><s>现在先拜一拜喵森吧<span class="mojikumi-line-start">（</span></s></p>
<p>只不过还有一个问题<span class="mojikumi-line-end">，</span>Python 实在是<span class="mojikumi-line-end">，</span>真的能比 Rust 写的快吗<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>虽然看队友写了很多奇妙错误<span class="mojikumi-line-end">，</span>但要是没有类型检查之类的<span class="mojikumi-line-start">（</span>Python 可以一定程度上检查<span class="mojikumi-line-end">，</span>但看起来队友并没有做<span class="mojikumi-line-end">）</span>我大概也能写出不少 🌚</p>
<h3 id="大作业第五周" class="heading"><a href="#大作业第五周" class="heading-anchor" aria-label="章节： 大作业第五周" tabindex="-1"></a><span>大作业第五周</span></h3>
<h4 id="nuxt-v3-3-3-起-nuxt-vitest-报错" class="heading"><a href="#nuxt-v3-3-3-起-nuxt-vitest-报错" class="heading-anchor" aria-label="章节： Nuxt v3.3.3 起 nuxt-vitest 报错" tabindex="-1"></a><span>Nuxt v3.3.3 起 nuxt-vitest 报错</span></h4>
<p><a href="https://github.com/danielroe/nuxt-vitest/issues/122">Nuxt v3.3.3 causes tests to fail (Unhandled Errors) · Issue #122 · danielroe/nuxt-vitest</a></p>
<p>想着大例会结束后是升级依赖的好时机<span class="mojikumi-line-end">，</span>结果一 bump 测试挂了<span class="mojikumi-line-end">。</span>去 git bisect 了一下 Nuxt<span class="mojikumi-line-end">，</span>Nuxt 的构建比 Next 轻松多了<span class="mojikumi-line-end">，</span>又快又不报错<span class="mojikumi-line-end">。</span>bisect 出来之后本来还在想没时间也没头绪继续研究下去了<span class="mojikumi-line-end">，</span>这个 issue 也已经一周了<span class="mojikumi-line-end">，</span>不知道作者会不会继续咕着<span class="mojikumi-line-end">。</span>结果晚上一看<span class="mojikumi-line-end">，</span>被点了个心<span class="mojikumi-line-end">，</span>开了个 PR<span class="mojikumi-line-end">，</span>再一看<span class="mojikumi-line-end">，</span>原来 bisect 出来的那个 PR 就是 nuxt-vitest 的作者写的<span class="mojikumi-line-end">，</span>我都没发现<span class="mojikumi-line-start">（</span></p>
<h4 id="nspace-内-key-会失效" class="heading"><a href="#nspace-内-key-会失效" class="heading-anchor" aria-label="章节： NSpace 内 key 会失效" tabindex="-1"></a><span>NSpace 内 key 会失效</span></h4>
<p><a href="https://www.naiveui.com/zh-CN/os-theme/components/space"><code>&#x3C;n-space></code></a> 会给每个 child 套一个 <code>&#x3C;div></code><span class="mojikumi-line-end">，</span>于是 <code>key</code> 都失效了<span class="mojikumi-line-end">，</span>如果在 <code>&#x3C;n-space></code> 里面用 <code>v-for</code> 就可能不停地 remount<span class="mojikumi-line-end">，</span>调了一晚上<span class="mojikumi-line-start">（</span></p>
<p>这东西是真不如手写 flex<span class="mojikumi-line-end">。</span></p>
<h4 id="小例会-3" class="heading"><a href="#小例会-3" class="heading-anchor" aria-label="章节： 小例会 3" tabindex="-1"></a><span>小例会 3</span></h4>
<p>比较水<span class="mojikumi-line-end">，</span>只不过助教说他当年搞了个云服务器<span class="mojikumi-line-end">，</span>出问题了就把反代换成云服务器<span class="mojikumi-line-end">，</span>感觉很有道理<span class="mojikumi-line-start">（</span></p>
<h3 id="大作业第六周" class="heading"><a href="#大作业第六周" class="heading-anchor" aria-label="章节： 大作业第六周" tabindex="-1"></a><span>大作业第六周</span></h3>
<p>大家这周都比较摆<span class="mojikumi-line-end">，</span>我还去修了不少后端的锅<span class="mojikumi-line-end">。</span>太久没管后端<span class="mojikumi-line-end">，</span>对代码复用<span class="mojikumi-line-end">、</span>测试的完善程度<span class="mojikumi-line-end">、</span>QuerySet 的编写<span class="mojikumi-line-end">、</span>请求参数的校验等问题感到了一些震惊<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>但确实是没力气去修<span class="mojikumi-line-start">（</span></p>
<p>响应式设计还作为自选需求被提了出来<span class="mojikumi-line-end">，</span>要是打算加这个需求一开始不就应该有吗<span class="mojikumi-line-end">，</span>这也不是什么需要由同学想到的功能<span class="mojikumi-line-end">，</span>我看需求列表没有就默认也不会作为自选需求了<span class="mojikumi-line-end">，</span>刚开课的时候还找助教吐槽没有响应式分数<span class="mojikumi-line-end">。</span>响应式设计要 mobile first<span class="mojikumi-line-end">，</span>能这么晚加吗<span class="mojikumi-line-end">。</span></p>
<p>劝大家还是别太信需求列表<span class="mojikumi-line-end">，</span>该卷还得卷<span class="mojikumi-line-end">，</span>自己提自选需求总比快结束了被别人提强太多<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/Web">Web</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95">学习记录</category>
        </item>
        <item>
            <title><![CDATA[数字逻辑实验到底是数电实验还是数设实验（x]]></title>
            <link>https://ouuan.moe/post/2023/03/digital-logic</link>
            <guid>https://ouuan.moe/post/2023/03/digital-logic</guid>
            <pubDate>Thu, 02 Mar 2023 03:46:54 GMT</pubDate>
            <description><![CDATA[


<p>谁会愿意天天用一个课六个字的全名来叫它呢<span class="mojikumi-line-end">，</span>但是数字逻辑电路是数电<span class="mojikumi-line-end">，</span>数字逻辑设计是数设<span class="mojikumi-line-end">，</span>数字逻辑实验总不能是 <code>/数[字逻]?实验?/</code><span class="mojikumi-line-end">，</span>但叫它数电实验或者数设实验好像都不太对<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-start">（</span></p>
<p>上课的时候也是<span class="mojikumi-line-end">，</span>老师一会儿一个<span class="mojikumi-line-start">“</span>如果你是数设的同学<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>一会儿一个<span class="mojikumi-line-start">“</span>如果你没报上数设但想把数电学成数设<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>这课也太乱了<span class="mojikumi-line-start">（</span></p>
<p>我写游记都得把两个课放一起写<span class="mojikumi-line-end">，</span>课就不能合成一个吗<span class="mojikumi-line-start">（</span></p>
]]></description>
            <content:encoded><![CDATA[


<p>谁会愿意天天用一个课六个字的全名来叫它呢<span class="mojikumi-line-end">，</span>但是数字逻辑电路是数电<span class="mojikumi-line-end">，</span>数字逻辑设计是数设<span class="mojikumi-line-end">，</span>数字逻辑实验总不能是 <code>/数[字逻]?实验?/</code><span class="mojikumi-line-end">，</span>但叫它数电实验或者数设实验好像都不太对<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-start">（</span></p>
<p>上课的时候也是<span class="mojikumi-line-end">，</span>老师一会儿一个<span class="mojikumi-line-start">“</span>如果你是数设的同学<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>一会儿一个<span class="mojikumi-line-start">“</span>如果你没报上数设但想把数电学成数设<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>这课也太乱了<span class="mojikumi-line-start">（</span></p>
<p>我写游记都得把两个课放一起写<span class="mojikumi-line-end">，</span>课就不能合成一个吗<span class="mojikumi-line-start">（</span></p>

<p>写了一会儿后发现<span class="mojikumi-line-end">，</span>还是得两个课分开写<span class="mojikumi-line-end">，</span>dbqwcl<span class="mojikumi-line-start">（</span></p>
<p>这篇就是个游记<span class="mojikumi-line-end">，</span>具体学的内容如果我有时间的话会放在 <a href="/tag/ddpp">DDPP 学习笔记</a><span class="mojikumi-line-end">，</span>没时间<span class="mojikumi-line-start">（</span>没时间写笔记 or 没时间学 DDPP 只能跟着上课<span class="mojikumi-line-end">）</span>的话大概就不会放上来了<span class="mojikumi-line-start">（</span></p>
<p><s>某些人学都学不完了<span class="mojikumi-line-end">，</span>还有空写游记？<span class="mojikumi-line-start">（</span></s></p>
<h2 id="数字逻辑实验" class="heading"><a href="#数字逻辑实验" class="heading-anchor" aria-label="章节： 数字逻辑实验" tabindex="-1"></a><span>数字逻辑实验</span></h2>
<h3 id="sv-班的开设" class="heading"><a href="#sv-班的开设" class="heading-anchor" aria-label="章节： sv 班的开设" tabindex="-1"></a><span>sv 班的开设</span></h3>
<p>DDPP5 讲的是 Verilog<span class="mojikumi-line-end">，</span>以后造机应该也是用 Verilog<span class="mojikumi-line-end">，</span>但数字逻辑实验似乎是 VHDL<span class="mojikumi-line-end">。</span>就像软工强迫我把技术栈全换一遍一样<span class="mojikumi-line-end">，</span>多学一门语言也可以称作<span class="mojikumi-line-start">“</span>技多不压身<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>而且说到底我也还没学 Verilog<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>但终究是有些难受的<span class="mojikumi-line-end">。</span>所以看到第一节课的课件上说可以选择报 SystemVerilog 小班我还是很开心的<span class="mojikumi-line-end">，</span>顿时感觉这个课科学了许多<span class="mojikumi-line-start">（</span></p>
<blockquote>
<p>优势<span class="mojikumi-line-end">：</span>对后续课程有帮助</p>
<p>劣势<span class="mojikumi-line-end">：</span>花时间<span class="mojikumi-line-end">，</span>费精力<span class="mojikumi-line-end">。</span><span class="mojikumi-line-end">。</span><span class="mojikumi-line-end">。</span></p>
</blockquote>
<p>课件上是这么写的<span class="mojikumi-line-end">，</span>但 Verilog 本身应该不会比 VHDL 费精力<span class="mojikumi-line-end">，</span>课程内容的区别是多了个内存实验<span class="mojikumi-line-end">，</span>我猜这个 warning 的主要意义在于<span class="mojikumi-line-end">，</span>这是个新开的课<span class="mojikumi-line-end">，</span>可能各种出锅<span class="mojikumi-line-end">，</span>要让大家做好心理准备<span class="mojikumi-line-start">（</span>同样是新开的 <a href="/post/2022/08/learn-rust">Rust</a> 就非常科学<span class="mojikumi-line-start">（</span><s>起码完全自学人感觉很科学</s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>我似乎反而更希望课是新开的<span class="mojikumi-line-end">，</span>而且这个 sv 班似乎也是 tuna 群友当助教<span class="mojikumi-line-start">（</span></p>
<p>但这个 sv 班的开设实在是有些坎坷<span class="mojikumi-line-end">，</span>说起来也有些冗长<span class="mojikumi-line-end">，</span>就折起来了<span class="mojikumi-line-end">。</span></p>
<a id="sv-班坎坷的开设过程" name="sv-班坎坷的开设过程" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>sv 班坎坷的开设过程</span></h4><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>简单来说<span class="mojikumi-line-end">，</span>数字逻辑实验有 5-1<span class="mojikumi-line-end">、</span>5-3<span class="mojikumi-line-end">、</span>5-4 三个班<span class="mojikumi-line-end">，</span>其中 5-1<span class="mojikumi-line-end">、</span>5-3 有开设 sv 班的机会<span class="mojikumi-line-end">，</span>但要求是 5-1 报名人数在 25~28 之间<span class="mojikumi-line-end">，</span>5-3 报名人数在 27~28 之间<span class="mojikumi-line-end">，</span>才分别能开班<span class="mojikumi-line-end">。</span></p><p>是不是感觉非常神秘<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>这确实很神秘<span class="mojikumi-line-end">，</span>但它背后竟然真的能有确切的原因<span class="mojikumi-line-start">（</span></p><ul>
<li>数字逻辑实验的课容量是 85<span class="mojikumi-line-end">，</span>5-1<span class="mojikumi-line-end">、</span>5-3<span class="mojikumi-line-end">、</span>5-4 分别有 85<span class="mojikumi-line-end">、</span>87<span class="mojikumi-line-start">（</span>草<span class="mojikumi-line-end">，</span>听说可能是因为重修？<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>69 人<span class="mojikumi-line-start">（</span>印象中当时的数据<span class="mojikumi-line-end">，</span>现在有点小变化<span class="mojikumi-line-end">）</span></li>
<li>因为设备<span class="mojikumi-line-end">、</span>实验室等资源限制<span class="mojikumi-line-end">，</span>一个普通班只能容纳 30 人<span class="mojikumi-line-end">，</span>一个 sv 班只能容纳 28 人<span class="mojikumi-line-end">，</span>一个时间段只能有三个班</li>
</ul><p>虽然说在这些限制下似乎也能在 5-4 开一个班<span class="mojikumi-line-start">（</span>9~28 人即可<span class="mojikumi-line-end">，</span>满足人数限制且不影响该时间段分班数量<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但不知道是不是懒得再开一个班还是什么原因<span class="mojikumi-line-end">，</span>5-4 想报 sv 班的同学只能遗憾离场<span class="mojikumi-line-start">（</span></p><p>同学们当然觉得这样搞很毒瘤<span class="mojikumi-line-end">，</span>但老师似乎也知道这样很毒瘤<span class="mojikumi-line-end">，</span>说是之前申请过搞成二级选课<span class="mojikumi-line-end">，</span>但没通过<span class="mojikumi-line-end">。</span></p><p>一开始我担心的是很快报满报不上<span class="mojikumi-line-end">，</span>后来发现完全担心错了<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>真正的问题在于人数不够<span class="mojikumi-line-end">，</span>而且这个是先报先得<span class="mojikumi-line-end">，</span>我是通知发出来 7min 就报了<span class="mojikumi-line-end">，</span><s>虽然在选课系统里 7s 可能就慢了<span class="mojikumi-line-end">，</span>但是</s> 最后看名单我是第一个报的<span class="mojikumi-line-start">（</span></p><p>前两天大家都不吭声<span class="mojikumi-line-end">，</span>到了报名的 ddl 当天下午我才在群里问了下人数<span class="mojikumi-line-end">，</span>当时是 5-1 22 人 5-3 21 人<span class="mojikumi-line-end">。</span>于是我开始在班群推销<span class="mojikumi-line-end">，</span>也看到有人在课程群推销<span class="mojikumi-line-end">，</span>反正主要就是以后总得学 Verilog<span class="mojikumi-line-end">，</span>报 sv 班可以少学一门语言<span class="mojikumi-line-start">（</span></p><p>晚上 6 点 5-1 就开班了<span class="mojikumi-line-end">，</span>但 5-3 只有 24 个人报<span class="mojikumi-line-end">。</span>到了 23:44 还是 24<span class="mojikumi-line-start">（</span>实际上是 25<span class="mojikumi-line-end">，</span>我室友报了结果因未知原因被漏掉了<span class="mojikumi-line-end">，</span>草<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>就很崩溃<span class="mojikumi-line-end">。</span></p><p>当时我想了两个备选方案<span class="mojikumi-line-end">：</span></p><ul>
<li>改成 5-4 开 sv 班<span class="mojikumi-line-end">，</span>但我提出后被否了<span class="mojikumi-line-end">，</span>说是不方便再调整<span class="mojikumi-line-end">。</span></li>
<li>去 5-1 的 sv 班<span class="mojikumi-line-end">，</span>结果得知 5-1 已经报了 31 人<span class="mojikumi-line-end">。</span><s>早知道不推销了</s></li>
</ul><p>好在第二天又说报名 ddl 延长半天<span class="mojikumi-line-end">，</span>然后中午的时候竟然就报满了<span class="mojikumi-line-end">。</span>5-3 的 28 人有 10 个是信计的<span class="mojikumi-line-end">，</span><s>简单估计一下<span class="mojikumi-line-end">，</span>信计有 28/30 想报 sv</s><span class="mojikumi-line-end">，</span>实际上 5-1 的 sv 班只有两个信计<span class="mojikumi-line-end">，</span>只不过群里 5-4 求换课的还有好几个信计<span class="mojikumi-line-end">，</span>可惜都没换上<span class="mojikumi-line-end">，</span><s>再简单估计一下<span class="mojikumi-line-end">，</span>sv 班 12/56 是信计<span class="mojikumi-line-end">，</span>信计应该一共有 52 人</s><span class="mojikumi-line-start">（</span></p></div></details></aside>
<h3 id="sv-班课程文档" class="heading"><a href="#sv-班课程文档" class="heading-anchor" aria-label="章节： sv 班课程文档" tabindex="-1"></a><span>sv 班课程文档</span></h3>
<h4 id="本课程只有一学分！！" class="heading"><a href="#本课程只有一学分！！" class="heading-anchor" aria-label="章节： 本课程只有一学分！！" tabindex="-1"></a><span>本课程只有一学分！！</span></h4>
<p><picture><source type="image/webp" srcset="/assets/1-credit.4c4db750.webp"><img srcset="/assets/1-credit.3072c8e4.png" loading="lazy" src="/assets/1-credit.3072c8e4.png" width="219" height="88" alt="本课程只有一学分！！"></picture></p>
<p>开头第一句<span class="mojikumi-line-end">，</span>绷不住了<span class="mojikumi-line-start">（</span></p>
<h4 id="按钮详细功能" class="heading"><a href="#按钮详细功能" class="heading-anchor" aria-label="章节： 按钮详细功能" tabindex="-1"></a><span>按钮详细功能</span></h4>
<p>一般来说 admonition 经常是比较长的会折叠起来防止刷屏<span class="mojikumi-line-end">，</span>但在示波器的<span class="mojikumi-line-start">“</span>按钮详细功能<span class="mojikumi-line-end">”</span>一节<span class="mojikumi-line-end">，</span>被折叠的都是最短的那些<span class="mojikumi-line-end">，</span>比如<span class="mojikumi-line-end">：</span></p>
<blockquote>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>电源开关</span></h5><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>按一次打开电源<span class="mojikumi-line-end">，</span>再按一次关闭电源<span class="mojikumi-line-end">。</span></p></div></details></aside>
</blockquote>
<p>非常地理所当然<span class="mojikumi-line-end">，</span>但感觉这个事实莫名地很有意思<span class="mojikumi-line-start">（</span><s>而且把电源开关写出来再折起来就莫名喜感<span class="mojikumi-line-start">（</span>按一次打开 <code>&#x3C;details></code><span class="mojikumi-line-end">，</span>再按一次关闭 <code>&#x3C;details></code></s></p>
<h4 id="git-conflict" class="heading"><a href="#git-conflict" class="heading-anchor" aria-label="章节： git conflict" tabindex="-1"></a><span>git conflict</span></h4>
<p>虽说是敏捷开发课程文档<span class="mojikumi-line-end">，</span>但这个 git conflict 也太<span class="mojikumi-line-start">（</span></p>
<p><picture><source type="image/webp" srcset="/assets/git-conflict-in-doc.5d6c1b24.webp"><img srcset="/assets/git-conflict-in-doc.a7369472.png" loading="lazy" src="/assets/git-conflict-in-doc.a7369472.png" width="680" height="265" alt="课程文档中出现了 git conflict 标记"></picture></p>
<h3 id="把人忽悠进来之后" class="heading"><a href="#把人忽悠进来之后" class="heading-anchor" aria-label="章节： 把人忽悠进来之后" tabindex="-1"></a><span><s>把人忽悠进来之后</s></span></h3>
<p>下面是两个课件的 diff<span class="mojikumi-line-end">，</span>虽然这个优势的意思实际上没变<span class="mojikumi-line-end">，</span>从 sv 班苛刻的开设条件基本上就能猜到没法随时退出<span class="mojikumi-line-end">，</span>但是<span class="mojikumi-line-start">（</span></p>
<blockquote>
<ul>
<li>SystemVerilog</li>
<li>为后续课程实验提供支撑
<ul>
<li>增加内存实验<del><span class="mojikumi-line-end">，</span>其他实验不变</del></li>
<li>课程成绩不与普通课堂区分<span class="mojikumi-line-end">，</span>评分标准<span class="mojikumi-line-end">，</span>比例与普通课堂一致</li>
</ul>
</li>
<li>优势<span class="mojikumi-line-end">：</span><del>对后续课程有帮助</del><ins>当前学期无</ins></li>
<li>劣势<span class="mojikumi-line-end">：</span>花时间<span class="mojikumi-line-end">，</span>费精力<span class="mojikumi-line-end">。</span><del><span class="mojikumi-line-end">。</span><span class="mojikumi-line-end">。</span></del></li>
<li>可随时退出<ins>？</ins></li>
</ul>
</blockquote>
<h3 id="示波器实验" class="heading"><a href="#示波器实验" class="heading-anchor" aria-label="章节： 示波器实验" tabindex="-1"></a><span>示波器实验</span></h3>
<p>上学期物理实验用过示波器<span class="mojikumi-line-end">，</span>感到了这个课除了 <a href="/post/2022/10/basic-tex-and-r-for-physics-lab">学习 TeX 和 R</a> 之外竟然还稍微有点用<span class="mojikumi-line-end">，</span>虽然也只有那么一点点用<span class="mojikumi-line-end">，</span>不知道和电子学基础相比哪个的一点点大一些<span class="mojikumi-line-start">（</span></p>
<p>整个实验中卡壳最久的一步是<span class="mojikumi-line-end">，</span>从一坨绑得十分整齐的导线中抽出一根<span class="mojikumi-line-end">，</span>草<span class="mojikumi-line-start">（</span></p>
<h3 id="与非门电路测试实验" class="heading"><a href="#与非门电路测试实验" class="heading-anchor" aria-label="章节： 与非门电路测试实验" tabindex="-1"></a><span>与非门电路测试实验</span></h3>
<p>预习的时候对着文档里的电路图和芯片引脚图把怎么接线<span class="mojikumi-line-end">、</span>怎么接地写清楚<span class="mojikumi-line-end">，</span>就很容易了<span class="mojikumi-line-end">。</span></p>
<p>本来想半小时速通<span class="mojikumi-line-end">，</span>失败了<span class="mojikumi-line-end">，</span>感觉最大的问题还是抽不出导线<span class="mojikumi-line-start">（</span></p>
<h3 id="简单组合逻辑电路实验" class="heading"><a href="#简单组合逻辑电路实验" class="heading-anchor" aria-label="章节： 简单组合逻辑电路实验" tabindex="-1"></a><span>简单组合逻辑电路实验</span></h3>
<p>上午十点半才开始预习<span class="mojikumi-line-end">，</span>两小时把 2 位全加器和补码减法器接好了<span class="mojikumi-line-end">，</span>在课上半个小时把原码减法器接好<span class="mojikumi-line-end">，</span>但是加上排队等待验收和收拾东西还是快 3 点才走<span class="mojikumi-line-end">。</span></p>
<ul>
<li>三个运算器放在同一个电路里是非常容易的<span class="mojikumi-line-end">。</span>补码减法器就是全加器的基础上有几个东西要取反<span class="mojikumi-line-end">，</span>只要把一个开关和这些东西异或在一起就可以控制是否取反了<span class="mojikumi-line-end">。</span>原码是在补码的基础上进行转换<span class="mojikumi-line-end">，</span>用开关控制会稍微麻烦一些<span class="mojikumi-line-end">，</span>但如果是用两个数码管分别显示补码和原码就非常容易<span class="mojikumi-line-end">。</span></li>
<li>文档上给的补码转原码不知道为什么用了五个门<span class="mojikumi-line-end">，</span>实际上只要 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>F</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>=</mo><mover accent="true"><mover accent="true"><mrow><msub><mi>C</mi><mn>2</mn></msub><msub><mi>F</mi><mn>1</mn></msub></mrow><mo stretchy="true">‾</mo></mover><mo stretchy="true">‾</mo></mover><mo>⊕</mo><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2' = \overline{\overline{C_2 F_1}} \oplus F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-4.0033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 就好了<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>一开始我还对着卡诺图发呆<span class="mojikumi-line-end">，</span>后来看了一眼真值表<span class="mojikumi-line-end">，</span>发现这个东西用人类智慧一下就化简出来了<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span>最后三合一的电路我只用了 8 个与非门和 9 个异或门<span class="mojikumi-line-end">，</span>就不需要用 16 pin 的模块了<span class="mojikumi-line-end">。</span></li>
<li>如果是分步骤<span class="mojikumi-line-start">（</span>模块<span class="mojikumi-line-end">）</span>接线<span class="mojikumi-line-start">（</span>比如先接全加器<span class="mojikumi-line-end">，</span>再改成减法器<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>过程中需要改线<span class="mojikumi-line-end">，</span>在两根线叠在一起时<span class="mojikumi-line-end">，</span>最好是把<span class="mojikumi-line-start">“</span>模块内部<span class="mojikumi-line-end">”</span>的线放在下面<span class="mojikumi-line-end">，</span>和<span class="mojikumi-line-start">“</span>外部<span class="mojikumi-line-end">”</span>连接的线放在上面<span class="mojikumi-line-end">，</span>这样的话修改和外部的连接时不用把两根线一起拔掉<span class="mojikumi-line-end">。</span></li>
<li>把接好的线带到实验室是有一定难度的<span class="mojikumi-line-end">，</span>可以先只接 6 个模块<span class="mojikumi-line-end">，</span>就能放进实验箱了<span class="mojikumi-line-end">，</span>课上接剩下的两个模块<span class="mojikumi-line-end">。</span>接上线之后体积会变大<span class="mojikumi-line-end">，</span>可以把用不到的模块留在寝室<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>这节课上还发了 FPGA 模块<span class="mojikumi-line-end">，</span>为了能装下<span class="mojikumi-line-end">，</span>大家都上交了一些多余的模块<span class="mojikumi-line-end">，</span>我装得下而且本来就是把多余的放在寝室了<span class="mojikumi-line-end">，</span>就没上交<span class="mojikumi-line-end">；</span>但是这样一来我就长期有几个模块放不进实验箱了 🌚<span class="mojikumi-line-end">）</span></li>
</ul>
<p><s>如果你不知道怎么接线的话可以尝试对着下面这张图复刻</s></p>
<p><picture><source type="image/webp" srcset="/assets/adder-circuit.daa72e66.webp"><img srcset="/assets/adder-circuit.0aa32cb4.jpeg" loading="lazy" src="/assets/adder-circuit.0aa32cb4.jpeg" width="2312" height="1736" alt="电路连接实物图"></picture></p>
<p>后来看到有同学上面的线统一朝上<span class="mojikumi-line-end">，</span>下面的线统一朝下<span class="mojikumi-line-end">，</span>就整齐一些<span class="mojikumi-line-end">。</span></p>
<p>最后收拾东西的时候分三次发现地上掉了 5 根线<span class="mojikumi-line-end">，</span>除此之外前后两排也能看到好多根线<span class="mojikumi-line-end">，</span>不知道哪些是我的<span class="mojikumi-line-end">，</span>哪些是隔壁的<span class="mojikumi-line-end">，</span>哪些是上午的<span class="mojikumi-line-start">（</span></p>
<p>还听到助教吐槽同学<span class="mojikumi-line-end">，</span>然后老师说<span class="mojikumi-line-end">，</span>这都是正常的<span class="mojikumi-line-end">，</span>现在我们去搞大模型就可以了<span class="mojikumi-line-end">，</span>不用在意数电<span class="mojikumi-line-start">（</span></p>
<h3 id="点亮数码管实验" class="heading"><a href="#点亮数码管实验" class="heading-anchor" aria-label="章节： 点亮数码管实验" tabindex="-1"></a><span>点亮数码管实验</span></h3>
<p>本来想在寝室搞完直接去验收<span class="mojikumi-line-end">，</span>结果去搞智能体了<span class="mojikumi-line-start">（</span></p>
<p>现场才开始做<span class="mojikumi-line-end">，</span>一直连不上芯片<span class="mojikumi-line-end">，</span>还以为是因为我用的 Arch 所以驱动有什么神秘问题<span class="mojikumi-line-end">，</span>到处查了半天<span class="mojikumi-line-end">，</span>最后问老师才知道是我 USB Type C 的线没插紧<span class="mojikumi-line-end">，</span>绷不住了<span class="mojikumi-line-end">。</span>它这个接口比一般的手机充电线要紧一些<span class="mojikumi-line-start">（</span>插上一次之后复现不出来了<span class="mojikumi-line-end">，</span>但在我印象中插上第一次之前不是紧一点而是紧 <s>super 多</s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>插进去一半灯就亮了<span class="mojikumi-line-end">，</span>所以我还以为接好了<span class="mojikumi-line-end">。</span>后来想起来数设课上还提到过<span class="mojikumi-line-end">，</span>USB 为了支持热插拔<span class="mojikumi-line-end">，</span>电源接口比数据接口略长一些<span class="mojikumi-line-end">，</span>我看到的灯大概是电源线连上了的灯<span class="mojikumi-line-end">，</span>而数据线还没连上<span class="mojikumi-line-end">。</span></p>
<p>最后速通彻底失败了<span class="mojikumi-line-end">，</span>还是第一次做到只剩几个人了才走<span class="mojikumi-line-end">。</span></p>
<h3 id="四位全加器实验" class="heading"><a href="#四位全加器实验" class="heading-anchor" aria-label="章节： 四位全加器实验" tabindex="-1"></a><span>四位全加器实验</span></h3>
<p>这次真的在寝室 1.5h 搞完直接去验收<span class="mojikumi-line-end">，</span>成功在上课之前验收完了<span class="mojikumi-line-end">，</span>但还是得听完课才能走<span class="mojikumi-line-start">（</span></p>
<p>于是干脆写完了实验报告才走<span class="mojikumi-line-end">，</span>实际上只是把代码复制出来<span class="mojikumi-line-end">，</span>再截几张图<span class="mojikumi-line-end">，</span>不知道为什么没能在讲完课之前写完<span class="mojikumi-line-start">（</span></p>
<h3 id="计数器实验" class="heading"><a href="#计数器实验" class="heading-anchor" aria-label="章节： 计数器实验" tabindex="-1"></a><span>计数器实验</span></h3>
<p>这次有好几个人课前查<span class="mojikumi-line-end">，</span>助教表示我们太急了<span class="mojikumi-line-start">（</span></p>
<p>之前感觉 DDPP 第五章学了几年都没学完<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>但有点像当时 CS:APP 第三章<span class="mojikumi-line-end">，</span>学一周能顶上课讲好几周<span class="mojikumi-line-start">（</span></p>
<h3 id="串行密码锁实验" class="heading"><a href="#串行密码锁实验" class="heading-anchor" aria-label="章节： 串行密码锁实验" tabindex="-1"></a><span>串行密码锁实验</span></h3>
<p>感觉 undefined behavior 非常多<span class="mojikumi-line-end">，</span>而且作为一个密码锁竟然能在没开锁时改密码<span class="mojikumi-line-end">，</span>非常神秘<span class="mojikumi-line-end">，</span>但它毕竟只是个小实验而不是数设<span class="mojikumi-line-start">（</span></p>
<p>上课前同学聊到了游泳课<span class="mojikumi-line-end">，</span>老师一进来听到了<span class="mojikumi-line-end">，</span>说当年他有个同学因为游泳没过没能保研<span class="mojikumi-line-end">，</span>但是现在开公司<span class="mojikumi-line-end">，</span>过得比他爽<span class="mojikumi-line-end">，</span>绷不住了<span class="mojikumi-line-start">（</span></p>
<p>听说助教因为昨晚答疑到太晚<span class="mojikumi-line-end">，</span>今天没吃早饭<span class="mojikumi-line-end">，</span>早八还一直搞到 11:30<span class="mojikumi-line-end">，</span>还蛮惨的<span class="mojikumi-line-end">。</span>下午助教是准点到的教室<span class="mojikumi-line-end">，</span>于是没能在课前查完<span class="mojikumi-line-end">，</span>但其实一讲完课就查也没差太多<span class="mojikumi-line-end">。</span></p>
<p>老师<span class="mojikumi-line-end">：</span>你们是不是觉得提高要求就是必做的？明年干脆把提高要求取消了<span class="mojikumi-line-end">，</span>解决不了问题可以让问题消失<span class="mojikumi-line-start">（</span></p>
<h2 id="数设" class="heading"><a href="#数设" class="heading-anchor" aria-label="章节： 数设" tabindex="-1"></a><span>数设</span></h2>
<h3 id="数设第二次课" class="heading"><a href="#数设第二次课" class="heading-anchor" aria-label="章节： 数设第二次课" tabindex="-1"></a><span>数设第二次课</span></h3>
<p>这节课讲了一堆数电背后的模电原理<span class="mojikumi-line-end">，</span>而且还是 TTL 电路<span class="mojikumi-line-end">，</span>不是 DDPP5 放在第 14 章的 CMOS<span class="mojikumi-line-end">。</span>感觉完全没听懂<span class="mojikumi-line-end">，</span>只不过说到底这一节是物理课不是计算机课<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>后面又说讲的大部分东西不考<span class="mojikumi-line-end">，</span>讲这些是为了补充一些数字电路发展的历史<span class="mojikumi-line-end">，</span>弥补思维上的跳跃<span class="mojikumi-line-end">。</span></p>
<p>我是完全没听懂<span class="mojikumi-line-end">，</span>其他同学大概也是没完全听懂<span class="mojikumi-line-end">。</span>老师吐槽说<span class="mojikumi-line-end">，</span>现在我们培养方案里电路知识几乎为零<span class="mojikumi-line-end">，</span>数设要从头开始讲<span class="mojikumi-line-end">，</span>不像他们那时候<span class="mojikumi-line-end">，</span>本科上五年<span class="mojikumi-line-end">，</span>什么物理都学了<span class="mojikumi-line-end">。</span>本来我还在想<span class="mojikumi-line-end">，</span>为什么我们只能上四年甚至三年<span class="mojikumi-line-end">，</span>要学这么多东西<span class="mojikumi-line-end">，</span>结果老师说他五年修了双学位 600+ 学分<span class="mojikumi-line-end">，</span>而且学分是和现在一样的学时<span class="mojikumi-line-end">，</span>震撼全班<span class="mojikumi-line-end">。</span></p>
<h3 id="数设与数电" class="heading"><a href="#数设与数电" class="heading-anchor" aria-label="章节： 数设与数电" tabindex="-1"></a><span>数设与数电</span></h3>
<p>在软工课上被数电同学问了作业<span class="mojikumi-line-end">，</span>先是被问了没学清楚的<span class="mojikumi-line-end">，</span>后面又被问了数设没讲的内容<span class="mojikumi-line-end">。</span>没想到这么早就体验到了被数电同学问懵<span class="mojikumi-line-start">（</span></p>
<h3 id="关于-ddpp" class="heading"><a href="#关于-ddpp" class="heading-anchor" aria-label="章节： 关于 DDPP" tabindex="-1"></a><span>关于 DDPP</span></h3>
<p>其实我开学后有看一点 DDPP<span class="mojikumi-line-end">，</span>感觉还是比上课讲的科学许多<span class="mojikumi-line-start">（</span><s>比如说上课的时候去写软工了<span class="mojikumi-line-end">，</span>课后看一下 DDPP 会感觉比上课讲的易懂很多<span class="mojikumi-line-end">，</span>比中文教材易懂 <a href="https://mp.weixin.qq.com/s/8qZ2bEIVyUGQYmNt6kCicg">super 多</a></s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但没有从头到尾看全<span class="mojikumi-line-end">，</span>也没写笔记<span class="mojikumi-line-end">。</span>一方面是时间都被软工占了<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">，</span>还有就是 DDPP 和上课讲的内容多少有一些差异<span class="mojikumi-line-end">，</span>要是学多了感觉会搞混<span class="mojikumi-line-start">（</span></p>
<h3 id="考前" class="heading"><a href="#考前" class="heading-anchor" aria-label="章节： 考前" tabindex="-1"></a><span>考前</span></h3>
<p><span class="mojikumi-line-start">《</span>我怕你们都考 100 分学校找我麻烦<span class="mojikumi-line-end">》</span></p>
<p><span class="mojikumi-line-start">《</span>实验做的最好的两个组直接 A+<span class="mojikumi-line-end">，</span>就算考试交白卷都还有拿 A+ 的机会<span class="mojikumi-line-end">》</span></p>
<p><span class="mojikumi-line-start">《</span>不要 15min 就做完了<span class="mojikumi-line-end">》</span></p>
<h3 id="考试" class="heading"><a href="#考试" class="heading-anchor" aria-label="章节： 考试" tabindex="-1"></a><span>考试</span></h3>
<p>难度还好<span class="mojikumi-line-end">，</span>有一题的题意理解有点神秘<span class="mojikumi-line-end">，</span>但老师说只要能说得通都算对 🤔 考完大家都在吐槽一个考课件细节的填空题<span class="mojikumi-line-start">（</span>分不多<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>幸好我是上午刚看的课件<span class="mojikumi-line-end">，</span>要是前一天看的估计就不会做了<span class="mojikumi-line-start">（</span></p>
<h3 id="第一次实验课" class="heading"><a href="#第一次实验课" class="heading-anchor" aria-label="章节： 第一次实验课" tabindex="-1"></a><span>第一次实验课</span></h3>
<p>这次又在连上板子这一步出了问题<span class="mojikumi-line-end">，</span>又是线的问题<span class="mojikumi-line-end">，</span>但幸好不是没插好<span class="mojikumi-line-end">，</span>而是线真的坏了<span class="mojikumi-line-start">（</span></p>
<p>成功把 VGA 显示的样例跑起来之后就开始啥都不懂但是魔改参数<span class="mojikumi-line-end">，</span>很难不想起小学第一次去上机器人课的时候也是这样<span class="mojikumi-line-start">（</span></p>
<p>不能把板子带回寝室<span class="mojikumi-line-end">，</span>要在板子上调都得跑来东主楼<span class="mojikumi-line-end">，</span>稍微有点难顶<span class="mojikumi-line-start">（</span></p>
<p><span class="mojikumi-line-start">《</span>不要在实验室过夜<span class="mojikumi">》</span><span class="mojikumi-line-end">，</span>绷不住了<span class="mojikumi-line-start">（</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/digital-design">digital-design</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95">学习记录</category>
        </item>
        <item>
            <title><![CDATA[初学 Rust]]></title>
            <link>https://ouuan.moe/post/2022/08/learn-rust</link>
            <guid>https://ouuan.moe/post/2022/08/learn-rust</guid>
            <pubDate>Mon, 15 Aug 2022 15:11:45 GMT</pubDate>
            <description><![CDATA[

<p>早就想学 Rust 了<span class="mojikumi-line-end">，</span>但一直咕着<span class="mojikumi-line-end">。</span>这次小学期的程设训练开了 Rust 课堂<span class="mojikumi-line-end">，</span>就毫不犹豫地选了<span class="mojikumi-line-end">，</span>也以此为契机学了 Rust<span class="mojikumi-line-end">。</span></p>
<p>这篇就是简单记录一下大体上的学习过程<span class="mojikumi-line-end">，</span>如果有什么心得体会<span class="mojikumi-line-end">、</span>经验分享之类应该会开新的文章<span class="mojikumi-line-end">。</span></p>
<p>顺便也算是程设训练的游记了（<span class="mojikumi">“</span>游记<span class="mojikumi-line-end">”</span>这个词来源于 OI 时期的习惯<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[

<p>早就想学 Rust 了<span class="mojikumi-line-end">，</span>但一直咕着<span class="mojikumi-line-end">。</span>这次小学期的程设训练开了 Rust 课堂<span class="mojikumi-line-end">，</span>就毫不犹豫地选了<span class="mojikumi-line-end">，</span>也以此为契机学了 Rust<span class="mojikumi-line-end">。</span></p>
<p>这篇就是简单记录一下大体上的学习过程<span class="mojikumi-line-end">，</span>如果有什么心得体会<span class="mojikumi-line-end">、</span>经验分享之类应该会开新的文章<span class="mojikumi-line-end">。</span></p>
<p>顺便也算是程设训练的游记了（<span class="mojikumi">“</span>游记<span class="mojikumi-line-end">”</span>这个词来源于 OI 时期的习惯<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>

<h2 id="初学------the-rust-programming-language" class="heading"><a href="#初学------the-rust-programming-language" class="heading-anchor" aria-label="章节： 初学 —— The Rust Programming Language" tabindex="-1"></a><span>初学 —— The Rust Programming Language</span></h2>
<p>不同于 Python<span class="mojikumi-line-end">、</span>JavaScript<span class="mojikumi-line-end">，</span>这次学 Rust 更像是当初学 C++<span class="mojikumi-line-end">，</span>不是先魔改代码<span class="mojikumi-line-end">、</span>用啥搜啥<span class="mojikumi-line-end">、</span>StackOverflow<span class="mojikumi-line-end">，</span>而是在还没怎么接触过时就直接看书<span class="mojikumi-line-end">。</span></p>
<p>虽然没有细看中文翻译的质量如何<span class="mojikumi-line-end">，</span>但至少术语是不好翻译的<span class="mojikumi-line-end">，</span>就直接看了英文版的 <a href="https://doc.rust-lang.org/book/">The Rust Programming Language</a><span class="mojikumi-line-end">。</span></p>
<p>这本书看下来给我的感觉是<span class="mojikumi-line-end">，</span>很多地方没有按知识点依赖关系的拓扑排序来讲<span class="mojikumi-line-end">，</span>而似乎是以某种由浅入深的顺序来的<span class="mojikumi-line-end">，</span>很多后面才学到的概念在前文就出现<span class="mojikumi-line-end">，</span>而前面学的概念的完全不需要后面知识的扩展又在后面才补充<span class="mojikumi-line-end">，</span>还有一些零碎的知识是在 project chapter 讲的<span class="mojikumi-line-end">。</span></p>
<p>反正<span class="mojikumi-line-end">，</span>每天看两三章<span class="mojikumi-line-end">，</span><s>还能有不少时间摸鱼<span class="mojikumi-line-end">，</span>摸个</s> 一两周就看得差不多了<span class="mojikumi-line-start">（</span></p>
<h2 id="初步练习------洛谷" class="heading"><a href="#初步练习------洛谷" class="heading-anchor" aria-label="章节： 初步练习 —— 洛谷" tabindex="-1"></a><span>初步练习 —— 洛谷</span></h2>
<p>看书的同时在 <a href="https://www.luogu.com.cn/">洛谷</a> 上随便挑了点入门题和板子题写<span class="mojikumi-line-end">。</span>只不过一开始没学 io 之类的<span class="mojikumi-line-end">，</span>会再多语法也做不动题<span class="mojikumi-line-end">，</span><s>但幸好有 GitHub Copilot</s><span class="mojikumi-line-end">。</span></p>
<p>在这放个读入的例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h3><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">6 0</span></span>
<span><span style="color: #d6deeb">1 1 4 5 1 4</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">6 0</span></span>
<span><span style="color: #403f53">1 1 4 5 1 4</span></span></samp></pre></div></section>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="rust 代码块" data-v-ad49d235>rust</h3><ile-root id="ile-4"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-4--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">fn</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">main</span><span style="color: #D6DEEB">() {</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">stdin</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> std</span><span style="color: #7FDBCA">::</span><span style="color: #D6DEEB">io</span><span style="color: #7FDBCA">::</span><span style="color: #82AAFF">stdin</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">mut</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> String</span><span style="color: #7FDBCA">::</span><span style="color: #82AAFF">new</span><span style="color: #D6DEEB">();</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">stdin</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">read_line</span><span style="color: #D6DEEB">(</span><span style="color: #7FDBCA">&amp;</span><span style="color: #C792EA">mut</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">)</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">mut</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">parts</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">split_whitespace</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">n</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">parts</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">next</span><span style="color: #D6DEEB">()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">parse</span><span style="color: #7FDBCA">::</span><span style="color: #D6DEEB">&lt;u32&gt;()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">assert_eq!</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">n</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">6</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">m</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">parts</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">next</span><span style="color: #D6DEEB">()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">parse</span><span style="color: #7FDBCA">::</span><span style="color: #D6DEEB">&lt;u32&gt;()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">assert_eq!</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">m</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">);</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">clear</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">stdin</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">read_line</span><span style="color: #D6DEEB">(</span><span style="color: #7FDBCA">&amp;</span><span style="color: #C792EA">mut</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">)</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">let</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">a</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">split_whitespace</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">map</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">|</span><span style="color: #C5E478">x</span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">x</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">parse</span><span style="color: #7FDBCA">::</span><span style="color: #D6DEEB">&lt;i32&gt;()</span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">unwrap</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #7FDBCA">.</span><span style="color: #82AAFF">collect</span><span style="color: #7FDBCA">::</span><span style="color: #D6DEEB">&lt;Vec&lt;</span><span style="color: #C5E478">_</span><span style="color: #D6DEEB">&gt;&gt;();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">assert_eq!</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">a</span><span style="color: #D6DEEB">, </span><span style="color: #82AAFF">vec!</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">5</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">]);</span></span>
<span><span style="color: #D6DEEB">}</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">fn</span><span style="color: #403F53"> </span><span style="color: #4876D6">main</span><span style="color: #403F53">() {</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #4876D6">stdin</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> std</span><span style="color: #0C969B">::</span><span style="color: #403F53">io</span><span style="color: #0C969B">::</span><span style="color: #4876D6">stdin</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #994CC3">mut</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> String</span><span style="color: #0C969B">::</span><span style="color: #4876D6">new</span><span style="color: #403F53">();</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">stdin</span><span style="color: #0C969B">.</span><span style="color: #4876D6">read_line</span><span style="color: #403F53">(</span><span style="color: #0C969B">&amp;</span><span style="color: #994CC3">mut</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">)</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #994CC3">mut</span><span style="color: #403F53"> </span><span style="color: #4876D6">parts</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #0C969B">.</span><span style="color: #4876D6">split_whitespace</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #4876D6">n</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">parts</span><span style="color: #0C969B">.</span><span style="color: #4876D6">next</span><span style="color: #403F53">()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">parse</span><span style="color: #0C969B">::</span><span style="color: #403F53">&lt;u32&gt;()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">assert_eq!</span><span style="color: #403F53">(</span><span style="color: #4876D6">n</span><span style="color: #403F53">, </span><span style="color: #AA0982">6</span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #4876D6">m</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">parts</span><span style="color: #0C969B">.</span><span style="color: #4876D6">next</span><span style="color: #403F53">()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">parse</span><span style="color: #0C969B">::</span><span style="color: #403F53">&lt;u32&gt;()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">assert_eq!</span><span style="color: #403F53">(</span><span style="color: #4876D6">m</span><span style="color: #403F53">, </span><span style="color: #AA0982">0</span><span style="color: #403F53">);</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #0C969B">.</span><span style="color: #4876D6">clear</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">stdin</span><span style="color: #0C969B">.</span><span style="color: #4876D6">read_line</span><span style="color: #403F53">(</span><span style="color: #0C969B">&amp;</span><span style="color: #994CC3">mut</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">)</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">let</span><span style="color: #403F53"> </span><span style="color: #4876D6">a</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span></span>
<span><span style="color: #403F53">        </span><span style="color: #0C969B">.</span><span style="color: #4876D6">split_whitespace</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">        </span><span style="color: #0C969B">.</span><span style="color: #4876D6">map</span><span style="color: #403F53">(</span><span style="color: #994CC3">|</span><span style="color: #4876D6">x</span><span style="color: #994CC3">|</span><span style="color: #403F53"> </span><span style="color: #4876D6">x</span><span style="color: #0C969B">.</span><span style="color: #4876D6">parse</span><span style="color: #0C969B">::</span><span style="color: #403F53">&lt;i32&gt;()</span><span style="color: #0C969B">.</span><span style="color: #4876D6">unwrap</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">        </span><span style="color: #0C969B">.</span><span style="color: #4876D6">collect</span><span style="color: #0C969B">::</span><span style="color: #403F53">&lt;Vec&lt;</span><span style="color: #4876D6">_</span><span style="color: #403F53">&gt;&gt;();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">assert_eq!</span><span style="color: #403F53">(</span><span style="color: #4876D6">a</span><span style="color: #403F53">, </span><span style="color: #4876D6">vec!</span><span style="color: #403F53">[</span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">4</span><span style="color: #403F53">, </span><span style="color: #AA0982">5</span><span style="color: #403F53">, </span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">4</span><span style="color: #403F53">]);</span></span>
<span><span style="color: #403F53">}</span></span></code></pre></div></section>
<h2 id="复习------a-half-hour-to-learn-rust" class="heading"><a href="#复习------a-half-hour-to-learn-rust" class="heading-anchor" aria-label="章节： 复习 —— A half-hour to learn Rust" tabindex="-1"></a><span>复习 —— A half-hour to learn Rust</span></h2>
<p>之前在 Hacker News 上看到了 <a href="https://fasterthanli.me/articles/a-half-hour-to-learn-rust">A half-hour to learn Rust</a> 这篇文章<span class="mojikumi-line-end">。</span>如果真的是看这个东西来学 Rust<span class="mojikumi-line-end">，</span>不说能不能学会<span class="mojikumi-line-end">，</span>肯定是学不扎实的<span class="mojikumi-line-end">。</span>但是<span class="mojikumi-line-end">，</span>看完书之后很多语法也忘了<span class="mojikumi-line-end">，</span>看这个用来复习还是非常不错的<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>另外<span class="mojikumi-line-end">，</span>我感觉这个的顺序貌似比书更有条理一些<span class="mojikumi-line-end">，</span>虽然初学不一定友好 🤔<span class="mojikumi-line-end">）</span></p>
<h2 id="深入了解------the-rust-standard-library" class="heading"><a href="#深入了解------the-rust-standard-library" class="heading-anchor" aria-label="章节： 深入了解 —— The Rust Standard Library" tabindex="-1"></a><span>深入了解 —— The Rust Standard Library</span></h2>
<p>其实看书的时候就感觉到了<span class="mojikumi-line-end">，</span>很多时候不懂一段代码不是不懂语法<span class="mojikumi-line-end">，</span>而是不懂 <a href="https://doc.rust-lang.org/stable/std/">标准库</a> 的实现<span class="mojikumi-line-end">，</span>而把 API 理解成了没学过的语法<span class="mojikumi-line-end">。</span>了解标准库<span class="mojikumi-line-end">，</span>不仅是提升编码和运行的效率<span class="mojikumi-line-end">，</span>也是能够看懂很多基础代码的关键<span class="mojikumi-line-end">。</span></p>
<p>看文档的时候发现<span class="mojikumi-line-end">，</span>不仅是学到了很多有用的 methods<span class="mojikumi-line-end">，</span>也学到了很多其它东西<span class="mojikumi-line-end">。</span>比如说<span class="mojikumi-line-end">：</span></p>
<ul>
<li>一般来说都可以用 <a href="https://doc.rust-lang.org/stable/std/cmp/fn.max.html"><code>std<wbr>::<wbr>cmp<wbr>::<wbr>max</code></a> 来取 max<span class="mojikumi-line-end">，</span>但 <a href="https://doc.rust-lang.org/stable/std/primitive.f32.html#method.max"><code>f32</code> 专门有一个 <code>pub fn max(self, other: f32) -> f32</code></a><span class="mojikumi-line-end">，</span>这是因为浮点数有 NaN 这个特殊情况导致 <code>f32</code> 没有 impl <a href="https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html"><code>Ord</code></a><span class="mojikumi-line-end">，</span>而 <code>std<wbr>::<wbr>cmp<wbr>::<wbr>max</code> 需要 <code>Ord</code></li>
<li>书里貌似没讲到的 <a href="https://doc.rust-lang.org/stable/std/keyword.ref.html">keyword <code>ref</code></a><span class="mojikumi-line-start">（</span>以及在 pattern matching 中和 <code>&#x26;</code> 的区别<span class="mojikumi-line-end">）</span></li>
<li>引用之间进行比较时会自动转成指向的值<span class="mojikumi-line-end">，</span>即实际进行比较的是指向的值<span class="mojikumi-line-start">（</span>可以通过 <a href="https://doc.rust-lang.org/stable/std/ptr/fn.eq.html"><code>std<wbr>::<wbr>ptr<wbr>::<wbr>eq</code></a> 来比较地址<span class="mojikumi-line-end">）</span></li>
<li>从标准库的 API 设计能领会到很多 trait 和 generic 的用法<span class="mojikumi-line-end">，</span>体会到它们组合在一起的强大</li>
<li><a href="https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator"><code>Iterator</code> 自动有 <code>IntoIterator</code></a><span class="mojikumi-line-end">，</span>所以用 <code>IntoIterator</code> 代替 <code>Iterator</code> 作为 trait bound 可以让函数更灵活</li>
<li>……</li>
</ul>
<p>简单看一看就能知道 the book 里涉及到的真的只是冰山一角<span class="mojikumi-line-end">，</span>学 Rust 标准库的意义会比学 C++ 的 STL 大得多<span class="mojikumi-line-start">（</span>个人感觉<span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>也可能是我 C++ 水平太低 / 没认真学 STL 😢<span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>或者 Primer Plus 讲的全一些<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h2 id="上课" class="heading"><a href="#上课" class="heading-anchor" aria-label="章节： 上课" tabindex="-1"></a><span>上课</span></h2>
<h3 id="class-1" class="heading"><a href="#class-1" class="heading-anchor" aria-label="章节： Class 1" tabindex="-1"></a><span>Class 1</span></h3>
<p>因为自学过了<span class="mojikumi-line-end">，</span>所以上课就基本上是把老师的声音当作 bgm 偶尔听一下<span class="mojikumi-line-end">，</span>然后继续看标准库文档<span class="mojikumi-line-start">（</span></p>
<p>上课的时候老师提到 Rust 编译器可以提示如何修改<span class="mojikumi-line-end">，</span>于是我顺势在课程群里发了个 <a href="https://twitter.com/st1page/status/1477168761744805891">rust 程序员现状</a> 的截图<span class="mojikumi-line-start">（</span></p>
<p><picture><source type="image/webp" srcset="/assets/rust-programmers-be-like.b8596e6d.webp"><img srcset="/assets/rust-programmers-be-like.a720f87c.jpeg" loading="lazy" src="/assets/rust-programmers-be-like.a720f87c.jpeg" width="706" height="900" alt="rust程序员现状"></picture></p>
<p>课后把 OJ 上的作业速通后发现榜不是公开的 😢</p>
<p>后来还发现自己一道题写了个 <code>collect</code> 得到的 <code>Vec</code> 只用在一个 <code>for</code> 里<span class="mojikumi-line-start">（</span>就是说可以直接把迭代器用在 <code>for</code> 不用先 <code>collect</code><span class="mojikumi-line-end">）</span>😵 想改过来<span class="mojikumi-line-end">，</span>但虽然没有公开榜<span class="mojikumi-line-end">，</span>还是不想承受可能的罚时<span class="mojikumi-line-start">（</span></p>
<h3 id="class-2" class="heading"><a href="#class-2" class="heading-anchor" aria-label="章节： Class 2" tabindex="-1"></a><span>Class 2</span></h3>
<p>第二节课前后共一天多的时间<span class="mojikumi-line-end">，</span>写了 16h 左右<span class="mojikumi-line-end">，</span>把 Wordle 大作业的基础功能写完了<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span><s>本来以为 Wordle 挺好写的<span class="mojikumi-line-end">，</span>没想到需求这么多<span class="mojikumi-line-end">，</span>需求文档模糊不清的地方还有的要问有的要自己设计<span class="mojikumi-line-end">。</span></s><span class="mojikumi-line-end">）</span></p>
<p>感觉课上讲的又快<span class="mojikumi-line-end">，</span>大作业需要的知识又没讲全<span class="mojikumi-line-end">，</span>很难想象如果不自学该怎么应对这个课<span class="mojikumi-line-start">（</span></p>
<h3 id="class-3" class="heading"><a href="#class-3" class="heading-anchor" aria-label="章节： Class 3" tabindex="-1"></a><span>Class 3</span></h3>
<p>修了一些文档说明不清导致的 bug<span class="mojikumi-line-end">，</span>然后研究了一下扩展功能怎么写<span class="mojikumi-line-end">。</span></p>
<p>不知道为什么把单词按信息熵排序写了半天<span class="mojikumi-line-end">，</span>明明挺简单的<span class="mojikumi-line-end">。</span>可能是听着老师讲课没法专心想算法<span class="mojikumi-line-end">。</span></p>
<p>后来试着用 <a href="https://docs.rs/rayon/latest/rayon/">rayon</a> 把信息熵计算并行化了<span class="mojikumi-line-end">，</span>在我本机除了第一次猜测基本上都能秒出结果<span class="mojikumi-line-end">，</span>感觉很爽 <s><span class="mojikumi-line-end">，</span>甚至玩了半天意义不明的照着提示输入</s><span class="mojikumi-line-end">。</span></p>
<p>再后来发现用 release 模式编译的优化比并行还大 🌚</p>
<h3 id="第一次大作业验收" class="heading"><a href="#第一次大作业验收" class="heading-anchor" aria-label="章节： 第一次大作业验收" tabindex="-1"></a><span>第一次大作业验收</span></h3>
<p>验收在 THUWC 去过的东主楼<span class="mojikumi-line-end">，</span>但上大学后还是第一次去<span class="mojikumi-line-end">，</span>结果走错了<span class="mojikumi-line-end">，</span>迟到了 5min 😵 然后非常慌张地展示提高功能<span class="mojikumi-line-end">，</span>都没太演示全<span class="mojikumi-line-end">，</span><s>感觉白写了</s><span class="mojikumi-line-start">（</span></p>
<h3 id="class-48" class="heading"><a href="#class-48" class="heading-anchor" aria-label="章节： Class 4~8" tabindex="-1"></a><span>Class 4~8</span></h3>
<p>略<span class="mojikumi-line-start">（</span></p>
<h3 id="第二次大作业验收" class="heading"><a href="#第二次大作业验收" class="heading-anchor" aria-label="章节： 第二次大作业验收" tabindex="-1"></a><span>第二次大作业验收</span></h3>
<p>这次真的有比 pretests 强很多的 system test 了<span class="mojikumi-line-end">，</span>还好没 FST<span class="mojikumi-line-start">（</span>助教<span class="mojikumi-line-end">：</span>这个点你为什么能过啊<span class="mojikumi-line-start">（</span>x</p>
<p>可能是因为这个课不是学前端的<span class="mojikumi-line-end">，</span>而且助教只简单看了一下界面演示没看代码<span class="mojikumi-line-end">，</span>槽点很多的前端被夸了很科学<span class="mojikumi-line-start">（</span></p>
<p>可能是因为这个课不是学数据库的<span class="mojikumi-line-end">，</span>而且听说有其他同学数据库里全是 JSON<span class="mojikumi-line-end">，</span>普普通通的建表被夸了很科学<span class="mojikumi-line-start">（</span></p>
<h3 id="关于课上的一些翻译" class="heading"><a href="#关于课上的一些翻译" class="heading-anchor" aria-label="章节： 关于课上的一些翻译" tabindex="-1"></a><span>关于课上的一些翻译</span></h3>
<p>为什么什么都要翻译出来啊<span class="mojikumi-line-start">（</span>虽然如果英语母语的话看原文应该也很尬 🤣</p>
<p><picture><source type="image/webp" srcset="/assets/rust-translations.cc150348.webp"><img srcset="/assets/rust-translations.5ccc7df9.jpeg" loading="lazy" src="/assets/rust-translations.5ccc7df9.jpeg" width="500" height="651" alt="trait: 特型；panic: 恐慌；poisoned: 中毒；crate: 箱；library crate: 库箱"></picture></p>
<h2 id="async-rust" class="heading"><a href="#async-rust" class="heading-anchor" aria-label="章节： Async Rust" tabindex="-1"></a><span>Async Rust</span></h2>
<p>先是看了 <a href="https://rust-lang.github.io/async-book/">Asynchronous Programming in Rust</a><span class="mojikumi-line-end">，</span>感觉看得一知半解的<span class="mojikumi-line-start">（</span>尤其是 <code>Pin</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>好像大概知道 <code>Future</code> 在干什么又不完全知道<span class="mojikumi-line-start">（</span><s>而且这本书好咕啊<span class="mojikumi-line-end">，</span><code>TODO</code> 的章节应该是有生之年了</s></p>
<p>没看完 async book<span class="mojikumi-line-end">，</span>直接去看 <a href="https://tokio.rs/tokio/tutorial">Tokio Tutorial</a> 和 <a href="https://book.async.rs/">Async programming in Rust with async-std</a> 了<span class="mojikumi-line-end">。</span>作为 async runtime 的教程<span class="mojikumi-line-end">，</span>它们涉及到的具体原理和实现少一些<span class="mojikumi-line-end">，</span>更注重怎么实际使用<span class="mojikumi-line-end">，</span>读起来会容易理解一些<span class="mojikumi-line-end">。</span>因为 Tokio 更 popular<span class="mojikumi-line-end">，</span>主要看的是 Tokio 的教程<span class="mojikumi-line-end">。</span></p>
<h2 id="数据库-diesel" class="heading"><a href="#数据库-diesel" class="heading-anchor" aria-label="章节： 数据库: Diesel" tabindex="-1"></a><span>数据库: Diesel</span></h2>
<p>感觉 <a href="https://diesel.rs/guides/">diesel 的教程</a> 写的挺简略的<span class="mojikumi-line-end">，</span>但对着 examples 硬查文档也勉强能看懂基本用法<span class="mojikumi-line-end">。</span>ORM 看着就很<span class="mojikumi-line-start">“</span>安全<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>只不过实在是太类型体操了<span class="mojikumi-line-end">，</span>不仅文档查起来有点小麻烦<span class="mojikumi-line-end">，</span>代码复用也经常因为繁琐的 trait bounds 写不太动<span class="mojikumi-line-start">（</span>也可能是我没学会<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p><a href="https://crates.io/crates/diesel-derive-enum">diesel-derive-enum</a> 是好用的<span class="mojikumi-line-end">。</span></p>
<p>Sqlite 的 <code>RETURNING</code> 语句需要启用 <code>returning_<wbr>clauses_<wbr>for_<wbr>sqlite_<wbr>3_<wbr>35</code> feature flag<span class="mojikumi-line-start">（</span>并且需要至少 3.35 版本的 Sqlite<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>没启用的时候对着一堆 trait bound 不满足的错误信息<span class="mojikumi-line-start">（</span>就和 C++ 模板感觉差不多了..<span class="mojikumi-line-end">）</span>根本发现不了错误原因<span class="mojikumi-line-end">，</span>还是翻文档翻半天发现的<span class="mojikumi-line-end">。</span></p>
<p>还遇到一个 Sqlite 锁死的坑<span class="mojikumi-line-end">，</span>通过 <a href="https://stackoverflow.com/a/57717533">使用 r2d2 设定 <code>busy_timeout</code></a> 并 <a href="https://github.com/the-lean-crate/criner/issues/1">使用 WAL mode 以及 immediate transaction</a> <span class="mojikumi">（</span>hopefully<span class="mojikumi-line-end">）</span>解决了<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/Rust">Rust</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95">学习记录</category>
        </item>
    </channel>
</rss>