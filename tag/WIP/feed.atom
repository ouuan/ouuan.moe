<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ouuan.moe/tag/WIP</id>
    <title>ouuan's blog: 标签: WIP</title>
    <updated>2022-10-17T02:30:45.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>ouuan</name>
        <uri>https://github.com/ouuan</uri>
    </author>
    <link rel="alternate" href="https://ouuan.moe/tag/WIP"/>
    <link rel="self" href="https://ouuan.moe/tag/WIP/feed.atom"/>
    <subtitle>标签: WIP - 欢迎来到 ouuan 的博客！本博客以技术向内容为主，包括 Web、系统、Linux、大学生活等方面的学习笔记和经验分享。</subtitle>
    <icon>https://ouuan.moe/favicon.ico</icon>
    <rights>Copyright © 2022 - 2023 ouuan
Licensed under CC BY-SA 4.0</rights>
    <entry>
        <title type="html"><![CDATA[CS:APP 第四章学习笔记]]></title>
        <id>https://ouuan.moe/post/2022/10/csapp-4</id>
        <link href="https://ouuan.moe/post/2022/10/csapp-4"/>
        <updated>2022-10-17T02:30:45.000Z</updated>
        <summary type="html"><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
]]></summary>
        <content type="html"><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>

<h2 id="the-y86-64-instruction-set-architecture" class="heading"><a href="#the-y86-64-instruction-set-architecture" class="heading-anchor" aria-label="章节： The Y86-64 Instruction Set Architecture" tabindex="-1"></a><span>The Y86-64 Instruction Set Architecture</span></h2>
<p>这部分定义了在这一章中用作演示的名为 <span class="mojikumi">“</span>Y86-64<span class="mojikumi">”</span> 的玩具 ISA<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序状态" class="heading"><a href="#y86-64-程序状态" class="heading-anchor" aria-label="章节： Y86-64 程序状态" tabindex="-1"></a><span>Y86-64 程序状态</span></h3>
<ul>
<li>15 个寄存器<span class="mojikumi-line-start">（</span>x86-64 的寄存器除去 <code>%r15</code><span class="mojikumi-line-end">，</span>为了简化编码<span class="mojikumi-line-end">）</span></li>
<li>3 个 status flag: <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code></li>
<li>program counter: <code>PC</code></li>
<li>memory</li>
<li>status code: <code>Stat</code><span class="mojikumi-line-end">，</span>用来表示程序正常运行或发生了异常</li>
</ul>
<h3 id="y86-64-指令" class="heading"><a href="#y86-64-指令" class="heading-anchor" aria-label="章节： Y86-64 指令" tabindex="-1"></a><span>Y86-64 指令</span></h3>
<p>Y86-64 指令大致上是 x86-64 的一个子集<span class="mojikumi-line-end">，</span>但在 operand 等方面有一些简化或区别<span class="mojikumi-line-end">。</span></p>
<p>operand 与 x86-64 的区别是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Immediate<span class="mojikumi-line-end">、</span>Register<span class="mojikumi-line-end">、</span>Memory 都只有 64 位的版本</li>
<li>Register 只有 15 个</li>
<li>Memory 不支持 <code>(, ri, s)</code> 的部分<span class="mojikumi-line-end">，</span>只能是 <code>Imm</code>/<code>(rb)</code>/<code>Imm(rb)</code></li>
</ul>
<p>condition code 只有六个<span class="mojikumi-line-end">，</span>即 signed compare: <code>le</code>/<code>l</code>/<code>e</code>/<code>ne</code>/<code>ge</code>/<code>g</code></p>
<p>指令列表<span class="mojikumi-line-end">，</span>以及与 x86-64 的区别<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>irmovq</code>/<code>rrmovq</code>/<code>mrmovq</code>/<code>rmmovq</code><span class="mojikumi-line-end">，</span>即将 <code>movq</code> 按 operand 类型拆成了四个指令</li>
<li><code>addq</code>/<code>subq</code>/<code>andq</code>/<code>xorq</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且只设置 <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code> 三个 status flag</li>
<li><code>jmp</code>/<code>jle</code>/<code>jl</code>/<code>je</code>/<code>jne</code>/<code>jge</code>/<code>jg</code><span class="mojikumi-line-end">，</span>包括 <code>jmp</code> 在内都只能跳转到固定的地址<span class="mojikumi-line-end">，</span>不接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且这个地址是绝对地址而非相对于 PC 的地址</li>
<li><code>cmovle</code>/<code>cmovl</code>/<code>cmove</code>/<code>cmovne</code>/<code>cmovge</code>/<code>cmovg</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand</li>
<li><code>call</code>: 地址是绝对地址</li>
<li><code>ret</code><span class="mojikumi-line-end">、</span><code>pushq</code><span class="mojikumi-line-end">、</span><code>popq</code><span class="mojikumi-line-end">、</span><code>nop</code>: 与 x86-64 基本相同</li>
<li><code>halt</code>: 停止运行<span class="mojikumi-line-end">，</span>将 status code 设为 <code>HLT</code></li>
</ul>
<h3 id="y86-64-指令编码" class="heading"><a href="#y86-64-指令编码" class="heading-anchor" aria-label="章节： Y86-64 指令编码" tabindex="-1"></a><span>Y86-64 指令编码</span></h3>
<p>Y86-64 通过对指令的简化<span class="mojikumi-line-end">，</span>同时也使编码得到了简化<span class="mojikumi-line-end">，</span>但相应地使得编码不紧凑<span class="mojikumi-line-end">，</span>会有浪费<span class="mojikumi-line-end">。</span></p>
<p>CS:APP Figure 4.2 简明地展示了 Y86-64 的指令编码<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.2.429f9e8d.webp"><img srcset="/assets/csapp-fig4.2.43f85c3f.png" loading="lazy" src="/assets/csapp-fig4.2.43f85c3f.png" width="976" height="730" alt="Y86-64 指令编码示意图"></picture></p>
<h4 id="指令类型的编码" class="heading"><a href="#指令类型的编码" class="heading-anchor" aria-label="章节： 指令类型的编码" tabindex="-1"></a><span>指令类型的编码</span></h4>
<p>指令编码的第一个 byte 表示指令的类型<span class="mojikumi-line-end">。</span>这个 byte 的高位叫做 <i>code</i><span class="mojikumi-line-end">，</span>低位叫做 <i>function</i><span class="mojikumi-line-end">，</span>其中 function 只在某几个指令有用<span class="mojikumi-line-end">。</span>特别地<span class="mojikumi-line-end">，</span><code>rrmovq</code> 和 <code>cmovXX</code> 的 code 是相同的<span class="mojikumi-line-end">，</span>这表示 <code>rrmovq</code> 可以看作一种特殊的 <code>cmovXX</code><span class="mojikumi-line-end">。</span></p>
<p>算术运算的 function: <code>add</code> 0, <code>sub</code> 1, <code>and</code> 2, <code>xor</code> 3</p>
<p>condition code 的 function: <code>le</code> 1, <code>l</code> 2, <code>e</code> 3, <code>ne</code> 4, <code>ge</code> 5, <code>g</code> 6<span class="mojikumi-line-end">；</span><code>jmp</code> 的 function 为 0</p>
<h4 id="register-specifier-byte" class="heading"><a href="#register-specifier-byte" class="heading-anchor" aria-label="章节： Register Specifier Byte" tabindex="-1"></a><span>Register Specifier Byte</span></h4>
<p>除了 <code>jXX</code> 和 <code>call</code><span class="mojikumi-line-end">，</span>指令编码的第二个 byte<span class="mojikumi-line-start">（</span>如果有<span class="mojikumi-line-end">）</span>的高低位分别表示一个 register identifier<span class="mojikumi-line-end">。</span></p>
<p>register identifier 从 <code>%rax</code> 为 <code>0</code> 到 <code>%r14</code> 为 <code>E</code><span class="mojikumi-line-end">；</span><code>F</code> 表示不是寄存器<span class="mojikumi-line-end">。</span></p>
<h4 id="constant-word" class="heading"><a href="#constant-word" class="heading-anchor" aria-label="章节： Constant Word" tabindex="-1"></a><span>Constant Word</span></h4>
<p>在 <code>irmovq</code><span class="mojikumi-line-end">、</span><code>rmmovq</code>/<code>mrmovq</code><span class="mojikumi-line-end">、</span><code>jXX</code>/<code>call</code> 中<span class="mojikumi-line-end">，</span>分别有一个 8-byte 的 constant word<span class="mojikumi-line-end">，</span>用来表示 immediate value 或地址<span class="mojikumi-line-end">，</span>byte ordering 是 little endian<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-异常" class="heading"><a href="#y86-64-异常" class="heading-anchor" aria-label="章节： Y86-64 异常" tabindex="-1"></a><span>Y86-64 异常</span></h3>
<p>status code <code>Stat</code> 有四种可能的取值<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>AOK</code>: 正常</li>
<li><code>HLT</code>: 执行了 <code>halt</code> 指令</li>
<li><code>ADR</code>: 访问了不合法的地址</li>
<li><code>INS</code>: 指令编码不合法</li>
</ul>
<p>在 Y86-64 中<span class="mojikumi-line-end">，</span>遇到异常后处理器会立即停止运行<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序" class="heading"><a href="#y86-64-程序" class="heading-anchor" aria-label="章节： Y86-64 程序" tabindex="-1"></a><span>Y86-64 程序</span></h3>
<p>CS:APP Figure 4.8 展示了一个完整的 Y86-64 程序<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.8.7c8b0ffb.webp"><img srcset="/assets/csapp-fig4.8.49c0b260.png" loading="lazy" src="/assets/csapp-fig4.8.49c0b260.png" width="930" height="1075" alt="完整 Y86-64 程序的汇编与机器码"></picture></p>
<p>可以下载 <a href="http://csapp.cs.cmu.edu/3e/sim.tar">Y86-64 tools</a> 并使用 <code>yas</code> 进行汇编<span class="mojikumi-line-end">，</span>使用 <code>yis</code> 模拟运行<span class="mojikumi-line-end">。</span>编译 <code>yas</code> 时 <a href="https://stackoverflow.com/questions/63152352/fail-to-compile-the-y86-simulatur-csapp">需要添加 <code>-fcommon</code> 编译选项</a><span class="mojikumi-line-end">。</span></p>
<h3 id="对-rsp-进行-pushpop" class="heading"><a href="#对-rsp-进行-pushpop" class="heading-anchor" aria-label="章节： 对 %rsp 进行 push/pop" tabindex="-1"></a><span>对 %rsp 进行 push/pop</span></h3>
<p><code>pushq %rsp</code><span class="mojikumi-line-end">、</span><code>popq %rsp</code> 这两条指令虽然没什么用<span class="mojikumi-line-end">，</span>但它们的行为可能有歧义<span class="mojikumi-line-end">，</span>所以在设计 ISA 时明确规定它们的行为是有必要的<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 遵循和 x86-64 相同的规则<span class="mojikumi-line-end">：</span><code>pushq %rsp</code> 会将旧的<span class="mojikumi-line-start">（</span>没有减 8 的<span class="mojikumi-line-end">）</span><code>%rsp</code> 的值入栈<span class="mojikumi-line-end">，</span><code>popq %rsp</code> 相当于 <code>mrmovq (%rsp), %rsp</code><span class="mojikumi-line-end">。</span></p>
<h2 id="logic-design-and-the-hardware-control-language-hcl" class="heading"><a href="#logic-design-and-the-hardware-control-language-hcl" class="heading-anchor" aria-label="章节： Logic Design and the Hardware Control Language HCL" tabindex="-1"></a><span>Logic Design and the Hardware Control Language HCL</span></h2>
<p>这一章中使用玩具语言 HCL (hardware control language) 来描述 Y86-64 处理器的逻辑设计<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>与之类似但不是玩具的语言<span class="mojikumi-line-end">，</span>例如 VHDL<span class="mojikumi-line-end">、</span>Verilog 等<span class="mojikumi-line-end">，</span>叫做 <span class="mojikumi">“</span><a href="https://en.wikipedia.org/wiki/Hardware_description_language">hardware description language (HDL)</a><span class="mojikumi">”</span><span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="逻辑门" class="heading"><a href="#逻辑门" class="heading-anchor" aria-label="章节： 逻辑门" tabindex="-1"></a><span>逻辑门</span></h3>
<p>CSAPP Figure 4.9:</p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.9.15f29f6a.webp"><img srcset="/assets/csapp-fig4.9.78811b7b.png" loading="lazy" src="/assets/csapp-fig4.9.78811b7b.png" width="546" height="168" alt="与或非逻辑门"></picture></p>
<ul>
<li>图中只展示了输入个数为 2 的 AND 和 OR<span class="mojikumi-line-end">，</span>但可以有更多输入</li>
<li>一旦输入改变<span class="mojikumi-line-end">，</span>逻辑门的输出很快就会随之改变</li>
</ul>
<h3 id="组合逻辑电路" class="heading"><a href="#组合逻辑电路" class="heading-anchor" aria-label="章节： 组合逻辑电路" tabindex="-1"></a><span>组合逻辑电路</span></h3>
<p>组合逻辑电路即由若干逻辑门组合而成的电路<span class="mojikumi-line-end">，</span>它的特点是无状态<span class="mojikumi-line-end">，</span>输出仅与输入有关<span class="mojikumi-line-end">，</span>输入改变后输出很快就会随之改变<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>用逻辑表达式来表示组合逻辑电路<span class="mojikumi-line-end">，</span>例如 <code>bool eq = (a &#x26;&#x26; b) || (!a &#x26;&#x26; !b)</code> 表示计算 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 是否相等的电路<span class="mojikumi-line-end">。</span>因为它表示的是电路而不是计算<span class="mojikumi-line-end">，</span>在这条语句之后<span class="mojikumi-line-end">，</span>一旦 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 的值发生改变<span class="mojikumi-line-end">，</span><code>eq</code> 的输出也会改变<span class="mojikumi-line-start">（</span>和 Vue 的 computed 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="以-word-为单位进行操作的电路" class="heading"><a href="#以-word-为单位进行操作的电路" class="heading-anchor" aria-label="章节： 以 word 为单位进行操作的电路" tabindex="-1"></a><span>以 word 为单位进行操作的电路</span></h3>
<p>在处理器的设计中<span class="mojikumi-line-end">，</span>经常需要对一个 word 而非单个 bit 进行操作<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>一般使用大写的名称表示 word<span class="mojikumi-line-end">，</span>例如: <code>bool Eq = (A == B)</code> 表示计算 word <code>A</code><span class="mojikumi-line-end">、</span><code>B</code> 是否相等的电路<span class="mojikumi-line-end">，</span>可以实现为判断每个 bit 是否相等再 AND<span class="mojikumi-line-end">。</span></p>
<h3 id="multiplexor-mux" class="heading"><a href="#multiplexor-mux" class="heading-anchor" aria-label="章节： Multiplexor (MUX)" tabindex="-1"></a><span>Multiplexor (MUX)</span></h3>
<p>multiplexor (MUX) 的功能是通过信号输入的值来在其它输入中选择一个作为输出<span class="mojikumi-line-end">，</span>word-level 的 MUX 电路如图 (CSAPP Figure 4.13)<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.13.47e7678b.webp"><img srcset="/assets/csapp-fig4.13.342f11a8.png" loading="lazy" src="/assets/csapp-fig4.13.342f11a8.png" width="886" height="759" alt="word-level MUX 电路"></picture></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>使用 <i>case expressions</i> 表示 MUX<span class="mojikumi-line-end">，</span>例如</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-fc4b3c9e><div class="media-screen:important-flex items-center px-4 h-6 rd-t-1 bg-area dark:bg-#2A313A" style="display:none;" data-v-fc4b3c9e><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="hcl-csapp 代码块" data-v-fc4b3c9e>hcl-csapp</h4><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="light:hidden" itemprop="text" data-v-fc4b3c9e><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Mux</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> &amp;&amp; !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">D</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-fc4b3c9e><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Mux</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53"> &amp;&amp; !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">D</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div></section>
<p>表示一个由 <code>s0</code> 和 <code>s1</code> 控制的<span class="mojikumi-line-end">、</span>在 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code><span class="mojikumi-line-end">、</span><code>D</code> 中选一个作为输出的 MUX<span class="mojikumi-line-end">。</span></p>
<p>case expression 在逻辑上的语义是依次判断每个条件<span class="mojikumi-line-end">，</span>以第一个满足的条件作为输出<span class="mojikumi-line-end">，</span>类似于 Rust 的 match<span class="mojikumi-line-end">。</span></p>
<p>下面的 HCL 代码表示计算 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code> 中的最小值<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-fc4b3c9e><div class="media-screen:important-flex items-center px-4 h-6 rd-t-1 bg-area dark:bg-#2A313A" style="display:none;" data-v-fc4b3c9e><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="hcl-csapp 代码块" data-v-fc4b3c9e>hcl-csapp</h4><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="light:hidden" itemprop="text" data-v-fc4b3c9e><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Min3</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &amp;&amp; </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-fc4b3c9e><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Min3</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &amp;&amp; </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div></section>
<h3 id="arithmeticlogic-unit-alu" class="heading"><a href="#arithmeticlogic-unit-alu" class="heading-anchor" aria-label="章节： Arithmetic/logic unit (ALU)" tabindex="-1"></a><span>Arithmetic/logic unit (ALU)</span></h3>
<p>ALU 是用来进行算术/逻辑运算的组合逻辑电路元件<span class="mojikumi-line-end">，</span>它接收两个 data input 以及一个表示进行何种运算的 control input<span class="mojikumi-line-end">，</span>输出运算的结果<span class="mojikumi-line-end">。</span></p>
<h3 id="测试值是否属于集合" class="heading"><a href="#测试值是否属于集合" class="heading-anchor" aria-label="章节： 测试值是否属于集合" tabindex="-1"></a><span>测试值是否属于集合</span></h3>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>可以使用 <code>in</code> 来表示测试值是否属于集合的电路<span class="mojikumi-line-end">，</span>例如:</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-fc4b3c9e><div class="media-screen:important-flex items-center px-4 h-6 rd-t-1 bg-area dark:bg-#2A313A" style="display:none;" data-v-fc4b3c9e><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="hcl-csapp 代码块" data-v-fc4b3c9e>hcl-csapp</h4><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="light:hidden" itemprop="text" data-v-fc4b3c9e><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span>
<span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-fc4b3c9e><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s1</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">2</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span>
<span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s0</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span></code></pre></div></section>
<h3 id="memory-and-clocking" class="heading"><a href="#memory-and-clocking" class="heading-anchor" aria-label="章节： Memory and Clocking" tabindex="-1"></a><span>Memory and Clocking</span></h3>
<p>组合逻辑电路是无状态且实时更新的<span class="mojikumi-line-end">；</span>与之相对<span class="mojikumi-line-end">，</span>memory 可以存储状态<span class="mojikumi-line-end">，</span>但更新由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>这一章中会用到的 memory 有两大种三小种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>clocked register: 存储一个值<span class="mojikumi-line-end">，</span>有一个输入和一个输出<span class="mojikumi-line-end">。</span>输出即存储的值<span class="mojikumi-line-end">，</span>而每次 clock rise 时会将存储的值修改为输入<span class="mojikumi-line-end">。</span></li>
<li>random access memory:
<ul>
<li>register file: 存储 15 个值<span class="mojikumi-line-start">（</span>在 Y86-64 处理器中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有两个 read port 和一个 write port<span class="mojikumi-line-end">：</span>
<ul>
<li>每个 read port 有一个输入 <code>src</code> 表示 register identifier<span class="mojikumi-line-end">，</span>有一个输出 <code>val</code> 表示这个 register 存储的值<span class="mojikumi-line-end">，</span>且 <code>src</code> 改变后 <code>val</code> 会立刻改变<span class="mojikumi-line-end">。</span></li>
<li>write port 有一个输入 <code>dst</code> 表示 register identifier<span class="mojikumi-line-end">，</span>另有一个输入 <code>val</code> 用于写入<span class="mojikumi-line-end">。</span>每次 clock rise 时<span class="mojikumi-line-end">，</span>如果 <code>dst</code> 不是 <code>F</code> 就会将 <code>val</code> 写入相应的 register<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
<li>data memory: 存储很多个值<span class="mojikumi-line-end">，</span>用地址进行索引<span class="mojikumi-line-end">。</span>
<ul>
<li>有一个地址输入 <code>address</code><span class="mojikumi-line-end">。</span></li>
<li>有一个信号输入 <code>write</code> 表示进行写入而非读取<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输出 <code>data out</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 0<span class="mojikumi-line-end">，</span><code>data out</code> 会立刻输出 <code>address</code> 处存储的值<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输入 <code>data in</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 1<span class="mojikumi-line-end">，</span>在 clock rise 时会将 <code>data in</code> 写入 <code>address</code> 处<span class="mojikumi-line-end">。</span></li>
<li>有一个信号输出 <code>error</code><span class="mojikumi-line-end">，</span>在 <code>address</code> 不是合法地址时输出 1<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>可以看到<span class="mojikumi-line-end">，</span>这几种 memory 的共同点是读取是实时的<span class="mojikumi-line-end">，</span>但写入由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>在 Y86-64 的程序状态中<span class="mojikumi-line-end">，</span>寄存器存在 register file 中<span class="mojikumi-line-end">，</span>status flags<span class="mojikumi-line-end">、</span>program counter<span class="mojikumi-line-end">、</span>status code 存在 clocked register 中<span class="mojikumi-line-end">，</span>memory 存在 data memory 中<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 处理器还有一个额外的 read-only instruction memory 用来读取指令<span class="mojikumi-line-end">，</span>而在真实的处理器中这是和内存一体的<span class="mojikumi-line-end">。</span></p>
<a id="data-memory-的-read-信号" name="data-memory-的-read-信号" aria-hidden="true"></a>
<aside role="note" data-v-bb0e38b3><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-bb0e38b3><div class="p-3 flex justify-between items-center" data-v-bb0e38b3><h4 class="font-bold flex items-center gap-1" data-v-bb0e38b3><span aria-label="Question: " class="text-5 i-mdi-help-circle-outline text-purple" data-v-bb0e38b3></span><span data-v-bb0e38b3>data memory 的 read 信号</span></h4><!--v-if--></div><div class="bg-card dark:bg-bghover overflow-auto px-6 rd-br-1" data-v-bb0e38b3><p>383 页的图中 data memory 还有一个 <code>read</code> 信号<span class="mojikumi-line-end">，</span>但在文字说明中没有提到它的作用<span class="mojikumi-line-end">，</span>而对 <code>write</code> 信号的说明似乎使得 <code>read</code> 信号无用 🤔</p></div></div></aside>
<h2 id="sequential-y86-64-implementations" class="heading"><a href="#sequential-y86-64-implementations" class="heading-anchor" aria-label="章节： Sequential Y86-64 Implementations" tabindex="-1"></a><span>Sequential Y86-64 Implementations</span></h2>
<p>这一节会实现一个名为 SEQ 的顺序执行的处理器<span class="mojikumi-line-end">。</span>在这个处理器中<span class="mojikumi-line-end">，</span>指令是按顺序一条接着一条执行的<span class="mojikumi-line-end">，</span>且每条指令都会在一个 clock cycle 内执行完毕<span class="mojikumi-line-end">，</span>这要求 clock cycle 很长<span class="mojikumi-line-end">，</span>会导致处理器的执行很慢<span class="mojikumi-line-end">，</span>下两节将对此进行优化<span class="mojikumi-line-end">。</span></p>
<h3 id="指令执行的阶段划分与具体操作" class="heading"><a href="#指令执行的阶段划分与具体操作" class="heading-anchor" aria-label="章节： 指令执行的阶段划分与具体操作" tabindex="-1"></a><span>指令执行的阶段划分与具体操作</span></h3>
<p>将指令的执行划分为多个阶段<span class="mojikumi-line-end">，</span>可以使行为有很大差别的不同指令有一定的统一性<span class="mojikumi-line-end">，</span>方便硬件实现<span class="mojikumi-line-end">。</span></p>
<p>本节会将指令执行划分为六个阶段<span class="mojikumi-line-end">：</span></p>
<ol>
<li>Fetch: 将指令编码中不同部分的值读取出来</li>
<li>Decode: 读取寄存器的值<span class="mojikumi-line-start">（</span>我感觉 fetch 和 decode 这两个名字互换一下才比较对 🤔<span class="mojikumi-line-end">）</span></li>
<li>Execute: 执行运算</li>
<li>Memory: 写入或读取内存</li>
<li>Write back: 写入寄存器</li>
<li>PC update: 更新 program counter</li>
</ol>
<p>每个指令每阶段的具体操作如图<span class="mojikumi-line-start">（</span>CS:APP Figure 4.18~4.21<span class="mojikumi-line-end">、</span>Solution 4.17<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.18.1d452c61.webp"><img srcset="/assets/csapp-fig4.18.cc74142a.png" loading="lazy" src="/assets/csapp-fig4.18.cc74142a.png" width="1091" height="613" alt="OPq, rrmovq, irmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.19.9f043a86.webp"><img srcset="/assets/csapp-fig4.19.7887b6d0.png" loading="lazy" src="/assets/csapp-fig4.19.7887b6d0.png" width="773" height="611" alt="rmmovq, mrmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.20.3d7b8ab1.webp"><img srcset="/assets/csapp-fig4.20.7606e619.png" loading="lazy" src="/assets/csapp-fig4.20.7606e619.png" width="782" height="619" alt="pushq, popq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.21.304f2868.webp"><img srcset="/assets/csapp-fig4.21.d8c98f75.png" loading="lazy" src="/assets/csapp-fig4.21.d8c98f75.png" width="1113" height="562" alt="jXX, call, ret"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-sol4.17.4eb57d44.webp"><img srcset="/assets/csapp-sol4.17.a75a9c9a.png" loading="lazy" src="/assets/csapp-sol4.17.a75a9c9a.png" width="461" height="432" alt="cmovXX"></picture></p>
<h3 id="seq-的主体电路" class="heading"><a href="#seq-的主体电路" class="heading-anchor" aria-label="章节： SEQ 的主体电路" tabindex="-1"></a><span>SEQ 的主体电路</span></h3>
<p>CS:APP Figure 4.23 大致展示了 SEQ 的主体电路<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.23.ed95a333.webp"><img srcset="/assets/csapp-fig4.23.ff80ba41.png" loading="lazy" src="/assets/csapp-fig4.23.ff80ba41.png" width="798" height="1065" alt="SEQ 主体电路"></picture></p>
<p>其中蓝色的元件是 black box<span class="mojikumi-line-end">，</span>灰色的元件会在后面进行设计<span class="mojikumi-line-end">，</span>还有部分电路连接没有画出来<span class="mojikumi-line-end">。</span></p>
<p>这个电路大概看着有个印象即可<span class="mojikumi-line-end">，</span>细节会在后面说明<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的时序控制" class="heading"><a href="#seq-的时序控制" class="heading-anchor" aria-label="章节： SEQ 的时序控制" tabindex="-1"></a><span>SEQ 的时序控制</span></h3>
<p>在 SEQ 中<span class="mojikumi-line-end">，</span>每个时钟周期执行一条指令<span class="mojikumi-line-end">，</span>而时钟控制的只有各种 memory 的写入<span class="mojikumi-line-end">，</span>memory 的读取和运算都是用组合逻辑电路实现的<span class="mojikumi-line-end">，</span>虽然在逻辑上有执行顺序<span class="mojikumi-line-end">，</span>在电路上却是同时执行的<span class="mojikumi-line-end">，</span>可以看成一个关于 memory 的函数<span class="mojikumi-line-end">。</span></p>
<p>也就是说<span class="mojikumi-line-end">，</span>整个执行过程是<span class="mojikumi-line-end">：</span>读取 memory 并计算出需要写入 memory 的值<span class="mojikumi-line-end">，</span>然后在 clock rise 时执行写入<span class="mojikumi-line-end">，</span>从而读取到新的 memory 的值而执行下一条指令<span class="mojikumi-line-end">。</span></p>
<p>为了这个设计能够实现<span class="mojikumi-line-end">，</span>一条重要的原则是 <span class="mojikumi">“</span>No reading back<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>即一条指令不能先更新再读取同一个值<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 <code>pushq</code> 中<span class="mojikumi-line-end">，</span>不是先更新 <code>R[%rsp]</code> 再写入 <code>M[R[%rsp]]</code><span class="mojikumi-line-end">，</span>而是先算出 <code>valE</code><span class="mojikumi-line-end">，</span>再写入 <code>M[valE]</code><span class="mojikumi-line-end">，</span>最后将 <code>valE</code> 写入 <code>R[%rsp]</code><span class="mojikumi-line-end">。</span>又例如<span class="mojikumi-line-end">，</span>有的指令会修改 status flags<span class="mojikumi-line-end">，</span>有的会读取<span class="mojikumi-line-end">，</span>但没有指令既修改又读取<span class="mojikumi-line-end">。</span></p>
<p>因为运算都是同时进行的<span class="mojikumi-line-end">，</span>执行的六个阶段实际上是六个部分<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的具体实现" class="heading"><a href="#seq-的具体实现" class="heading-anchor" aria-label="章节： SEQ 的具体实现" tabindex="-1"></a><span>SEQ 的具体实现</span></h3>]]></content>
        <category label="csapp" term="https://ouuan.moe/tag/csapp"/>
        <category label="学习笔记" term="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <category label="WIP" term="https://ouuan.moe/tag/WIP"/>
    </entry>
</feed>