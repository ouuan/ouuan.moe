<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ouuan.moe/tag/WIP</id>
    <title>ouuan's blog: 标签: WIP</title>
    <updated>2024-02-06T16:51:36.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>ouuan</name>
        <uri>https://github.com/ouuan</uri>
    </author>
    <link rel="alternate" href="https://ouuan.moe/tag/WIP"/>
    <link rel="self" href="https://ouuan.moe/tag/WIP/feed.atom"/>
    <subtitle>标签: WIP - ouuan 的博客。</subtitle>
    <icon>https://ouuan.moe/favicon.ico</icon>
    <rights>Copyright © 2022 - 2024 ouuan
Licensed under CC BY-SA 4.0</rights>
    <entry>
        <title type="html"><![CDATA[OSTEP 学习笔记 —— Virtualization]]></title>
        <id>https://ouuan.moe/post/2024/01/ostep-virtualization</id>
        <link href="https://ouuan.moe/post/2024/01/ostep-virtualization"/>
        <updated>2024-02-06T16:51:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/"><span class="mojikumi-line-start">《</span>Operating Systems: Three Easy Pieces<span class="mojikumi-line-end">》</span></a>第一部分 Virtualization 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/"><span class="mojikumi-line-start">《</span>Operating Systems: Three Easy Pieces<span class="mojikumi-line-end">》</span></a>第一部分 Virtualization 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="a-dialogue-on-virtualization" class="heading"><a href="#a-dialogue-on-virtualization" class="heading-anchor" aria-label="章节： A Dialogue on Virtualization" tabindex="-1"></a><span>A Dialogue on Virtualization</span></h2>
<p><s>我觉得这个比喻很怪<span class="mojikumi-line-end">，</span>peach 怎么能 virtualize<span class="mojikumi-line-end">，</span>感觉不如举个别的例子<span class="mojikumi-line-end">。</span>但挑 <code>og:image</code> 的时候想了想<span class="mojikumi-line-end">，</span>这不<span class="mojikumi-line-end">，</span><a href="https://www.bilibili.com/video/av55053935/">桃 channel</a> 吗<span class="mojikumi-line-start">（</span></s></p>
<h2 id="the-abstraction-the-process" class="heading"><a href="#the-abstraction-the-process" class="heading-anchor" aria-label="章节： The Abstraction: The Process" tabindex="-1"></a><span>The Abstraction: The Process</span></h2>
<p>所谓 <dfn>process</dfn><span class="mojikumi-line-end">，</span>就是 <i>a running program</i><span class="mojikumi-line-end">。</span></p>
<p>一个 process 的 machine state 包括 memory<span class="mojikumi-line-end">、</span>register<span class="mojikumi-line-start">（</span>包括 PC<span class="mojikumi-line-end">、</span>stack pointer 等<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>I/O information<span class="mojikumi-line-start">（</span>例如打开的文件列表<span class="mojikumi-line-end">）</span>等<span class="mojikumi-line-end">。</span></p>
<p>在创建 process 时<span class="mojikumi-line-end">，</span>OS 需要 (lazy) load program code 和 data<span class="mojikumi-line-end">，</span>初始化 stack 和 heap<span class="mojikumi-line-end">，</span>设置 <code>argc</code><span class="mojikumi-line-end">、</span><code>argv</code><span class="mojikumi-line-end">，</span>设置 <code>stdin</code><span class="mojikumi-line-end">、</span><code>stdout</code><span class="mojikumi-line-end">、</span><code>stderr</code> 三个 file descriptor<span class="mojikumi-line-end">。</span></p>
<p>一个 process 有三种 state<span class="mojikumi-line-end">：</span>running<span class="mojikumi-line-end">、</span>blocked<span class="mojikumi-line-end">、</span>ready<span class="mojikumi-line-end">。</span></p>
<div class="flex justify-center dark:hidden"><svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 468.875 140" style="max-width: 468.875px; background-color: transparent;" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="100%" id="__mermaid-default-gTbVL"><style>#__mermaid-default-gTbVL{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#333;}#__mermaid-default-gTbVL .error-icon{fill:#552222;}#__mermaid-default-gTbVL .error-text{fill:#552222;stroke:#552222;}#__mermaid-default-gTbVL .edge-thickness-normal{stroke-width:2px;}#__mermaid-default-gTbVL .edge-thickness-thick{stroke-width:3.5px;}#__mermaid-default-gTbVL .edge-pattern-solid{stroke-dasharray:0;}#__mermaid-default-gTbVL .edge-pattern-dashed{stroke-dasharray:3;}#__mermaid-default-gTbVL .edge-pattern-dotted{stroke-dasharray:2;}#__mermaid-default-gTbVL .marker{fill:#333333;stroke:#333333;}#__mermaid-default-gTbVL .marker.cross{stroke:#333333;}#__mermaid-default-gTbVL svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#__mermaid-default-gTbVL .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#333;}#__mermaid-default-gTbVL .cluster-label text{fill:#333;}#__mermaid-default-gTbVL .cluster-label span,#__mermaid-default-gTbVL p{color:#333;}#__mermaid-default-gTbVL .label text,#__mermaid-default-gTbVL span,#__mermaid-default-gTbVL p{fill:#333;color:#333;}#__mermaid-default-gTbVL .node rect,#__mermaid-default-gTbVL .node circle,#__mermaid-default-gTbVL .node ellipse,#__mermaid-default-gTbVL .node polygon,#__mermaid-default-gTbVL .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#__mermaid-default-gTbVL .flowchart-label text{text-anchor:middle;}#__mermaid-default-gTbVL .node .label{text-align:center;}#__mermaid-default-gTbVL .node.clickable{cursor:pointer;}#__mermaid-default-gTbVL .arrowheadPath{fill:#333333;}#__mermaid-default-gTbVL .edgePath .path{stroke:#333333;stroke-width:2.0px;}#__mermaid-default-gTbVL .flowchart-link{stroke:#333333;fill:none;}#__mermaid-default-gTbVL .edgeLabel{background-color:#e8e8e8;text-align:center;}#__mermaid-default-gTbVL .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#__mermaid-default-gTbVL .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#__mermaid-default-gTbVL .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#__mermaid-default-gTbVL .cluster text{fill:#333;}#__mermaid-default-gTbVL .cluster span,#__mermaid-default-gTbVL p{color:#333;}#__mermaid-default-gTbVL div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#__mermaid-default-gTbVL .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#__mermaid-default-gTbVL :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 0 L 10 5 L 0 10 z"/></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 5 L 10 10 L 10 0 z"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-default-gTbVL_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-default-gTbVL_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-default-gTbVL_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><g class="root"><g class="clusters"/><g class="edgePaths"><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Blocked" id="L-Running-Blocked-0" d="M64.11931818181819,60.5L76.03693181818183,53.166666666666664C87.95454545454545,45.833333333333336,111.78977272727273,31.166666666666668,133.82014678030305,23.833333333333332C155.85052083333332,16.5,176.07604166666667,16.5,186.18880208333334,16.5L196.3015625,16.5"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Blocked LE-Ready" id="L-Blocked-Ready-0" d="M273.5234375,16.5L283.7786458333333,16.5C294.0338541666667,16.5,314.5442708333333,16.5,334.64286059978446,23.3297774229965C354.74145036623554,30.159554845993004,374.4282132324711,43.81910969198601,384.2715946655888,50.64888711498251L394.1149760987066,57.478664537979014"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Ready LE-Running" id="L-Ready-Running-0" d="M391.625,90.34647433025714L382.1966145833333,94.45539527521429C372.7682291666667,98.56431622017142,353.9114583333333,106.78215811008572,328.234375,110.89107905504285C302.5572916666667,115,270.0598958333333,115,236.82161458333334,115C203.58333333333334,115,169.60416666666666,115,143.26924866479138,111.38810426477647C116.93433066291608,107.77620852955295,98.24366132583218,100.55241705910589,88.89832665729023,96.94052132388236L79.55299198874826,93.32862558865884"/><path marker-end="url(#__mermaid-default-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Ready" id="L-Running-Ready-0" d="M74.609375,77L84.77864583333333,77C94.94791666666667,77,115.28645833333333,77,142.4453125,77C169.60416666666666,77,203.58333333333334,77,236.82161458333334,77C270.0598958333333,77,302.5572916666667,77,327.3510416666667,77C352.14479166666666,77,369.2348958333334,77,377.7799479166667,77L386.325,77"/></g><g class="edgeLabels"><g transform="translate(135.625, 16.5)" class="edgeLabel"><g transform="translate(-36.015625, -9)" class="label"><foreignObject height="18" width="72.03125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">initiate I/O</span></div></foreignObject></g></g><g transform="translate(335.0546875, 16.5)" class="edgeLabel"><g transform="translate(-31.5703125, -9)" class="label"><foreignObject height="18" width="63.140625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">finish I/O</span></div></foreignObject></g></g><g transform="translate(237.5625, 115)" class="edgeLabel"><g transform="translate(-32.0234375, -9)" class="label"><foreignObject height="18" width="64.046875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">schedule</span></div></foreignObject></g></g><g transform="translate(237.5625, 77)" class="edgeLabel"><g transform="translate(-40.921875, -9)" class="label"><foreignObject height="18" width="81.84375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">deschedule</span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(37.3046875, 77)" data-id="Running" data-node="true" id="flowchart-Running-0" class="node default default flowchart-label"><rect height="33" width="74.609375" y="-16.5" x="-37.3046875" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-29.8046875, -9)" style="" class="label"><rect/><foreignObject height="18" width="59.609375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Running</span></div></foreignObject></g></g><g transform="translate(237.5625, 16.5)" data-id="Blocked" data-node="true" id="flowchart-Blocked-1" class="node default default flowchart-label"><rect height="33" width="71.921875" y="-16.5" x="-35.9609375" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-28.4609375, -9)" style="" class="label"><rect/><foreignObject height="18" width="56.921875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Blocked</span></div></foreignObject></g></g><g transform="translate(422.25, 77)" data-id="Ready" data-node="true" id="flowchart-Ready-2" class="node default default flowchart-label"><rect height="33" width="61.25" y="-16.5" x="-30.625" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-23.125, -9)" style="" class="label"><rect/><foreignObject height="18" width="46.25"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Ready</span></div></foreignObject></g></g></g></g></g></svg></div><div class="justify-center dark:important-flex" style="display:none;"><svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 468.875 140" style="max-width: 468.875px; background-color: transparent;" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="100%" id="__mermaid-dark-gTbVL"><style>#__mermaid-dark-gTbVL{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}#__mermaid-dark-gTbVL .error-icon{fill:#a44141;}#__mermaid-dark-gTbVL .error-text{fill:#ddd;stroke:#ddd;}#__mermaid-dark-gTbVL .edge-thickness-normal{stroke-width:2px;}#__mermaid-dark-gTbVL .edge-thickness-thick{stroke-width:3.5px;}#__mermaid-dark-gTbVL .edge-pattern-solid{stroke-dasharray:0;}#__mermaid-dark-gTbVL .edge-pattern-dashed{stroke-dasharray:3;}#__mermaid-dark-gTbVL .edge-pattern-dotted{stroke-dasharray:2;}#__mermaid-dark-gTbVL .marker{fill:lightgrey;stroke:lightgrey;}#__mermaid-dark-gTbVL .marker.cross{stroke:lightgrey;}#__mermaid-dark-gTbVL svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#__mermaid-dark-gTbVL .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#ccc;}#__mermaid-dark-gTbVL .cluster-label text{fill:#F9FFFE;}#__mermaid-dark-gTbVL .cluster-label span,#__mermaid-dark-gTbVL p{color:#F9FFFE;}#__mermaid-dark-gTbVL .label text,#__mermaid-dark-gTbVL span,#__mermaid-dark-gTbVL p{fill:#ccc;color:#ccc;}#__mermaid-dark-gTbVL .node rect,#__mermaid-dark-gTbVL .node circle,#__mermaid-dark-gTbVL .node ellipse,#__mermaid-dark-gTbVL .node polygon,#__mermaid-dark-gTbVL .node path{fill:#1f2020;stroke:#81B1DB;stroke-width:1px;}#__mermaid-dark-gTbVL .flowchart-label text{text-anchor:middle;}#__mermaid-dark-gTbVL .node .label{text-align:center;}#__mermaid-dark-gTbVL .node.clickable{cursor:pointer;}#__mermaid-dark-gTbVL .arrowheadPath{fill:lightgrey;}#__mermaid-dark-gTbVL .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#__mermaid-dark-gTbVL .flowchart-link{stroke:lightgrey;fill:none;}#__mermaid-dark-gTbVL .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#__mermaid-dark-gTbVL .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#__mermaid-dark-gTbVL .labelBkg{background-color:rgba(87.75, 87.75, 87.75, 0.5);}#__mermaid-dark-gTbVL .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#__mermaid-dark-gTbVL .cluster text{fill:#F9FFFE;}#__mermaid-dark-gTbVL .cluster span,#__mermaid-dark-gTbVL p{color:#F9FFFE;}#__mermaid-dark-gTbVL div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#__mermaid-dark-gTbVL .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#__mermaid-dark-gTbVL :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 0 L 10 5 L 0 10 z"/></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 5 L 10 10 L 10 0 z"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" class="marker flowchart" id="__mermaid-dark-gTbVL_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-dark-gTbVL_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" class="marker cross flowchart" id="__mermaid-dark-gTbVL_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"/></marker><g class="root"><g class="clusters"/><g class="edgePaths"><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Blocked" id="L-Running-Blocked-0" d="M64.11931818181819,60.5L76.03693181818183,53.166666666666664C87.95454545454545,45.833333333333336,111.78977272727273,31.166666666666668,133.82014678030305,23.833333333333332C155.85052083333332,16.5,176.07604166666667,16.5,186.18880208333334,16.5L196.3015625,16.5"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Blocked LE-Ready" id="L-Blocked-Ready-0" d="M273.5234375,16.5L283.7786458333333,16.5C294.0338541666667,16.5,314.5442708333333,16.5,334.64286059978446,23.3297774229965C354.74145036623554,30.159554845993004,374.4282132324711,43.81910969198601,384.2715946655888,50.64888711498251L394.1149760987066,57.478664537979014"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Ready LE-Running" id="L-Ready-Running-0" d="M391.625,90.34647433025714L382.1966145833333,94.45539527521429C372.7682291666667,98.56431622017142,353.9114583333333,106.78215811008572,328.234375,110.89107905504285C302.5572916666667,115,270.0598958333333,115,236.82161458333334,115C203.58333333333334,115,169.60416666666666,115,143.26924866479138,111.38810426477647C116.93433066291608,107.77620852955295,98.24366132583218,100.55241705910589,88.89832665729023,96.94052132388236L79.55299198874826,93.32862558865884"/><path marker-end="url(#__mermaid-dark-gTbVL_flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-Running LE-Ready" id="L-Running-Ready-0" d="M74.609375,77L84.77864583333333,77C94.94791666666667,77,115.28645833333333,77,142.4453125,77C169.60416666666666,77,203.58333333333334,77,236.82161458333334,77C270.0598958333333,77,302.5572916666667,77,327.3510416666667,77C352.14479166666666,77,369.2348958333334,77,377.7799479166667,77L386.325,77"/></g><g class="edgeLabels"><g transform="translate(135.625, 16.5)" class="edgeLabel"><g transform="translate(-36.015625, -9)" class="label"><foreignObject height="18" width="72.03125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">initiate I/O</span></div></foreignObject></g></g><g transform="translate(335.0546875, 16.5)" class="edgeLabel"><g transform="translate(-31.5703125, -9)" class="label"><foreignObject height="18" width="63.140625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">finish I/O</span></div></foreignObject></g></g><g transform="translate(237.5625, 115)" class="edgeLabel"><g transform="translate(-32.0234375, -9)" class="label"><foreignObject height="18" width="64.046875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">schedule</span></div></foreignObject></g></g><g transform="translate(237.5625, 77)" class="edgeLabel"><g transform="translate(-40.921875, -9)" class="label"><foreignObject height="18" width="81.84375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">deschedule</span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(37.3046875, 77)" data-id="Running" data-node="true" id="flowchart-Running-0" class="node default default flowchart-label"><rect height="33" width="74.609375" y="-16.5" x="-37.3046875" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-29.8046875, -9)" style="" class="label"><rect/><foreignObject height="18" width="59.609375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Running</span></div></foreignObject></g></g><g transform="translate(237.5625, 16.5)" data-id="Blocked" data-node="true" id="flowchart-Blocked-1" class="node default default flowchart-label"><rect height="33" width="71.921875" y="-16.5" x="-35.9609375" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-28.4609375, -9)" style="" class="label"><rect/><foreignObject height="18" width="56.921875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Blocked</span></div></foreignObject></g></g><g transform="translate(422.25, 77)" data-id="Ready" data-node="true" id="flowchart-Ready-2" class="node default default flowchart-label"><rect height="33" width="61.25" y="-16.5" x="-30.625" ry="0" rx="0" style="" class="basic label-container"/><g transform="translate(-23.125, -9)" style="" class="label"><rect/><foreignObject height="18" width="46.25"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">Ready</span></div></foreignObject></g></g></g></g></g></svg></div>
<p>OS 的 scheduler 需要决定如何调度 process state<span class="mojikumi-line-end">，</span>以优化性能<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>一个 process initiate I/O 后应当 schedule 到另一个 ready 的 process<span class="mojikumi-line-end">。</span></p>
<p>OS 需要维护 process list<span class="mojikumi-line-end">，</span>记录 process memory address<span class="mojikumi-line-end">、</span>kernel stack address<span class="mojikumi-line-end">、</span>register context<span class="mojikumi-line-end">、</span>process state<span class="mojikumi-line-end">、</span>pid<span class="mojikumi-line-end">、</span>parent<span class="mojikumi-line-end">、</span>killed<span class="mojikumi-line-end">、</span>opened files<span class="mojikumi-line-end">、</span>cwd<span class="mojikumi-line-end">、</span>trap frame 等信息<span class="mojikumi-line-end">。</span></p>
<h2 id="interlude-process-api" class="heading"><a href="#interlude-process-api" class="heading-anchor" aria-label="章节： Interlude: Process API" tabindex="-1"></a><span>Interlude: Process API</span></h2>
<p><code>fork()</code><span class="mojikumi-line-end">、</span><code>wait()</code><span class="mojikumi-line-end">、</span><code>exec()</code> 以及 signals 参见 <a href="/post/2022/11/csapp-8#process-control">CS:APP 第八章</a><span class="mojikumi-line-end">。</span></p>
<p><code>fork()</code> 和 <code>exec()</code> 通常配合使用<span class="mojikumi-line-end">，</span>而被设计成了分离的两个 API<span class="mojikumi-line-end">，</span>所以可以在它们之间插入其他代码<span class="mojikumi-line-end">，</span>以修改 child process 的执行环境<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 shell 中执行命令可以创建 child process 然后 wait<span class="mojikumi-line-end">，</span>如果需要 redirect output<span class="mojikumi-line-end">，</span>可以在 <code>fork()</code> 和 <code>exec()</code> 之间执行 <code>close()</code> 和 <code>open()</code><span class="mojikumi-line-end">。</span></p>
<a id="a-fork-in-the-road" name="a-fork-in-the-road" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>A <code>fork()</code> in the road</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><ul>
<li>论文<span class="mojikumi-line-end">：</span><a href="https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf">A fork() in the road</a></li>
<li>相关讨论<span class="mojikumi-line-end">：</span><a href="https://lwn.net/Articles/785430/">LWN</a><span class="mojikumi-line-end">、</span><a href="https://www.reddit.com/r/programming/comments/bbic2e/a_fork_in_the_road/">Reddit</a><span class="mojikumi-line-end">、</span><a href="https://news.ycombinator.com/item?id=19621799">Hacker News</a></li>
</ul><p><code>fork()</code> 的设计有很多缺点<span class="mojikumi-line-end">：</span>新功能的设计需要考虑到 <code>fork()</code><span class="mojikumi-line-start">（</span>新的状态如何复制<span class="mojikumi-line-end">）</span>而变得复杂<span class="mojikumi-line-end">，</span>有时需要特殊修改软件来适配 <code>fork()</code><span class="mojikumi-line-start">（</span>例如 buffered I/O 在 fork 前需要 flush<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有的硬件<span class="mojikumi-line-start">（</span>例如 GPU<span class="mojikumi-line-end">）</span>不支持复制状态<span class="mojikumi-line-end">，</span><code>fork()</code> 不 thread-safe<span class="mojikumi-line-end">，</span>将所有信息共享给 child process 可能泄露信息<span class="mojikumi-line-end">，</span>保持 memory layout 不变可能导致 ASLR 失效<span class="mojikumi-line-end">，</span>不必要地复制整个 address space 会影响性能<span class="mojikumi-line-end">，</span>不管剩余 RAM 有多少就分配 copy-on-write memory<span class="mojikumi-line-start">（</span>overcommit<span class="mojikumi-line-end">）</span>可能导致 OOM<span class="mojikumi-line-end">，</span>支持 copy-on-write 会鼓励 monolith kernel……</p><p><code>fork()</code> 历史悠久<span class="mojikumi-line-end">，</span>使用广泛<span class="mojikumi-line-end">，</span>如果 OS 不实现则会使得很多程序无法运行<span class="mojikumi-line-end">。</span>但在理论上<span class="mojikumi-line-end">，</span><code>fork()</code> 可能可以被替换<span class="mojikumi-line-end">：</span></p><ul>
<li><code>fork()</code> + <code>exec()</code> 创建 child process 可以替换为合二为一的 (<code>posix_</code>)<code>spawn()</code><span class="mojikumi-line-end">。</span></li>
<li><code>spawn()</code> 的参数可能不够灵活<span class="mojikumi-line-end">，</span>可以添加 cross-process operation 来代替位于 <code>fork()</code> 和 <code>exec()</code> 之间的任意操作<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>但这样的替代可能不够简洁直观<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>使用 <code>fork()</code> 来实现 multi-process 可以替换为 multi-thread<span class="mojikumi-line-end">，</span>或者创建全新的 child process<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>但这样的话就不能共享初始化<span class="mojikumi-line-end">，</span>可能会有一定的性能损失<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>可以增加新的 API 来代替使用 <code>fork()</code> 获取 copy-on-write memory<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>可能仍会面临 overcommit 的问题<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>对于少量仍需使用 <code>fork()</code> 而性能要求不高的场景<span class="mojikumi-line-end">，</span>或者是为了兼容使用 <code>fork()</code> 的软件<span class="mojikumi-line-end">，</span>可以抛弃 low-level 的 <code>fork()</code> 而在 high-level<span class="mojikumi-line-start">（</span>低效地<span class="mojikumi-line-end">）</span>实现这一功能<span class="mojikumi-line-end">。</span></li>
</ul></div></div></aside>
<h2 id="mechanism-limited-direct-execution" class="heading"><a href="#mechanism-limited-direct-execution" class="heading-anchor" aria-label="章节： Mechanism: Limited Direct Execution" tabindex="-1"></a><span>Mechanism: Limited Direct Execution</span></h2>
<p><span class="mojikumi-line-start">“</span>direct execution<span class="mojikumi">”</span> 就是直接执行一个 program<span class="mojikumi-line-end">，</span>但这样做无法对 user program 进行限制<span class="mojikumi-line-end">，</span>例如可能访问包括 kernel memory<span class="mojikumi-line-end">、</span>其他 process 在内的任意 memory<span class="mojikumi-line-end">、</span>一直运行而不把 control 交给 OS<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>OS 需要采用 <i>limited direct execution</i><span class="mojikumi-line-end">，</span>对 process 施加限制<span class="mojikumi-line-end">。</span>这样做虽然 <span class="mojikumi">“</span>limited<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>但依然是 CPU 直接执行 user program instruction<span class="mojikumi-line-end">，</span>所以不会有太多的 overhead<span class="mojikumi-line-end">。</span></p>
<h3 id="problem-1-restricted-operations" class="heading"><a href="#problem-1-restricted-operations" class="heading-anchor" aria-label="章节： Problem #1: Restricted Operations" tabindex="-1"></a><span>Problem #1: Restricted Operations</span></h3>
<p>为了限制 user program 的行为<span class="mojikumi-line-end">，</span>CPU 的执行分为 <i>user mode</i> 和 <i>kernel mode</i><span class="mojikumi-line-end">。</span>kernel mode 具有更高的权限<span class="mojikumi-line-end">，</span>例如可以直接访问 memory<span class="mojikumi-line-end">、</span>执行 I/O<span class="mojikumi-line-end">。</span></p>
<p>user program 需要通过 <i>system call</i> 来进入 kernel mode<span class="mojikumi-line-end">，</span>由 OS 执行相应的操作<span class="mojikumi-line-end">。</span>system call 是一种特殊的 <i>trap</i><span class="mojikumi-line-start">（</span>exception<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>通过 trap instruction 进入 <i>trap handler</i> 并把 register 等状态存下来<span class="mojikumi-line-end">，</span>操作执行完毕后再 return-from-trap 回到 user program 调用 system call 之后的位置并恢复 register 等状态<span class="mojikumi-line-end">。</span></p>
<p>在系统启动时<span class="mojikumi-line-end">，</span>OS 会设置 <i>trap table</i><span class="mojikumi-line-end">，</span>即各种 trap 对应的 handler address<span class="mojikumi-line-end">。</span><i>system-call number</i><span class="mojikumi-line-start">（</span>放在特定 register 或 stack 特定位置<span class="mojikumi-line-end">）</span>用来指定要执行哪个 system call<span class="mojikumi-line-end">。</span>trap table 只能由 OS 设定<span class="mojikumi-line-end">，</span>以避免 user program 任意指定 kernel mode 下跳转到的位置<span class="mojikumi-line-end">。</span></p>
<h3 id="problem-2-switching-between-processes" class="heading"><a href="#problem-2-switching-between-processes" class="heading-anchor" aria-label="章节： Problem #2: Switching Between Processes" tabindex="-1"></a><span>Problem #2: Switching Between Processes</span></h3>
<p>在一个 process 占用着 CPU 时<span class="mojikumi-line-end">，</span>OS 没有运行<span class="mojikumi-line-end">，</span>自然无法实现 control<span class="mojikumi-line-end">，</span>所以需要 user program 把 control 交给 OS<span class="mojikumi-line-end">。</span>这有两种方式<span class="mojikumi-line-end">，</span>一种是 cooperative approach<span class="mojikumi-line-end">，</span>即调用 system call<span class="mojikumi-line-end">；</span>一种是 non-cooperative approach<span class="mojikumi-line-end">，</span>即使用 timer interrupt<span class="mojikumi-line-end">，</span>每隔一段时间就把 control 强制交给 OS<span class="mojikumi-line-end">，</span>以避免单个 process 连续运行过长时间甚至进入死循环而只能重启<span class="mojikumi-line-end">。</span></p>
<p>决定了要切换 process 时<span class="mojikumi-line-end">，</span>OS 会进行 <i>context switch</i><span class="mojikumi-line-end">，</span>主要操作是从 process A 的 registers 和 kernel stack 切换到 process B 的 registers 和 kernel stack<span class="mojikumi-line-end">，</span>之后 return-from-trap 时就会返回到 process B 之前离开的地方<span class="mojikumi-line-end">。</span></p>
<h2 id="scheduling-introduction" class="heading"><a href="#scheduling-introduction" class="heading-anchor" aria-label="章节： Scheduling: Introduction" tabindex="-1"></a><span>Scheduling: Introduction</span></h2>
<p>OS scheduler 需要决定 schedule 到哪个 process<span class="mojikumi-line-end">，</span>这表现为 <i>scheduling policy</i> (<i>discipline</i>)<span class="mojikumi-line-end">。</span></p>
<h3 id="workload-assumptions" class="heading"><a href="#workload-assumptions" class="heading-anchor" aria-label="章节： Workload Assumptions" tabindex="-1"></a><span>Workload Assumptions</span></h3>
<p>在这一部分<span class="mojikumi-line-end">，</span>我们先对 <i>workload</i><span class="mojikumi-line-end">，</span>即需要运行的 processes<span class="mojikumi-line-start">（</span>即 jobs<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>作一些<span class="mojikumi-line-start">（</span>不切实际的<span class="mojikumi-line-end">）</span>assumption 以简化问题<span class="mojikumi-line-end">，</span>后面再逐步丢弃这些 assumption<span class="mojikumi-line-end">：</span></p>
<ol>
<li>每个 job 用时相同<span class="mojikumi-line-end">。</span></li>
<li>每个 job 同时 arrive<span class="mojikumi-line-end">。</span></li>
<li>每个 job 一旦开始就一直运行到结束<span class="mojikumi-line-end">，</span>不被打断<span class="mojikumi-line-end">。</span></li>
<li>每个 job 都只使用 CPU<span class="mojikumi-line-end">，</span>不使用 I/O<span class="mojikumi-line-start">（</span>没有 system call<span class="mojikumi-line-end">，</span>不会 blocked<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>每个 job 的用时是已知的<span class="mojikumi-line-end">。</span></li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>4 和 5 是最不切实际的<span class="mojikumi-line-end">：</span>没有 I/O 的 program 运行了没有任何意义<span class="mojikumi-line-end">；</span>scheduler 无法预知 job 要运行多久<span class="mojikumi-line-start">（</span>连是否停机都无法预知<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="turnaround-time" class="heading"><a href="#turnaround-time" class="heading-anchor" aria-label="章节： Turnaround Time" tabindex="-1"></a><span>Turnaround Time</span></h3>
<p><i>turnaround time</i> 是一个 <i>scheduling metric</i><span class="mojikumi-line-end">，</span>它指的是一个 job 从 arrival 到 completion 的用时<span class="mojikumi-line-end">，</span>用来衡量总体性能<span class="mojikumi-line-end">。</span></p>
<p>FIFO (first in first out / FCFS, first come first served) 是一种最简单的 scheduling policy<span class="mojikumi-line-end">。</span>在所有 5 个 assumption 下<span class="mojikumi-line-end">，</span>任何 scheduling policy 都是一样的<span class="mojikumi-line-end">，</span>FIFO 就可以达到最优<span class="mojikumi-line-end">。</span></p>
<p>如果丢弃 assumption 1 而继续使用 FIFO<span class="mojikumi-line-end">，</span>当排在最前的 job 用时很长时<span class="mojikumi-line-end">，</span>会造成 <i>convoy effect</i><span class="mojikumi-line-end">，</span>堵住后面用时短的其他 job<span class="mojikumi-line-end">，</span>使得 turnaround time 变得很大<span class="mojikumi-line-end">。</span>此时<span class="mojikumi-line-end">，</span>可以采用 SJF (shortest job first) 达到最优解<span class="mojikumi-line-end">。</span></p>
<p>如果进一步丢弃 assumption 2<span class="mojikumi-line-end">，</span>有可能最长的 job 最先到<span class="mojikumi-line-end">，</span>短的 job 紧随其后<span class="mojikumi-line-end">，</span>SJF 就失效了<span class="mojikumi-line-end">。</span>此时<span class="mojikumi-line-end">，</span>需要再丢弃 assumption 3<span class="mojikumi-line-end">，</span>来允许 scheduler <i>preempt</i> 一个 job 而 schedule 到另一个<span class="mojikumi-line-start">（</span>不这样做的 scheduler 被称作 <i>non-preemptive</i> scheduler<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>然后就可以采用 STCF (shortest time-to-completion first / PSJF, preemptive shortest job first) 达到最优解<span class="mojikumi-line-end">：</span>在新 job arrive 时<span class="mojikumi-line-end">，</span>如果它的总用时比当前 job 的剩余用时还短<span class="mojikumi-line-end">，</span>可以 schedule 到新 job<span class="mojikumi-line-end">。</span></p>
<h3 id="response-time" class="heading"><a href="#response-time" class="heading-anchor" aria-label="章节： Response Time" tabindex="-1"></a><span>Response Time</span></h3>
<p>为了让用户在交互中获得更好的体验<span class="mojikumi-line-end">，</span>turnaround time 是不够的<span class="mojikumi-line-end">，</span>还需要引入新的 metric<span class="mojikumi-line-end">，</span><i>response time</i><span class="mojikumi-line-end">，</span>它可以用一个 job 从 arrival 到 first run 的用时衡量<span class="mojikumi-line-end">。</span></p>
<p>上面提到的各种 scheduling policy<span class="mojikumi-line-end">，</span>例如 STCF<span class="mojikumi-line-end">，</span>response time 都很差<span class="mojikumi-line-end">，</span>被排到后面运行的 job 需要等待很久<span class="mojikumi-line-end">。</span></p>
<p>Round-Robin (RR) policy 会让每个 job 执行一个 <i>time slice</i> (<i>scheduling quantum</i>)<span class="mojikumi-line-end">，</span>然后切换到下一个 job<span class="mojikumi-line-end">，</span>所以 RR 也被称作 <i>time-slicing</i><span class="mojikumi-line-end">。</span>time slice 越小 response time 也就越小<span class="mojikumi-line-end">，</span>但如果 time slice 过小<span class="mojikumi-line-end">，</span>context switching<span class="mojikumi-line-start">（</span>包括存储/恢复 register<span class="mojikumi-line-end">，</span>以及 cache miss penalty<span class="mojikumi-line-end">）</span>在用时中的占比就会过大<span class="mojikumi-line-end">，</span>从而显著影响性能<span class="mojikumi-line-end">，</span>所以需要一定大小的 time slice 来 <i>amortize</i> 掉 context switching cost<span class="mojikumi-line-end">。</span>RR 的 response time 较小<span class="mojikumi-line-end">，</span>但 turnaround time 很大<span class="mojikumi-line-end">，</span>比 FIFO 还大<span class="mojikumi-line-end">。</span></p>
<p>一般来说<span class="mojikumi-line-end">，</span>如果一个 policy 是 <i>fair</i> 的<span class="mojikumi-line-end">，</span>均等地将 CPU 分配给各个 job<span class="mojikumi-line-end">，</span>就会有较差的 turnaround time 和较好的 response time<span class="mojikumi-line-end">；</span>如果一个 policy unfair<span class="mojikumi-line-end">，</span>就可以有较好的 turnaround time<span class="mojikumi-line-end">，</span>但 response time 会较大<span class="mojikumi-line-end">。</span>这是一个固有的 trade-off<span class="mojikumi-line-end">：</span>鱼与熊掌<span class="mojikumi-line-end">，</span>不可兼得<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-cake" id="user-content-fnref-cake" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<h3 id="incorporating-io" class="heading"><a href="#incorporating-io" class="heading-anchor" aria-label="章节： Incorporating I/O" tabindex="-1"></a><span>Incorporating I/O</span></h3>
<p>如果进一步丢弃 assumption 4<span class="mojikumi-line-end">，</span>即允许 job 进行 I/O<span class="mojikumi-line-end">，</span>则需要处理 blocked 的情况<span class="mojikumi-line-end">。</span></p>
<p>一般来说<span class="mojikumi-line-end">，</span>可以将一个 job 视作被 I/O 分割成的多个 sub-job<span class="mojikumi-line-end">，</span>然后按照之前的 policy 进行 schedule<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>使用 STCF 时<span class="mojikumi-line-end">，</span>在 sub-job 的视角下<span class="mojikumi-line-end">，</span>会优先执行 I/O 密集的 job<span class="mojikumi-line-end">，</span>这可以达成 <i>overlap</i><span class="mojikumi-line-end">，</span>让 CPU 和 I/O 同时工作<span class="mojikumi-line-end">，</span>更加充分地利用系统资源<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-cake">
<p>作者推荐阅读<span class="mojikumi-line-end">：</span><a href="https://en.wikipedia.org/wiki/You_can%27t_have_your_cake_and_eat_it">You can't have your cake and eat it - Wikipedia</a><br>
<span class="mojikumi-line-start">“</span>The best part of this page is reading all the similar idioms from other languages.<span class="mojikumi-line-end">”</span> <a href="#user-content-fnref-cake" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content>
        <category label="ostep" term="https://ouuan.moe/tag/ostep"/>
        <category label="学习笔记" term="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <category label="WIP" term="https://ouuan.moe/tag/WIP"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS:APP 第四章学习笔记]]></title>
        <id>https://ouuan.moe/post/2022/10/csapp-4</id>
        <link href="https://ouuan.moe/post/2022/10/csapp-4"/>
        <updated>2022-10-17T02:30:45.000Z</updated>
        <summary type="html"><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
]]></summary>
        <content type="html"><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>

<h2 id="the-y86-64-instruction-set-architecture" class="heading"><a href="#the-y86-64-instruction-set-architecture" class="heading-anchor" aria-label="章节： The Y86-64 Instruction Set Architecture" tabindex="-1"></a><span>The Y86-64 Instruction Set Architecture</span></h2>
<p>这部分定义了在这一章中用作演示的名为 <span class="mojikumi">“</span>Y86-64<span class="mojikumi">”</span> 的玩具 ISA<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序状态" class="heading"><a href="#y86-64-程序状态" class="heading-anchor" aria-label="章节： Y86-64 程序状态" tabindex="-1"></a><span>Y86-64 程序状态</span></h3>
<ul>
<li>15 个寄存器<span class="mojikumi-line-start">（</span>x86-64 的寄存器除去 <code>%r15</code><span class="mojikumi-line-end">，</span>为了简化编码<span class="mojikumi-line-end">）</span></li>
<li>3 个 status flag: <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code></li>
<li>program counter: <code>PC</code></li>
<li>memory</li>
<li>status code: <code>Stat</code><span class="mojikumi-line-end">，</span>用来表示程序正常运行或发生了异常</li>
</ul>
<h3 id="y86-64-指令" class="heading"><a href="#y86-64-指令" class="heading-anchor" aria-label="章节： Y86-64 指令" tabindex="-1"></a><span>Y86-64 指令</span></h3>
<p>Y86-64 指令大致上是 x86-64 的一个子集<span class="mojikumi-line-end">，</span>但在 operand 等方面有一些简化或区别<span class="mojikumi-line-end">。</span></p>
<p>operand 与 x86-64 的区别是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Immediate<span class="mojikumi-line-end">、</span>Register<span class="mojikumi-line-end">、</span>Memory 都只有 64 位的版本</li>
<li>Register 只有 15 个</li>
<li>Memory 不支持 <code>(, ri, s)</code> 的部分<span class="mojikumi-line-end">，</span>只能是 <code>Imm</code>/<code>(rb)</code>/<code>Imm(rb)</code></li>
</ul>
<p>condition code 只有六个<span class="mojikumi-line-end">，</span>即 signed compare: <code>le</code>/<code>l</code>/<code>e</code>/<code>ne</code>/<code>ge</code>/<code>g</code></p>
<p>指令列表<span class="mojikumi-line-end">，</span>以及与 x86-64 的区别<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>irmovq</code>/<code>rrmovq</code>/<code>mrmovq</code>/<code>rmmovq</code><span class="mojikumi-line-end">，</span>即将 <code>movq</code> 按 operand 类型拆成了四个指令</li>
<li><code>addq</code>/<code>subq</code>/<code>andq</code>/<code>xorq</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且只设置 <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code> 三个 status flag</li>
<li><code>jmp</code>/<code>jle</code>/<code>jl</code>/<code>je</code>/<code>jne</code>/<code>jge</code>/<code>jg</code><span class="mojikumi-line-end">，</span>包括 <code>jmp</code> 在内都只能跳转到固定的地址<span class="mojikumi-line-end">，</span>不接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且这个地址是绝对地址而非相对于 PC 的地址</li>
<li><code>cmovle</code>/<code>cmovl</code>/<code>cmove</code>/<code>cmovne</code>/<code>cmovge</code>/<code>cmovg</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand</li>
<li><code>call</code>: 地址是绝对地址</li>
<li><code>ret</code><span class="mojikumi-line-end">、</span><code>pushq</code><span class="mojikumi-line-end">、</span><code>popq</code><span class="mojikumi-line-end">、</span><code>nop</code>: 与 x86-64 基本相同</li>
<li><code>halt</code>: 停止运行<span class="mojikumi-line-end">，</span>将 status code 设为 <code>HLT</code></li>
</ul>
<h3 id="y86-64-指令编码" class="heading"><a href="#y86-64-指令编码" class="heading-anchor" aria-label="章节： Y86-64 指令编码" tabindex="-1"></a><span>Y86-64 指令编码</span></h3>
<p>Y86-64 通过对指令的简化<span class="mojikumi-line-end">，</span>同时也使编码得到了简化<span class="mojikumi-line-end">，</span>但相应地使得编码不紧凑<span class="mojikumi-line-end">，</span>会有浪费<span class="mojikumi-line-end">。</span></p>
<p>CS:APP Figure 4.2 简明地展示了 Y86-64 的指令编码<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.2.429f9e8d.webp"><img srcset="/assets/csapp-fig4.2.43f85c3f.png" loading="lazy" src="/assets/csapp-fig4.2.43f85c3f.png" width="976" height="730" alt="Y86-64 指令编码示意图"></picture></p>
<h4 id="指令类型的编码" class="heading"><a href="#指令类型的编码" class="heading-anchor" aria-label="章节： 指令类型的编码" tabindex="-1"></a><span>指令类型的编码</span></h4>
<p>指令编码的第一个 byte 表示指令的类型<span class="mojikumi-line-end">。</span>这个 byte 的高位叫做 <i>code</i><span class="mojikumi-line-end">，</span>低位叫做 <i>function</i><span class="mojikumi-line-end">，</span>其中 function 只在某几个指令有用<span class="mojikumi-line-end">。</span>特别地<span class="mojikumi-line-end">，</span><code>rrmovq</code> 和 <code>cmovXX</code> 的 code 是相同的<span class="mojikumi-line-end">，</span>这表示 <code>rrmovq</code> 可以看作一种特殊的 <code>cmovXX</code><span class="mojikumi-line-end">。</span></p>
<p>算术运算的 function: <code>add</code> 0, <code>sub</code> 1, <code>and</code> 2, <code>xor</code> 3</p>
<p>condition code 的 function: <code>le</code> 1, <code>l</code> 2, <code>e</code> 3, <code>ne</code> 4, <code>ge</code> 5, <code>g</code> 6<span class="mojikumi-line-end">；</span><code>jmp</code> 的 function 为 0</p>
<h4 id="register-specifier-byte" class="heading"><a href="#register-specifier-byte" class="heading-anchor" aria-label="章节： Register Specifier Byte" tabindex="-1"></a><span>Register Specifier Byte</span></h4>
<p>除了 <code>jXX</code> 和 <code>call</code><span class="mojikumi-line-end">，</span>指令编码的第二个 byte<span class="mojikumi-line-start">（</span>如果有<span class="mojikumi-line-end">）</span>的高低位分别表示一个 register identifier<span class="mojikumi-line-end">。</span></p>
<p>register identifier 从 <code>%rax</code> 为 <code>0</code> 到 <code>%r14</code> 为 <code>E</code><span class="mojikumi-line-end">；</span><code>F</code> 表示不是寄存器<span class="mojikumi-line-end">。</span></p>
<h4 id="constant-word" class="heading"><a href="#constant-word" class="heading-anchor" aria-label="章节： Constant Word" tabindex="-1"></a><span>Constant Word</span></h4>
<p>在 <code>irmovq</code><span class="mojikumi-line-end">、</span><code>rmmovq</code>/<code>mrmovq</code><span class="mojikumi-line-end">、</span><code>jXX</code>/<code>call</code> 中<span class="mojikumi-line-end">，</span>分别有一个 8-byte 的 constant word<span class="mojikumi-line-end">，</span>用来表示 immediate value 或地址<span class="mojikumi-line-end">，</span>byte ordering 是 little endian<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-异常" class="heading"><a href="#y86-64-异常" class="heading-anchor" aria-label="章节： Y86-64 异常" tabindex="-1"></a><span>Y86-64 异常</span></h3>
<p>status code <code>Stat</code> 有四种可能的取值<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>AOK</code>: 正常</li>
<li><code>HLT</code>: 执行了 <code>halt</code> 指令</li>
<li><code>ADR</code>: 访问了不合法的地址</li>
<li><code>INS</code>: 指令编码不合法</li>
</ul>
<p>在 Y86-64 中<span class="mojikumi-line-end">，</span>遇到异常后处理器会立即停止运行<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序" class="heading"><a href="#y86-64-程序" class="heading-anchor" aria-label="章节： Y86-64 程序" tabindex="-1"></a><span>Y86-64 程序</span></h3>
<p>CS:APP Figure 4.8 展示了一个完整的 Y86-64 程序<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.8.7c8b0ffb.webp"><img srcset="/assets/csapp-fig4.8.49c0b260.png" loading="lazy" src="/assets/csapp-fig4.8.49c0b260.png" width="930" height="1075" alt="完整 Y86-64 程序的汇编与机器码"></picture></p>
<p>可以下载 <a href="http://csapp.cs.cmu.edu/3e/sim.tar">Y86-64 tools</a> 并使用 <code>yas</code> 进行汇编<span class="mojikumi-line-end">，</span>使用 <code>yis</code> 模拟运行<span class="mojikumi-line-end">。</span>编译 <code>yas</code> 时 <a href="https://stackoverflow.com/questions/63152352/fail-to-compile-the-y86-simulatur-csapp">需要添加 <code>-fcommon</code> 编译选项</a><span class="mojikumi-line-end">。</span></p>
<h3 id="对-rsp-进行-pushpop" class="heading"><a href="#对-rsp-进行-pushpop" class="heading-anchor" aria-label="章节： 对 %rsp 进行 push/pop" tabindex="-1"></a><span>对 %rsp 进行 push/pop</span></h3>
<p><code>pushq %rsp</code><span class="mojikumi-line-end">、</span><code>popq %rsp</code> 这两条指令虽然没什么用<span class="mojikumi-line-end">，</span>但它们的行为可能有歧义<span class="mojikumi-line-end">，</span>所以在设计 ISA 时明确规定它们的行为是有必要的<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 遵循和 x86-64 相同的规则<span class="mojikumi-line-end">：</span><code>pushq %rsp</code> 会将旧的<span class="mojikumi-line-start">（</span>没有减 8 的<span class="mojikumi-line-end">）</span><code>%rsp</code> 的值入栈<span class="mojikumi-line-end">，</span><code>popq %rsp</code> 相当于 <code>mrmovq (%rsp), %rsp</code><span class="mojikumi-line-end">。</span></p>
<h2 id="logic-design-and-the-hardware-control-language-hcl" class="heading"><a href="#logic-design-and-the-hardware-control-language-hcl" class="heading-anchor" aria-label="章节： Logic Design and the Hardware Control Language HCL" tabindex="-1"></a><span>Logic Design and the Hardware Control Language HCL</span></h2>
<p>这一章中使用玩具语言 HCL (hardware control language) 来描述 Y86-64 处理器的逻辑设计<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>与之类似但不是玩具的语言<span class="mojikumi-line-end">，</span>例如 VHDL<span class="mojikumi-line-end">、</span>Verilog 等<span class="mojikumi-line-end">，</span>叫做 <span class="mojikumi">“</span><a href="https://en.wikipedia.org/wiki/Hardware_description_language">hardware description language (HDL)</a><span class="mojikumi">”</span><span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="逻辑门" class="heading"><a href="#逻辑门" class="heading-anchor" aria-label="章节： 逻辑门" tabindex="-1"></a><span>逻辑门</span></h3>
<p>CSAPP Figure 4.9:</p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.9.15f29f6a.webp"><img srcset="/assets/csapp-fig4.9.78811b7b.png" loading="lazy" src="/assets/csapp-fig4.9.78811b7b.png" width="546" height="168" alt="与或非逻辑门"></picture></p>
<ul>
<li>图中只展示了输入个数为 2 的 AND 和 OR<span class="mojikumi-line-end">，</span>但可以有更多输入</li>
<li>一旦输入改变<span class="mojikumi-line-end">，</span>逻辑门的输出很快就会随之改变</li>
</ul>
<h3 id="组合逻辑电路" class="heading"><a href="#组合逻辑电路" class="heading-anchor" aria-label="章节： 组合逻辑电路" tabindex="-1"></a><span>组合逻辑电路</span></h3>
<p>组合逻辑电路即由若干逻辑门组合而成的电路<span class="mojikumi-line-end">，</span>它的特点是无状态<span class="mojikumi-line-end">，</span>输出仅与输入有关<span class="mojikumi-line-end">，</span>输入改变后输出很快就会随之改变<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>用逻辑表达式来表示组合逻辑电路<span class="mojikumi-line-end">，</span>例如 <code>bool eq = (a &#x26;&#x26; b) || (!a &#x26;&#x26; !b)</code> 表示计算 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 是否相等的电路<span class="mojikumi-line-end">。</span>因为它表示的是电路而不是计算<span class="mojikumi-line-end">，</span>在这条语句之后<span class="mojikumi-line-end">，</span>一旦 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 的值发生改变<span class="mojikumi-line-end">，</span><code>eq</code> 的输出也会改变<span class="mojikumi-line-start">（</span>和 Vue 的 computed 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="以-word-为单位进行操作的电路" class="heading"><a href="#以-word-为单位进行操作的电路" class="heading-anchor" aria-label="章节： 以 word 为单位进行操作的电路" tabindex="-1"></a><span>以 word 为单位进行操作的电路</span></h3>
<p>在处理器的设计中<span class="mojikumi-line-end">，</span>经常需要对一个 word 而非单个 bit 进行操作<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>一般使用大写的名称表示 word<span class="mojikumi-line-end">，</span>例如: <code>bool Eq = (A == B)</code> 表示计算 word <code>A</code><span class="mojikumi-line-end">、</span><code>B</code> 是否相等的电路<span class="mojikumi-line-end">，</span>可以实现为判断每个 bit 是否相等再 AND<span class="mojikumi-line-end">。</span></p>
<h3 id="multiplexor-mux" class="heading"><a href="#multiplexor-mux" class="heading-anchor" aria-label="章节： Multiplexor (MUX)" tabindex="-1"></a><span>Multiplexor (MUX)</span></h3>
<p>multiplexor (MUX) 的功能是通过信号输入的值来在其它输入中选择一个作为输出<span class="mojikumi-line-end">，</span>word-level 的 MUX 电路如图 (CSAPP Figure 4.13)<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.13.47e7678b.webp"><img srcset="/assets/csapp-fig4.13.342f11a8.png" loading="lazy" src="/assets/csapp-fig4.13.342f11a8.png" width="886" height="759" alt="word-level MUX 电路"></picture></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>使用 <i>case expressions</i> 表示 MUX<span class="mojikumi-line-end">，</span>例如</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-c675dba6><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-c675dba6><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-c675dba6>HCL (CS:APP)</h4><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="dark:hidden" itemprop="text" data-v-c675dba6><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Mux</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53"> &amp;&amp; !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">D</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div><div class="dark:important-block" style="display:none;" data-v-c675dba6><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Mux</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> &amp;&amp; !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">D</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div></section>
<p>表示一个由 <code>s0</code> 和 <code>s1</code> 控制的<span class="mojikumi-line-end">、</span>在 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code><span class="mojikumi-line-end">、</span><code>D</code> 中选一个作为输出的 MUX<span class="mojikumi-line-end">。</span></p>
<p>case expression 在逻辑上的语义是依次判断每个条件<span class="mojikumi-line-end">，</span>以第一个满足的条件作为输出<span class="mojikumi-line-end">，</span>类似于 Rust 的 match<span class="mojikumi-line-end">。</span></p>
<p>下面的 HCL 代码表示计算 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code> 中的最小值<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-c675dba6><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-c675dba6><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-c675dba6>HCL (CS:APP)</h4><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="dark:hidden" itemprop="text" data-v-c675dba6><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Min3</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &amp;&amp; </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div><div class="dark:important-block" style="display:none;" data-v-c675dba6><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Min3</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &amp;&amp; </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div></section>
<h3 id="arithmeticlogic-unit-alu" class="heading"><a href="#arithmeticlogic-unit-alu" class="heading-anchor" aria-label="章节： Arithmetic/logic unit (ALU)" tabindex="-1"></a><span>Arithmetic/logic unit (ALU)</span></h3>
<p>ALU 是用来进行算术/逻辑运算的组合逻辑电路元件<span class="mojikumi-line-end">，</span>它接收两个 data input 以及一个表示进行何种运算的 control input<span class="mojikumi-line-end">，</span>输出运算的结果<span class="mojikumi-line-end">。</span></p>
<h3 id="测试值是否属于集合" class="heading"><a href="#测试值是否属于集合" class="heading-anchor" aria-label="章节： 测试值是否属于集合" tabindex="-1"></a><span>测试值是否属于集合</span></h3>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>可以使用 <code>in</code> 来表示测试值是否属于集合的电路<span class="mojikumi-line-end">，</span>例如:</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-c675dba6><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-c675dba6><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-c675dba6>HCL (CS:APP)</h4><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="dark:hidden" itemprop="text" data-v-c675dba6><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s1</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">2</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span>
<span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s0</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span></code></pre></div><div class="dark:important-block" style="display:none;" data-v-c675dba6><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span>
<span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span></code></pre></div></section>
<h3 id="memory-and-clocking" class="heading"><a href="#memory-and-clocking" class="heading-anchor" aria-label="章节： Memory and Clocking" tabindex="-1"></a><span>Memory and Clocking</span></h3>
<p>组合逻辑电路是无状态且实时更新的<span class="mojikumi-line-end">；</span>与之相对<span class="mojikumi-line-end">，</span>memory 可以存储状态<span class="mojikumi-line-end">，</span>但更新由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>这一章中会用到的 memory 有两大种三小种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>clocked register: 存储一个值<span class="mojikumi-line-end">，</span>有一个输入和一个输出<span class="mojikumi-line-end">。</span>输出即存储的值<span class="mojikumi-line-end">，</span>而每次 clock rise 时会将存储的值修改为输入<span class="mojikumi-line-end">。</span></li>
<li>random access memory:
<ul>
<li>register file: 存储 15 个值<span class="mojikumi-line-start">（</span>在 Y86-64 处理器中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有两个 read port 和一个 write port<span class="mojikumi-line-end">：</span>
<ul>
<li>每个 read port 有一个输入 <code>src</code> 表示 register identifier<span class="mojikumi-line-end">，</span>有一个输出 <code>val</code> 表示这个 register 存储的值<span class="mojikumi-line-end">，</span>且 <code>src</code> 改变后 <code>val</code> 会立刻改变<span class="mojikumi-line-end">。</span></li>
<li>write port 有一个输入 <code>dst</code> 表示 register identifier<span class="mojikumi-line-end">，</span>另有一个输入 <code>val</code> 用于写入<span class="mojikumi-line-end">。</span>每次 clock rise 时<span class="mojikumi-line-end">，</span>如果 <code>dst</code> 不是 <code>F</code> 就会将 <code>val</code> 写入相应的 register<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
<li>data memory: 存储很多个值<span class="mojikumi-line-end">，</span>用地址进行索引<span class="mojikumi-line-end">。</span>
<ul>
<li>有一个地址输入 <code>address</code><span class="mojikumi-line-end">。</span></li>
<li>有一个信号输入 <code>write</code> 表示进行写入而非读取<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输出 <code>data out</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 0<span class="mojikumi-line-end">，</span><code>data out</code> 会立刻输出 <code>address</code> 处存储的值<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输入 <code>data in</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 1<span class="mojikumi-line-end">，</span>在 clock rise 时会将 <code>data in</code> 写入 <code>address</code> 处<span class="mojikumi-line-end">。</span></li>
<li>有一个信号输出 <code>error</code><span class="mojikumi-line-end">，</span>在 <code>address</code> 不是合法地址时输出 1<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>可以看到<span class="mojikumi-line-end">，</span>这几种 memory 的共同点是读取是实时的<span class="mojikumi-line-end">，</span>但写入由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>在 Y86-64 的程序状态中<span class="mojikumi-line-end">，</span>寄存器存在 register file 中<span class="mojikumi-line-end">，</span>status flags<span class="mojikumi-line-end">、</span>program counter<span class="mojikumi-line-end">、</span>status code 存在 clocked register 中<span class="mojikumi-line-end">，</span>memory 存在 data memory 中<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 处理器还有一个额外的 read-only instruction memory 用来读取指令<span class="mojikumi-line-end">，</span>而在真实的处理器中这是和内存一体的<span class="mojikumi-line-end">。</span></p>
<a id="data-memory-的-read-信号" name="data-memory-的-read-信号" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>data memory 的 read 信号</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>383 页的图中 data memory 还有一个 <code>read</code> 信号<span class="mojikumi-line-end">，</span>但在文字说明中没有提到它的作用<span class="mojikumi-line-end">，</span>而对 <code>write</code> 信号的说明似乎使得 <code>read</code> 信号无用 🤔</p></div></div></aside>
<h2 id="sequential-y86-64-implementations" class="heading"><a href="#sequential-y86-64-implementations" class="heading-anchor" aria-label="章节： Sequential Y86-64 Implementations" tabindex="-1"></a><span>Sequential Y86-64 Implementations</span></h2>
<p>这一节会实现一个名为 SEQ 的顺序执行的处理器<span class="mojikumi-line-end">。</span>在这个处理器中<span class="mojikumi-line-end">，</span>指令是按顺序一条接着一条执行的<span class="mojikumi-line-end">，</span>且每条指令都会在一个 clock cycle 内执行完毕<span class="mojikumi-line-end">，</span>这要求 clock cycle 很长<span class="mojikumi-line-end">，</span>会导致处理器的执行很慢<span class="mojikumi-line-end">，</span>下两节将对此进行优化<span class="mojikumi-line-end">。</span></p>
<h3 id="指令执行的阶段划分与具体操作" class="heading"><a href="#指令执行的阶段划分与具体操作" class="heading-anchor" aria-label="章节： 指令执行的阶段划分与具体操作" tabindex="-1"></a><span>指令执行的阶段划分与具体操作</span></h3>
<p>将指令的执行划分为多个阶段<span class="mojikumi-line-end">，</span>可以使行为有很大差别的不同指令有一定的统一性<span class="mojikumi-line-end">，</span>方便硬件实现<span class="mojikumi-line-end">。</span></p>
<p>本节会将指令执行划分为六个阶段<span class="mojikumi-line-end">：</span></p>
<ol>
<li>Fetch: 将指令编码中不同部分的值读取出来</li>
<li>Decode: 读取寄存器的值<span class="mojikumi-line-start">（</span>我感觉 fetch 和 decode 这两个名字互换一下才比较对 🤔<span class="mojikumi-line-end">）</span></li>
<li>Execute: 执行运算</li>
<li>Memory: 写入或读取内存</li>
<li>Write back: 写入寄存器</li>
<li>PC update: 更新 program counter</li>
</ol>
<p>每个指令每阶段的具体操作如图<span class="mojikumi-line-start">（</span>CS:APP Figure 4.18~4.21<span class="mojikumi-line-end">、</span>Solution 4.17<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.18.1d452c61.webp"><img srcset="/assets/csapp-fig4.18.cc74142a.png" loading="lazy" src="/assets/csapp-fig4.18.cc74142a.png" width="1091" height="613" alt="OPq, rrmovq, irmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.19.9f043a86.webp"><img srcset="/assets/csapp-fig4.19.7887b6d0.png" loading="lazy" src="/assets/csapp-fig4.19.7887b6d0.png" width="773" height="611" alt="rmmovq, mrmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.20.3d7b8ab1.webp"><img srcset="/assets/csapp-fig4.20.7606e619.png" loading="lazy" src="/assets/csapp-fig4.20.7606e619.png" width="782" height="619" alt="pushq, popq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.21.304f2868.webp"><img srcset="/assets/csapp-fig4.21.d8c98f75.png" loading="lazy" src="/assets/csapp-fig4.21.d8c98f75.png" width="1113" height="562" alt="jXX, call, ret"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-sol4.17.4eb57d44.webp"><img srcset="/assets/csapp-sol4.17.a75a9c9a.png" loading="lazy" src="/assets/csapp-sol4.17.a75a9c9a.png" width="461" height="432" alt="cmovXX"></picture></p>
<h3 id="seq-的主体电路" class="heading"><a href="#seq-的主体电路" class="heading-anchor" aria-label="章节： SEQ 的主体电路" tabindex="-1"></a><span>SEQ 的主体电路</span></h3>
<p>CS:APP Figure 4.23 大致展示了 SEQ 的主体电路<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.23.ed95a333.webp"><img srcset="/assets/csapp-fig4.23.ff80ba41.png" loading="lazy" src="/assets/csapp-fig4.23.ff80ba41.png" width="798" height="1065" alt="SEQ 主体电路"></picture></p>
<p>其中蓝色的元件是 black box<span class="mojikumi-line-end">，</span>灰色的元件会在后面进行设计<span class="mojikumi-line-end">，</span>还有部分电路连接没有画出来<span class="mojikumi-line-end">。</span></p>
<p>这个电路大概看着有个印象即可<span class="mojikumi-line-end">，</span>细节会在后面说明<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的时序控制" class="heading"><a href="#seq-的时序控制" class="heading-anchor" aria-label="章节： SEQ 的时序控制" tabindex="-1"></a><span>SEQ 的时序控制</span></h3>
<p>在 SEQ 中<span class="mojikumi-line-end">，</span>每个时钟周期执行一条指令<span class="mojikumi-line-end">，</span>而时钟控制的只有各种 memory 的写入<span class="mojikumi-line-end">，</span>memory 的读取和运算都是用组合逻辑电路实现的<span class="mojikumi-line-end">，</span>虽然在逻辑上有执行顺序<span class="mojikumi-line-end">，</span>在电路上却是同时执行的<span class="mojikumi-line-end">，</span>可以看成一个关于 memory 的函数<span class="mojikumi-line-end">。</span></p>
<p>也就是说<span class="mojikumi-line-end">，</span>整个执行过程是<span class="mojikumi-line-end">：</span>读取 memory 并计算出需要写入 memory 的值<span class="mojikumi-line-end">，</span>然后在 clock rise 时执行写入<span class="mojikumi-line-end">，</span>从而读取到新的 memory 的值而执行下一条指令<span class="mojikumi-line-end">。</span></p>
<p>为了这个设计能够实现<span class="mojikumi-line-end">，</span>一条重要的原则是 <span class="mojikumi">“</span>No reading back<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>即一条指令不能先更新再读取同一个值<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 <code>pushq</code> 中<span class="mojikumi-line-end">，</span>不是先更新 <code>R[%rsp]</code> 再写入 <code>M[R[%rsp]]</code><span class="mojikumi-line-end">，</span>而是先算出 <code>valE</code><span class="mojikumi-line-end">，</span>再写入 <code>M[valE]</code><span class="mojikumi-line-end">，</span>最后将 <code>valE</code> 写入 <code>R[%rsp]</code><span class="mojikumi-line-end">。</span>又例如<span class="mojikumi-line-end">，</span>有的指令会修改 status flags<span class="mojikumi-line-end">，</span>有的会读取<span class="mojikumi-line-end">，</span>但没有指令既修改又读取<span class="mojikumi-line-end">。</span></p>
<p>因为运算都是同时进行的<span class="mojikumi-line-end">，</span>执行的六个阶段实际上是六个部分<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的具体实现" class="heading"><a href="#seq-的具体实现" class="heading-anchor" aria-label="章节： SEQ 的具体实现" tabindex="-1"></a><span>SEQ 的具体实现</span></h3>]]></content>
        <category label="csapp" term="https://ouuan.moe/tag/csapp"/>
        <category label="学习笔记" term="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"/>
        <category label="WIP" term="https://ouuan.moe/tag/WIP"/>
    </entry>
</feed>