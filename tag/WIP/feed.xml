<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ouuan's blog: 标签: WIP</title>
        <link>https://ouuan.moe/tag/WIP</link>
        <description>标签: WIP - ouuan 写东西的地方，涵盖了 Web 开发、计算机系统、Linux 使用、大学学习生活等多个主题。</description>
        <lastBuildDate>Tue, 18 Jul 2023 14:32:44 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>Copyright © 2022 - 2023 ouuan
Licensed under CC BY-SA 4.0</copyright>
        <atom:link href="https://ouuan.moe/tag/WIP/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[CNATDA 第八章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/07/cnatda-8</link>
            <guid>https://ouuan.moe/post/2023/07/cnatda-8</guid>
            <pubDate>Tue, 18 Jul 2023 14:32:44 GMT</pubDate>
            <description><![CDATA[<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第八章 <span class="mojikumi">“</span>Security in Computer Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第八章 <span class="mojikumi">“</span>Security in Computer Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="what-is-network-security" class="heading"><a href="#what-is-network-security" class="heading-anchor" aria-label="章节： What Is Network Security?" tabindex="-1"></a><span>What Is Network Security?</span></h2>
<p><i>secure communication</i> 有下列性质<span class="mojikumi-line-end">：</span></p>
<ul>
<li>confidentiality: 由于通信可以被拦截<span class="mojikumi-line-end">，</span>保密意味着需要以某种方式加密</li>
<li>message integrity: 保证消息未被修改</li>
<li>end-point authentication: 能够确认对方的身份</li>
<li>operational security: 保护 organization network 不被攻击</li>
</ul>
<p>intruder 可以对 message 进行 eavesdropping<span class="mojikumi-line-end">、</span>modification<span class="mojikumi-line-end">、</span>insertion<span class="mojikumi-line-end">、</span>deletion<span class="mojikumi-line-end">，</span>进而实现各种攻击<span class="mojikumi-line-end">。</span></p>
<p>在网络中<span class="mojikumi-line-end">，</span>需要进行 secure communication 的双方可能是两个人类用户<span class="mojikumi-line-end">、</span>可能是 client 和 server<span class="mojikumi-line-end">、</span>可能是两个 router……</p>
<p>security functionality 可以在网络的各个 layer 提供<span class="mojikumi-line-end">。</span>虽然底层的 security 看起来覆盖了高层的 security<span class="mojikumi-line-end">，</span>但并非完全如此<span class="mojikumi-line-end">，</span>例如 IP-layer security 不能区分 IP address 相同的多个用户<span class="mojikumi-line-end">。</span>并且<span class="mojikumi-line-end">，</span>底层协议的更新<span class="mojikumi-line-end">、</span>普及相对更慢<span class="mojikumi-line-end">，</span>在上层采取措施可以更快生效<span class="mojikumi-line-end">。</span></p>
<h2 id="principles-of-cryptography" class="heading"><a href="#principles-of-cryptography" class="heading-anchor" aria-label="章节： Principles of Cryptography" tabindex="-1"></a><span>Principles of Cryptography</span></h2>
<p>plaintext (cleartext) 经 encryption algorithm 得到 ciphertext<span class="mojikumi-line-end">，</span>由 decryption algorithm 回到 plaintext<span class="mojikumi-line-end">。</span></p>
<p>encryption algorithm 一般是公开的<span class="mojikumi-line-end">，</span>为了达到保密的效果<span class="mojikumi-line-end">，</span>还需要使用 key<span class="mojikumi-line-end">。</span>设 plaintext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">，</span>sender 使用 key <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">K_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 进行 encrypt 得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K_A(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">，</span>receiver 使用 key <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 进行 decrypt 得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub><mo stretchy="false">(</mo><msub><mi>K</mi><mi>A</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">K_B(K_A(m)) = m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>在 symmetric key system 中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub><mo>=</mo><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_A = K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>是保密的<span class="mojikumi-line-end">；</span>在 public key system 中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">K_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 是公开的<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 是保密的<span class="mojikumi-line-end">。</span></p>
<h3 id="symmetric-key-cryptography" class="heading"><a href="#symmetric-key-cryptography" class="heading-anchor" aria-label="章节： Symmetric Key Cryptography" tabindex="-1"></a><span>Symmetric Key Cryptography</span></h3>
<p>在现代密码所使用的 block cipher 中<span class="mojikumi-line-end">，</span>plaintext 被划分为若干个 block<span class="mojikumi-line-end">，</span>例如在 AES 中每 128 bit 是一个 block<span class="mojikumi-line-end">，</span>cipher 会构建一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>128</mn></msup><mo>→</mo><msup><mn>2</mn><mn>128</mn></msup></mrow><annotation encoding="application/x-tex">2^{128} \to 2^{128}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">128</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">128</span></span></span></span></span></span></span></span></span></span></span></span></span> 的 plaintext 到 ciphertext 的一一对应<span class="mojikumi-line-end">，</span>而 key 用来生成这个对应关系<span class="mojikumi-line-end">，</span>AES 的 key length 可以是 128/192/256 bit<span class="mojikumi-line-end">。</span>太小的 block size / key length 会导致安全性不够<span class="mojikumi-line-end">；</span>将整个对应关系存下来 key 会过长<span class="mojikumi-line-end">，</span>所以只能用没那么长的 key 来生成对应关系<span class="mojikumi-line-end">；</span>太大的 block size / key length 可能会影响性能<span class="mojikumi-line-end">。</span></p>
<p>如果 plaintext 中有多个相同的 block<span class="mojikumi-line-end">，</span>它们对应的 ciphertext 也相同<span class="mojikumi-line-end">，</span>就会暴露出一定的信息<span class="mojikumi-line-end">。</span>为了避免这样的风险<span class="mojikumi-line-end">，</span>可以给每个 block 异或上一个随机数再加密<span class="mojikumi-line-end">。</span></p>
<p>如果真的每个 block 都独立地生成一个随机数<span class="mojikumi-line-end">，</span>则传输时需要附上这一堆随机数<span class="mojikumi-line-end">，</span>整个 message 的长度会翻倍<span class="mojikumi-line-end">。</span>所以实际上并不会这样做<span class="mojikumi-line-end">，</span>而是会使用称作 cipher block chaining (CBC) 的技术<span class="mojikumi-line-end">：</span>每条 message 只生成一个随机数<span class="mojikumi-line-end">，</span>称作 initialization vector (IV)<span class="mojikumi-line-end">，</span>记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">c_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>而 plaintext 的第一块记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">m_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>对 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_{i-1} \oplus m_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 加密得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>即每个 block 异或的是上一个 block 的加密结果<span class="mojikumi-line-end">，</span>这样传输时的 overhead 就只有一个 block size 的 IV 了<span class="mojikumi-line-end">。</span></p>
<h3 id="public-key-encryption" class="heading"><a href="#public-key-encryption" class="heading-anchor" aria-label="章节： Public Key Encryption" tabindex="-1"></a><span>Public Key Encryption</span></h3>
<p>symmetric key cryptography 需要双方以某种方式事先做到共享 key<span class="mojikumi-line-end">，</span>而这本身就需要 secure communication<span class="mojikumi-line-end">。</span>以前这可以通过线下之类的方式进行<span class="mojikumi-line-end">，</span>而在网络中则需要另外的方式<span class="mojikumi-line-end">。</span></p>
<p>在 public key encryption 中<span class="mojikumi-line-end">，</span>接收方有一对 key<span class="mojikumi-line-end">，</span>public key 用来加密<span class="mojikumi-line-end">，</span>private key 用来解密<span class="mojikumi-line-end">。</span>public key 是公开的<span class="mojikumi-line-end">，</span>从而不需要事先依赖于 secure communication 进行 key exchange<span class="mojikumi-line-end">。</span></p>
<p>public key encryption 带来身份认证的问题<span class="mojikumi-line-end">：</span>在 symmetric key cryptography 中<span class="mojikumi-line-end">，</span>知道 key 隐含了身份<span class="mojikumi-line-end">，</span>但知道 public key 则不代表身份<span class="mojikumi-line-end">，</span>所以需要额外的机制来进行认证<span class="mojikumi-line-end">。</span></p>
<p>RSA 是目前最流行的 public key encryption algorithm:</p>
<ol>
<li>选两个大质数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="mojikumi-line-start">（</span>一般要达到 1024~4096 bit 长<span class="mojikumi-line-end">）</span></li>
<li>令 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">n = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z = (p-1)(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></li>
<li>选一个比 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 小<span class="mojikumi-line-end">、</span>和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span> 互质的数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span></li>
<li>算出 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span> 的乘法逆元 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>z</mi></mrow><annotation encoding="application/x-tex">d = e^{-1} \bmod z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></li>
<li>public key 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">，</span>private key 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span></span></li>
<li>encryption: 设 plaintext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span> (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>&#x3C;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m &#x3C; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3C;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>)<span class="mojikumi-line-end">，</span>则 ciphertext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c = m^e \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></li>
<li>decryption: <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m = c^d \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></li>
</ol>
<p>RSA 的计算比 AES 慢<span class="mojikumi-line-end">，</span>为了性能<span class="mojikumi-line-end">，</span>通常会结合 symmetric key cryptography 一起使用<span class="mojikumi-line-end">：</span>每次生成一个用于 symmetric key cipher 的 session key<span class="mojikumi-line-end">，</span>通过 public key encryption 来进行 key exchange<span class="mojikumi-line-end">，</span>实际的通信则使用 symmetric key cipher<span class="mojikumi-line-end">。</span></p>
<p>RSA 的安全性依赖于大数分解的困难性<span class="mojikumi-line-end">，</span>这受到量子计算的挑战<span class="mojikumi-line-end">。</span></p>
<h2 id="message-integrity-and-digital-signatures" class="heading"><a href="#message-integrity-and-digital-signatures" class="heading-anchor" aria-label="章节： Message Integrity and Digital Signatures" tabindex="-1"></a><span>Message Integrity and Digital Signatures</span></h2>
<p>message integrity 即 sender 身份真实<span class="mojikumi-line-end">，</span>message 未遭篡改<span class="mojikumi-line-end">。</span></p>
<p>cryptographic hash function 在一般的 hash 的基础上要求难以构造 collision<span class="mojikumi-line-end">，</span>从而可以用来验证消息未被篡改<span class="mojikumi-line-end">。</span></p>
<p>可以用 message authentication code (MAC) 来验证 message integrity<span class="mojikumi-line-end">：</span>双方共享保密的 authentication key<span class="mojikumi-line-end">，</span>设 message 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">，</span>cryptographic hash function 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></span><span class="mojikumi-line-end">，</span>最终传输的是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(m, H(m + s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mclose">))</span></span></span></span></span><span class="mojikumi-line-start">（</span>具体实现可能有所不同<span class="mojikumi-line-end">，</span>例如 HMAC 会 hash 两次<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>可以使用 public key encryption 或者其他方式来 exchange authentication key<span class="mojikumi-line-end">。</span>MAC 本身可以不涉及 encryption<span class="mojikumi-line-end">，</span>如果只需保证 message integrity 而不在意 confidentiality 则无需付出 encryption 的性能代价<span class="mojikumi-line-end">。</span></p>
<p>digital signature 相当于 MAC 的 <span class="mojikumi">“</span>public key 版本<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>可以用来验证 sender 的身份<span class="mojikumi-line-end">，</span>而验证者只需知道 public key<span class="mojikumi-line-end">，</span>可以保持 private key 的私密<span class="mojikumi-line-end">。</span>RSA 的 encryption 和 decryption 其实是可交换的<span class="mojikumi-line-end">，</span>即先 public key 再 private key 或者先 private key 再 public key 都可以得到原来的 plaintext<span class="mojikumi-line-end">。</span>digital signature 即使用 private key 进行<span class="mojikumi-line-start">“</span>加密<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>而使用 public key 进行<span class="mojikumi-line-start">“</span>解密<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>RSA 计算慢<span class="mojikumi-line-end">，</span>所以可以对 cryptographic hash 而非 message 本身计算 digital signature<span class="mojikumi-line-end">。</span></p>
<p>虽然 MAC 和 digital signature 功能有一定的类似<span class="mojikumi-line-end">，</span>但 MAC 可以完全不涉及 encryption<span class="mojikumi-line-end">，</span>digital signature 则依赖于 public key infrastructure (PKI)<span class="mojikumi-line-end">。</span></p>
<p>digital signature 验证的是 message 和 public key 的对应关系<span class="mojikumi-line-end">，</span>还需要额外的措施来保证 public key 和 entity (sender) 的对应关系<span class="mojikumi-line-end">。</span>certification authority (CA) 提供了这一服务<span class="mojikumi-line-end">，</span>通过某些手段认证 public key 和 entity 的对应关系<span class="mojikumi-line-end">，</span>并颁发 certificate<span class="mojikumi-line-end">，</span>certificate 包含 entity 和 public key 的相关信息<span class="mojikumi-line-start">（</span>以及有效期<span class="mojikumi-line-end">）</span>以及使用 CA 的 public key 对这些信息创建的 digital signature<span class="mojikumi-line-end">。</span>有了 certificate<span class="mojikumi-line-end">，</span>对 public key 和 entity 之间关联的信任取决于对 CA 的信任<span class="mojikumi-line-end">。</span></p>
<h2 id="end-point-authentication" class="heading"><a href="#end-point-authentication" class="heading-anchor" aria-label="章节： End-Point Authentication" tabindex="-1"></a><span>End-Point Authentication</span></h2>
<p>书上说了很多<span class="mojikumi-line-end">，</span>但感觉本质上就是<span class="mojikumi-line-end">，</span>Alice 要向 Bob 证明自己的身份<span class="mojikumi-line-end">，</span>则 Bob 提供一个一次性的随机数 <i>nonce</i><span class="mojikumi-line-end">，</span>Alice 通过某种方式<span class="mojikumi-line-start">（</span>例如 symmetric key cryptography / MAC<span class="mojikumi-line-end">）</span>发回 nonce 并保证 message integrity<span class="mojikumi-line-end">。</span>nonce 用来防止 playback attack<span class="mojikumi-line-end">。</span></p>
<h2 id="securing-e-mail" class="heading"><a href="#securing-e-mail" class="heading-anchor" aria-label="章节： Securing E-Mail" tabindex="-1"></a><span>Securing E-Mail</span></h2>
<h3 id="secure-e-mail" class="heading"><a href="#secure-e-mail" class="heading-anchor" aria-label="章节： Secure E-Mail" tabindex="-1"></a><span>Secure E-Mail</span></h3>
<p>就是上面这些东西的一个实例<span class="mojikumi-line-end">，</span>没啥新东西<span class="mojikumi-line-end">：</span>结合 digital signature 和使用 session key 的 encryption 即可<span class="mojikumi-line-end">；</span>需要双方互相知道对方的 public key<span class="mojikumi-line-start">（</span>分别用于 digital signature 的验证和 session key 的传输<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>public key 可以由 CA 认证<span class="mojikumi-line-end">。</span></p>
<h3 id="pgp" class="heading"><a href="#pgp" class="heading-anchor" aria-label="章节： PGP" tabindex="-1"></a><span>PGP</span></h3>
<p>PGP 提供了 sign<span class="mojikumi-line-end">、</span>encrypt<span class="mojikumi-line-end">、</span>sign and encrypt 等功能<span class="mojikumi-line-end">，</span>public key 通过用户之间的 web of trust 而非 CA 来 certify<span class="mojikumi-line-end">，</span>可以线下举办 key-signing party 来互相 sign<sup><a href="#user-content-fn-sign" id="user-content-fnref-sign" data-footnote-ref aria-describedby="footnote-label">1</a></sup><span class="mojikumi-line-end">。</span></p>
<h2 id="securing-tcp-connections-tls" class="heading"><a href="#securing-tcp-connections-tls" class="heading-anchor" aria-label="章节： Securing TCP Connections: TLS" tabindex="-1"></a><span>Securing TCP Connections: TLS</span></h2>
<p>TLS (Transport Layer Security) 为 TCP 提供了 security services<span class="mojikumi-line-end">，</span>是 SSL (Secure Sockets Layer) 标准化后的升级版<span class="mojikumi-line-start">（</span>只不过现在人们有时仍会把 TLS 误称为 SSL<span class="mojikumi-line-end">，</span>OpenSSL 的名字也有一定的误导性<sup><a href="#user-content-fn-opentls" id="user-content-fnref-opentls" data-footnote-ref aria-describedby="footnote-label">2</a></sup><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>TLS 通常用于 HTTP<span class="mojikumi-line-end">，</span>表现为网址开头是 <code>https://</code><span class="mojikumi-line-end">，</span>但它实际上可以用于任何基于 TCP 的 application<span class="mojikumi-line-end">。</span>TLS 位于 application layer<span class="mojikumi-line-end">，</span>但它提供了类似 TCP 的 API<span class="mojikumi-line-end">，</span>对于 application developer 来说就像是 transport layer 的一部分<span class="mojikumi-line-end">。</span></p>
<h3 id="tls-handshake" class="heading"><a href="#tls-handshake" class="heading-anchor" aria-label="章节： TLS Handshake" tabindex="-1"></a><span>TLS Handshake</span></h3>
<ol>
<li>TCP 3-way handshake</li>
<li>client 发送 TLS version<span class="mojikumi-line-end">、</span>supported cipher suites (symmetric algorithm<span class="mojikumi-line-end">、</span>public key algorithm<span class="mojikumi-line-end">、</span>HMAC algorithm)<span class="mojikumi-line-end">、</span>client nonce<span class="mojikumi-line-end">。</span></li>
<li>server 发送 selected cipher suite<span class="mojikumi-line-end">、</span>certificate<span class="mojikumi-line-end">、</span>server nonce<span class="mojikumi-line-end">。</span></li>
<li>client 验证 certificate<span class="mojikumi-line-end">，</span>得到 server 的 public key<span class="mojikumi-line-end">；</span>随机生成 pre-master secret (PMS)<span class="mojikumi-line-end">，</span>发送经 server 的 public key 加密的 PMS<span class="mojikumi-line-end">。</span></li>
<li>由 PMS<span class="mojikumi-line-end">、</span>client nonce<span class="mojikumi-line-end">、</span>server nonce 可以计算得到 master key<span class="mojikumi-line-end">，</span>由 master key 可以得到一系列用于后续加密的 key<span class="mojikumi-line-end">：</span>client 和 server 各有用于 symmetric key encryption 的 key 和用于 HMAC 的 key<span class="mojikumi-line-end">，</span>如果使用 CBC 则还有双方的 IV<span class="mojikumi-line-end">。</span></li>
<li>client 发送上面这些 handshake message 的 HMAC<span class="mojikumi-line-start">（</span>可以和 encrypted PMS 一同发送<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>server 发送上面这些 handshake message 的 HMAC<span class="mojikumi-line-end">。</span></li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>一开始的 nonce 用来防止 replay attack<span class="mojikumi-line-end">，</span>并且 server nonce 参与 master key 的计算<span class="mojikumi-line-end">，</span>可以防止 key 完全由 client 决定<span class="mojikumi-line-end">。</span>而最后的 HMAC 用来防止篡改 handshake message<span class="mojikumi-line-end">，</span>例如将 supported cipher suites 改为只有 weak algorithm<span class="mojikumi-line-end">。</span></p>
<p>TLS 1.3 对 handshake 过程进行了简化<span class="mojikumi-line-end">。</span></p>
<h3 id="tls-data-transfer" class="heading"><a href="#tls-data-transfer" class="heading-anchor" aria-label="章节： TLS Data Transfer" tabindex="-1"></a><span>TLS Data Transfer</span></h3>
<p>在 TLS 中<span class="mojikumi-line-end">，</span>TCP byte stream 被切分为 records<span class="mojikumi-line-end">，</span>为每个 record 计算 HMAC<span class="mojikumi-line-end">，</span>并将 record + HMAC 进行 encrypt<span class="mojikumi-line-end">。</span>这只保证了每个 record 的 integrity<span class="mojikumi-line-end">，</span>为了保证整个 byte stream 的 integrity<span class="mojikumi-line-end">，</span>每个 record 还有一个 sequence number<span class="mojikumi-line-end">，</span>参与 HMAC 的计算<span class="mojikumi-line-end">，</span>来防止攻击者对 record 进行 reorder / replay / remove<span class="mojikumi-line-end">。</span></p>
<p>TLS record 包含<span class="mojikumi-line-end">：</span></p>
<ol>
<li>type: handshake / data</li>
<li>TLS version</li>
<li>length: 用来标记 record 的结尾</li>
<li>data + HMAC, encrypted</li>
</ol>
<h3 id="tls-connection-closure" class="heading"><a href="#tls-connection-closure" class="heading-anchor" aria-label="章节： TLS Connection Closure" tabindex="-1"></a><span>TLS Connection Closure</span></h3>
<p>为了防止 truncation attack<span class="mojikumi-line-end">，</span>即伪造 TCP FIN segment<span class="mojikumi-line-end">，</span>在 TLS 中需要先发送保证了 integrity 的 closure TLS record 再发送 TCP FIN segment 来结束连接<span class="mojikumi-line-end">。</span></p>
<h2 id="network-layer-security-ipsec-and-virtual-private-networks" class="heading"><a href="#network-layer-security-ipsec-and-virtual-private-networks" class="heading-anchor" aria-label="章节： Network-Layer Security: IPsec and Virtual Private Networks" tabindex="-1"></a><span>Network-Layer Security: IPsec and Virtual Private Networks</span></h2>
<h3 id="ipsec-and-virtual-private-networks-vpns" class="heading"><a href="#ipsec-and-virtual-private-networks-vpns" class="heading-anchor" aria-label="章节： IPsec and Virtual Private Networks (VPNs)" tabindex="-1"></a><span>IPsec and Virtual Private Networks (VPNs)</span></h3>
<p>如果一个 institution 位于多个地理位置而想保证 institution 内通信的私密<span class="mojikumi-line-end">，</span>一种选择是建立一个 private network<span class="mojikumi-line-end">，</span>在物理上与 Internet 进行隔离<span class="mojikumi-line-end">，</span>但这样需要自己搭建整套网络基础设施<span class="mojikumi-line-end">，</span>开销非常大<span class="mojikumi-line-end">。</span></p>
<p>另一种选择是使用 virtual private network<span class="mojikumi-line-end">。</span>在 VPN 内<span class="mojikumi-line-end">，</span>通过 Internet 传输数据时会进行加密<span class="mojikumi-line-end">，</span>具体来说是在内网的 gateway router 或直接连到公网的 host 处<span class="mojikumi-line-start">（</span>例如学校连到 Internet 的 gateway router / 回家了的学生的设备上<span class="mojikumi-line-end">；</span>为了叙述方便<span class="mojikumi-line-end">，</span>下文中都假设是 gateway router 而不是 host<span class="mojikumi-line-end">）</span>在 payload 前加上 IPsec header<span class="mojikumi-line-end">。</span></p>
<h3 id="the-ah-and-esp-protocols" class="heading"><a href="#the-ah-and-esp-protocols" class="heading-anchor" aria-label="章节： The AH and ESP Protocols" tabindex="-1"></a><span>The AH and ESP Protocols</span></h3>
<p>IPsec 可以使用 Authentication Header (AH) protocol 或者 Encapsulation Security Payload (ESP) protocol<span class="mojikumi-line-end">。</span>其中 AH 只提供了 source authentication 和 data integrity<span class="mojikumi-line-end">，</span>ESP 在此基础上还提供了 confidentiality<span class="mojikumi-line-end">。</span>使用 IPsec 的场景中通常需要保证 confidentiality<span class="mojikumi-line-end">，</span>所以 ESP 用得更多<span class="mojikumi-line-end">，</span>书中只讲 ESP<span class="mojikumi-line-end">。</span></p>
<h3 id="security-associations" class="heading"><a href="#security-associations" class="heading-anchor" aria-label="章节： Security Associations" tabindex="-1"></a><span>Security Associations</span></h3>
<p>两个 entity (gateway router) 通过 IPsec 通信时需要建立称作 <i>security association</i> (SA) 的 logical connection<span class="mojikumi-line-end">。</span>SA 是单向的<span class="mojikumi-line-end">，</span>如果要互发消息则需要建立两个 SA<span class="mojikumi-line-end">。</span></p>
<p>SA 有下列 state information<span class="mojikumi-line-end">：</span></p>
<ul>
<li><i>security parameter index</i> (SPI)<span class="mojikumi-line-end">，</span>一个 32-bit identifier</li>
<li>source &#x26; destination IP address</li>
<li>encryption algorithm, encryption key</li>
<li>integrity check algorithm, authentication key</li>
</ul>
<p>一个 IPsec entity 可能同时 maintain 着很多 SA 的 state information<span class="mojikumi-line-end">，</span>存储在 security association database (SAD) 中<span class="mojikumi-line-end">。</span></p>
<h3 id="the-ipsec-datagram" class="heading"><a href="#the-ipsec-datagram" class="heading-anchor" aria-label="章节： The IPsec Datagram" tabindex="-1"></a><span>The IPsec Datagram</span></h3>
<p>IPsec 有两种 packet form<span class="mojikumi-line-end">，</span>分别用于 tunnel mode 和 transport mode<span class="mojikumi-line-end">，</span>其中 tunnel mode 更常用<span class="mojikumi-line-end">，</span>书中只讲 tunnel mode<span class="mojikumi-line-end">。</span></p>
<p>一个 IPsec datagram 的结构如下<span class="mojikumi-line-end">：</span></p>
<ul>
<li>new IP header (source / destination 是 gateway router<span class="mojikumi-line-end">，</span>protocol 是 ESP)</li>
<li><span class="mojikumi-line-start">“</span>enchilada<span class="mojikumi">”</span> (authenticated)
<ul>
<li>ESP header
<ul>
<li>SPI</li>
<li>sequence number</li>
</ul>
</li>
<li>(encrypted)
<ul>
<li>original IP header</li>
<li>original IP payload</li>
<li>ESP trailer
<ul>
<li>padding (for encryption block size requirement)</li>
<li>padding length</li>
<li>next header <span class="mojikumi">（</span><span class="mojikumi">“</span>4<span class="mojikumi">”</span> for <span class="mojikumi">“</span>IP Encapsulation within IP<span class="mojikumi">”</span> in tunnel mode<span class="mojikumi-line-end">）</span><sup><a href="#user-content-fn-esp-next-header" id="user-content-fnref-esp-next-header" data-footnote-ref aria-describedby="footnote-label">3</a></sup></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>ESP MAC <span class="mojikumi">（</span>for authentication of the <span class="mojikumi">“</span>enchilada<span class="mojikumi">”</span><span class="mojikumi-line-end">）</span></li>
</ul>
<p>gateway router 会维护一个 security policy database (SPD)<span class="mojikumi-line-end">，</span>当其接收到一个待转发的 IP datagram 时<span class="mojikumi-line-end">，</span>会查询 SPD<span class="mojikumi-line-end">，</span>根据 source IP address<span class="mojikumi-line-end">、</span>destination IP address<span class="mojikumi-line-end">、</span>protocol 来决定是否使用 IPsec 进行处理<span class="mojikumi-line-end">。</span></p>
<h3 id="ike-key-management-in-ipsec" class="heading"><a href="#ike-key-management-in-ipsec" class="heading-anchor" aria-label="章节： IKE: Key Management in IPsec" tabindex="-1"></a><span>IKE: Key Management in IPsec</span></h3>
<p>IPsec 可以手动配置 key<span class="mojikumi-line-end">，</span>但大型的 VPN 往往需要使用 Internet Key Exchange (IKE) protocol 来自动建立 SA<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>书中对 IKE 的描述太简陋了<span class="mojikumi-line-end">，</span>说了跟没说差不多<span class="mojikumi-line-end">，</span>以后再说吧<span class="mojikumi-line-start">（</span></p>
<h2 id="securing-wireless-lans-and-4g5g-cellular-networks" class="heading"><a href="#securing-wireless-lans-and-4g5g-cellular-networks" class="heading-anchor" aria-label="章节： Securing Wireless LANs and 4G/5G Cellular Networks" tabindex="-1"></a><span>Securing Wireless LANs and 4G/5G Cellular Networks</span></h2>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-gray-2 dark:bg-gray-11 b-gray-6" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-timer-sand text-gray" data-v-a2ab257f></span><!--v-if--><span data-v-a2ab257f>WIP</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>未完待续…… 🕊️</p></div></div></aside>
<h2 id="operational-security-firewalls-and-intrusion-detection-systems" class="heading"><a href="#operational-security-firewalls-and-intrusion-detection-systems" class="heading-anchor" aria-label="章节： Operational Security: Firewalls and Intrusion Detection Systems" tabindex="-1"></a><span>Operational Security: Firewalls and Intrusion Detection Systems</span></h2>
<h3 id="firewalls" class="heading"><a href="#firewalls" class="heading-anchor" aria-label="章节： Firewalls" tabindex="-1"></a><span>Firewalls</span></h3>
<p>firewall 用来控置哪些流量可以进入 internal network / host<span class="mojikumi-line-end">，</span>一般要保证所有出入的流量都经过 firewall<span class="mojikumi-line-end">，</span>并且 firewall 自身不会被攻击者控制<span class="mojikumi-line-end">。</span></p>
<h4 id="traditional-packet-filters" class="heading"><a href="#traditional-packet-filters" class="heading-anchor" aria-label="章节： Traditional Packet Filters" tabindex="-1"></a><span>Traditional Packet Filters</span></h4>
<p>通过 packet header 来控制是否允许 packet 通过<span class="mojikumi-line-end">。</span>例如根据 IP address<span class="mojikumi-line-end">、</span>protocol type<span class="mojikumi-line-end">、</span>port<span class="mojikumi-line-end">、</span>TCP flags<span class="mojikumi-line-end">、</span>ICMP message type<span class="mojikumi-line-end">、</span>router interface 等进行控制<span class="mojikumi-line-end">。</span></p>
<p>一些 packet filter 可以实现的 policy 的例子<span class="mojikumi-line-end">：</span></p>
<ul>
<li>drop outgoing 的对 port 80/443 的访问<span class="mojikumi-line-end">：</span>禁止访问外部 Web<span class="mojikumi-line-end">。</span></li>
<li>drop incoming TCP SYN segment<span class="mojikumi-line-end">：</span>禁止从外界创建 TCP connection<span class="mojikumi-line-end">。</span></li>
<li>drop 除了外界 port 是 53 的所有 UDP traffic<span class="mojikumi-line-end">：</span>禁止其他 UDP traffic<span class="mojikumi-line-end">，</span>只允许 DNS<span class="mojikumi-line-end">。</span></li>
<li>drop 发向 broadcast address 的 ICMP ping packets<span class="mojikumi-line-end">：</span>避免遭受 smurf DoS attack<span class="mojikumi-line-end">。</span></li>
<li>drop outgoing ICMP TTL expired packets<span class="mojikumi-line-end">：</span>避免被 traceroute<span class="mojikumi-line-end">。</span></li>
</ul>
<h4 id="stateful-packet-filters" class="heading"><a href="#stateful-packet-filters" class="heading-anchor" aria-label="章节： Stateful Packet Filters" tabindex="-1"></a><span>Stateful Packet Filters</span></h4>
<p>stateful packet filter 可以通过记录状态信息来实现更复杂的控制<span class="mojikumi-line-end">，</span>例如跟踪 TCP connection<span class="mojikumi-line-end">，</span>从而更加精准地只允许从内部建立的 TCP connection 而拒绝从外部建立的 TCP connection<span class="mojikumi-line-end">。</span></p>
<h4 id="application-gateway" class="heading"><a href="#application-gateway" class="heading-anchor" aria-label="章节： Application Gateway" tabindex="-1"></a><span>Application Gateway</span></h4>
<p>packet filter 只根据 header 中的信息进行控制<span class="mojikumi-line-end">，</span>而不管 application data<span class="mojikumi-line-end">。</span></p>
<p>application gateway 是一个 application-specific server<span class="mojikumi-line-end">，</span>所有 application data 都需要通过它<span class="mojikumi-line-end">。</span>一个 host 可以同时运行多个 application gateway<span class="mojikumi-line-end">。</span></p>
<p>application gateway 可以根据 application data 进行控制<span class="mojikumi-line-end">，</span>提供例如 authorization 的高级 filter 功能<span class="mojikumi-line-end">，</span>还可以提供除了 filter 外的其他功能<span class="mojikumi-line-end">，</span>例如 proxy<span class="mojikumi-line-end">。</span></p>
<h3 id="intrusion-detection-systems" class="heading"><a href="#intrusion-detection-systems" class="heading-anchor" aria-label="章节： Intrusion Detection Systems" tabindex="-1"></a><span>Intrusion Detection Systems</span></h3>
<p>和 application gateway 类似<span class="mojikumi-line-end">，</span>intrusion detection system (IDS) 不止查看 header<span class="mojikumi-line-end">，</span>还会查看 application data<span class="mojikumi-line-end">，</span>这称作 deep packet inspection<span class="mojikumi-line-end">。</span></p>
<p>与 application gateway 不同<span class="mojikumi-line-end">，</span>IDS 不是 application-specific 的<span class="mojikumi-line-end">，</span>而是会检测到各种各样的 suspicious packet / series of packets<span class="mojikumi-line-end">，</span>例如 network mapping<span class="mojikumi-line-end">、</span>port scan<span class="mojikumi-line-end">、</span>TCP stack scan<span class="mojikumi-line-end">、</span>DoS attack<span class="mojikumi-line-end">、</span>worm / virus<span class="mojikumi-line-end">、</span>OS / application vulnerability attack<span class="mojikumi-line-end">。</span>检测到时<span class="mojikumi-line-end">，</span>IDS 会向管理员发送警告<span class="mojikumi-line-end">，</span>而 intrustion prevention system (IPS) 则会 filter out 这些 packet<span class="mojikumi-line-end">。</span></p>
<p>因为 deep packet inspection 需要一定的算力<span class="mojikumi-line-end">，</span>当流量过大时<span class="mojikumi-line-end">，</span>一个 organization 往往需要多个 IDS<span class="mojikumi-line-end">，</span>分散在网络中<span class="mojikumi-line-end">，</span>而非只设置一个在整个网络的入口<span class="mojikumi-line-end">。</span></p>
<p>IDS 分为 signature-based 和 anomaly-based 两种<span class="mojikumi-line-end">。</span></p>
<p>signature 即 packet 的特征<span class="mojikumi-line-end">，</span>例如 header 的某些项以及 application data 包含某一内容<span class="mojikumi-line-end">。</span>IDS 维护了一个 signature database 用来进行匹配<span class="mojikumi-line-end">。</span>signature-based IDS 需要事先知道 attack 的特征<span class="mojikumi-line-end">，</span>所以无法防范新型 attack<span class="mojikumi-line-end">。</span>signature 的匹配容易出现 false alarm<span class="mojikumi-line-end">，</span>而且性能开销较大<span class="mojikumi-line-end">。</span></p>
<p>anomaly-based IDS 基于平时的 traffic 来检测 statistically unusual 的 traffic<span class="mojikumi-line-end">，</span>例如检测到突然增多的 ICMP packets<span class="mojikumi-line-end">。</span>anomaly-based IDS 不依赖于实现对攻击的了解<span class="mojikumi-line-end">，</span>所以有可能检测到新型的攻击<span class="mojikumi-line-end">。</span>但是区分 normal traffic 和 statistically unusual traffic 是困难的<span class="mojikumi-line-end">，</span>现在的 IDS 通常还是以 signature-based 为主<span class="mojikumi-line-end">。</span></p>
<p>Snort 是一款 open-source IDS<span class="mojikumi-line-end">，</span>有一个活跃的 community 维护着 signature database<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-sign">
<p>P.S. 我有幸在 <a href="https://tuna.moe/event/2021/welcome-and-debian/">第一次参加 tunight</a> 时获得了续老师的 signing<span class="mojikumi-line-end">，</span>当时还完全不懂这些<span class="mojikumi-line-start">（</span><s>现在也不是很懂<span class="mojikumi-line-start">（</span></s> <a href="#user-content-fnref-sign" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-opentls">
<p>See <a href="https://github.com/openssl/openssl/issues/6384">Rename OpenSSL to OpenTLS To Comply with RFC7568 · Issue #6384 · openssl/openssl</a> &#x26; <a href="https://www.openssl.org/blog/blog/2018/12/20/20years/">Celebrating 20 Years of OpenSSL - OpenSSL Blog</a> <a href="#user-content-fnref-opentls" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-esp-next-header">
<p>可以参考 <a href="http://www.tcpipguide.com/free/t_IPSecEncapsulatingSecurityPayloadESP-2.htm" class="break-all">http://www.tcpipguide.com/free/t_IPSecEncapsulatingSecurityPayloadESP-2.htm</a> <a href="#user-content-fnref-esp-next-header" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
            <category domain="https://ouuan.moe/tag/WIP">WIP</category>
        </item>
        <item>
            <title><![CDATA[CS:APP 第四章学习笔记]]></title>
            <link>https://ouuan.moe/post/2022/10/csapp-4</link>
            <guid>https://ouuan.moe/post/2022/10/csapp-4</guid>
            <pubDate>Mon, 17 Oct 2022 02:30:45 GMT</pubDate>
            <description><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[









<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第四章 <span class="mojikumi">“</span>Processor Architecture<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为一个简化的指令集 Y86-64 的设计以及 Y86-64 处理器的实现<span class="mojikumi-line-start">（</span>顺序实现和 pipeline 实现<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>

<h2 id="the-y86-64-instruction-set-architecture" class="heading"><a href="#the-y86-64-instruction-set-architecture" class="heading-anchor" aria-label="章节： The Y86-64 Instruction Set Architecture" tabindex="-1"></a><span>The Y86-64 Instruction Set Architecture</span></h2>
<p>这部分定义了在这一章中用作演示的名为 <span class="mojikumi">“</span>Y86-64<span class="mojikumi">”</span> 的玩具 ISA<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序状态" class="heading"><a href="#y86-64-程序状态" class="heading-anchor" aria-label="章节： Y86-64 程序状态" tabindex="-1"></a><span>Y86-64 程序状态</span></h3>
<ul>
<li>15 个寄存器<span class="mojikumi-line-start">（</span>x86-64 的寄存器除去 <code>%r15</code><span class="mojikumi-line-end">，</span>为了简化编码<span class="mojikumi-line-end">）</span></li>
<li>3 个 status flag: <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code></li>
<li>program counter: <code>PC</code></li>
<li>memory</li>
<li>status code: <code>Stat</code><span class="mojikumi-line-end">，</span>用来表示程序正常运行或发生了异常</li>
</ul>
<h3 id="y86-64-指令" class="heading"><a href="#y86-64-指令" class="heading-anchor" aria-label="章节： Y86-64 指令" tabindex="-1"></a><span>Y86-64 指令</span></h3>
<p>Y86-64 指令大致上是 x86-64 的一个子集<span class="mojikumi-line-end">，</span>但在 operand 等方面有一些简化或区别<span class="mojikumi-line-end">。</span></p>
<p>operand 与 x86-64 的区别是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Immediate<span class="mojikumi-line-end">、</span>Register<span class="mojikumi-line-end">、</span>Memory 都只有 64 位的版本</li>
<li>Register 只有 15 个</li>
<li>Memory 不支持 <code>(, ri, s)</code> 的部分<span class="mojikumi-line-end">，</span>只能是 <code>Imm</code>/<code>(rb)</code>/<code>Imm(rb)</code></li>
</ul>
<p>condition code 只有六个<span class="mojikumi-line-end">，</span>即 signed compare: <code>le</code>/<code>l</code>/<code>e</code>/<code>ne</code>/<code>ge</code>/<code>g</code></p>
<p>指令列表<span class="mojikumi-line-end">，</span>以及与 x86-64 的区别<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>irmovq</code>/<code>rrmovq</code>/<code>mrmovq</code>/<code>rmmovq</code><span class="mojikumi-line-end">，</span>即将 <code>movq</code> 按 operand 类型拆成了四个指令</li>
<li><code>addq</code>/<code>subq</code>/<code>andq</code>/<code>xorq</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且只设置 <code>ZF</code><span class="mojikumi-line-end">、</span><code>SF</code><span class="mojikumi-line-end">、</span><code>OF</code> 三个 status flag</li>
<li><code>jmp</code>/<code>jle</code>/<code>jl</code>/<code>je</code>/<code>jne</code>/<code>jge</code>/<code>jg</code><span class="mojikumi-line-end">，</span>包括 <code>jmp</code> 在内都只能跳转到固定的地址<span class="mojikumi-line-end">，</span>不接受寄存器作为 operand<span class="mojikumi-line-end">，</span>且这个地址是绝对地址而非相对于 PC 的地址</li>
<li><code>cmovle</code>/<code>cmovl</code>/<code>cmove</code>/<code>cmovne</code>/<code>cmovge</code>/<code>cmovg</code><span class="mojikumi-line-end">，</span>它们只接受寄存器作为 operand</li>
<li><code>call</code>: 地址是绝对地址</li>
<li><code>ret</code><span class="mojikumi-line-end">、</span><code>pushq</code><span class="mojikumi-line-end">、</span><code>popq</code><span class="mojikumi-line-end">、</span><code>nop</code>: 与 x86-64 基本相同</li>
<li><code>halt</code>: 停止运行<span class="mojikumi-line-end">，</span>将 status code 设为 <code>HLT</code></li>
</ul>
<h3 id="y86-64-指令编码" class="heading"><a href="#y86-64-指令编码" class="heading-anchor" aria-label="章节： Y86-64 指令编码" tabindex="-1"></a><span>Y86-64 指令编码</span></h3>
<p>Y86-64 通过对指令的简化<span class="mojikumi-line-end">，</span>同时也使编码得到了简化<span class="mojikumi-line-end">，</span>但相应地使得编码不紧凑<span class="mojikumi-line-end">，</span>会有浪费<span class="mojikumi-line-end">。</span></p>
<p>CS:APP Figure 4.2 简明地展示了 Y86-64 的指令编码<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.2.429f9e8d.webp"><img srcset="/assets/csapp-fig4.2.43f85c3f.png" loading="lazy" src="/assets/csapp-fig4.2.43f85c3f.png" width="976" height="730" alt="Y86-64 指令编码示意图"></picture></p>
<h4 id="指令类型的编码" class="heading"><a href="#指令类型的编码" class="heading-anchor" aria-label="章节： 指令类型的编码" tabindex="-1"></a><span>指令类型的编码</span></h4>
<p>指令编码的第一个 byte 表示指令的类型<span class="mojikumi-line-end">。</span>这个 byte 的高位叫做 <i>code</i><span class="mojikumi-line-end">，</span>低位叫做 <i>function</i><span class="mojikumi-line-end">，</span>其中 function 只在某几个指令有用<span class="mojikumi-line-end">。</span>特别地<span class="mojikumi-line-end">，</span><code>rrmovq</code> 和 <code>cmovXX</code> 的 code 是相同的<span class="mojikumi-line-end">，</span>这表示 <code>rrmovq</code> 可以看作一种特殊的 <code>cmovXX</code><span class="mojikumi-line-end">。</span></p>
<p>算术运算的 function: <code>add</code> 0, <code>sub</code> 1, <code>and</code> 2, <code>xor</code> 3</p>
<p>condition code 的 function: <code>le</code> 1, <code>l</code> 2, <code>e</code> 3, <code>ne</code> 4, <code>ge</code> 5, <code>g</code> 6<span class="mojikumi-line-end">；</span><code>jmp</code> 的 function 为 0</p>
<h4 id="register-specifier-byte" class="heading"><a href="#register-specifier-byte" class="heading-anchor" aria-label="章节： Register Specifier Byte" tabindex="-1"></a><span>Register Specifier Byte</span></h4>
<p>除了 <code>jXX</code> 和 <code>call</code><span class="mojikumi-line-end">，</span>指令编码的第二个 byte<span class="mojikumi-line-start">（</span>如果有<span class="mojikumi-line-end">）</span>的高低位分别表示一个 register identifier<span class="mojikumi-line-end">。</span></p>
<p>register identifier 从 <code>%rax</code> 为 <code>0</code> 到 <code>%r14</code> 为 <code>E</code><span class="mojikumi-line-end">；</span><code>F</code> 表示不是寄存器<span class="mojikumi-line-end">。</span></p>
<h4 id="constant-word" class="heading"><a href="#constant-word" class="heading-anchor" aria-label="章节： Constant Word" tabindex="-1"></a><span>Constant Word</span></h4>
<p>在 <code>irmovq</code><span class="mojikumi-line-end">、</span><code>rmmovq</code>/<code>mrmovq</code><span class="mojikumi-line-end">、</span><code>jXX</code>/<code>call</code> 中<span class="mojikumi-line-end">，</span>分别有一个 8-byte 的 constant word<span class="mojikumi-line-end">，</span>用来表示 immediate value 或地址<span class="mojikumi-line-end">，</span>byte ordering 是 little endian<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-异常" class="heading"><a href="#y86-64-异常" class="heading-anchor" aria-label="章节： Y86-64 异常" tabindex="-1"></a><span>Y86-64 异常</span></h3>
<p>status code <code>Stat</code> 有四种可能的取值<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>AOK</code>: 正常</li>
<li><code>HLT</code>: 执行了 <code>halt</code> 指令</li>
<li><code>ADR</code>: 访问了不合法的地址</li>
<li><code>INS</code>: 指令编码不合法</li>
</ul>
<p>在 Y86-64 中<span class="mojikumi-line-end">，</span>遇到异常后处理器会立即停止运行<span class="mojikumi-line-end">。</span></p>
<h3 id="y86-64-程序" class="heading"><a href="#y86-64-程序" class="heading-anchor" aria-label="章节： Y86-64 程序" tabindex="-1"></a><span>Y86-64 程序</span></h3>
<p>CS:APP Figure 4.8 展示了一个完整的 Y86-64 程序<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.8.7c8b0ffb.webp"><img srcset="/assets/csapp-fig4.8.49c0b260.png" loading="lazy" src="/assets/csapp-fig4.8.49c0b260.png" width="930" height="1075" alt="完整 Y86-64 程序的汇编与机器码"></picture></p>
<p>可以下载 <a href="http://csapp.cs.cmu.edu/3e/sim.tar">Y86-64 tools</a> 并使用 <code>yas</code> 进行汇编<span class="mojikumi-line-end">，</span>使用 <code>yis</code> 模拟运行<span class="mojikumi-line-end">。</span>编译 <code>yas</code> 时 <a href="https://stackoverflow.com/questions/63152352/fail-to-compile-the-y86-simulatur-csapp">需要添加 <code>-fcommon</code> 编译选项</a><span class="mojikumi-line-end">。</span></p>
<h3 id="对-rsp-进行-pushpop" class="heading"><a href="#对-rsp-进行-pushpop" class="heading-anchor" aria-label="章节： 对 %rsp 进行 push/pop" tabindex="-1"></a><span>对 %rsp 进行 push/pop</span></h3>
<p><code>pushq %rsp</code><span class="mojikumi-line-end">、</span><code>popq %rsp</code> 这两条指令虽然没什么用<span class="mojikumi-line-end">，</span>但它们的行为可能有歧义<span class="mojikumi-line-end">，</span>所以在设计 ISA 时明确规定它们的行为是有必要的<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 遵循和 x86-64 相同的规则<span class="mojikumi-line-end">：</span><code>pushq %rsp</code> 会将旧的<span class="mojikumi-line-start">（</span>没有减 8 的<span class="mojikumi-line-end">）</span><code>%rsp</code> 的值入栈<span class="mojikumi-line-end">，</span><code>popq %rsp</code> 相当于 <code>mrmovq (%rsp), %rsp</code><span class="mojikumi-line-end">。</span></p>
<h2 id="logic-design-and-the-hardware-control-language-hcl" class="heading"><a href="#logic-design-and-the-hardware-control-language-hcl" class="heading-anchor" aria-label="章节： Logic Design and the Hardware Control Language HCL" tabindex="-1"></a><span>Logic Design and the Hardware Control Language HCL</span></h2>
<p>这一章中使用玩具语言 HCL (hardware control language) 来描述 Y86-64 处理器的逻辑设计<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>与之类似但不是玩具的语言<span class="mojikumi-line-end">，</span>例如 VHDL<span class="mojikumi-line-end">、</span>Verilog 等<span class="mojikumi-line-end">，</span>叫做 <span class="mojikumi">“</span><a href="https://en.wikipedia.org/wiki/Hardware_description_language">hardware description language (HDL)</a><span class="mojikumi">”</span><span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="逻辑门" class="heading"><a href="#逻辑门" class="heading-anchor" aria-label="章节： 逻辑门" tabindex="-1"></a><span>逻辑门</span></h3>
<p>CSAPP Figure 4.9:</p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.9.15f29f6a.webp"><img srcset="/assets/csapp-fig4.9.78811b7b.png" loading="lazy" src="/assets/csapp-fig4.9.78811b7b.png" width="546" height="168" alt="与或非逻辑门"></picture></p>
<ul>
<li>图中只展示了输入个数为 2 的 AND 和 OR<span class="mojikumi-line-end">，</span>但可以有更多输入</li>
<li>一旦输入改变<span class="mojikumi-line-end">，</span>逻辑门的输出很快就会随之改变</li>
</ul>
<h3 id="组合逻辑电路" class="heading"><a href="#组合逻辑电路" class="heading-anchor" aria-label="章节： 组合逻辑电路" tabindex="-1"></a><span>组合逻辑电路</span></h3>
<p>组合逻辑电路即由若干逻辑门组合而成的电路<span class="mojikumi-line-end">，</span>它的特点是无状态<span class="mojikumi-line-end">，</span>输出仅与输入有关<span class="mojikumi-line-end">，</span>输入改变后输出很快就会随之改变<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>用逻辑表达式来表示组合逻辑电路<span class="mojikumi-line-end">，</span>例如 <code>bool eq = (a &#x26;&#x26; b) || (!a &#x26;&#x26; !b)</code> 表示计算 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 是否相等的电路<span class="mojikumi-line-end">。</span>因为它表示的是电路而不是计算<span class="mojikumi-line-end">，</span>在这条语句之后<span class="mojikumi-line-end">，</span>一旦 <code>a</code><span class="mojikumi-line-end">、</span><code>b</code> 的值发生改变<span class="mojikumi-line-end">，</span><code>eq</code> 的输出也会改变<span class="mojikumi-line-start">（</span>和 Vue 的 computed 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="以-word-为单位进行操作的电路" class="heading"><a href="#以-word-为单位进行操作的电路" class="heading-anchor" aria-label="章节： 以 word 为单位进行操作的电路" tabindex="-1"></a><span>以 word 为单位进行操作的电路</span></h3>
<p>在处理器的设计中<span class="mojikumi-line-end">，</span>经常需要对一个 word 而非单个 bit 进行操作<span class="mojikumi-line-end">。</span></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>一般使用大写的名称表示 word<span class="mojikumi-line-end">，</span>例如: <code>bool Eq = (A == B)</code> 表示计算 word <code>A</code><span class="mojikumi-line-end">、</span><code>B</code> 是否相等的电路<span class="mojikumi-line-end">，</span>可以实现为判断每个 bit 是否相等再 AND<span class="mojikumi-line-end">。</span></p>
<h3 id="multiplexor-mux" class="heading"><a href="#multiplexor-mux" class="heading-anchor" aria-label="章节： Multiplexor (MUX)" tabindex="-1"></a><span>Multiplexor (MUX)</span></h3>
<p>multiplexor (MUX) 的功能是通过信号输入的值来在其它输入中选择一个作为输出<span class="mojikumi-line-end">，</span>word-level 的 MUX 电路如图 (CSAPP Figure 4.13)<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.13.47e7678b.webp"><img srcset="/assets/csapp-fig4.13.342f11a8.png" loading="lazy" src="/assets/csapp-fig4.13.342f11a8.png" width="886" height="759" alt="word-level MUX 电路"></picture></p>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>使用 <i>case expressions</i> 表示 MUX<span class="mojikumi-line-end">，</span>例如</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-ad49d235>HCL (CS:APP)</h4><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Mux</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> &amp;&amp; !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    !</span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">D</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Mux</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53"> &amp;&amp; !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s1</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    !</span><span style="color: #4876D6">s0</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">D</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div></section>
<p>表示一个由 <code>s0</code> 和 <code>s1</code> 控制的<span class="mojikumi-line-end">、</span>在 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code><span class="mojikumi-line-end">、</span><code>D</code> 中选一个作为输出的 MUX<span class="mojikumi-line-end">。</span></p>
<p>case expression 在逻辑上的语义是依次判断每个条件<span class="mojikumi-line-end">，</span>以第一个满足的条件作为输出<span class="mojikumi-line-end">，</span>类似于 Rust 的 match<span class="mojikumi-line-end">。</span></p>
<p>下面的 HCL 代码表示计算 <code>A</code><span class="mojikumi-line-end">、</span><code>B</code><span class="mojikumi-line-end">、</span><code>C</code> 中的最小值<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-ad49d235>HCL (CS:APP)</h4><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">word</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">Min3</span><span style="color: #D6DEEB"> = [</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &amp;&amp; </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">A</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB"> &lt;= </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">B</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">: </span><span style="color: #C5E478">C</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">];</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">word</span><span style="color: #403F53"> </span><span style="color: #4876D6">Min3</span><span style="color: #403F53"> = [</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &amp;&amp; </span><span style="color: #4876D6">A</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">A</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">B</span><span style="color: #403F53"> &lt;= </span><span style="color: #4876D6">C</span><span style="color: #403F53">: </span><span style="color: #4876D6">B</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #AA0982">1</span><span style="color: #403F53">: </span><span style="color: #4876D6">C</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">];</span></span></code></pre></div></section>
<h3 id="arithmeticlogic-unit-alu" class="heading"><a href="#arithmeticlogic-unit-alu" class="heading-anchor" aria-label="章节： Arithmetic/logic unit (ALU)" tabindex="-1"></a><span>Arithmetic/logic unit (ALU)</span></h3>
<p>ALU 是用来进行算术/逻辑运算的组合逻辑电路元件<span class="mojikumi-line-end">，</span>它接收两个 data input 以及一个表示进行何种运算的 control input<span class="mojikumi-line-end">，</span>输出运算的结果<span class="mojikumi-line-end">。</span></p>
<h3 id="测试值是否属于集合" class="heading"><a href="#测试值是否属于集合" class="heading-anchor" aria-label="章节： 测试值是否属于集合" tabindex="-1"></a><span>测试值是否属于集合</span></h3>
<p>在 HCL 中<span class="mojikumi-line-end">，</span>可以使用 <code>in</code> 来表示测试值是否属于集合的电路<span class="mojikumi-line-end">，</span>例如:</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HCL (CS:APP) 代码块" data-v-ad49d235>HCL (CS:APP)</h4><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s1</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span>
<span><span style="color: #C792EA">bool</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">s0</span><span style="color: #D6DEEB"> = </span><span style="color: #C5E478">code</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">in</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB"> };</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s1</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">2</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span>
<span><span style="color: #994CC3">bool</span><span style="color: #403F53"> </span><span style="color: #4876D6">s0</span><span style="color: #403F53"> = </span><span style="color: #4876D6">code</span><span style="color: #403F53"> </span><span style="color: #994CC3">in</span><span style="color: #403F53"> { </span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53"> };</span></span></code></pre></div></section>
<h3 id="memory-and-clocking" class="heading"><a href="#memory-and-clocking" class="heading-anchor" aria-label="章节： Memory and Clocking" tabindex="-1"></a><span>Memory and Clocking</span></h3>
<p>组合逻辑电路是无状态且实时更新的<span class="mojikumi-line-end">；</span>与之相对<span class="mojikumi-line-end">，</span>memory 可以存储状态<span class="mojikumi-line-end">，</span>但更新由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>这一章中会用到的 memory 有两大种三小种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>clocked register: 存储一个值<span class="mojikumi-line-end">，</span>有一个输入和一个输出<span class="mojikumi-line-end">。</span>输出即存储的值<span class="mojikumi-line-end">，</span>而每次 clock rise 时会将存储的值修改为输入<span class="mojikumi-line-end">。</span></li>
<li>random access memory:
<ul>
<li>register file: 存储 15 个值<span class="mojikumi-line-start">（</span>在 Y86-64 处理器中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有两个 read port 和一个 write port<span class="mojikumi-line-end">：</span>
<ul>
<li>每个 read port 有一个输入 <code>src</code> 表示 register identifier<span class="mojikumi-line-end">，</span>有一个输出 <code>val</code> 表示这个 register 存储的值<span class="mojikumi-line-end">，</span>且 <code>src</code> 改变后 <code>val</code> 会立刻改变<span class="mojikumi-line-end">。</span></li>
<li>write port 有一个输入 <code>dst</code> 表示 register identifier<span class="mojikumi-line-end">，</span>另有一个输入 <code>val</code> 用于写入<span class="mojikumi-line-end">。</span>每次 clock rise 时<span class="mojikumi-line-end">，</span>如果 <code>dst</code> 不是 <code>F</code> 就会将 <code>val</code> 写入相应的 register<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
<li>data memory: 存储很多个值<span class="mojikumi-line-end">，</span>用地址进行索引<span class="mojikumi-line-end">。</span>
<ul>
<li>有一个地址输入 <code>address</code><span class="mojikumi-line-end">。</span></li>
<li>有一个信号输入 <code>write</code> 表示进行写入而非读取<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输出 <code>data out</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 0<span class="mojikumi-line-end">，</span><code>data out</code> 会立刻输出 <code>address</code> 处存储的值<span class="mojikumi-line-end">。</span></li>
<li>有一个数据输入 <code>data in</code><span class="mojikumi-line-end">。</span>若 <code>write</code> 为 1<span class="mojikumi-line-end">，</span>在 clock rise 时会将 <code>data in</code> 写入 <code>address</code> 处<span class="mojikumi-line-end">。</span></li>
<li>有一个信号输出 <code>error</code><span class="mojikumi-line-end">，</span>在 <code>address</code> 不是合法地址时输出 1<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>可以看到<span class="mojikumi-line-end">，</span>这几种 memory 的共同点是读取是实时的<span class="mojikumi-line-end">，</span>但写入由 clock 控制<span class="mojikumi-line-end">。</span></p>
<p>在 Y86-64 的程序状态中<span class="mojikumi-line-end">，</span>寄存器存在 register file 中<span class="mojikumi-line-end">，</span>status flags<span class="mojikumi-line-end">、</span>program counter<span class="mojikumi-line-end">、</span>status code 存在 clocked register 中<span class="mojikumi-line-end">，</span>memory 存在 data memory 中<span class="mojikumi-line-end">。</span></p>
<p>Y86-64 处理器还有一个额外的 read-only instruction memory 用来读取指令<span class="mojikumi-line-end">，</span>而在真实的处理器中这是和内存一体的<span class="mojikumi-line-end">。</span></p>
<a id="data-memory-的-read-信号" name="data-memory-的-read-信号" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>data memory 的 read 信号</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>383 页的图中 data memory 还有一个 <code>read</code> 信号<span class="mojikumi-line-end">，</span>但在文字说明中没有提到它的作用<span class="mojikumi-line-end">，</span>而对 <code>write</code> 信号的说明似乎使得 <code>read</code> 信号无用 🤔</p></div></div></aside>
<h2 id="sequential-y86-64-implementations" class="heading"><a href="#sequential-y86-64-implementations" class="heading-anchor" aria-label="章节： Sequential Y86-64 Implementations" tabindex="-1"></a><span>Sequential Y86-64 Implementations</span></h2>
<p>这一节会实现一个名为 SEQ 的顺序执行的处理器<span class="mojikumi-line-end">。</span>在这个处理器中<span class="mojikumi-line-end">，</span>指令是按顺序一条接着一条执行的<span class="mojikumi-line-end">，</span>且每条指令都会在一个 clock cycle 内执行完毕<span class="mojikumi-line-end">，</span>这要求 clock cycle 很长<span class="mojikumi-line-end">，</span>会导致处理器的执行很慢<span class="mojikumi-line-end">，</span>下两节将对此进行优化<span class="mojikumi-line-end">。</span></p>
<h3 id="指令执行的阶段划分与具体操作" class="heading"><a href="#指令执行的阶段划分与具体操作" class="heading-anchor" aria-label="章节： 指令执行的阶段划分与具体操作" tabindex="-1"></a><span>指令执行的阶段划分与具体操作</span></h3>
<p>将指令的执行划分为多个阶段<span class="mojikumi-line-end">，</span>可以使行为有很大差别的不同指令有一定的统一性<span class="mojikumi-line-end">，</span>方便硬件实现<span class="mojikumi-line-end">。</span></p>
<p>本节会将指令执行划分为六个阶段<span class="mojikumi-line-end">：</span></p>
<ol>
<li>Fetch: 将指令编码中不同部分的值读取出来</li>
<li>Decode: 读取寄存器的值<span class="mojikumi-line-start">（</span>我感觉 fetch 和 decode 这两个名字互换一下才比较对 🤔<span class="mojikumi-line-end">）</span></li>
<li>Execute: 执行运算</li>
<li>Memory: 写入或读取内存</li>
<li>Write back: 写入寄存器</li>
<li>PC update: 更新 program counter</li>
</ol>
<p>每个指令每阶段的具体操作如图<span class="mojikumi-line-start">（</span>CS:APP Figure 4.18~4.21<span class="mojikumi-line-end">、</span>Solution 4.17<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.18.1d452c61.webp"><img srcset="/assets/csapp-fig4.18.cc74142a.png" loading="lazy" src="/assets/csapp-fig4.18.cc74142a.png" width="1091" height="613" alt="OPq, rrmovq, irmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.19.9f043a86.webp"><img srcset="/assets/csapp-fig4.19.7887b6d0.png" loading="lazy" src="/assets/csapp-fig4.19.7887b6d0.png" width="773" height="611" alt="rmmovq, mrmovq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.20.3d7b8ab1.webp"><img srcset="/assets/csapp-fig4.20.7606e619.png" loading="lazy" src="/assets/csapp-fig4.20.7606e619.png" width="782" height="619" alt="pushq, popq"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.21.304f2868.webp"><img srcset="/assets/csapp-fig4.21.d8c98f75.png" loading="lazy" src="/assets/csapp-fig4.21.d8c98f75.png" width="1113" height="562" alt="jXX, call, ret"></picture></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-sol4.17.4eb57d44.webp"><img srcset="/assets/csapp-sol4.17.a75a9c9a.png" loading="lazy" src="/assets/csapp-sol4.17.a75a9c9a.png" width="461" height="432" alt="cmovXX"></picture></p>
<h3 id="seq-的主体电路" class="heading"><a href="#seq-的主体电路" class="heading-anchor" aria-label="章节： SEQ 的主体电路" tabindex="-1"></a><span>SEQ 的主体电路</span></h3>
<p>CS:APP Figure 4.23 大致展示了 SEQ 的主体电路<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig4.23.ed95a333.webp"><img srcset="/assets/csapp-fig4.23.ff80ba41.png" loading="lazy" src="/assets/csapp-fig4.23.ff80ba41.png" width="798" height="1065" alt="SEQ 主体电路"></picture></p>
<p>其中蓝色的元件是 black box<span class="mojikumi-line-end">，</span>灰色的元件会在后面进行设计<span class="mojikumi-line-end">，</span>还有部分电路连接没有画出来<span class="mojikumi-line-end">。</span></p>
<p>这个电路大概看着有个印象即可<span class="mojikumi-line-end">，</span>细节会在后面说明<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的时序控制" class="heading"><a href="#seq-的时序控制" class="heading-anchor" aria-label="章节： SEQ 的时序控制" tabindex="-1"></a><span>SEQ 的时序控制</span></h3>
<p>在 SEQ 中<span class="mojikumi-line-end">，</span>每个时钟周期执行一条指令<span class="mojikumi-line-end">，</span>而时钟控制的只有各种 memory 的写入<span class="mojikumi-line-end">，</span>memory 的读取和运算都是用组合逻辑电路实现的<span class="mojikumi-line-end">，</span>虽然在逻辑上有执行顺序<span class="mojikumi-line-end">，</span>在电路上却是同时执行的<span class="mojikumi-line-end">，</span>可以看成一个关于 memory 的函数<span class="mojikumi-line-end">。</span></p>
<p>也就是说<span class="mojikumi-line-end">，</span>整个执行过程是<span class="mojikumi-line-end">：</span>读取 memory 并计算出需要写入 memory 的值<span class="mojikumi-line-end">，</span>然后在 clock rise 时执行写入<span class="mojikumi-line-end">，</span>从而读取到新的 memory 的值而执行下一条指令<span class="mojikumi-line-end">。</span></p>
<p>为了这个设计能够实现<span class="mojikumi-line-end">，</span>一条重要的原则是 <span class="mojikumi">“</span>No reading back<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>即一条指令不能先更新再读取同一个值<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>在 <code>pushq</code> 中<span class="mojikumi-line-end">，</span>不是先更新 <code>R[%rsp]</code> 再写入 <code>M[R[%rsp]]</code><span class="mojikumi-line-end">，</span>而是先算出 <code>valE</code><span class="mojikumi-line-end">，</span>再写入 <code>M[valE]</code><span class="mojikumi-line-end">，</span>最后将 <code>valE</code> 写入 <code>R[%rsp]</code><span class="mojikumi-line-end">。</span>又例如<span class="mojikumi-line-end">，</span>有的指令会修改 status flags<span class="mojikumi-line-end">，</span>有的会读取<span class="mojikumi-line-end">，</span>但没有指令既修改又读取<span class="mojikumi-line-end">。</span></p>
<p>因为运算都是同时进行的<span class="mojikumi-line-end">，</span>执行的六个阶段实际上是六个部分<span class="mojikumi-line-end">。</span></p>
<h3 id="seq-的具体实现" class="heading"><a href="#seq-的具体实现" class="heading-anchor" aria-label="章节： SEQ 的具体实现" tabindex="-1"></a><span>SEQ 的具体实现</span></h3>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/csapp">csapp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
            <category domain="https://ouuan.moe/tag/WIP">WIP</category>
        </item>
    </channel>
</rss>