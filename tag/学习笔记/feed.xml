<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ouuan's blog: 标签: 学习笔记</title>
        <link>https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</link>
        <description>标签: 学习笔记 - ouuan 写东西的地方，涵盖了 Web 开发、计算机系统、Linux 使用、大学学习生活等多个主题。</description>
        <lastBuildDate>Fri, 16 Jun 2023 15:24:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>Copyright © 2022 - 2023 ouuan
Licensed under CC BY-SA 4.0</copyright>
        <atom:link href="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[CNATDA 第二章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/06/cnatda-2</link>
            <guid>https://ouuan.moe/post/2023/06/cnatda-2</guid>
            <pubDate>Fri, 16 Jun 2023 15:24:34 GMT</pubDate>
            <description><![CDATA[


<p><span class="mojikumi-line-start">《</span>Computer Networking A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第二章 <span class="mojikumi">“</span>Application Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[


<p><span class="mojikumi-line-start">《</span>Computer Networking A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第二章 <span class="mojikumi">“</span>Application Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="principles-of-network-applications" class="heading"><a href="#principles-of-network-applications" class="heading-anchor" aria-label="章节： Principles of Network Applications" tabindex="-1"></a><span>Principles of Network Applications</span></h2>
<p>application architecture 主要分为 client-server 和 P2P 两种<span class="mojikumi-line-end">。</span></p>
<p><i>process</i> 即在某个 end system 上运行的程序<span class="mojikumi-line-start">（</span>进程<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>不同 end system 上的 process 在网络上互相发送 message 以进行通信<span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>message 即 application-layer packet<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>在一次通信中<span class="mojikumi-line-end">，</span>发起通信的一方被称作 <i>client</i><span class="mojikumi-line-end">，</span>等待接收消息的一方被称作 <i>server</i><span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>在 P2P 中<span class="mojikumi-line-end">，</span>client 和 server 的身份不是固定的<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>process 和网络<span class="mojikumi-line-end">，</span>或者说和 transport layer 之间以 <i>socket</i> 作为 API<span class="mojikumi-line-end">。</span></p>
<p>host 由 IP 地址识别<span class="mojikumi-line-end">，</span>而 process 由 IP 地址 + 端口识别<span class="mojikumi-line-end">。</span></p>
<p>一个 application 可以选择 TCP 或者 UDP 来提供 transport service<span class="mojikumi-line-end">。</span>TCP 提供 connection-oriented service<span class="mojikumi-line-start">（</span>需要通过 handshaking 建立 TCP connection<span class="mojikumi-line-end">）</span>和 reliable data transfer service<span class="mojikumi-line-start">（</span>保证接收到 &#x26; 保序<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>以及 congestion control<span class="mojikumi-line-end">。</span>UDP 则这些都不提供<span class="mojikumi-line-end">。</span>一般会根据是否 loss-tolerant<span class="mojikumi-line-start">（</span>是否允许丢失部分数据<span class="mojikumi-line-end">）</span>以及对延时的敏感度来进行选择<span class="mojikumi-line-end">。</span></p>
<p>TLS (Transport Layer Security) 可以在 TCP 的基础上提供 encryption<span class="mojikumi-line-end">、</span>data integrity<span class="mojikumi-line-end">、</span>end-point authentication<span class="mojikumi-line-end">。</span>它自身位于 application layer<span class="mojikumi-line-start">（</span>或者可以说是 application 与 transport layer 之间 🤔<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>不与 TCP<span class="mojikumi-line-end">、</span>UDP 并列<span class="mojikumi-line-end">。</span></p>
<p>application-layer protocol 决定了 message 的结构以及相应的行为<span class="mojikumi-line-end">。</span>常见的 application-layer protocol 包括 HTTP<span class="mojikumi-line-end">、</span>SMTP<span class="mojikumi-line-end">、</span>Telnet<span class="mojikumi-line-end">、</span>FTP<span class="mojikumi-line-end">、</span>SIP<span class="mojikumi-line-end">、</span>RTP<span class="mojikumi-line-end">、</span>DASH 等<span class="mojikumi-line-end">。</span>有的 application 会使用专有而非 public domain 的 application-layer protocol<span class="mojikumi-line-end">。</span></p>
<h2 id="the-web-and-http" class="heading"><a href="#the-web-and-http" class="heading-anchor" aria-label="章节： The Web and HTTP" tabindex="-1"></a><span>The Web and HTTP</span></h2>
<p>HTTP (HyperText Transfer Protocol) 是 Web 的 application-layer protocol<span class="mojikumi-line-end">，</span>定义了 client (browser) 如何向 server 请求文件<span class="mojikumi-line-start">（</span>web page<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>server 如何将文件传输给 client<span class="mojikumi-line-end">。</span></p>
<p>HTTP 的默认端口是 80<span class="mojikumi-line-end">。</span></p>
<p>HTTP 不存储 client 的信息<span class="mojikumi-line-end">，</span>是一个 <i>stateless protocol</i><span class="mojikumi-line-end">。</span></p>
<p>HTTP<span class="mojikumi-line-start">（</span>1.0<span class="mojikumi-line-end">、</span>1.1<span class="mojikumi-line-end">、</span>2<span class="mojikumi-line-end">）</span>基于 TCP<span class="mojikumi-line-end">，</span>有 persistent connection 和 non-persistent connection 两种工作方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>non-persistent connection<span class="mojikumi-line-end">：</span>每次 request-response 都会建立一个新的 TCP connection<span class="mojikumi-line-end">，</span>收到 response 后立刻关闭 TCP connection<span class="mojikumi-line-end">。</span></li>
<li>persistent connection<span class="mojikumi-line-end">：</span>同一对 client-server 的多次 request-response<span class="mojikumi-line-start">（</span>例如一个页面引用的多个资源<span class="mojikumi-line-end">）</span>可以共用同一个 TCP connection<span class="mojikumi-line-start">（</span>在闲置一段时间后自动关闭<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且无需等待 response 就可以连续发送多个 request<span class="mojikumi-line-start">（</span>被称作 <i>pipelining</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而省下每次建立 TCP connection 耗费的 RTT (round-trip time)<span class="mojikumi-line-end">。</span></li>
</ul>
<p>HTTP message 是纯文本<span class="mojikumi-line-end">，</span>格式如下<span class="mojikumi-line-end">。</span></p>
<p>HTTP request:<sup><a href="#user-content-fn-fig2.8" id="user-content-fnref-fig2.8" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.8.6bb26d3f.webp"><img srcset="/assets/cnatda-fig-2.8.de34594f.png" loading="lazy" src="/assets/cnatda-fig-2.8.de34594f.png" width="793" height="439" alt="General format of an HTTP request message"></picture></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="http 代码块" data-v-ad49d235>http</h3><ile-root id="ile-8"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-8--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">GET</span><span style="color: #D6DEEB"> /wireshark-labs/INTRO-wireshark-file1.html </span><span style="color: #C792EA">HTTP</span><span style="color: #D6DEEB">/</span><span style="color: #F78C6C">1.1</span></span>
<span><span style="color: #CAECE6">Host</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">gaia.cs.umass.edu</span></span>
<span><span style="color: #CAECE6">User-Agent</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">curl/8.1.2</span></span>
<span><span style="color: #CAECE6">Accept</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">*/*</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">GET</span><span style="color: #403F53"> /wireshark-labs/INTRO-wireshark-file1.html </span><span style="color: #994CC3">HTTP</span><span style="color: #403F53">/</span><span style="color: #AA0982">1.1</span></span>
<span><span style="color: #994CC3">Host:</span><span style="color: #403F53"> </span><span style="color: #4876D6">gaia.cs.umass.edu</span></span>
<span><span style="color: #994CC3">User-Agent:</span><span style="color: #403F53"> </span><span style="color: #4876D6">curl/8.1.2</span></span>
<span><span style="color: #994CC3">Accept:</span><span style="color: #403F53"> </span><span style="color: #4876D6">*/*</span></span></code></pre></div></section>
<p>HTTP response:<sup><a href="#user-content-fn-fig2.9" id="user-content-fnref-fig2.9" data-footnote-ref aria-describedby="footnote-label">2</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.9.d6740f57.webp"><img srcset="/assets/cnatda-fig-2.9.c01ee471.png" loading="lazy" src="/assets/cnatda-fig-2.9.c01ee471.png" width="792" height="443" alt="General format of an HTTP response message"></picture></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="http 代码块" data-v-ad49d235>http</h3><ile-root id="ile-9"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-9--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #D6DEEB">HTTP/1.1 200 OK</span></span>
<span><span style="color: #CAECE6">Date</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Tue, 13 Jun 2023 11:14:57 GMT</span></span>
<span><span style="color: #CAECE6">Server</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span></span>
<span><span style="color: #CAECE6">Last-Modified</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Tue, 13 Jun 2023 05:59:01 GMT</span></span>
<span><span style="color: #CAECE6">ETag</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">&quot;51-5fdfc882a3e6f&quot;</span></span>
<span><span style="color: #CAECE6">Accept-Ranges</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">bytes</span></span>
<span><span style="color: #CAECE6">Content-Length</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">81</span></span>
<span><span style="color: #CAECE6">Content-Type</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">text/html; charset=UTF-8</span></span>
<span></span>
<span><span style="color: #D6DEEB">&lt;html&gt;</span></span>
<span><span style="color: #D6DEEB">Congratulations!  You&#39;ve downloaded the first Wireshark lab file!</span></span>
<span><span style="color: #D6DEEB">&lt;/html&gt;</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #403F53">HTTP/1.1 200 OK</span></span>
<span><span style="color: #994CC3">Date:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Tue, 13 Jun 2023 11:14:57 GMT</span></span>
<span><span style="color: #994CC3">Server:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span></span>
<span><span style="color: #994CC3">Last-Modified:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Tue, 13 Jun 2023 05:59:01 GMT</span></span>
<span><span style="color: #994CC3">ETag:</span><span style="color: #403F53"> </span><span style="color: #4876D6">&quot;51-5fdfc882a3e6f&quot;</span></span>
<span><span style="color: #994CC3">Accept-Ranges:</span><span style="color: #403F53"> </span><span style="color: #4876D6">bytes</span></span>
<span><span style="color: #994CC3">Content-Length:</span><span style="color: #403F53"> </span><span style="color: #4876D6">81</span></span>
<span><span style="color: #994CC3">Content-Type:</span><span style="color: #403F53"> </span><span style="color: #4876D6">text/html; charset=UTF-8</span></span>
<span></span>
<span><span style="color: #403F53">&lt;html&gt;</span></span>
<span><span style="color: #403F53">Congratulations!  You&#39;ve downloaded the first Wireshark lab file!</span></span>
<span><span style="color: #403F53">&lt;/html&gt;</span></span></code></pre></div></section>
<p>server 可以通过 Cookie 识别用户<span class="mojikumi-line-end">，</span>cookie 通过 response 中的 <code>Set-Cookie</code> header 设置<span class="mojikumi-line-end">，</span>在之后的每次 request 中通过 <code>Cookie</code> header 发给 server<span class="mojikumi-line-end">。</span></p>
<p>机构可以设置 Web cache<span class="mojikumi-line-end">，</span>使用户先向 Web cache 发送请求<span class="mojikumi-line-end">，</span>若 cache hit 则直接由 Web cache 发给用户<span class="mojikumi-line-end">，</span>若 cache miss 则 Web cache 向 origin server 发送请求再返回给用户<span class="mojikumi-line-end">。</span>Web cache 可以减小延迟<span class="mojikumi-line-end">，</span>降低带宽压力<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>与之类似的 CDN 则在<a href="#content-distribution-networks">后文</a>有详细讲解<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>可以通过 <code>If<wbr>-<wbr>Modified<wbr>-<wbr>Since</code> header 进行 <i>conditional GET</i><span class="mojikumi-line-end">，</span>若没有修改则会返回 body 为空的 304 Not Modified<span class="mojikumi-line-end">。</span></p>
<p>HTTP/2 提供了 request and response multiplexing<span class="mojikumi-line-end">、</span>prioritization<span class="mojikumi-line-end">、</span>server push 来优化性能<span class="mojikumi-line-end">：</span></p>
<ul>
<li>multiplexing<span class="mojikumi-line-end">：</span>persistent connection 减少了建立 TCP connection 带来的 RTT<span class="mojikumi-line-end">，</span>但又引入了 Head of Line (HOL) blocking<span class="mojikumi-line-end">，</span>即共用一个 TCP connection 时较小的资源需要等待较大的资源加载完毕<span class="mojikumi-line-end">，</span>所以在 HTTP/1.1 中浏览器经常还是会建立多个 TCP 连接<span class="mojikumi-line-end">，</span>除了解决 HOL blocking<span class="mojikumi-line-end">，</span>也可以在 TCP 的 congestion control 中取得更多带宽<span class="mojikumi-line-end">。</span>HTTP/2 则将每个 message 划分成了多个小的 frame<span class="mojikumi-line-end">，</span>并交替发送不同 message 的 frame<span class="mojikumi-line-start">（</span>frame interleaving<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而小的资源无需等待大的资源发送完毕<span class="mojikumi-line-end">。</span></li>
<li>prioritization<span class="mojikumi-line-end">：</span>同时发送多个请求时<span class="mojikumi-line-end">，</span>可以为每个 response 设置优先级<span class="mojikumi-line-end">，</span>让 server 优先发送高优先级的 response<span class="mojikumi-line-end">。</span>除此之外<span class="mojikumi-line-end">，</span>还可以设置 response 之间的依赖关系<span class="mojikumi-line-end">。</span></li>
<li>server push<span class="mojikumi-line-end">：</span>一个 request 可以有多个 response<span class="mojikumi-line-end">，</span>即除了对应于 request 的 response<span class="mojikumi-line-end">，</span>server 还可以额外 <i>push</i><span class="mojikumi-line-end">，</span>例如在返回一个 HTML 页面时可以 push 这个页面引用的其他资源<span class="mojikumi-line-end">。</span></li>
</ul>
<p>HTTP/3 使用基于 UDP 的 QUIC 代替了 TCP<span class="mojikumi-line-end">。</span></p>
<h2 id="electronic-mail-in-the-internet" class="heading"><a href="#electronic-mail-in-the-internet" class="heading-anchor" aria-label="章节： Electronic Mail in the Internet" tabindex="-1"></a><span>Electronic Mail in the Internet</span></h2>
<p>e-mail 系统有三个主要组件<span class="mojikumi-line-end">：</span>user agent<span class="mojikumi-line-end">、</span>mail server 和 SMTP (Simple Mail Transfer Protocol)<span class="mojikumi-line-end">。</span></p>
<p>发送邮件时<span class="mojikumi-line-end">，</span>Alice 写完邮件后由她的 user agent 发送到她的 mail server<span class="mojikumi-line-end">，</span>她的 mail server 再发到 Bob 的 mail server 中属于 Bob 的 mailbox<span class="mojikumi-line-end">，</span>之后 Bob 再通过他的 user agent 从他的 mail server 获取他的 mailbox 中的邮件并阅读<span class="mojikumi-line-end">。</span></p>
<p>发送方的 mail server 会维护一个待发送邮件列表<span class="mojikumi-line-end">，</span>如果接收方的 mail server 在当时不可用<span class="mojikumi-line-end">，</span>则会等待一段时间后再次尝试<span class="mojikumi-line-end">，</span>多次失败则会退回<span class="mojikumi-line-end">。</span></p>
<p>mail server 使用 SMTP 向其他 mail server 发送邮件<span class="mojikumi-line-end">，</span>发送方作为 SMTP client<span class="mojikumi-line-end">，</span>接收方作为 SMTP server<span class="mojikumi-line-end">。</span></p>
<p>SMTP 的默认端口是 25<span class="mojikumi-line-end">。</span></p>
<p>SMTP 是一个比 HTTP 还古老的协议<span class="mojikumi-line-end">，</span>带来的后果之一是它整个 message 都只能包含 ASCII<span class="mojikumi-line-end">。</span></p>
<p>一次 SMTP 通信如下所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-smtp-example" id="user-content-fnref-smtp-example" data-footnote-ref aria-describedby="footnote-label">3</a></sup></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="plain 代码块" data-v-ad49d235>plain</h3><ile-root id="ile-10"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-10--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">S: 220 smtp.example.com ESMTP Postfix</span></span>
<span><span style="color: #d6deeb">C: HELO relay.example.org</span></span>
<span><span style="color: #d6deeb">S: 250 Hello relay.example.org, I am glad to meet you</span></span>
<span><span style="color: #d6deeb">C: MAIL FROM:&lt;bob@example.org&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: RCPT TO:&lt;alice@example.com&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: RCPT TO:&lt;theboss@example.com&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: DATA</span></span>
<span><span style="color: #d6deeb">S: 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span></span>
<span><span style="color: #d6deeb">C: From: &quot;Bob Example&quot; &lt;bob@example.org&gt;</span></span>
<span><span style="color: #d6deeb">C: To: &quot;Alice Example&quot; &lt;alice@example.com&gt;</span></span>
<span><span style="color: #d6deeb">C: Cc: theboss@example.com</span></span>
<span><span style="color: #d6deeb">C: Date: Tue, 15 Jan 2008 16:02:43 -0500</span></span>
<span><span style="color: #d6deeb">C: Subject: Test message</span></span>
<span><span style="color: #d6deeb">C:</span></span>
<span><span style="color: #d6deeb">C: Hello Alice.</span></span>
<span><span style="color: #d6deeb">C: This is a test message with 5 header fields and 4 lines in the message body.</span></span>
<span><span style="color: #d6deeb">C: Your friend,</span></span>
<span><span style="color: #d6deeb">C: Bob</span></span>
<span><span style="color: #d6deeb">C: .</span></span>
<span><span style="color: #d6deeb">S: 250 Ok: queued as 12345</span></span>
<span><span style="color: #d6deeb">C: QUIT</span></span>
<span><span style="color: #d6deeb">S: 221 Bye</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">S: 220 smtp.example.com ESMTP Postfix</span></span>
<span><span style="color: #403f53">C: HELO relay.example.org</span></span>
<span><span style="color: #403f53">S: 250 Hello relay.example.org, I am glad to meet you</span></span>
<span><span style="color: #403f53">C: MAIL FROM:&lt;bob@example.org&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: RCPT TO:&lt;alice@example.com&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: RCPT TO:&lt;theboss@example.com&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: DATA</span></span>
<span><span style="color: #403f53">S: 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span></span>
<span><span style="color: #403f53">C: From: &quot;Bob Example&quot; &lt;bob@example.org&gt;</span></span>
<span><span style="color: #403f53">C: To: &quot;Alice Example&quot; &lt;alice@example.com&gt;</span></span>
<span><span style="color: #403f53">C: Cc: theboss@example.com</span></span>
<span><span style="color: #403f53">C: Date: Tue, 15 Jan 2008 16:02:43 -0500</span></span>
<span><span style="color: #403f53">C: Subject: Test message</span></span>
<span><span style="color: #403f53">C:</span></span>
<span><span style="color: #403f53">C: Hello Alice.</span></span>
<span><span style="color: #403f53">C: This is a test message with 5 header fields and 4 lines in the message body.</span></span>
<span><span style="color: #403f53">C: Your friend,</span></span>
<span><span style="color: #403f53">C: Bob</span></span>
<span><span style="color: #403f53">C: .</span></span>
<span><span style="color: #403f53">S: 250 Ok: queued as 12345</span></span>
<span><span style="color: #403f53">C: QUIT</span></span>
<span><span style="color: #403f53">S: 221 Bye</span></span></samp></pre></div></section>
<p>其中 <code>HELO</code><span class="mojikumi-line-end">、</span><code>MAIL FROM</code><span class="mojikumi-line-end">、</span><code>RCPT TO</code><span class="mojikumi-line-end">、</span><code>DATA</code><span class="mojikumi-line-end">、</span><code>QUIT</code> 等是 <i>command</i><span class="mojikumi-line-end">，</span>用来进行 handshake 等操作<span class="mojikumi-line-end">。</span>如果要向同一个 mail server 连续发送多封邮件<span class="mojikumi-line-end">，</span>可以只 <code>HELO</code><span class="mojikumi-line-end">、</span><code>QUIT</code> 一次<span class="mojikumi-line-start">（</span>但要 <code>MAIL FROM</code><span class="mojikumi-line-end">、</span><code>RCPT TO</code> 多次<span class="mojikumi-line-end">）</span>从而共用一个 TCP 连接<span class="mojikumi-line-end">。</span><code>DATA</code> 后是邮件的内容<span class="mojikumi-line-end">，</span>这一内容的开头是邮件的 header<span class="mojikumi-line-end">，</span>结尾是仅包含 <code>.</code> 的一行<span class="mojikumi-line-end">。</span></p>
<p>email 是 user agent → mail server → mail server → user agent 而非 user agent → user agent<span class="mojikumi-line-end">，</span>一大原因是如果 user agent 经常不在线则直接发很可能收不到邮件<span class="mojikumi-line-end">，</span>需要用 mail server 来提高在线率以及提供对方不在线时重试的机制<span class="mojikumi-line-end">。</span></p>
<p>从 user agent 发到 mail server 时可以使用 SMTP 或 HTTP<span class="mojikumi-line-end">，</span>从 mail server 拉取到 user agent 时可以使用 HTTP 或 IMAP (Internet Mail Access Protocol)<span class="mojikumi-line-start">（</span>不能用 SMTP<span class="mojikumi-line-end">，</span>因为 SMTP 是 push protocol<span class="mojikumi-line-end">，</span>不能用来 pull<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h2 id="dns--the-internet’s-directory-service" class="heading"><a href="#dns--the-internet’s-directory-service" class="heading-anchor" aria-label="章节： DNS—The Internet’s Directory Service" tabindex="-1"></a><span>DNS—The Internet<span class="mojikumi-narrow-left">’</span>s Directory Service</span></h2>
<h3 id="services-provided-by-dns" class="heading"><a href="#services-provided-by-dns" class="heading-anchor" aria-label="章节： Services Provided by DNS" tabindex="-1"></a><span>Services Provided by DNS</span></h3>
<p>host 由 hostname 或 IP 地址识别<span class="mojikumi-line-end">，</span>hostname 对人类更友好<span class="mojikumi-line-end">，</span>而 IP 地址对路由器更友好<span class="mojikumi-line-end">。</span></p>
<p>将 hostname 翻译为 IP 地址是 DNS 的主要任务<span class="mojikumi-line-end">。</span>DNS 是由多个层级的 DNS server 共同构成的 distributed database<span class="mojikumi-line-end">，</span>也是使得 application 能够查询这个 distributed database 的 application-layer protocol<span class="mojikumi-line-end">。</span></p>
<p>DNS 被很多其他 application-layer protocol 所使用<span class="mojikumi-line-end">，</span>例如在 HTTP/SMTP 中<span class="mojikumi-line-end">，</span>可以使用 hostname 来访问网站 / mail server<span class="mojikumi-line-end">，</span>这时就会调用 DNS<span class="mojikumi-line-end">。</span></p>
<p>DNS 在提供 hostname 到 IP 地址的翻译的同时<span class="mojikumi-line-end">，</span>还提供了下列功能<span class="mojikumi-line-end">：</span></p>
<ul>
<li>host aliasing: 可以让一个 host 在有 canonical hostname 的同时还有其他 alias<span class="mojikumi-line-end">。</span></li>
<li>mail server aliasing: 可以让同一个 hostname 在作为 Web server 和作为 mail server 时指向不同的 host<span class="mojikumi-line-end">。</span></li>
<li>load distribution: 可以让同一个 hostname 指向多个 host<span class="mojikumi-line-end">，</span>在返回查询结果时进行 rotate<span class="mojikumi-line-start">（</span>即改变位于首位的 IP 地址<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="overview-of-how-dns-works" class="heading"><a href="#overview-of-how-dns-works" class="heading-anchor" aria-label="章节： Overview of How DNS Works" tabindex="-1"></a><span>Overview of How DNS Works</span></h3>
<p>由于下列原因<span class="mojikumi-line-end">，</span>DNS 必须是分布式的<span class="mojikumi-line-end">，</span>单点式的 DNS 无法 scale<span class="mojikumi-line-end">：</span></p>
<ul>
<li>single point of failure</li>
<li>traffic volume 过大</li>
<li>离部分用户距离过远<span class="mojikumi-line-end">，</span>带来较大的延时</li>
<li>难以维护<span class="mojikumi-line-start">（</span>数据总量大<span class="mojikumi-line-end">，</span>更新频繁<span class="mojikumi-line-end">）</span></li>
</ul>
<p>一般来说<span class="mojikumi-line-end">，</span>DNS 分为以下几层<span class="mojikumi-line-end">：</span></p>
<ol>
<li>root DNS server: 分散在世界各地的 13 个不同 root server 各自的共上千个 copy<span class="mojikumi-line-end">，</span>用来查询 TLD server</li>
<li>top-level domain (TLD) server: 每个 TLD 有自己的 TLD server (or server cluster)<span class="mojikumi-line-end">，</span>用来查询 authoritative DNS server</li>
<li>authoritative DNS server: 每个 subdomain 有自己的 authoritative DNS server<span class="mojikumi-line-end">，</span>可以是组织自己维护的或者由服务商提供的<span class="mojikumi-line-end">，</span>用来查询 hostname 到 IP 地址的映射</li>
</ol>
<p>除此之外<span class="mojikumi-line-end">，</span>TLD server 和 authoritative DNS server 之间还可能有 intermediate DNS server<span class="mojikumi-line-end">。</span></p>
<p>在上述 DNS server 的 hierarchy 之外<span class="mojikumi-line-end">，</span>还有 local DNS server<span class="mojikumi-line-start">（</span>就是电脑的网络设置里设的 DNS 服务器<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>作为 proxy 来代替 requesting host 向 DNS server 进行查询<span class="mojikumi-line-end">。</span></p>
<p>从逻辑上来说<span class="mojikumi-line-end">，</span>向一个 DNS server 进行查询时<span class="mojikumi-line-end">，</span>如果它自己不知道最终的 answer (IP 地址)<span class="mojikumi-line-end">，</span>它可以让你换一个 DNS server 继续查 (iterative query)<span class="mojikumi-line-end">，</span>或者帮你向其他 DNS server 发送查询 (recursive query) 然后返回最终的结果<span class="mojikumi-line-end">。</span>而在实际中<span class="mojikumi-line-end">，</span>如上文所述<span class="mojikumi-line-end">，</span>一般是向 local DNS server 查询时会进行 recursive query<span class="mojikumi-line-end">，</span>而 local DNS server 再从 root DNS server 向下直到 authoritative DNS server 进行 iterative query<span class="mojikumi-line-end">。</span></p>
<p>为了减少查询的数量<span class="mojikumi-line-end">，</span>DNS 设有 caching<span class="mojikumi-line-end">。</span>每个查询的发起者<span class="mojikumi-line-start">（</span>requesting host 或者 local DNS server<span class="mojikumi-line-end">）</span>会将收到的查询结果保存一段时间<span class="mojikumi-line-end">，</span>cache miss 才会向其他 DNS server 发起查询<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>常用的 TLD server 的 IP 地址往往都在 cache 中<span class="mojikumi-line-end">，</span>大大减少了 root DNS server 收到的请求数量<span class="mojikumi-line-end">。</span></p>
<h3 id="dns-records" class="heading"><a href="#dns-records" class="heading-anchor" aria-label="章节： DNS Records" tabindex="-1"></a><span>DNS Records</span></h3>
<p>DNS distributed database 存储的信息单元是 <i>resource record</i> (RR)<span class="mojikumi-line-end">。</span></p>
<p>每个 RR 包含 type<span class="mojikumi-line-end">、</span>name<span class="mojikumi-line-end">、</span>value<span class="mojikumi-line-end">、</span>TTL 四项信息<span class="mojikumi-line-end">，</span>其中 TTL 表示 cache 多久过期<span class="mojikumi-line-end">。</span>常见的 type 包括以下几个<span class="mojikumi-line-end">：</span></p>
<ul>
<li>A: name 是 hostname<span class="mojikumi-line-end">，</span>value 是 IP 地址<span class="mojikumi-line-end">，</span>表示一个 hostname 到 IP 地址的映射<span class="mojikumi-line-end">。</span></li>
<li>NS: name 是 domain<span class="mojikumi-line-end">，</span>value 是其 name server 的 hostname<span class="mojikumi-line-end">，</span>表示可以在这个 name server 进行这个 domain 的进一步查询<span class="mojikumi-line-end">。</span></li>
<li>CNAME: name 是 alias hostname<span class="mojikumi-line-end">，</span>value 是 canonical hostname<span class="mojikumi-line-end">，</span>用来提供 host aliasing<span class="mojikumi-line-end">。</span></li>
<li>MX: name 是 alias hostname<span class="mojikumi-line-end">，</span>value 是 canonical hostname<span class="mojikumi-line-end">，</span>用来提供 mail server aliasing<span class="mojikumi-line-end">。</span></li>
</ul>
<p>对一个 hostname 来说 authoritative 的 DNS server 会包含被查询的 host 的 A record<span class="mojikumi-line-end">。</span>不 authoritative 的 DNS server 则会包含相应的 NS record<span class="mojikumi-line-end">，</span>以及这个 name server 的 A record<span class="mojikumi-line-end">。</span></p>
<p>下面是一个例子<span class="mojikumi-line-end">：</span></p>
<div class="overflow-auto my-6"><table>
<thead>
<tr>
<th align="center">type</th>
<th align="center">name</th>
<th align="center">value</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">NS</td>
<td align="center"><code>.</code></td>
<td align="center"><code>a<wbr>.<wbr>root<wbr>-<wbr>servers<wbr>.<wbr>net<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>a<wbr>.<wbr>root<wbr>-<wbr>servers<wbr>.<wbr>net<wbr>.</code></td>
<td align="center"><code>198.41.0.4</code></td>
</tr>
<tr>
<td align="center">NS</td>
<td align="center"><code>moe.</code></td>
<td align="center"><code>ns1<wbr>.<wbr>dns<wbr>.<wbr>nic<wbr>.<wbr>moe<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>ns1<wbr>.<wbr>dns<wbr>.<wbr>nic<wbr>.<wbr>moe<wbr>.</code></td>
<td align="center"><code>156<wbr>.<wbr>154<wbr>.<wbr>144<wbr>.<wbr>114</code></td>
</tr>
<tr>
<td align="center">NS</td>
<td align="center"><code>ouuan.moe.</code></td>
<td align="center"><code>amos<wbr>.<wbr>ns<wbr>.<wbr>cloudflare<wbr>.<wbr>com<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>amos<wbr>.<wbr>ns<wbr>.<wbr>cloudflare<wbr>.<wbr>com<wbr>.</code></td>
<td align="center"><code>172<wbr>.<wbr>64<wbr>.<wbr>35<wbr>.<wbr>120</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>ouuan.moe.</code></td>
<td align="center"><code>172<wbr>.<wbr>67<wbr>.<wbr>181<wbr>.<wbr>123</code></td>
</tr>
</tbody>
</table></div>
<p>在 registar 购买域名时可以填写 name server 的信息<span class="mojikumi-line-end">，</span>由 registar 负责将相应的 NS 以及 A record 添加到 TLD server<span class="mojikumi-line-end">。</span>可以使用域名商的 DNS server<span class="mojikumi-line-end">、</span>其他服务商<span class="mojikumi-line-start">（</span>例如 Cloudflare<span class="mojikumi-line-end">）</span>的 DNS server 或者自己搭建的 DNS server 作为 authoritative DNS server<span class="mojikumi-line-end">。</span></p>
<p>DNS 最初只能静态更新<span class="mojikumi-line-start">（</span>通过配置文件等方式<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>后来有了 DDNS 来通过 DNS message 动态更新<span class="mojikumi-line-end">。</span></p>
<h3 id="dns-messages" class="heading"><a href="#dns-messages" class="heading-anchor" aria-label="章节： DNS Messages" tabindex="-1"></a><span>DNS Messages</span></h3>
<p>DNS message 通过 UDP 发送到 port 53<span class="mojikumi-line-end">。</span></p>
<p>DNS message 的结构如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-2.21" id="user-content-fnref-fig-2.21" data-footnote-ref aria-describedby="footnote-label">4</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.21.b9121041.webp"><img srcset="/assets/cnatda-fig-2.21.8f9be477.png" loading="lazy" src="/assets/cnatda-fig-2.21.8f9be477.png" width="1349" height="804" alt="DNS message format"></picture></p>
<p>identification 由 client 设置<span class="mojikumi-line-end">，</span>即用来识别 query 和 reply 对应关系的 ID<span class="mojikumi-line-end">。</span></p>
<p>flags 包括以下几个<span class="mojikumi-line-end">：</span></p>
<ul>
<li>query or reply: 这条 message 是 query 还是 reply</li>
<li>authoritative or not: 返回的结果是否是最终的答案</li>
<li>recursion desired: client 是否希望 server 进行 recursive query</li>
<li>recursion available: server 是否可以进行 recursive query</li>
</ul>
<p>4 个 section 中都包含若干 RR<span class="mojikumi-line-end">。</span></p>
<p>在 query 中<span class="mojikumi-line-end">，</span>question section 里会包含 name 和 type<span class="mojikumi-line-end">。</span></p>
<p>对于 type A 的查询<span class="mojikumi-line-end">：</span></p>
<ul>
<li>如果 reply 是 authoritative 的<span class="mojikumi-line-start">（</span>向 authoritative DNS server 查询<span class="mojikumi-line-end">，</span>或者进行了 recursive query<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>则会在 answer section 中列出所查询的 A record<span class="mojikumi-line-end">。</span></li>
<li>如果不是 authoritative 的<span class="mojikumi-line-end">，</span>则会在 authority section 中列出 NS record<span class="mojikumi-line-end">，</span>在 additional section 中列出这些 name server 的 A record<span class="mojikumi-line-end">。</span></li>
</ul>
<p>在 additional section 中<span class="mojikumi-line-end">，</span>还可能列出 canonical hostname 的 A record 之类的<span class="mojikumi-line-end">。</span></p>
<h2 id="peer-to-peer-file-distribution" class="heading"><a href="#peer-to-peer-file-distribution" class="heading-anchor" aria-label="章节： Peer-to-Peer File Distribution" tabindex="-1"></a><span>Peer-to-Peer File Distribution</span></h2>
<p>在传输大文件时<span class="mojikumi-line-end">，</span>client-server 的架构在用户数量增多时需要更大的 server bandwidth 才能保证用户的下载速度<span class="mojikumi-line-end">，</span>而 P2P 的架构则是 self-scalable 的<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>书中有简化模型的定量计算<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>BitTorrent 是较为流行的 P2P file distribution protocol<span class="mojikumi-line-end">。</span>在 BitTorrent 中<span class="mojikumi-line-end">，</span>以 chunk 为下载文件的基本单位<span class="mojikumi-line-end">。</span>一个 peer 刚加入 torrent 时没有 trunk 所以只能下载<span class="mojikumi-line-end">，</span>在获取到一些 trunk 后就会开始上传给其他 peer<span class="mojikumi-line-end">，</span>下载完成后可以自私地离开或者无私地保种<span class="mojikumi-line-end">。</span></p>
<p>每个 torrent 会有<span class="mojikumi-line-start">（</span>至少<span class="mojikumi-line-end">）</span>一个 tracker<span class="mojikumi-line-end">，</span>peer 在加入/离开时会通知 tracker<span class="mojikumi-line-end">，</span>并在过程中定期告知 tracker 自己仍在活动<span class="mojikumi-line-end">。</span>tracker 会给每个 peer 提供一些其他 peer 的 IP 地址和端口<span class="mojikumi-line-end">。</span></p>
<p>在下载过程中<span class="mojikumi-line-end">，</span>每个 peer 拥有一部分 chunk<span class="mojikumi-line-end">，</span>并向其他 peer 请求 chunk<span class="mojikumi-line-end">。</span>每个 peer 需要决定优先下载哪个 trunk 以及上传给谁<span class="mojikumi-line-end">。</span></p>
<p>优先下载的 trunk 可以采用 <i>rarest first</i> 的策略<span class="mojikumi-line-end">，</span>即优先下载已知的 peer 中拥有人数最少的 chunk<span class="mojikumi-line-end">，</span>这样的话就能使得各个 trunk 较为均匀地在 peer 间分布<span class="mojikumi-line-end">。</span></p>
<p>在下载过程中<span class="mojikumi-line-end">，</span>会采用被称作<span class="mojikumi-line-start">“</span>tit-for-tat<span class="mojikumi-line-end">”</span>的策略决定上传给谁<span class="mojikumi-line-end">：</span>上传给自己<span class="mojikumi-line-start">（</span>即从他那下载<span class="mojikumi-line-end">）</span>的速度最快的几个 peer 被称作<span class="mojikumi-line-start">“</span>unchoked<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>除此之外还会每隔一段时间随机选择一个 peer 被称作<span class="mojikumi-line-start">“</span>optimistically unchoked<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>最后做出的选择就是上传给<span class="mojikumi-line-start">“</span>unchoked<span class="mojikumi-line-end">”</span>和<span class="mojikumi-line-start">“</span>optimistically unchoked<span class="mojikumi-line-end">”</span>的这些 peer<span class="mojikumi-line-end">。</span>这个策略实际上可以被绕过<span class="mojikumi-line-end">，</span>但不被绕过时它提供了一个激励大家上传的机制<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>在下载完毕后保种时<span class="mojikumi-line-end">，</span>会使用另外的策略<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-seed-choking" id="user-content-fnref-seed-choking" data-footnote-ref aria-describedby="footnote-label">5</a></sup><span class="mojikumi-line-end">）</span></p>
<p>除了通过 tracker<span class="mojikumi-line-end">，</span>还可以通过 Distributed Hash Table (DHT<span class="mojikumi-line-end">，</span>一种 P2P 架构的 distributed database) 来获取 peer<span class="mojikumi-line-end">。</span></p>
<h2 id="video-streaming-and-content-distribution-networks" class="heading"><a href="#video-streaming-and-content-distribution-networks" class="heading-anchor" aria-label="章节： Video Streaming and Content Distribution Networks" tabindex="-1"></a><span>Video Streaming and Content Distribution Networks</span></h2>
<h3 id="http-streaming-and-dash" class="heading"><a href="#http-streaming-and-dash" class="heading-anchor" aria-label="章节： HTTP Streaming and DASH" tabindex="-1"></a><span>HTTP Streaming and DASH</span></h3>
<p>视频需要耗费大量的流量<span class="mojikumi-line-start">（</span>以及存储空间<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而 streaming 时需要保证至少有视频 bitrate 这么多的带宽才能避免卡顿<span class="mojikumi-line-end">，</span>所以一般会根据可用的带宽选择不同质量的视频版本<span class="mojikumi-line-end">。</span></p>
<p>最基础的 streaming 方式是 HTTP streaming<span class="mojikumi-line-end">，</span>即通过 HTTP GET 获取视频文件至缓冲区并播放<span class="mojikumi-line-end">，</span>但这样无法适应不同用户的不同带宽<span class="mojikumi-line-end">，</span>更无法适应同一个用户随时间变化的带宽<span class="mojikumi-line-end">。</span></p>
<p>在 Dynamic Adaptive Streaming over HTTP (DASH) 中<span class="mojikumi-line-end">，</span>视频被编码为多个不同质量的版本<span class="mojikumi-line-end">，</span>client 每次获取一个几秒的视频片段<span class="mojikumi-line-end">，</span>并根据可用带宽动态调整选择的版本<span class="mojikumi-line-end">。</span></p>
<p>在开始播放之前<span class="mojikumi-line-end">，</span>client 首先会获取 manifest file 来得到各个视频版本的 URL 以及 bitrate<span class="mojikumi-line-end">。</span>在播放过程中<span class="mojikumi-line-end">，</span>通过 HTTP GET 请求以及 byte range header 获取视频片段<span class="mojikumi-line-end">，</span>同时计算可用带宽<span class="mojikumi-line-end">，</span>决定接下来选择的视频版本<span class="mojikumi-line-end">。</span></p>
<h3 id="content-distribution-networks" class="heading"><a href="#content-distribution-networks" class="heading-anchor" aria-label="章节： Content Distribution Networks" tabindex="-1"></a><span>Content Distribution Networks</span></h3>
<p>和 DNS 类似<span class="mojikumi-line-end">，</span>video streaming 往往也不能仅通过单个 data center 实现<span class="mojikumi-line-end">，</span>因为<span class="mojikumi-line-end">：</span></p>
<ul>
<li>离部分用户过远<span class="mojikumi-line-end">，</span>虽然 streaming 对延时要求不高<span class="mojikumi-line-end">，</span>但更多的 communication link 很可能意味着更低的 bottleneck bandwidth<span class="mojikumi-line-end">。</span></li>
<li>同一个视频会在同一个 communication link 上被传输多次<span class="mojikumi-line-end">，</span>造成网络资源以及资费的浪费<span class="mojikumi-line-end">。</span></li>
<li>single point of failure</li>
</ul>
<p>为了解决这些问题<span class="mojikumi-line-end">，</span>video-streaming company 往往会使用 Content Distribution Networks (CDN) 来分发视频<span class="mojikumi-line-end">。</span></p>
<p>CDN 会在全球各地放置 server (cluster)<span class="mojikumi-line-end">，</span>在每个节点存放一份 content 的 copy<span class="mojikumi-line-end">，</span>在处理 user request 时尽量由最好<span class="mojikumi-line-start">（</span>最近<span class="mojikumi-line-end">）</span>的节点负责响应<span class="mojikumi-line-end">。</span></p>
<p>CDN 可以是 private CDN<span class="mojikumi-line-start">（</span>例如 Google 的 CDN<span class="mojikumi-line-end">）</span>或者 third-party CDN<span class="mojikumi-line-start">（</span>例如 Akamai<span class="mojikumi-line-end">、</span>Limelight<span class="mojikumi-line-end">、</span>Level-3<span class="mojikumi-line-end">，</span><s>书中竟然没提到 Cloudflare</s><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>CDN 通常有两种放置策略<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Enter Deep: 放在 access ISP<span class="mojikumi-line-end">，</span>cluster 数量多<span class="mojikumi-line-end">，</span>性能更好<span class="mojikumi-line-end">，</span>维护成本更高<span class="mojikumi-line-end">。</span></li>
<li>Bring Home: 放在 IXP<span class="mojikumi-line-end">，</span>cluster 数量少<span class="mojikumi-line-end">，</span>维护成本更低<span class="mojikumi-line-end">，</span>性能相对差<span class="mojikumi-line-end">。</span></li>
</ul>
<p>CDN 的更新有 push 和 pull 两种方式<span class="mojikumi-line-end">，</span>push 就是内容更新时 push 到各个 cluster<span class="mojikumi-line-end">，</span>pull 则与 cache 类似<span class="mojikumi-line-end">，</span>在 cache miss 时再从上游获取并<span class="mojikumi-line-start">（</span>在 stream 给用户的同时<span class="mojikumi-line-end">）</span>保存下来<span class="mojikumi-line-end">。</span></p>
<p>将用户重定向到 CDN 节点的一种方式是通过 DNS<span class="mojikumi-line-end">：</span>authoritative DNS server 返回 CDN 的 DNS server 的 NS record<span class="mojikumi-line-end">，</span>然后再由 CDN 的 DNS server 进行节点选择并返回节点的 IP 地址<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>基于 DNS 进行 CDN 重定向时<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>选择节点的两种方式是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>geographically closest: 由 local DNS server 的 IP 确定地理位置<span class="mojikumi-line-end">，</span>然后选择最近的节点<span class="mojikumi-line-end">。</span>这样做的主要问题在于<span class="mojikumi-line-end">，</span>地理位置近不一定意味着网络距离近/带宽高<span class="mojikumi-line-end">，</span>并且 local DNS server 有可能离用户很远<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>real-time measurements: 可以每隔一段时间向各个 local DNS server 发送探测信号来检测网络性能<span class="mojikumi-line-end">，</span>这样做的主要问题在于 DNS server 可能会拒绝响应这样的探测<span class="mojikumi-line-end">。</span></p>
</li>
</ul>
<h3 id="case-studies-netflix-and-youtube" class="heading"><a href="#case-studies-netflix-and-youtube" class="heading-anchor" aria-label="章节： Case Studies: Netflix and YouTube" tabindex="-1"></a><span>Case Studies: Netflix and YouTube</span></h3>
<p>Netflix 和 YouTube 都是大型 video streaming 服务商<span class="mojikumi-line-end">，</span>但它们的架构有很大不同<span class="mojikumi-line-end">，</span>这很大程度上是由于它们视频类型的不同<span class="mojikumi-line-start">（</span>剧 vs UGC<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h4 id="netflix" class="heading"><a href="#netflix" class="heading-anchor" aria-label="章节： Netflix" tabindex="-1"></a><span>Netflix</span></h4>
<p>Netflix 使用 Amazon cloud 运行 Web server 以及视频处理<span class="mojikumi-line-end">，</span>而使用私有的 CDN 分发视频<span class="mojikumi-line-end">。</span></p>
<p>Netflix 的私有 CDN cluster 安装在 ISP 和 IXP 中<span class="mojikumi-line-end">，</span>其中 IXP 的 cluster 往往容量较大<span class="mojikumi-line-end">，</span>可以装下整个 Netflix 的所有视频的各个版本<span class="mojikumi-line-end">，</span>而 ISP 的 cluster 往往容量较小<span class="mojikumi-line-end">，</span>只存放最热门的视频<span class="mojikumi-line-end">。</span></p>
<p>Netflix 不使用 pull-caching<span class="mojikumi-line-end">，</span>而是在每天的低峰期采用 push 进行更新<span class="mojikumi-line-end">。</span></p>
<p>因为 Netflix 的私有 CDN 只负责分发视频<span class="mojikumi-line-end">，</span>它不需要使用 DNS redirect<span class="mojikumi-line-end">，</span>直接由 Web server 告诉 client IP 地址即可<span class="mojikumi-line-end">。</span></p>
<h4 id="youtube" class="heading"><a href="#youtube" class="heading-anchor" aria-label="章节： YouTube" tabindex="-1"></a><span>YouTube</span></h4>
<a id="google-的-network-infrastructure" name="google-的-network-infrastructure" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>Google 的 network infrastructure</span></h5><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>Google 部署了一个庞大的 private network and CDN infrastructure<span class="mojikumi-line-end">，</span>包含以下三级 server clusters<span class="mojikumi-line-end">：</span></p><ol>
<li>约 20 个<span class="mojikumi-line-start">“</span>mega data center<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>分布在北美<span class="mojikumi-line-end">、</span>欧洲和亚洲<span class="mojikumi-line-end">，</span>每个 cluster 有数十万服务器<span class="mojikumi-line-end">，</span>用来 serve dynamic content<span class="mojikumi-line-end">。</span></li>
<li>约 90 个部署在 IXP 的 cluster<span class="mojikumi-line-end">，</span>每个 cluster 有数百个服务器<span class="mojikumi-line-end">，</span>用来 serve 包括 YouTube 视频在内的 static content<span class="mojikumi-line-end">。</span></li>
<li>数百个部署在 access ISP 的 cluster<span class="mojikumi-line-end">，</span>每个 cluster 有数十个服务器<span class="mojikumi-line-end">，</span>用来进行 TCP splitting 以及 server static content<span class="mojikumi-line-end">，</span>例如网页上的静态资源<span class="mojikumi-line-end">。</span></li>
</ol><p>在访问 Google 的服务时<span class="mojikumi-line-end">，</span>不同内容往往会来自不同层级的 cluster<span class="mojikumi-line-end">。</span></p><p>这些 cluster 通过 Google 的 private network 连接<span class="mojikumi-line-end">，</span>使得它们之间的很多通信都不依赖于 public Internet<span class="mojikumi-line-end">，</span>与用户的通信也往往只涉及到 access ISP 这一层<span class="mojikumi-line-end">。</span></p></div></div></aside>
<p>YouTube 使用 Google 的私有 CDN 分发视频<span class="mojikumi-line-end">，</span>并且使用 pull-caching 和 DNS redirect<span class="mojikumi-line-end">。</span>在选择节点时<span class="mojikumi-line-end">，</span>会综合考虑 client 到 cluster 的 RTT 以及负载均衡<span class="mojikumi-line-end">。</span></p>
<p>在用户上传视频时<span class="mojikumi-line-end">，</span>会在 Google 的 data center 进行处理<span class="mojikumi-line-end">。</span></p>
<h2 id="socket-programming-creating-network-applications" class="heading"><a href="#socket-programming-creating-network-applications" class="heading-anchor" aria-label="章节： Socket Programming: Creating Network Applications" tabindex="-1"></a><span>Socket Programming: Creating Network Applications</span></h2>
<p>一般来说<span class="mojikumi-line-end">，</span>编写 network application 需要编写 client program 和 server program<span class="mojikumi-line-end">。</span></p>
<h3 id="socket-programming-with-udp" class="heading"><a href="#socket-programming-with-udp" class="heading-anchor" aria-label="章节： Socket Programming with UDP" tabindex="-1"></a><span>Socket Programming with UDP</span></h3>
<p>使用 UDP 时<span class="mojikumi-line-end">，</span>每次发送 datagram<sup><a href="#user-content-fn-datagram" id="user-content-fnref-datagram" data-footnote-ref aria-describedby="footnote-label">6</a></sup> 都需要指定 address<span class="mojikumi-line-start">（</span>IP 地址 &#x26; 端口<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>接收 datagram 时也会收到对方的 address<span class="mojikumi-line-end">。</span></p>
<p><s>一看就懂但书上解释了半天的</s> 例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="python 代码块" data-v-ad49d235>python</h4><ile-root id="ile-11"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-11--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverName </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">hostname</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">clientSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_DGRAM</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># AF_INET 表示 IPv4 地址，SOCK_DGRAM 表示 UDP</span></span>
<span><span style="color: #D6DEEB">message </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">Input lowercase sentence:</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">sendto</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">message.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">()</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> (serverName, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">modifiedMessage, serverAddress </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> clientSocket.</span><span style="color: #B2CCD6">recvfrom</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">2048</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># 2048 是 buffer size</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">modifiedMessage.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverName </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">hostname</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">clientSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_DGRAM</span><span style="color: #403F53">) </span><span style="color: #989FB1"># AF_INET 表示 IPv4 地址，SOCK_DGRAM 表示 UDP</span></span>
<span><span style="color: #403F53">message </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">Input lowercase sentence:</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">sendto</span><span style="color: #403F53">(</span><span style="color: #4876D6">message.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">()</span><span style="color: #111111">,</span><span style="color: #4876D6"> (serverName, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">modifiedMessage, serverAddress </span><span style="color: #994CC3">=</span><span style="color: #403F53"> clientSocket.</span><span style="color: #0C969B">recvfrom</span><span style="color: #403F53">(</span><span style="color: #AA0982">2048</span><span style="color: #403F53">) </span><span style="color: #989FB1"># 2048 是 buffer size</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #4876D6">modifiedMessage.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="python 代码块" data-v-ad49d235>python</h4><ile-root id="ile-12"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-12--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">serverSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_DGRAM</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">bind</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(</span><span style="color: #D9F5DD">&#39;&#39;</span><span style="color: #82AAFF">, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">The server is ready to receive</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C792EA">while</span><span style="color: #D6DEEB"> </span><span style="color: #FF5874">True</span><span style="color: #D6DEEB">:</span></span>
<span><span style="color: #D6DEEB">    message, clientAddress </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> serverSocket.</span><span style="color: #B2CCD6">recvfrom</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">2048</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">    modifiedMessage </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> message.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">().</span><span style="color: #B2CCD6">upper</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    serverSocket.</span><span style="color: #B2CCD6">sendto</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">modifiedMessage.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">()</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> clientAddress</span><span style="color: #D6DEEB">)</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">serverSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_DGRAM</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">bind</span><span style="color: #403F53">(</span><span style="color: #4876D6">(</span><span style="color: #111111">&#39;&#39;</span><span style="color: #4876D6">, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">The server is ready to receive</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #994CC3">while</span><span style="color: #403F53"> </span><span style="color: #BC5454">True</span><span style="color: #403F53">:</span></span>
<span><span style="color: #403F53">    message, clientAddress </span><span style="color: #994CC3">=</span><span style="color: #403F53"> serverSocket.</span><span style="color: #0C969B">recvfrom</span><span style="color: #403F53">(</span><span style="color: #AA0982">2048</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">    modifiedMessage </span><span style="color: #994CC3">=</span><span style="color: #403F53"> message.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">().</span><span style="color: #0C969B">upper</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    serverSocket.</span><span style="color: #0C969B">sendto</span><span style="color: #403F53">(</span><span style="color: #4876D6">modifiedMessage.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">()</span><span style="color: #111111">,</span><span style="color: #4876D6"> clientAddress</span><span style="color: #403F53">)</span></span></code></pre></div></section>
<h3 id="socket-programming-with-tcp" class="heading"><a href="#socket-programming-with-tcp" class="heading-anchor" aria-label="章节： Socket Programming with TCP" tabindex="-1"></a><span>Socket Programming with TCP</span></h3>
<p>TCP 是一个 connection-oriented protocol<span class="mojikumi-line-end">，</span>在 server 上分为 welcoming socket 和 connection socket<span class="mojikumi-line-end">，</span>一开始需要通过 welcoming socket 建立 connection 并得到 connection socket<span class="mojikumi-line-end">，</span>而在建立了 connection 之后就无需再指定对方的 address<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>下面的代码除了换成 TCP 还对上面的 UDP 代码有若干没有本质区别的修改<span class="mojikumi-line-end">，</span>要是我写肯定会避免<span class="mojikumi-line-end">，</span>但是从书上复制就懒得改了<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="python 代码块" data-v-ad49d235>python</h4><ile-root id="ile-13"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-13--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverName </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">servername</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">clientSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_STREAM</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># SOCK_STREAM 是 TCP</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">connect</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(serverName, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">sentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">Input lowercase sentence:</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">send</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">sentence.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">modifiedSentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> clientSocket.</span><span style="color: #B2CCD6">recv</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1024</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">From Server: </span><span style="color: #D9F5DD">&#39;</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> modifiedSentence.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverName </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">servername</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">clientSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_STREAM</span><span style="color: #403F53">) </span><span style="color: #989FB1"># SOCK_STREAM 是 TCP</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">connect</span><span style="color: #403F53">(</span><span style="color: #4876D6">(serverName, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">sentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">Input lowercase sentence:</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">send</span><span style="color: #403F53">(</span><span style="color: #4876D6">sentence.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">modifiedSentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> clientSocket.</span><span style="color: #0C969B">recv</span><span style="color: #403F53">(</span><span style="color: #AA0982">1024</span><span style="color: #403F53">)</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">From Server: </span><span style="color: #111111">&#39;</span><span style="color: #111111">,</span><span style="color: #4876D6"> modifiedSentence.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="python 代码块" data-v-ad49d235>python</h4><ile-root id="ile-14"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-14--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">serverSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_STREAM</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">bind</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(</span><span style="color: #D9F5DD">&#39;&#39;</span><span style="color: #82AAFF">, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">listen</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># 1 是 connection queue 的最大长度</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">The server is ready to receive</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C792EA">while</span><span style="color: #D6DEEB"> </span><span style="color: #FF5874">True</span><span style="color: #D6DEEB">:</span></span>
<span><span style="color: #D6DEEB">    connectionSocket, addr </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> serverSocket.</span><span style="color: #B2CCD6">accept</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    sentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> connectionSocket.</span><span style="color: #B2CCD6">recv</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1024</span><span style="color: #D6DEEB">).</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    capitalizedSentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> sentence.</span><span style="color: #B2CCD6">upper</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    connectionSocket.</span><span style="color: #B2CCD6">send</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">capitalizedSentence.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">    connectionSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">serverSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_STREAM</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">bind</span><span style="color: #403F53">(</span><span style="color: #4876D6">(</span><span style="color: #111111">&#39;&#39;</span><span style="color: #4876D6">, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">listen</span><span style="color: #403F53">(</span><span style="color: #AA0982">1</span><span style="color: #403F53">) </span><span style="color: #989FB1"># 1 是 connection queue 的最大长度</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">The server is ready to receive</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #994CC3">while</span><span style="color: #403F53"> </span><span style="color: #BC5454">True</span><span style="color: #403F53">:</span></span>
<span><span style="color: #403F53">    connectionSocket, addr </span><span style="color: #994CC3">=</span><span style="color: #403F53"> serverSocket.</span><span style="color: #0C969B">accept</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    sentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> connectionSocket.</span><span style="color: #0C969B">recv</span><span style="color: #403F53">(</span><span style="color: #AA0982">1024</span><span style="color: #403F53">).</span><span style="color: #0C969B">decode</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    capitalizedSentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> sentence.</span><span style="color: #0C969B">upper</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    connectionSocket.</span><span style="color: #0C969B">send</span><span style="color: #403F53">(</span><span style="color: #4876D6">capitalizedSentence.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">    connectionSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig2.8">
<p>p103, Figure 2.8: General format of an HTTP request message <a href="#user-content-fnref-fig2.8" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig2.9">
<p>p104, Figure 2.9: General format of an HTTP response message <a href="#user-content-fnref-fig2.9" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-smtp-example">
<p><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#SMTP_transport_example">SMTP transport example - Simple Mail Transfer Protocol - Wikipedia</a> <a href="#user-content-fnref-smtp-example" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-2.21">
<p>p133, Figure 2.21: DNS message format <a href="#user-content-fnref-fig-2.21" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-seed-choking">
<p><a href="https://www.libtorrent.org/reference-Settings.html#seed_choking_algorithm_t">seed_choking_algorithm - libtorrent</a> <a href="#user-content-fnref-seed-choking" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-datagram">
<p>在书中 1.5 节<span class="mojikumi-line-end">，</span>transport-layer packet 被称作 <span class="mojikumi">“</span>segment<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>network-layer packet 被称作 <span class="mojikumi">“</span>datagram<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>但实际上 UDP 的 <span class="mojikumi">“</span>D<span class="mojikumi">”</span> 就是 <span class="mojikumi">“</span>datagram<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>而 TCP 的 packet 才叫 <span class="mojikumi">“</span>segment<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>ref: <a href="https://stackoverflow.com/questions/11636405/definition-of-network-units-fragment-segment-packet-frame-datagram">networking - Definition of Network Units: Fragment, Segment, Packet, Frame, Datagram - Stack Overflow</a> <a href="#user-content-fnref-datagram" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第五章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/04/ddpp-5</link>
            <guid>https://ouuan.moe/post/2023/04/ddpp-5</guid>
            <pubDate>Sat, 29 Apr 2023 16:24:36 GMT</pubDate>
            <description><![CDATA[<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第五章 <span class="mojikumi">“</span>Verilog Hardware Description Language<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>也就是初学 (System)Verilog 的笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第五章 <span class="mojikumi">“</span>Verilog Hardware Description Language<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>也就是初学 (System)Verilog 的笔记<span class="mojikumi-line-end">。</span></p>

<p>本来想寒假学<span class="mojikumi-line-end">，</span>结果还是拖到了数字逻辑实验开始用 FPGA<span class="mojikumi-line-end">，</span>只不过手上有模块了再来学也挺好的<span class="mojikumi-line-end">。</span></p>
<p>虽然从创建到发布拖了很久<span class="mojikumi-line-end">，</span>但其实大部分内容都是新建文件后一周内写的<span class="mojikumi-line-end">，</span>只是后来感觉学的东西已经差不多能应付上课了<span class="mojikumi-line-end">，</span>就一直咕着没把最后一点学完 &#x26; 写完<span class="mojikumi-line-start">（</span></p>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h2 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>SystemVerilog</span></h2><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>DDPP5 中讲的是 Verilog 而不是 SystemVerilog<span class="mojikumi-line-end">，</span>我根据在其他地方找到的一些资料补充了少量 SystemVerilog 的内容<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h2 id="neovim-配置" class="heading"><a href="#neovim-配置" class="heading-anchor" aria-label="章节： neovim 配置" tabindex="-1"></a><span>neovim 配置</span></h2>
<p>用的是老师推荐的 Vivado 2019.2 WebPack<span class="mojikumi-line-end">，</span>而它自带的文本编辑器多少有点拉胯<span class="mojikumi-line-end">，</span>所以研究了一下配 neovim<span class="mojikumi-line-end">。</span></p>
<p>最后选择的是 <a href="https://github.com/vivekmalneedi/veridian">veridian</a> + 通过 <a href="https://github.com/jose-elias-alvarez/null-ls.nvim">null-ls</a> 使用 Vivado 的 <code>xvlog</code><span class="mojikumi-line-end">。</span>一开始我还看 veridian 没在维护而且 star 少<span class="mojikumi-line-start">（</span><s>但它好歹最后更新是在 2021<span class="mojikumi-line-end">，</span>Vivado 还在用 2019</s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>先试了另外几个<span class="mojikumi-line-end">，</span>后来发现<span class="mojikumi-line-end">，</span>不说别的<span class="mojikumi-line-end">，</span>只有 veridian 支持 hover<span class="mojikumi-line-end">。</span>同时使用 <code>xvlog</code> 是觉得还是 Vivado 自带的 lint 比较靠谱<span class="mojikumi-line-end">。</span></p>
<p>veridian 就是用 <a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#veridian">lspconfig</a><span class="mojikumi-line-end">，</span>记得同时装 <a href="https://github.com/chipsalliance/verible">verible</a> 才能使用某些 feature<span class="mojikumi-line-start">（</span>在 lspconfig 里只需启用 veridian<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>可以把 <code>root_dir</code> 设为 <code>util<wbr>.<wbr>root_pattern<wbr>('*.<wbr>xpr<wbr>', '.<wbr>git<wbr>')</code> 来检测 Vivado 项目的根目录<span class="mojikumi-line-end">。</span></p>
<p>null-ls 的配置如下<span class="mojikumi-line-end">，</span>因为 <code>xvlog</code> 实际上是一个不能禁用文件输出的 simulator<span class="mojikumi-line-end">，</span>采取了一些措施来防止它到处倒垃圾<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="lua 代码块" data-v-ad49d235>lua</h3><ile-root id="ile-15"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-15--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">utils</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls.utils</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">helpers</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls.helpers</span><span style="color: #D9F5DD">&quot;</span></span>
<span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">xvlog_sv</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">name</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">method</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.methods.DIAGNOSTICS,</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">filetypes</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">systemverilog</span><span style="color: #D9F5DD">&quot; </span><span style="color: #D6DEEB">},</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">generator</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">generator</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">command</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">bwrap</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #637777">-- only permit writing in /tmp</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">args</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--ro-bind</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--bind</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/tmp/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/tmp/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--dev</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/dev</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/home/ouuan/Xilinx/Vivado/2019.2/bin/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--sv</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">$FILENAME</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    },</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">cwd</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">function</span><span style="color: #D9F5DD">(</span><span style="color: #7FDBCA">params</span><span style="color: #D9F5DD">)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #637777">-- output in /tmp</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">dir</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">/tmp/xvlog/</span><span style="color: #D9F5DD">&#39; </span><span style="color: #7FDBCA">..</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">params</span><span style="color: #D6DEEB">.bufnr</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C5E478">vim</span><span style="color: #D6DEEB">.fn.</span><span style="color: #C5E478">mkdir</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">dir</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">p</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">return</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">dir</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">end</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">to_temp_file</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">true</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">format</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">line</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">check_exit_code</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB"> },</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">on_output</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">helpers</span><span style="color: #D6DEEB">.diagnostics.</span><span style="color: #C5E478">from_patterns</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">      {</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">pattern</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">(.+): %[.+%] (.+) %[.+:(%d+)%]</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">groups</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">severity</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">message</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">row</span><span style="color: #D9F5DD">&quot; </span><span style="color: #D6DEEB">},</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">overrides</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">          </span><span style="color: #C5E478">severities</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">ERROR</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">WARNING</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">INFO</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">          },</span></span>
<span><span style="color: #D6DEEB">        },</span></span>
<span><span style="color: #D6DEEB">      },</span></span>
<span><span style="color: #D6DEEB">    },</span></span>
<span><span style="color: #D6DEEB">  },</span></span>
<span><span style="color: #D6DEEB">}</span></span>
<span></span>
<span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">setup</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">sources</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">xvlog_sv</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">  },</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">root_dir</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">utils</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">root_pattern</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">*.xpr</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">.git</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">}</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">utils</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls.utils</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">helpers</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls.helpers</span><span style="color: #111111">&quot;</span></span>
<span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">xvlog_sv</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">name</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">method</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.methods.DIAGNOSTICS,</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">filetypes</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #111111">&quot;</span><span style="color: #C96765">systemverilog</span><span style="color: #111111">&quot; </span><span style="color: #403F53">},</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">generator</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.</span><span style="color: #4876D6">generator</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">command</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">bwrap</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #989FB1">-- only permit writing in /tmp</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">args</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--ro-bind</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--bind</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/tmp/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/tmp/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--dev</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/dev</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/home/ouuan/Xilinx/Vivado/2019.2/bin/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--sv</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">$FILENAME</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    },</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">cwd</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #994CC3">function</span><span style="color: #111111">(</span><span style="color: #0C969B">params</span><span style="color: #111111">)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #989FB1">-- output in /tmp</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">dir</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">/tmp/xvlog/</span><span style="color: #111111">&#39; </span><span style="color: #0C969B">..</span><span style="color: #403F53"> </span><span style="color: #4876D6">params</span><span style="color: #403F53">.bufnr</span></span>
<span><span style="color: #403F53">      </span><span style="color: #4876D6">vim</span><span style="color: #403F53">.fn.</span><span style="color: #4876D6">mkdir</span><span style="color: #403F53">(</span><span style="color: #4876D6">dir</span><span style="color: #403F53">, </span><span style="color: #111111">&#39;</span><span style="color: #C96765">p</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">return</span><span style="color: #403F53"> </span><span style="color: #4876D6">dir</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">end</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">to_temp_file</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">true</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">format</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">line</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">check_exit_code</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #AA0982">0</span><span style="color: #403F53">, </span><span style="color: #AA0982">1</span><span style="color: #403F53"> },</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">on_output</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">helpers</span><span style="color: #403F53">.diagnostics.</span><span style="color: #4876D6">from_patterns</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">      {</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">pattern</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">(.+): %[.+%] (.+) %[.+:(%d+)%]</span><span style="color: #111111">&#39;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">groups</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #111111">&quot;</span><span style="color: #C96765">severity</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">message</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">row</span><span style="color: #111111">&quot; </span><span style="color: #403F53">},</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">overrides</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">          </span><span style="color: #4876D6">severities</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">ERROR</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">WARNING</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">2</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">INFO</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">3</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">          },</span></span>
<span><span style="color: #403F53">        },</span></span>
<span><span style="color: #403F53">      },</span></span>
<span><span style="color: #403F53">    },</span></span>
<span><span style="color: #403F53">  },</span></span>
<span><span style="color: #403F53">}</span></span>
<span></span>
<span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.</span><span style="color: #4876D6">setup</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">sources</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">xvlog_sv</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">  },</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">root_dir</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">utils</span><span style="color: #403F53">.</span><span style="color: #4876D6">root_pattern</span><span style="color: #403F53">(</span><span style="color: #111111">&quot;</span><span style="color: #C96765">*.xpr</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">.git</span><span style="color: #111111">&quot;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">}</span></span></code></pre></div></section>
<p>另外可以用 <a href="https://github.com/amal-khailtash/vim-xdc-syntax">vim-xdc-syntax</a> 添加管脚约束文件的高亮<span class="mojikumi-line-end">。</span></p>
<p>Vivado 的 custom text editor 使用下面的脚本<span class="mojikumi-line-end">。</span>是针对 <a href="https://i3wm.org/">i3</a> 配的<span class="mojikumi-line-end">，</span>给 konsole 设了 name 参数<span class="mojikumi-line-end">，</span>i3 设成 <code>assign<wbr> [<wbr>instance<wbr>="<wbr>konsole<wbr>"]</code><span class="mojikumi-line-start">（</span><code>instance</code> 而非 <code>class</code><span class="mojikumi-line-end">）</span>就可以不把这个 konsole 挪到其他 konsole 所在的 workspace<span class="mojikumi-line-end">，</span>并且可以在打开新文件时 focus 过去<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="bash 代码块" data-v-ad49d235>bash</h3><ile-root id="ile-16"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-16--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #637777">#!/bin/bash</span></span>
<span></span>
<span><span style="color: #637777"># vivado-nvim.sh &quot;[file name]&quot; [line number]</span></span>
<span></span>
<span><span style="color: #C5E478">set</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">-euo</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">pipefail</span></span>
<span></span>
<span><span style="color: #C5E478">unset</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">LD_LIBRARY_PATH</span></span>
<span></span>
<span><span style="color: #C5E478">NVIM_LISTEN_ADDRESS</span><span style="color: #C792EA">=</span><span style="color: #ECC48D">/tmp/vivado-nvim.pipe</span></span>
<span></span>
<span><span style="color: #C792EA">if</span><span style="color: #D6DEEB"> [[ </span><span style="color: #C792EA">!</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">-e</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> ]]; </span><span style="color: #C792EA">then</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">exec</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">konsole</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--name</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">vivado-nvim</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">-e</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--listen</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #D7DBE0">$1</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">+</span><span style="color: #D7DBE0">$2</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">else</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--server</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--remote</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #D7DBE0">$1</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--server</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--remote-send</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">:</span><span style="color: #D7DBE0">$2</span><span style="color: #ECC48D">&lt;CR&gt;</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">i3-msg</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">[instance=&quot;vivado-nvim&quot;] focus</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #C792EA">fi</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #989FB1">#!/bin/bash</span></span>
<span></span>
<span><span style="color: #989FB1"># vivado-nvim.sh &quot;[file name]&quot; [line number]</span></span>
<span></span>
<span><span style="color: #4876D6">set</span><span style="color: #403F53"> </span><span style="color: #4876D6">-euo</span><span style="color: #403F53"> </span><span style="color: #4876D6">pipefail</span></span>
<span></span>
<span><span style="color: #4876D6">unset</span><span style="color: #403F53"> </span><span style="color: #4876D6">LD_LIBRARY_PATH</span></span>
<span></span>
<span><span style="color: #4876D6">NVIM_LISTEN_ADDRESS</span><span style="color: #994CC3">=</span><span style="color: #4876D6">/tmp/vivado-nvim.pipe</span></span>
<span></span>
<span><span style="color: #994CC3">if</span><span style="color: #403F53"> [[ </span><span style="color: #994CC3">!</span><span style="color: #403F53"> </span><span style="color: #994CC3">-e</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> ]]; </span><span style="color: #994CC3">then</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">exec</span><span style="color: #403F53"> </span><span style="color: #4876D6">konsole</span><span style="color: #403F53"> </span><span style="color: #4876D6">--name</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">vivado-nvim</span><span style="color: #111111">&quot;</span><span style="color: #403F53"> </span><span style="color: #4876D6">-e</span><span style="color: #403F53"> </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--listen</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #403F53">$1</span><span style="color: #111111">&quot;</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">+</span><span style="color: #403F53">$2</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">else</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--server</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #4876D6">--remote</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #403F53">$1</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--server</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #4876D6">--remote-send</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">:</span><span style="color: #403F53">$2</span><span style="color: #C96765">&lt;CR&gt;</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">i3-msg</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">[instance=&quot;vivado-nvim&quot;] focus</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #994CC3">fi</span></span></code></pre></div></section>
<h2 id="基础语法" class="heading"><a href="#基础语法" class="heading-anchor" aria-label="章节： 基础语法" tabindex="-1"></a><span>基础语法</span></h2>
<h3 id="module" class="heading"><a href="#module" class="heading-anchor" aria-label="章节： module" tabindex="-1"></a><span>module</span></h3>
<p>Verilog 以 module 为基本单位<span class="mojikumi-line-start">（</span>和前端的 component 有点类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-17"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-17--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> inhibit (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  invin,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> out </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> in </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">invin;</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> inhibit (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  invin,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> out </span><span style="color: #994CC3">=</span><span style="color: #403F53"> in </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">invin;</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>convention 是每个文件只写一个 module<span class="mojikumi-line-end">。</span></p>
<h3 id="signal-net-variable" class="heading"><a href="#signal-net-variable" class="heading-anchor" aria-label="章节： signal (net &#x26; variable)" tabindex="-1"></a><span>signal (net &#x26; variable)</span></h3>
<p>一个 1-bit 的 signal 有四种取值<span class="mojikumi-line-end">：</span>0<span class="mojikumi-line-end">、</span>1<span class="mojikumi-line-end">、</span>x<span class="mojikumi-line-start">（</span>未知<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>z<span class="mojikumi-line-start">（</span>高阻抗<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>位运算<span class="mojikumi-line-end">：</span><code>&#x26;</code><span class="mojikumi-line-end">、</span><code>|</code><span class="mojikumi-line-end">、</span><code>~</code><span class="mojikumi-line-end">、</span><code>^</code><span class="mojikumi-line-end">、</span><code>~^</code>/<code>^~</code><span class="mojikumi-line-end">。</span></p>
<p>signal 有两大类<span class="mojikumi-line-end">：</span><i>net</i> 和 <i>variable</i><span class="mojikumi-line-end">：</span></p>
<ul>
<li>net 表示线路<span class="mojikumi-line-end">，</span>一般是 <code>wire</code><span class="mojikumi-line-end">，</span>还可以是 <code>supply0</code><span class="mojikumi-line-end">、</span><code>supply1</code> 等<span class="mojikumi-line-start">（</span>我用 <code>supply1</code> 的时候出现了神秘的问题<span class="mojikumi-line-end">，</span>没细究<span class="mojikumi-line-end">，</span>反正用恒为 1 的 <code>logic</code> 也差不多<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>variable 用于 procedural statement 中<span class="mojikumi-line-end">，</span>不一定对应到物理上的线路<span class="mojikumi-line-end">，</span>可以是 <code>reg</code> 或者 <code>integer</code><span class="mojikumi-line-end">。</span>其中 <code>reg</code> 就是变量的意思<span class="mojikumi-line-start">（</span>名字取得不太好<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>表示单个 bit 或者 vector<span class="mojikumi-line-end">，</span>与基于 flip-flop 的寄存器无关<span class="mojikumi-line-end">。</span><code>integer</code> 是有符号整型<span class="mojikumi-line-end">，</span>一般不用来存储数据或信号<span class="mojikumi-line-end">，</span>而是用于 for 循环之类的地方<span class="mojikumi-line-end">。</span></li>
</ul>
<p>input 只能是 net<span class="mojikumi-line-end">，</span>而 output 可以是 net 或 <code>reg</code><span class="mojikumi-line-end">。</span>不写 <code>wire</code> / <code>reg</code> 时默认是 <code>wire</code><span class="mojikumi-line-end">。</span></p>
<p>在 SystemVerilog 中推荐用 <code>logic</code> 来代替 <code>reg</code><span class="mojikumi-line-end">。</span></p>
<h3 id="数字字面量-parameter" class="heading"><a href="#数字字面量-parameter" class="heading-anchor" aria-label="章节： 数字字面量 &#x26; parameter" tabindex="-1"></a><span>数字字面量 &#x26; parameter</span></h3>
<p>直接写十进制数会得到一个 signed number<span class="mojikumi-line-end">。</span></p>
<p>可以指定位数和进制<span class="mojikumi-line-end">：</span><code>1'b0</code> 是 1 bit 的 0<span class="mojikumi-line-end">，</span><code>4'ha</code> 是 4 bit 的 10<span class="mojikumi-line-start">（</span>十六进制的 A<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span><code>8<wbr>'<wbr>b01x0z1x1</code> 的一些 bit 是未知 / 高阻抗<span class="mojikumi-line-end">。</span>如果后面写的值的位数超过前面指定的位数<span class="mojikumi-line-end">，</span>高位会被扔掉<span class="mojikumi-line-end">，</span>如果少了则会高位补零<span class="mojikumi-line-start">（</span>或者补 <code>x</code> 或 <code>z</code><span class="mojikumi-line-end">，</span>如果最高位是 <code>x</code> 或 <code>z</code><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这样得到的会是一个 unsigned vector<span class="mojikumi-line-end">，</span>可以加上 <code>s</code> 得到 signed vector<span class="mojikumi-line-end">：</span><code>4'sb1101</code><span class="mojikumi-line-end">。</span></p>
<p><code>parameter</code> 用来设置带默认值的参数<span class="mojikumi-line-end">：</span><code>parameter SIZE = 32, MSB = SIZE - 1, LSB = 0</code><span class="mojikumi-line-end">，</span><code>parameter ESC = 7'h1b</code><span class="mojikumi">。</span> <code>parameter</code> 一般用作常量<span class="mojikumi-line-end">，</span>而在 <a href="#structural-model">instance statement</a> 中可以被修改<span class="mojikumi-line-end">。</span></p>
<h3 id="vector-算术运算" class="heading"><a href="#vector-算术运算" class="heading-anchor" aria-label="章节： vector &#x26; 算术运算" tabindex="-1"></a><span>vector &#x26; 算术运算</span></h3>
<p>多个 bit 可以组成一个 vector<span class="mojikumi-line-end">，</span>net<span class="mojikumi-line-end">、</span><code>reg</code><span class="mojikumi-line-end">、</span><code>parameter</code> 都可以是 vector<span class="mojikumi-line-end">。</span></p>
<p>vector 的下标可以是左边<span class="mojikumi-line-start">（</span>MSB<span class="mojikumi-line-end">）</span>大<span class="mojikumi-line-start">（</span><code>reg [7:0] byte1, byte2</code><span class="mojikumi-line-end">）</span>也可以是右边<span class="mojikumi-line-start">（</span>LSB<span class="mojikumi-line-end">）</span>大<span class="mojikumi-line-start">（</span><code>reg [1:16] bus</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>起止的下标都可以指定<span class="mojikumi-line-end">。</span>左边的下标对应字面量中左边的 bit<span class="mojikumi-line-end">。</span><code>byte1[7]</code> 是 <code>byte1</code> 最左边的 bit<span class="mojikumi-line-end">，</span><code>bus[16]</code> 是 <code>bus</code> 最右边的 bit<span class="mojikumi-line-end">。</span><code>bus[1:8]</code> 和 <code>bus[9:16]</code> 是 <code>bus</code> 的左右两边<span class="mojikumi-line-end">。</span>读取越界会读到 <code>x</code><span class="mojikumi-line-end">，</span>写入会忽略越界的部分<span class="mojikumi-line-end">。</span></p>
<p><code>{}</code> 用来连接 vector<span class="mojikumi-line-end">，</span>例如 <code>{2'b10, 2'b01}</code> 等于 <code>4'b1001</code><span class="mojikumi-line-end">，</span><code>{2{byte1}, 2{byte2}}</code> 等于 <code>{byte1, byte1, byte2, byte2}</code><span class="mojikumi-line-end">。</span></p>
<p>vector 可以按位进行位运算<span class="mojikumi-line-end">，</span>在二元运算中短的会高位补零后进行运算<span class="mojikumi-line-end">。</span></p>
<p>二元位运算符也有一元的版本<span class="mojikumi-line-end">，</span>表示将 vector 内所有 bit 运算在一起得到 1-bit 的结果<span class="mojikumi-line-end">，</span>例如 <code>&#x26;byte1</code> 是 <code>1'b1</code> 表示 <code>byte1</code> 的所有 bit 都是 1<span class="mojikumi-line-end">。</span></p>
<p>vector 之间进行赋值时会截低位或高位补零<span class="mojikumi-line-end">。</span></p>
<p>vector 之间可以进行算术<span class="mojikumi-line-end">：</span><code>+</code><span class="mojikumi-line-end">、</span><code>-</code><span class="mojikumi-line-end">、</span><code>*</code><span class="mojikumi-line-end">、</span><code>/</code><span class="mojikumi-line-end">、</span><code>%</code><span class="mojikumi-line-end">、</span><code>**</code><span class="mojikumi-line-end">、</span><code>&#x3C;&#x3C;</code><span class="mojikumi-line-end">、</span><code>>></code><span class="mojikumi-line-end">、</span><code>&#x3C;&#x3C;&#x3C;</code><span class="mojikumi-line-start">（</span>算术左移<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span><code>>>></code><span class="mojikumi-line-start">（</span>算术右移<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>算术的高位和低位基于左右而与下标大小无关<span class="mojikumi-line-end">。</span></p>
<p>除法和取模在某些情况下可能不 synthesizable<span class="mojikumi-line-end">，</span>除非除数是 2 的次幂<span class="mojikumi-line-end">。</span>synthesizable 时也可能会生成除法器的电路而非常昂贵<span class="mojikumi-line-end">。</span></p>
<p>逻辑移位得到 unsigned<span class="mojikumi-line-end">，</span>算术移位保持原来的 signed/unsigned<span class="mojikumi-line-end">，</span>算术右移高位补符号位<span class="mojikumi-line-end">。</span>二元算术中只要有一个是 unsigned 就会将另一个转成 unsigned 再计算<span class="mojikumi-line-end">。</span>signal 可以声明为 signed<span class="mojikumi-line-end">：</span><code>reg signed [15:0] a</code><span class="mojikumi-line-end">。</span></p>
<h3 id="array" class="heading"><a href="#array" class="heading-anchor" aria-label="章节： array" tabindex="-1"></a><span>array</span></h3>
<p>array 是相同类型的一列东西<span class="mojikumi-line-start">（</span>一列 <code>reg</code><span class="mojikumi-line-end">、</span><code>integer</code><span class="mojikumi-line-end">、</span><code>wire</code> 等<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>array 也可以指定下标范围<span class="mojikumi-line-end">，</span>而与 vector 相反<span class="mojikumi-line-end">，</span>声明 array 时框放在右边<span class="mojikumi-line-end">，</span>例如 <code>reg<wbr> [<wbr>7<wbr>:<wbr>0<wbr>] <wbr>byte1<wbr>, <wbr>mem1<wbr>[<wbr>0<wbr>:<wbr>255<wbr>]</code> 表示一个 8-bit <code>reg</code> 和一个由 256 个 8-bit <code>reg</code> 组成的 array<span class="mojikumi-line-end">。</span></p>
<p>array 可以嵌套为高维数组<span class="mojikumi-line-end">，</span>而访问只能访问单个下标<span class="mojikumi-line-end">，</span>不能像 vector 一样一下访问一个区间<span class="mojikumi-line-end">。</span>总之除了能指定下标范围都和 C 的数组差不多<span class="mojikumi-line-end">。</span></p>
<h3 id="逻辑运算" class="heading"><a href="#逻辑运算" class="heading-anchor" aria-label="章节： 逻辑运算" tabindex="-1"></a><span>逻辑运算</span></h3>
<p>含 <code>x</code> / <code>z</code> 或者全 0 的 vector<span class="mojikumi-line-start">（</span>或者 <code>1'b0</code><span class="mojikumi-line-end">）</span>是 false<span class="mojikumi-line-end">，</span>不含 <code>x</code> / <code>z</code> 且含 1 的 vector<span class="mojikumi-line-start">（</span>或者 <code>1'b1</code><span class="mojikumi-line-end">）</span>是 true<span class="mojikumi-line-end">。</span>false 的值是 <code>1'b0</code><span class="mojikumi-line-end">，</span>true 的值是 <code>1'b1</code><span class="mojikumi-line-end">。</span></p>
<p>逻辑运算符和比较运算符和 C 是一样的<span class="mojikumi-line-end">。</span>比较时如果一侧是 unsigned 则会按 unsigned 比较<span class="mojikumi-line-end">。</span>比较运算在电路中可能需要比较器<span class="mojikumi-line-start">（</span>尤其是两侧都不是常量时<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>所以可能是昂贵的<span class="mojikumi-line-end">。</span></p>
<p>三目运算符 <code>?:</code> 和 C 是一样的<span class="mojikumi-line-end">。</span></p>
<p>在 test bench 中<span class="mojikumi-line-end">，</span>带 <code>x</code> / <code>z</code> 的值在比较时结果为 <code>x</code><span class="mojikumi-line-start">（</span>用在条件判断时即为 false<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>可以使用 <code>===</code> / <code>!==</code> 来逐位比较<span class="mojikumi-line-start">（</span><code>x === x</code>, <code>z === z</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但它们不能用在 synthesizable module 中<span class="mojikumi-line-end">。</span></p>
<h3 id="compiler-directives" class="heading"><a href="#compiler-directives" class="heading-anchor" aria-label="章节： compiler directives" tabindex="-1"></a><span>compiler directives</span></h3>
<p><code>`include</code> 和 <code>`define</code><span class="mojikumi-line-end">，</span>和 C 是一样的<span class="mojikumi-line-end">。</span></p>
<h2 id="model" class="heading"><a href="#model" class="heading-anchor" aria-label="章节： model" tabindex="-1"></a><span>model</span></h2>
<h3 id="structural-model" class="heading"><a href="#structural-model" class="heading-anchor" aria-label="章节： structural model" tabindex="-1"></a><span>structural model</span></h3>
<p>可以使用 <i>instance statement</i> 来写 structural model<span class="mojikumi-line-end">，</span>说白了就是将其他 module 实例化并连线<span class="mojikumi-line-end">。</span></p>
<p>built-in gate 有<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>and</code><span class="mojikumi-line-end">、</span><code>nand</code><span class="mojikumi-line-end">、</span><code>or</code><span class="mojikumi-line-end">、</span><code>nor</code><span class="mojikumi-line-end">、</span><code>xor</code><span class="mojikumi-line-end">、</span><code>xnor</code><span class="mojikumi-line-end">，</span>接受任意个输入</li>
<li><code>buf</code><span class="mojikumi-line-end">、</span><code>not</code><span class="mojikumi-line-end">，</span>接受单个输入</li>
<li><code>bufif0</code><span class="mojikumi-line-end">、</span><code>bufif1</code><span class="mojikumi-line-end">、</span><code>notif0</code><span class="mojikumi-line-end">、</span><code>notif1</code><span class="mojikumi-line-end">，</span>三态门<span class="mojikumi-line-end">，</span>接受一个 data input 和一个 enable input<span class="mojikumi-line-start">（</span>data input 在前<span class="mojikumi-line-end">，</span>enable input 在后<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>if 表示 enable 的 active level</li>
</ul>
<p>使用 built-in gate 的例子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>built-in gate 的 port 没有名字<span class="mojikumi-line-end">，</span>只能通过顺序指定<span class="mojikumi-line-end">，</span>output 在前<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-18"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-18--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> inhibit (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  invin,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> notinvin;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U1</span><span style="color: #D6DEEB"> (notinvin, invin);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">and</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U2</span><span style="color: #D6DEEB"> (out, in, notinvin);</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> inhibit (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  invin,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> notinvin;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U1</span><span style="color: #403F53"> (notinvin, invin);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">and</span><span style="color: #403F53"> </span><span style="color: #4876D6">U2</span><span style="color: #403F53"> (out, in, notinvin);</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>使用其他 module 的例子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>可以指定每个 port 的名字从而不依赖于顺序<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-19"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-19--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> silly_xor (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in1,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in2,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> inh1, inh2, notinh2, notout;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U1 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(inh1),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(in1),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(in2)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U2 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(inh2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(in2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(in1)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U3</span><span style="color: #D6DEEB"> (notinh2, inh2);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U4 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(notout),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(notinh2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(inh1)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U5</span><span style="color: #D6DEEB"> (out, notout);</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> silly_xor (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in1,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in2,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> inh1, inh2, notinh2, notout;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U1 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(inh1),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(in1),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(in2)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U2 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(inh2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(in2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(in1)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U3</span><span style="color: #403F53"> (notinh2, inh2);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U4 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(notout),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(notinh2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(inh1)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U5</span><span style="color: #403F53"> (out, notout);</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>修改 <code>parameter</code> 的例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-20"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-20--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> maj </span><span style="color: #7FDBCA">#</span><span style="color: #D6DEEB">(</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">WID</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span></span>
<span><span style="color: #D6DEEB">) (</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] out,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i0,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i1,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i2</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> out </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> i0 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i1 </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> i0 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i2 </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> i1 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i2;</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> maj </span><span style="color: #0C969B">#</span><span style="color: #403F53">(</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">WID</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span></span>
<span><span style="color: #403F53">) (</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] out,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i0,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i1,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i2</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> out </span><span style="color: #994CC3">=</span><span style="color: #403F53"> i0 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i1 </span><span style="color: #994CC3">|</span><span style="color: #403F53"> i0 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i2 </span><span style="color: #994CC3">|</span><span style="color: #403F53"> i1 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i2;</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>然后就可以 <code>maj #(8) U1 (.out(W), .i0(X), .i1(Y), .i2(Z))</code> 或者 <code>maj #(.WID(8)) U1 (.out(W), .i0(X), .i1(Y), .i2(Z))</code> 了<span class="mojikumi-line-end">。</span></p>
<p>不指定 <code>parameter</code> 时会使用其默认值<span class="mojikumi-line-end">，</span><code>parameter</code> 只能在 instance statement 也就是 structural model 中被修改<span class="mojikumi-line-end">，</span>在其他类型的 model 中只能使用默认值<span class="mojikumi-line-end">。</span></p>
<p>可以使用 <code>generate</code> block<span class="mojikumi-line-end">，</span>作用类似于 <code>v-for</code><span class="mojikumi-line-end">、</span><code>v-if</code><span class="mojikumi-line-end">，</span>里面可以用 <code>for</code><span class="mojikumi-line-start">（</span>循环变量需要是 <code>genvar</code><span class="mojikumi">）</span><span class="mojikumi-line-end">、</span><code>if</code><span class="mojikumi-line-end">、</span><code>case</code><span class="mojikumi-line-start">（</span>被判断的要是 parameter<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-21"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-21--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">genvar</span><span style="color: #D6DEEB"> i;</span></span>
<span><span style="color: #C792EA">generate</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">for</span><span style="color: #D6DEEB"> (i </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">; i </span><span style="color: #C792EA">&lt;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">; i </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> i </span><span style="color: #C792EA">+</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">) </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">half_adder</span><span style="color: #D6DEEB"> u0 (a[i], b[i], sum[i], cout[i]);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endgenerate</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">genvar</span><span style="color: #403F53"> i;</span></span>
<span><span style="color: #994CC3">generate</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">for</span><span style="color: #403F53"> (i </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">; i </span><span style="color: #994CC3">&lt;</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">; i </span><span style="color: #994CC3">=</span><span style="color: #403F53"> i </span><span style="color: #994CC3">+</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">) </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">half_adder</span><span style="color: #403F53"> u0 (a[i], b[i], sum[i], cout[i]);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endgenerate</span></span></code></pre></div></section>
<h3 id="dataflow-model" class="heading"><a href="#dataflow-model" class="heading-anchor" aria-label="章节： dataflow model" tabindex="-1"></a><span>dataflow model</span></h3>
<p>可以使用 <i>continuous-assignment statement</i> 来写 dataflow model<span class="mojikumi-line-end">，</span>也就是 <code>assign</code><span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-22"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-22--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> is_prime (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">F</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">?</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">^</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">])) </span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> (</span><span style="color: #C792EA">~</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">]));</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> is_prime (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #4876D6">N</span><span style="color: #403F53">,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> </span><span style="color: #4876D6">F</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">3</span><span style="color: #403F53">] </span><span style="color: #994CC3">?</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">1</span><span style="color: #403F53">] </span><span style="color: #994CC3">^</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">2</span><span style="color: #403F53">])) </span><span style="color: #994CC3">:</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #994CC3">|</span><span style="color: #403F53"> (</span><span style="color: #994CC3">~</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">2</span><span style="color: #403F53">] </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">1</span><span style="color: #403F53">]));</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<h3 id="behavioral-model" class="heading"><a href="#behavioral-model" class="heading-anchor" aria-label="章节： behavioral model" tabindex="-1"></a><span>behavioral model</span></h3>
<h4 id="always-begin-end-block" class="heading"><a href="#always-begin-end-block" class="heading-anchor" aria-label="章节： always &#x26; begin-end block" tabindex="-1"></a><span><code>always</code> &#x26; <code>begin</code>-<code>end</code> block</span></h4>
<p><code>always</code> statement 用来执行一句 procedural statement<span class="mojikumi-line-end">，</span>begin-end block 用来将若干 procedural statement 合成一句<span class="mojikumi-line-end">。</span>begin-end block 里的语句是顺序执行的<span class="mojikumi-line-end">，</span>而 <code>always</code> 是和 module 中的其他语句一起并行执行的<span class="mojikumi-line-end">。</span></p>
<p>在 SystemVerilog 中<span class="mojikumi-line-end">，</span>推荐使用 <code>always_comb</code><span class="mojikumi-line-end">、</span><code>always_ff</code><span class="mojikumi-line-end">、</span><code>always_latch</code> 来代替 <code>always</code><span class="mojikumi-line-end">，</span>分别用于组合逻辑<span class="mojikumi-line-end">、</span>ff 和 latch<span class="mojikumi-line-start">（</span>但一般不会特意去写 latch<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span><code>always_comb</code> 会检查条件判断语句没有漏情况<span class="mojikumi-line-end">，</span>避免意外生成 latch<span class="mojikumi-line-end">。</span><code>always_ff</code> 需要加形如 <code>always_ff @(posedge clk)</code> 的 sensitivity list<span class="mojikumi-line-end">。</span></p>
<p>如果 begin-end 里有 local <code>logic</code> 则需要给 block 起名字<span class="mojikumi-line-start">（</span>在 <code>begin</code> 的后面写上 <code>: name</code><span class="mojikumi-line-end">）</span>才能在 simulation 之类的地方看到可读的变量名<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h5><ile-root id="ile-23"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-23--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> alarm_circuit (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> panic,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> enable,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> exiting,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> window,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> door,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> garage,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> alarm</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">:</span><span style="color: #D6DEEB"> blk</span></span>
<span><span style="color: #C792EA">    logic</span><span style="color: #D6DEEB"> secure;</span></span>
<span><span style="color: #D6DEEB">    secure </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> window </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> door </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> garage;</span></span>
<span><span style="color: #D6DEEB">    alarm  </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> panic </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> (enable </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">exiting </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">secure);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> alarm_circuit (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> panic,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> enable,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> exiting,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> window,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> door,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> garage,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> alarm</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span><span style="color: #403F53"> </span><span style="color: #0C969B">:</span><span style="color: #403F53"> blk</span></span>
<span><span style="color: #994CC3">    logic</span><span style="color: #403F53"> secure;</span></span>
<span><span style="color: #403F53">    secure </span><span style="color: #994CC3">=</span><span style="color: #403F53"> window </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> door </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> garage;</span></span>
<span><span style="color: #403F53">    alarm  </span><span style="color: #994CC3">=</span><span style="color: #403F53"> panic </span><span style="color: #994CC3">|</span><span style="color: #403F53"> (enable </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">exiting </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">secure);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<h4 id="赋值" class="heading"><a href="#赋值" class="heading-anchor" aria-label="章节： 赋值" tabindex="-1"></a><span>赋值</span></h4>
<p>procedural statement 中有两种赋值<span class="mojikumi-line-end">，</span>blocking 的 <code>=</code> 和 non-blocking 的 <code>&#x3C;=</code><span class="mojikumi-line-end">。</span><code>=</code> 表示立即赋值<span class="mojikumi-line-end">，</span>而 <code>&#x3C;=</code> 会将赋值推迟至整个 <code>always</code> 的结尾<span class="mojikumi-line-start">（</span>右侧表达式的计算是立刻进行的<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而在 <code>always</code> 剩下的部分中左侧变量的值依然是赋值前的<span class="mojikumi-line-end">。</span></p>
<p>赋值最好遵循下面的规则<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在组合逻辑中<span class="mojikumi-line-end">，</span>只使用 <code>=</code></li>
<li>在时序逻辑中<span class="mojikumi-line-end">，</span>只使用 <code>&#x3C;=</code></li>
<li>不要在同一个 block 中混合使用两种赋值</li>
<li>不要在不同的 <code>always</code> 中对同一个变量赋值</li>
</ul>
<h4 id="if-else-语句" class="heading"><a href="#if-else-语句" class="heading-anchor" aria-label="章节： if-else 语句" tabindex="-1"></a><span><code>if</code>-<code>else</code> 语句</span></h4>
<p>和 C 的语法是一样的<span class="mojikumi-line-end">，</span>唯一的不同就是大括号变成 <code>begin</code> - <code>end</code><span class="mojikumi-line-end">。</span></p>
<h4 id="case-语句" class="heading"><a href="#case-语句" class="heading-anchor" aria-label="章节： case 语句" tabindex="-1"></a><span><code>case</code> 语句</span></h4>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h5><ile-root id="ile-24"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-24--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> prime (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] n,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> f</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">case</span><span style="color: #D6DEEB"> (n)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #F78C6C">4&#39;d2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d3</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d5</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d7</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d11</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d13</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> f </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">default:</span><span style="color: #D6DEEB"> f </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">endcase</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> prime (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] n,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> f</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">case</span><span style="color: #403F53"> (n)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #AA0982">4&#39;d2</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d3</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d5</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d7</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d11</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d13</span><span style="color: #994CC3">:</span><span style="color: #403F53"> f </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">default:</span><span style="color: #403F53"> f </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">endcase</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>虽然并非必须<span class="mojikumi-line-end">，</span>但一般来说<span class="mojikumi-line-end">，</span>选项应当是不重复且指定了宽度的字面量<span class="mojikumi-line-end">。</span></p>
<p>即使选项覆盖了所有可能<span class="mojikumi-line-end">，</span>加上一个 <code>default</code> 可以在 simulation 中正确处理带 <code>x</code> 的值<span class="mojikumi-line-end">。</span></p>
<p><code>casez</code> 是允许使用通配符 <code>?</code> 的匹配<span class="mojikumi-line-end">，</span>例如选项可以是 <code>4'b10??</code><span class="mojikumi-line-end">。</span></p>
<h4 id="循环语句" class="heading"><a href="#循环语句" class="heading-anchor" aria-label="章节： 循环语句" tabindex="-1"></a><span>循环语句</span></h4>
<p>有很多种循环语句<span class="mojikumi-line-end">，</span>但推荐使用的只有一种<span class="mojikumi-line-end">，</span>就是 <code>for (integer i = 0; i &#x3C;= 7; i = i + 1)</code><span class="mojikumi-line-end">。</span></p>
<h4 id="function-和-task" class="heading"><a href="#function-和-task" class="heading-anchor" aria-label="章节： function 和 task" tabindex="-1"></a><span>function 和 task</span></h4>
<p>function 和 task 是一段可复用的 procedural statement<span class="mojikumi-line-end">，</span>写起来和 module 差不多<span class="mojikumi-line-end">，</span>需要定义在 module 内部<span class="mojikumi-line-start">（</span>可以通过 <code>`include</code> 来在不同 module 中复用<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>function 有单个返回值<span class="mojikumi-line-start">（</span>可以在函数名的前面给返回值设置类型<span class="mojikumi-line-end">，</span>也可以省略<span class="mojikumi-line-end">，</span>默认类型是 1-bit<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但不能有 <code>output</code> / <code>inout</code> port<span class="mojikumi-line-end">，</span>而是以 function 自身的名字作为返回值的名字<span class="mojikumi-line-end">，</span>代码中需要对这个函数名进行赋值<span class="mojikumi-line-end">。</span>function 中不能设置延时<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h5><ile-root id="ile-25"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-25--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> sillier_xor (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in1,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in2,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">function</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">inhibit</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">input</span><span style="color: #D6DEEB"> in,</span><span style="color: #C5E478"> input</span><span style="color: #D6DEEB"> inv_in);</span></span>
<span><span style="color: #D6DEEB">    inhibit </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> in </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">inv_in;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endfunction</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #C792EA">    logic</span><span style="color: #D6DEEB"> inh1, inh2;</span></span>
<span><span style="color: #D6DEEB">    inh1 </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(in1, in2);</span></span>
<span><span style="color: #D6DEEB">    inh2 </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(in2, in1);</span></span>
<span><span style="color: #D6DEEB">    out  </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">inh2, inh1);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> sillier_xor (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in1,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in2,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">function</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(</span><span style="color: #4876D6">input</span><span style="color: #403F53"> in,</span><span style="color: #4876D6"> input</span><span style="color: #403F53"> inv_in);</span></span>
<span><span style="color: #403F53">    inhibit </span><span style="color: #994CC3">=</span><span style="color: #403F53"> in </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">inv_in;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endfunction</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #994CC3">    logic</span><span style="color: #403F53"> inh1, inh2;</span></span>
<span><span style="color: #403F53">    inh1 </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(in1, in2);</span></span>
<span><span style="color: #403F53">    inh2 </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(in2, in1);</span></span>
<span><span style="color: #403F53">    out  </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(</span><span style="color: #994CC3">~</span><span style="color: #403F53">inh2, inh1);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>task 没有返回值<span class="mojikumi-line-end">，</span>但可以有 <code>output</code> / <code>inout</code> port<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">（</span>用于 simulation 时<span class="mojikumi-line-end">）</span>可以设置延时<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h5><ile-root id="ile-26"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-26--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> lock_sim;</span></span>
<span></span>
<span><span style="color: #D6DEEB">  ...</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  ...</span></span>
<span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> lock_sim;</span></span>
<span></span>
<span><span style="color: #403F53">  ...</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  ...</span></span>
<span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>有一些内置的 task 和 function<span class="mojikumi-line-end">，</span>用于 simulation<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>$write</code><span class="mojikumi-line-end">：</span>和 <code>printf</code> 差不多<span class="mojikumi-line-end">。</span></li>
<li><code>$display</code><span class="mojikumi-line-end">：</span>在 <code>$write</code> 的基础上多个换行<span class="mojikumi-line-end">。</span></li>
<li><code>$monitor</code><span class="mojikumi-line-end">：</span>每次信号发生改变时都输出<span class="mojikumi-line-end">，</span>后指定的 monitor 会覆盖之前的<span class="mojikumi-line-end">。</span></li>
<li><code>$<wbr>monitoroff</code> / <code>$monitoron</code></li>
<li><code>$fflush</code><span class="mojikumi-line-end">：</span>flush 输出<span class="mojikumi-line-end">。</span></li>
<li><code>$time</code><span class="mojikumi-line-end">：</span>输出当前的 simulated time<span class="mojikumi-line-end">。</span></li>
<li><code>$random</code><span class="mojikumi-line-end">：</span>返回一个随机数<span class="mojikumi-line-end">，</span>接受种子作为参数<span class="mojikumi-line-end">，</span>不指定种子的话初次运行的种子是固定的<span class="mojikumi-line-end">。</span></li>
<li><code>$stop</code><span class="mojikumi-line-end">：</span>停止模拟<span class="mojikumi-line-end">，</span>如果传参 <code>(1)</code> 则会显示当前的 simulated time 和代码位置<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="timescale-指定延迟" class="heading"><a href="#timescale-指定延迟" class="heading-anchor" aria-label="章节： timescale &#x26; 指定延迟" tabindex="-1"></a><span>timescale &#x26; 指定延迟</span></h2>
<p><code>`timescale 1ns / 10ps</code> 指定以 1ns 作为延时的单位<span class="mojikumi-line-end">，</span>以 10ps 作为模拟的精度<span class="mojikumi-line-end">。</span></p>
<p><code>assign</code> 时可以指定延迟<span class="mojikumi-line-end">：</span><code>assign #5 a = b &#x26; c;</code></p>
<p>procedural model 中可以用 delay statement (<code>#500;</code>) 来暂停<span class="mojikumi-line-end">。</span></p>
<h2 id="simulation-test-bench" class="heading"><a href="#simulation-test-bench" class="heading-anchor" aria-label="章节： simulation (test bench)" tabindex="-1"></a><span>simulation (test bench)</span></h2>
<p>语法上和 synthesizable module 没有区别<span class="mojikumi-line-start">（</span>只不过有个 <code>initial</code><span class="mojikumi-line-end">，</span>就是只执行一遍的 <code>always</code><span class="mojikumi-line-end">，</span>一般不用于 synthesizable module<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>写起来一般是一个没有输入输出<span class="mojikumi-line-end">、</span>有一个被测试 module 的实例<span class="mojikumi-line-end">、</span>有一个 <code>initial</code> block 的 module<span class="mojikumi-line-end">，</span>看看例子就行<span class="mojikumi-line-end">。</span></p>
<p>懒得改 DDPP 上的代码了<span class="mojikumi-line-end">，</span>直接复制一份数字逻辑实验的代码<span class="mojikumi-line-start">（</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h3><ile-root id="ile-27"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-27--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #82AAFF">`timescale</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1ns</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">/</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1ps</span></span>
<span></span>
<span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> lock_sim;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> unlocked, incorrect, alert;</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">lock</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">#</span><span style="color: #D6DEEB">(</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">ADMIN_PASSWORD</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">  ) lock_inst (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">clk</span><span style="color: #D6DEEB">(clk),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">rst</span><span style="color: #D6DEEB">(rst),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">mode</span><span style="color: #D6DEEB">(mode),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">digit_input</span><span style="color: #D6DEEB">(digit_input),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">unlocked</span><span style="color: #D6DEEB">(unlocked),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">incorrect</span><span style="color: #D6DEEB">(incorrect),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">alert</span><span style="color: #D6DEEB">(alert)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">reset</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">15</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] password);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">reset</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">15</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">12</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">11</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">8</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">7</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">initial</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// set password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// correct</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #637777">// incorrect three times</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// locked</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// cannot set password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// locked</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// correct</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #4876D6">`timescale</span><span style="color: #403F53"> </span><span style="color: #AA0982">1ns</span><span style="color: #403F53"> </span><span style="color: #994CC3">/</span><span style="color: #403F53"> </span><span style="color: #AA0982">1ps</span></span>
<span></span>
<span><span style="color: #994CC3">module</span><span style="color: #403F53"> lock_sim;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> unlocked, incorrect, alert;</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">lock</span><span style="color: #403F53"> </span><span style="color: #0C969B">#</span><span style="color: #403F53">(</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">ADMIN_PASSWORD</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">  ) lock_inst (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">clk</span><span style="color: #403F53">(clk),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">rst</span><span style="color: #403F53">(rst),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">mode</span><span style="color: #403F53">(mode),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">digit_input</span><span style="color: #403F53">(digit_input),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">unlocked</span><span style="color: #403F53">(unlocked),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">incorrect</span><span style="color: #403F53">(incorrect),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">alert</span><span style="color: #403F53">(alert)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">reset</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #4876D6">input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">15</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] password);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">reset</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">15</span><span style="color: #994CC3">:</span><span style="color: #AA0982">12</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">11</span><span style="color: #994CC3">:</span><span style="color: #AA0982">8</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">7</span><span style="color: #994CC3">:</span><span style="color: #AA0982">4</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">initial</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// set password</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// correct</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #939DBB">// incorrect three times</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// locked</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// cannot set password</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// locked</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// correct</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>通过使用 <code>$display</code><span class="mojikumi-line-end">，</span>可以更直观地输出结果<span class="mojikumi-line-end">，</span>从而不需要对着波形图看<span class="mojikumi-line-end">；</span>或者自动检查结果是否正确<span class="mojikumi-line-end">，</span>在出错时输出<span class="mojikumi-line-end">。</span></p>
<p>有时可以通过文件读写来更方便地编写测试数据<span class="mojikumi-line-end">、</span>检查输出结果<span class="mojikumi-line-end">。</span></p>
<h2 id="有关-synthesize-的一些注意事项" class="heading"><a href="#有关-synthesize-的一些注意事项" class="heading-anchor" aria-label="章节： 有关 synthesize 的一些注意事项" tabindex="-1"></a><span>有关 synthesize 的一些注意事项</span></h2>
<ul>
<li>长串的 <code>if</code><span class="mojikumi-line-end">、</span><code>else if</code><span class="mojikumi-line-end">、</span><code>else if</code>……可能导致电路也有一长串<span class="mojikumi-line-end">，</span>使用 <code>case</code> 可能会更优<span class="mojikumi-line-end">。</span></li>
<li>组合逻辑中的循环可能会创建同一套电路的多个副本<span class="mojikumi-line-end">，</span>如果要用同一个电路<span class="mojikumi-line-end">，</span>可能需要改写成时序逻辑<span class="mojikumi-line-end">。</span></li>
<li>根据具体使用的 tool<span class="mojikumi-line-end">，</span>有些 language feature 是不能被 synthesize 的<span class="mojikumi-line-end">。</span></li>
<li>为了更好的 synthesize 结果而需要把代码写成什么样<span class="mojikumi-line-end">，</span>需要依具体使用的 tool 而定<span class="mojikumi-line-end">。</span></li>
</ul>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第四章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp-4</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp-4</guid>
            <pubDate>Tue, 07 Feb 2023 07:58:32 GMT</pubDate>
            <description><![CDATA[







<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第四章 <span class="mojikumi">“</span>Digital Design Practices<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为数字设计的文档规范<span class="mojikumi-line-end">、</span>初步认识 circuit timing<span class="mojikumi-line-end">、</span>基于 HDL 的数字设计所使用的工具与设计流程<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[







<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第四章 <span class="mojikumi">“</span>Digital Design Practices<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为数字设计的文档规范<span class="mojikumi-line-end">、</span>初步认识 circuit timing<span class="mojikumi-line-end">、</span>基于 HDL 的数字设计所使用的工具与设计流程<span class="mojikumi-line-end">。</span></p>

<h2 id="documentation-standards" class="heading"><a href="#documentation-standards" class="heading-anchor" aria-label="章节： Documentation Standards" tabindex="-1"></a><span>Documentation Standards</span></h2>
<p>一个 <dfn>document package</dfn> 通常至少包含以下内容<span class="mojikumi-line-end">：</span></p>
<dl>
<dt>specification (<i>spec</i>)</dt>
<dd>准确地描述系统的所有输入和输出以及功能<span class="mojikumi-line-end">。</span>
</dd>
<dt>block diagram</dt>
<dd>大致描述系统的主要模块之间的连接<span class="mojikumi-line-end">。</span>
</dd>
<dt>logic-device description</dt>
<dd>分别描述每个 <span class="mojikumi">“</span>custom<span class="mojikumi">”</span> logic device 的功能<span class="mojikumi-line-end">，</span>这里 <span class="mojikumi">“</span>custom<span class="mojikumi">”</span> 是与现成的<span class="mojikumi-line-end">、</span>由其他制造商生产的相对<span class="mojikumi-line-end">，</span>例如 ASIC<span class="mojikumi-line-end">、</span>FPGA<span class="mojikumi-line-end">、</span>CPLD 等都是 custom 的<span class="mojikumi-line-end">。</span>
</dd>
<dt>schematic diagram</dt>
<dd>对每个模块的细节描述<span class="mojikumi-line-end">，</span>比 <i>logic diagram</i> 更加细致<span class="mojikumi-line-end">，</span>在 board-level design 中是包括 IC type<span class="mojikumi-line-end">、</span>reference designator<span class="mojikumi-line-end">、</span>signal name<span class="mojikumi-line-end">、</span>pin number 等细节信息的电路图<span class="mojikumi-line-end">，</span>在 FPGA<span class="mojikumi-line-end">、</span>CPLD 中则由 HDL model 来充当这一角色<span class="mojikumi-line-end">。</span>
</dd>
<dt>timing diagram</dt>
<dd>展示各个信号随时间的变化情况<span class="mojikumi-line-end">。</span>
</dd>
<dt>circuit description</dt>
<dd>解释电路的工作原理以及注意事项<span class="mojikumi-line-end">。</span>
</dd>
<dt>test plan</dt>
<dd>如何对系统进行测试<span class="mojikumi-line-end">。</span>
</dd>
</dl>
<p>感觉大致上来说<span class="mojikumi-line-end">，</span>与软件进行类比的话<span class="mojikumi-line-end">，</span>logic-device description 像是组件的 API 文档<span class="mojikumi-line-end">，</span>circuit description 像是代码内的注释<span class="mojikumi-line-end">，</span>block diagram 像是整个程序的结构图<span class="mojikumi-line-end">，</span>schematic 则是<span class="mojikumi-line-start">“</span>代码<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>总之<span class="mojikumi-line-end">，</span>这个 document package 和软件的文档不一样<span class="mojikumi-line-end">，</span>还包含 schematic 这种具体实现<span class="mojikumi-line-end">。</span></p>
<h3 id="block-diagrams" class="heading"><a href="#block-diagrams" class="heading-anchor" aria-label="章节： Block Diagrams" tabindex="-1"></a><span>Block Diagrams</span></h3>
<p>大概就是 DDPP5 Fig.4-1 这种感觉<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-1.2330b557.webp"><img srcset="/assets/ddpp-fig-4-1.9607283c.png" loading="lazy" src="/assets/ddpp-fig-4-1.9607283c.png" width="914" height="856" alt="block diagram for a shift-and-add multiplier"></picture></p>
<p>整个系统被划分为若干 component<span class="mojikumi-line-end">，</span>block diagram 展示它们之间最主要的一些连线而略去细节<span class="mojikumi-line-end">。</span></p>
<p>在 block diagram 中<span class="mojikumi-line-end">，</span>信号的流动可以是任意方向的<span class="mojikumi-line-end">，</span>不需要都沿一个方向<span class="mojikumi-line-end">。</span></p>
<h3 id="gate-symbols" class="heading"><a href="#gate-symbols" class="heading-anchor" aria-label="章节： Gate Symbols" tabindex="-1"></a><span>Gate Symbols</span></h3>
<p>根据 generalized DeMorgan<span class="mojikumi-narrow-left">’</span>s theorem<span class="mojikumi-line-end">，</span>AND<span class="mojikumi-line-end">、</span>OR<span class="mojikumi-line-end">、</span>NAND<span class="mojikumi-line-end">、</span>NOR<span class="mojikumi-line-end">、</span>NOT (inverter)<span class="mojikumi-line-end">、</span>BUFFER (non-inverting buffer) 各自都有两种不同的画法<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-4 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-4.93ea8d42.webp"><img srcset="/assets/ddpp-fig-4-4.0796c532.png" loading="lazy" src="/assets/ddpp-fig-4-4.0796c532.png" width="1324" height="517" alt="在 generalized DeMorgan&#39;s theorem 下等价的 gate symbols"></picture></p>
<h3 id="signal-names-and-active-levels" class="heading"><a href="#signal-names-and-active-levels" class="heading-anchor" aria-label="章节： Signal Names and Active Levels" tabindex="-1"></a><span>Signal Names and Active Levels</span></h3>
<p>为了兼容更多的 HDL 和 EDA<span class="mojikumi-line-end">，</span>signal name 最好不要有特殊字符<span class="mojikumi-line-end">，</span>而是只使用字母<span class="mojikumi-line-end">、</span>数字<span class="mojikumi-line-end">、</span>下划线<span class="mojikumi-line-end">，</span>以字母开头<span class="mojikumi-line-end">。</span></p>
<p>signal name 往往代表某种状态或某种操作<span class="mojikumi-line-end">，</span>但并不总是在位于 HIGH 时表示相应的意思<span class="mojikumi-line-end">。</span>每个 signal name 会有一个 <dfn>active level</dfn><span class="mojikumi-line-end">，</span><dfn>active-high</dfn> 意味着这个 signal 位于 HIGH 时<span class="mojikumi-line-start">（</span>在 positive-logic 中即为 1 时<span class="mojikumi-line-end">）</span>表示这某种状态或某种操作<span class="mojikumi-line-end">，</span><dfn>active-low</dfn> 则与之相反<span class="mojikumi-line-end">。</span>一个 signal 位于其 active level 时<span class="mojikumi-line-end">，</span>我们说它 is <dfn>asserted</dfn><span class="mojikumi-line-end">，</span>反之则说它 is <dfn>negated</dfn> (<i>deasserted</i>)<span class="mojikumi-line-end">。</span></p>
<p>signal name 会以某种 naming convention 来表示其 active level<span class="mojikumi-line-end">，</span>DDPP5 采用的 convention 是 active-high 保持不变<span class="mojikumi-line-end">，</span>而 active-low 加上 <code>_L</code> 后缀<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span><code>READY</code> 为 1 / <code>READY_L</code> 为 0 表示 ready<span class="mojikumi-line-end">，</span><code>READY</code> 为 0 / <code>READY_L</code> 为 1 表示没有 ready<span class="mojikumi-line-end">。</span></p>
<p>一般来说 active-high 理解起来相对容易<span class="mojikumi-line-end">，</span>但由于性能<span class="mojikumi-line-end">、</span>兼容性等原因也经常会需要 active-low<span class="mojikumi-line-end">。</span></p>
<h3 id="active-levels-for-pins" class="heading"><a href="#active-levels-for-pins" class="heading-anchor" aria-label="章节： Active Levels for Pins" tabindex="-1"></a><span>Active Levels for Pins</span></h3>
<p>gate 或其他 logic element 的 pin 上有 inversion bubble 时<span class="mojikumi-line-end">，</span>除了理解成不同的逻辑函数<span class="mojikumi-line-end">，</span>也可以理解成 active-low 的输入/输出<span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>AND<span class="mojikumi-line-end">、</span>NAND<span class="mojikumi-line-end">、</span>NOR<span class="mojikumi-line-end">、</span>OR 可以表示四种不同 active level 的 AND<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-6<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-6.751e7c1c.webp"><img srcset="/assets/ddpp-fig-4-6.ab9cd084.png" loading="lazy" src="/assets/ddpp-fig-4-6.ab9cd084.png" width="1317" height="134" alt="四种不同 active level 的 AND: AND, NAND, NOR, OR"></picture></p>
<p>因为 inverting gate 往往性能更好<span class="mojikumi-line-end">，</span>可以将 noninverting gate 替换为 inverting gate<span class="mojikumi-line-end">，</span>而理解成输入输出的 active level 相反的 noninverting gate<span class="mojikumi-line-end">。</span></p>
<h3 id="bubble-to-bubble-logic-design" class="heading"><a href="#bubble-to-bubble-logic-design" class="heading-anchor" aria-label="章节： Bubble-to-Bubble Logic Design" tabindex="-1"></a><span>Bubble-to-Bubble Logic Design</span></h3>
<p>在画电路图时<span class="mojikumi-line-end">，</span>尽量将 active-low 的信号连接到 inversion bubble 上<span class="mojikumi-line-end">，</span>在理解电路时就可以少一些 logical negation<span class="mojikumi-line-start">（</span>本质上是因为 active-low 信号的两侧都有 inversion bubble<span class="mojikumi-line-end">，</span>从而能够消去<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>使电路更好理解<span class="mojikumi-line-end">。</span></p>
<h3 id="constant-logic-signals" class="heading"><a href="#constant-logic-signals" class="heading-anchor" aria-label="章节： Constant Logic Signals" tabindex="-1"></a><span>Constant Logic Signals</span></h3>
<p>电路设计中偶尔会用到 constant 0 <span class="mojikumi">（</span><i>ground</i><span class="mojikumi">）</span> 和 constant 1 <span class="mojikumi">（</span><i>power-supply voltage</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>在电路图中它们的记号如下图所示<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-9 (b))</p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-9-b.998459d0.webp"><img srcset="/assets/ddpp-fig-4-9-b.84bd89c1.png" loading="lazy" src="/assets/ddpp-fig-4-9-b.84bd89c1.png" width="502" height="273" alt="constant 0 and 1 inputs with individual gates"></picture></p>
<h3 id="drawing-layout" class="heading"><a href="#drawing-layout" class="heading-anchor" aria-label="章节： Drawing Layout" tabindex="-1"></a><span>Drawing Layout</span></h3>
<p>logic diagram 和 schematic 一般要从左到右画<span class="mojikumi-line-end">，</span>所有输入都在最左侧<span class="mojikumi-line-end">，</span>所有输出都在最右侧<span class="mojikumi-line-end">。</span></p>
<p>在线路发生交叉时<span class="mojikumi-line-end">，</span>有两种区分重叠和连接的方法<span class="mojikumi-line-end">：</span></p>
<ul>
<li>连接处打点<span class="mojikumi-line-end">，</span>重叠不打点</li>
<li>连接都形如 ⟂ / ⊤<span class="mojikumi-line-end">，</span>重叠则形如 +</li>
</ul>
<p>由于 schematic 需要很多细节<span class="mojikumi-line-end">，</span>一张图可能画不下<span class="mojikumi-line-end">，</span>有两种处理方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>分为多张并列的图<span class="mojikumi-line-end">，</span>标注出跨越两张图的连线<span class="mojikumi-line-end">。</span></li>
<li>将图组织为树状<span class="mojikumi-line-start">（</span>与 Web 前端的 component 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>树根与 block diagram 类似<span class="mojikumi-line-end">。</span>图中的 component 可以是另一张 schematic<span class="mojikumi-line-end">，</span>也可以是 standard logic device 或者 HDL model<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="buses" class="heading"><a href="#buses" class="heading-anchor" aria-label="章节： Buses" tabindex="-1"></a><span>Buses</span></h3>
<p>为了方便画图<span class="mojikumi-line-end">，</span>多个并列的信号可以画成一个 <dfn>bus</dfn><span class="mojikumi-line-end">。</span></p>
<p>bus 的名字一般形如 <code>ADDR[15:0]</code><span class="mojikumi-line-end">，</span>表示 <code>ADDR15</code><span class="mojikumi-line-end">、</span><code>ADDR14</code><span class="mojikumi-line-end">、</span>……<span class="mojikumi-line-end">、</span><code>ADDR1</code><span class="mojikumi-line-end">、</span><code>ADDR0</code><span class="mojikumi-line-end">。</span></p>
<p>在图上 bus 用一条较粗的线表示<span class="mojikumi-line-end">，</span>从这条粗线上连出一条细线表示从中 <span class="mojikumi">“</span>pull<span class="mojikumi">”</span> 出单独一个信号<span class="mojikumi-line-end">。</span></p>
<h3 id="additional-schematic-information" class="heading"><a href="#additional-schematic-information" class="heading-anchor" aria-label="章节： Additional Schematic Information" tabindex="-1"></a><span>Additional Schematic Information</span></h3>
<p>在 board-level design 中<span class="mojikumi-line-end">，</span>一个 schematic 在电路图的基础上还需要标明 IC type<span class="mojikumi-line-end">、</span>reference designator<span class="mojikumi-line-end">、</span>pin number 等信息<span class="mojikumi-line-end">，</span>用来精确地描述电路<span class="mojikumi-line-end">。</span></p>
<p>其中<span class="mojikumi-line-end">，</span>IC type 描述了 IC 的功能<span class="mojikumi-line-end">，</span><dfn>reference designator</dfn> 用来在一类 IC 中指定特定的一个实例<span class="mojikumi-line-end">，</span><dfn>pin number</dfn> 用来指定从哪连到哪<span class="mojikumi-line-end">。</span></p>
<p>全都标上长这样<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-18<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-18.957dcbfd.webp"><img srcset="/assets/ddpp-fig-4-18.e9c4823e.png" loading="lazy" src="/assets/ddpp-fig-4-18.e9c4823e.png" width="980" height="645" alt="schematic diagram for a circuit using several SSI parts"></picture></p>
<h2 id="circuit-timing" class="heading"><a href="#circuit-timing" class="heading-anchor" aria-label="章节： Circuit Timing" tabindex="-1"></a><span>Circuit Timing</span></h2>
<p>在时序电路中<span class="mojikumi-line-end">，</span>电路由一个 clock 控制<span class="mojikumi-line-end">，</span>而 clock 的频率会根据完成一步操作在最坏情况下的用时来制订<span class="mojikumi-line-end">，</span>所以计算<span class="mojikumi-line-end">、</span>优化电路的 timing 对电路的性能和正确性都非常重要<span class="mojikumi-line-end">。</span></p>
<h3 id="timing-diagrams" class="heading"><a href="#timing-diagrams" class="heading-anchor" aria-label="章节： Timing Diagrams" tabindex="-1"></a><span>Timing Diagrams</span></h3>
<p><i>timing diagram</i> 用来展示电路里各个信号随时间变化的情况<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-19 (b)(c) 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-19-bc.303e1075.webp"><img srcset="/assets/ddpp-fig-4-19-bc.010519a3.png" loading="lazy" src="/assets/ddpp-fig-4-19-bc.010519a3.png" width="907" height="729" alt="(b) 展示 causality 和 propagation delay 的 timing diagram (c) 展示 minimum / maximum delay 的 timing diagram"></picture></p>
<p>信号的转变不是瞬间发生的<span class="mojikumi-line-end">，</span>从一个状态到另一个状态的用时称作 <dfn>transition time</dfn><span class="mojikumi-line-end">，</span>从 LOW 到 HIGH 的用时叫做 <dfn>rise time</dfn><span class="mojikumi-line-end">，</span>从 HIGH 到 LOW 的用时叫做 <dfn>fall time</dfn><span class="mojikumi-line-end">。</span></p>
<p>在图 (b) 中<span class="mojikumi-line-end">，</span>不同的箭头用来表示 transition 之间的 causality <span class="mojikumi">（</span>因果关系<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>有因果关系的 transition 并不是立刻一个接着一个发生<span class="mojikumi-line-end">，</span>而是会有 <i>delay</i><span class="mojikumi-line-end">，</span>不同的信号<span class="mojikumi-line-end">、</span>路径会有不同的 delay<span class="mojikumi-line-end">。</span>delay 一般是指两个 transition 各自中点的距离<span class="mojikumi-line-end">。</span></p>
<p>很多因素都会对 delay 造成影响<span class="mojikumi-line-end">，</span>所以 delay 一般不是单个数字<span class="mojikumi-line-end">，</span>而是一个区间<span class="mojikumi-line-end">。</span>图 (c) 中标明了 minimum delay 和 maximum delay<span class="mojikumi-line-end">。</span></p>
<p>有时候 timing diagram 不需要区分 rise 和 fall<span class="mojikumi-line-end">，</span>例如用来存储数据的信号<span class="mojikumi-line-end">，</span>就可以如 DDPP5 Fig.4-20 (a) 这样画<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-20-a.b0a1e1fd.webp"><img srcset="/assets/ddpp-fig-4-20-a.8ccddcf9.png" loading="lazy" src="/assets/ddpp-fig-4-20-a.8ccddcf9.png" width="799" height="365" alt="不区分 rise 和 fall 的 timing diagram"></picture></p>
<p>可以将一个 bus 画在一起<span class="mojikumi-line-end">，</span>也可以用数字标注 bus 的取值<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-20 (b) 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-20-b.97c7ef5b.webp"><img srcset="/assets/ddpp-fig-4-20-b.d8170ed4.png" loading="lazy" src="/assets/ddpp-fig-4-20-b.d8170ed4.png" width="794" height="229" alt="将 bus 画在一起的 timing diagram"></picture></p>
<h3 id="propagation-delay" class="heading"><a href="#propagation-delay" class="heading-anchor" aria-label="章节： Propagation Delay" tabindex="-1"></a><span>Propagation Delay</span></h3>
<p><dfn>propagation delay</dfn> 指的是电路的某个输入发生改变后沿着某个路径产生某个输出的 delay<span class="mojikumi-line-end">，</span>一般记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi mathvariant="normal">p</mi><mi mathvariant="normal">X</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{\mathrm{pX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">pX</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>其中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">X</mi></mrow><annotation encoding="application/x-tex">\mathrm{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathrm">X</span></span></span></span></span> 用来标识这个路径<span class="mojikumi-line-end">。</span></p>
<p>影响 propagation delay 的因素有很多<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Power-supply voltage: 包括标定的电压<span class="mojikumi-line-end">，</span>以及小的电压波动</li>
<li>Temperature: 包括环境温度和电路工作产生的热量</li>
<li>Output loading: 电路的输出可能与后续电路的很多个输入相连<span class="mojikumi-line-end">，</span>连接到的输入越多<span class="mojikumi-line-end">，</span>将信号传递过去就用时越长</li>
<li>Input rise and fall times: 如果输入的 transition 慢<span class="mojikumi-line-end">，</span>也会计入 propagation delay</li>
<li>Transition direction: 有时 rise 和 fall 的用时会不同</li>
<li>Speed-of-light delays: 如果电路的物理尺寸大<span class="mojikumi-line-end">，</span>或者电路速度非常快<span class="mojikumi-line-end">，</span>光速的限制就不能忽略</li>
<li>Noise and crosstalk: 环境中的各种干扰<span class="mojikumi-line-end">，</span>以及相邻线路之间的干扰</li>
<li>Manufacturing tolerances: 元件被制造出来的时候可能有细微的差异</li>
</ul>
<p>一般来说<span class="mojikumi-line-end">，</span>计算 propagation delay 可以不考虑这么多因素<span class="mojikumi-line-end">，</span>而只需根据生产商提供的元件的 <span class="mojikumi">“</span>maximum<span class="mojikumi">”</span> <span class="mojikumi">“</span>typical<span class="mojikumi">”</span> <span class="mojikumi">“</span>minimum<span class="mojikumi">”</span> propagation delay 来进行计算<span class="mojikumi-line-end">。</span></p>
<p>如果电路有多个输入输出<span class="mojikumi-line-end">，</span>就会有很多条路径需要计算 delay<span class="mojikumi-line-end">。</span></p>
<a id="glitch-与-delay" name="glitch-与-delay" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>glitch 与 delay</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>第三章中提到的 <a href="/post/2023/01/ddpp-3#timing-hazards">glitch</a> 是否实际发生<span class="mojikumi-line-end">，</span>与电路的 delay 密切相关<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="timing-specifications" class="heading"><a href="#timing-specifications" class="heading-anchor" aria-label="章节： Timing Specifications" tabindex="-1"></a><span>Timing Specifications</span></h3>
<p>生产商一般会提供元件在某种条件下每个路径<span class="mojikumi-line-end">、</span>每种 transition 方向的 propagation delay 的范围<span class="mojikumi-line-end">，</span>一般会提供 maximum delay 和 minimum delay<span class="mojikumi-line-end">，</span>也可能提供一个 <span class="mojikumi">“</span>typical<span class="mojikumi">”</span> delay<span class="mojikumi-line-end">。</span></p>
<p>一般情况下<span class="mojikumi-line-end">，</span>maximum delay 是最重要的<span class="mojikumi-line-end">，</span>minimum delay 只在少数情况下需要考虑<span class="mojikumi-line-end">，</span>而依赖于 typical delay 是不靠谱的<span class="mojikumi-line-end">。</span></p>
<h3 id="timing-analysis-tools" class="heading"><a href="#timing-analysis-tools" class="heading-anchor" aria-label="章节： Timing Analysis Tools" tabindex="-1"></a><span>Timing Analysis Tools</span></h3>
<p>在复杂的电路中<span class="mojikumi-line-end">，</span>往往需要借助 EDA tool 来计算 timing<span class="mojikumi-line-end">。</span>比起手动计算<span class="mojikumi-line-end">，</span>EDA 可能会利用元件附带的比 min/max delay 更加详细的信息来更加精确地计算 delay<span class="mojikumi-line-end">。</span>可以使用模拟器<span class="mojikumi-line-end">，</span>手动设计输入<span class="mojikumi-line-end">，</span>来计算 delay<span class="mojikumi-line-end">。</span>也可以使用 timing analysis program<span class="mojikumi-line-end">，</span>来自动计算出所有可能的 delay<span class="mojikumi-line-end">。</span></p>
<p>在设计的不同阶段可能会对 timing 进行多次估计和计算<span class="mojikumi-line-end">，</span>在设计基本完成时如果发现 propagation delay 不符合设计要求<span class="mojikumi-line-end">，</span>可能需要进行调整<span class="mojikumi-line-end">，</span>例如针对 critical path 进行线路优化<span class="mojikumi-line-end">，</span>将 critical path 上的元件尽量放在相邻的位置<span class="mojikumi-line-end">，</span>将 high-fanout 的信号复制几分来减轻 output load……这样对 timing 进行调整的过程可能会反复进行很多遍<span class="mojikumi-line-end">，</span>被称作 <dfn>timing closure</dfn><span class="mojikumi-line-end">。</span></p>
<h2 id="hdl-based-digital-design" class="heading"><a href="#hdl-based-digital-design" class="heading-anchor" aria-label="章节： HDL-Based Digital Design" tabindex="-1"></a><span>HDL-Based Digital Design</span></h2>
<h3 id="eda-tool-suites-for-hdls" class="heading"><a href="#eda-tool-suites-for-hdls" class="heading-anchor" aria-label="章节： EDA Tool Suites for HDLs" tabindex="-1"></a><span>EDA Tool Suites for HDLs</span></h3>
<dl>
<dt>text editor</dt>
<dd>包含代码高亮等功能的 HDL source file 编辑器<span class="mojikumi-line-end">。</span>
</dd>
<dt>compiler</dt>
<dd>检查代码中的语法错误<span class="mojikumi-line-end">，</span>将 HDL 编译为 RTL <span class="mojikumi">（</span>register-transfer language<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>
</dd>
<dt>synthesizer (synthesis tool)</dt>
<dd>将 RTL design synthesis 到某个具体的 hardware technology 上<span class="mojikumi-line-end">，</span>通常分为若干步骤<span class="mojikumi-line-end">：</span>
<ol>
<li>mapping: 将 RTL design 对应到具体的 hardware element</li>
<li>placement: 在 FPGA / CPLD 设计中<span class="mojikumi-line-end">，</span>为每个 element 选择具体的 programmable resource instance<span class="mojikumi-line-end">；</span>在 ASIC 设计中<span class="mojikumi-line-end">，</span>为各种 basic building block 安排位置</li>
<li>routing: 在 FPGA / ASIC 设计中<span class="mojikumi-line-end">，</span>在 element 之间连线<span class="mojikumi-line-start">（</span>CPLD 中连线是固定的<span class="mojikumi-line-end">，</span>要根据连线选择 programmable resource<span class="mojikumi-line-end">）</span></li>
</ol>
</dd>
<dt>simulator</dt>
<dd>对给定的 HDL model 和随时间变化的输入<span class="mojikumi-line-end">，</span>计算出随时间变化的输出<span class="mojikumi-line-end">。</span>输入可以是手动编辑的<span class="mojikumi-line-end">，</span>由 <i>test bench</i> 生成的<span class="mojikumi-line-end">，</span>或者通过 <i>waveform editor</i> 编辑的<span class="mojikumi-line-end">。</span>输出可以是波形图或者列表<span class="mojikumi-line-end">，</span>还可能包含警告<span class="mojikumi-line-end">。</span>
</dd>
<dt>template generator</dt>
<dd>生成常用的代码模板<span class="mojikumi-line-end">。</span>
</dd>
<dt>schematic viewer</dt>
<dd>由 HDL model <span class="mojikumi">（</span>RTL<span class="mojikumi">）</span> 或 synthesized result 生成 schematic diagram<span class="mojikumi-line-end">，</span>synthesis 前后的 schematic diagram 可能会有很大的不同<span class="mojikumi-line-end">，</span>但功能是一致的<span class="mojikumi-line-end">。</span>
</dd>
<dt>chip viewer</dt>
<dd>查看 synthesized result 中的物理布局和连线<span class="mojikumi-line-end">。</span>
</dd>
<dt>constraints editor</dt>
<dd>给 synthesizer 调参<span class="mojikumi-line-end">，</span>例如设置 timing 要求<span class="mojikumi-line-end">，</span>调整优化目标<span class="mojikumi-line-end">。</span>
</dd>
<dt>timing analyzer</dt>
<dd>计算某些或全部路径的 delay<span class="mojikumi-line-end">。</span>
</dd>
<dt>back annotator</dt>
<dd>将 timing analyzer 的计算结果插入到 HDL model 中<span class="mojikumi-line-end">，</span>以在 simulation 中展现出 timing<span class="mojikumi-line-end">。</span>
</dd>
</dl>
<h3 id="hdl-based-design-flow" class="heading"><a href="#hdl-based-design-flow" class="heading-anchor" aria-label="章节： HDL-Based Design Flow" tabindex="-1"></a><span>HDL-Based Design Flow</span></h3>
<ol>
<li>specification / hierarchy / block diagram</li>
<li>coding</li>
<li>compilation</li>
<li>simulation / functional verification / pre-fitting timing verification</li>
<li>mapping</li>
<li>fitting / place &#x26; route</li>
<li>post-fitting timing verification</li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>前四步被称作 <dfn>front-end steps</dfn><span class="mojikumi-line-end">，</span>后三步被称作 <dfn>back-end steps</dfn><span class="mojikumi-line-end">。</span></p>
<p>设计过程一般不会是一步一步顺着来的<span class="mojikumi-line-end">，</span>而是会不断反复<span class="mojikumi-line-end">。</span>为了少折腾<span class="mojikumi-line-end">，</span>第一步中总体设计的合理性<span class="mojikumi-line-end">，</span>以及第四步中进入 back-end steps 前的测试<span class="mojikumi-line-end">，</span>都非常重要<span class="mojikumi-line-end">。</span>由于精确的 timing 计算依赖于具体的 fitting<span class="mojikumi-line-end">，</span>在第七步发现 timing 不符合要求而推倒重来也是很有可能的<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第三章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp-3</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp-3</guid>
            <pubDate>Sun, 29 Jan 2023 07:52:32 GMT</pubDate>
            <description><![CDATA[
<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第三章 <span class="mojikumi">“</span>Switching Algebra and Combinational Logic<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为逻辑代数<span class="mojikumi-line-end">、</span>逻辑代数在电路中的使用及化简<span class="mojikumi-line-end">、</span>timing hazard<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第三章 <span class="mojikumi">“</span>Switching Algebra and Combinational Logic<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为逻辑代数<span class="mojikumi-line-end">、</span>逻辑代数在电路中的使用及化简<span class="mojikumi-line-end">、</span>timing hazard<span class="mojikumi-line-end">。</span></p>

<h2 id="switching-algebra" class="heading"><a href="#switching-algebra" class="heading-anchor" aria-label="章节： Switching Algebra" tabindex="-1"></a><span>Switching Algebra</span></h2>
<p>这一节基本上就是离散数学 (1) 开头两章的内容<span class="mojikumi-line-end">，</span>术语和记号有很多不同<span class="mojikumi-line-end">，</span><s>幸好忘的差不多了<span class="mojikumi-line-end">，</span>不然都要搞混了</s><span class="mojikumi-line-end">。</span></p>
<h3 id="记号" class="heading"><a href="#记号" class="heading-anchor" aria-label="章节： 记号" tabindex="-1"></a><span>记号</span></h3>
<ul>
<li>AND<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi></mrow><annotation encoding="application/x-tex">X\ \cdot\ Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></span></li>
<li><span class="inline-block w-3"></span>OR<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X + Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></span></li>
<li>NOT<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>AND 的优先级高于 OR</li>
</ul>
<p><span class="mojikumi-line-start">（</span>yysy 我还是更喜欢 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∨</mo><mo separator="true">,</mo><mo>∧</mo></mrow><annotation encoding="application/x-tex">\lor, \land</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord">∨</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∧</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 也还行<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 真的有点难以接受<span class="mojikumi">。</span><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span><s>它们明明是对偶的怎么搞得像个环一样<span class="mojikumi-line-end">。</span></s><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>主要还是下面这些定理用加号看起来真的好怪<span class="mojikumi">。</span><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>异或不是还号称二进制加法吗<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="公理" class="heading"><a href="#公理" class="heading-anchor" aria-label="章节： 公理" tabindex="-1"></a><span>公理</span></h3>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A1)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>X</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A1D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>X</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A2)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A2D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>=</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A3)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A3D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A4)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A4D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A5)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mn>1</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A5D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{rl}
\text{(A1)} &#x26; X \ne 1 \implies X = 0 \\
\text{(A1D)} &#x26; X \ne 0 \implies X = 1 \\\\
\text{(A2)} &#x26; X = 0 \implies X' = 1 \\
\text{(A2D)} &#x26; X = 1 \implies X' = 0 \\\\
\text{(A3)} &#x26; 0 \ \cdot\  0 = 0 \\
\text{(A3D)} &#x26; 1 + 1 = 1 \\\\
\text{(A4)} &#x26; 1 \ \cdot\  1 = 1 \\
\text{(A4D)} &#x26; 0 + 0 = 0 \\\\
\text{(A5)} &#x26; 0 \ \cdot\  1 = 1 \ \cdot\  0 = 0 \\
\text{(A5D)} &#x26; 1 + 0 = 0 + 1 = 1
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.8em;vertical-align:-8.15em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.65em;"><span style="top:-10.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A1)</span></span></span></span><span style="top:-9.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A1D)</span></span></span></span><span style="top:-8.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-7.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A2)</span></span></span></span><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A2D)</span></span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A3)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A3D)</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A4)</span></span></span></span><span style="top:1.19em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A4D)</span></span></span></span><span style="top:2.39em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:3.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A5)</span></span></span></span><span style="top:4.79em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A5D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.65em;"><span style="top:-10.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-9.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-7.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:1.19em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:3.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:4.79em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<h3 id="定理" class="heading"><a href="#定理" class="heading-anchor" aria-label="章节： 定理" tabindex="-1"></a><span>定理</span></h3>
<p>中文名来自<span class="mojikumi-line-start">《</span>数理逻辑与集合论<span class="mojikumi-line-start">（</span>第二版<span class="mojikumi">）</span><span class="mojikumi-line-end">》</span>2.2 节<span class="mojikumi-line-start">“</span>等值公式<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span></p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T1)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mn>0</mn><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T1D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Identities（同一律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T2)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T2D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Null elements（零律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T3)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T3D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Idempotency（幂等律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="1em"></mspace><mtext> (T4)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Involution（双重否定律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T5)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T5D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Complements（补余律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T6)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>Y</mi><mo>=</mo><mi>Y</mi><mo>+</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T6D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mo>=</mo><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Commutativity（交换律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T7)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>Z</mi><mo>=</mo><mi>X</mi><mo>+</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T7D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mo>=</mo><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Associativity（结合律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T8)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mtext> </mtext><mtext> </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T8D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Distributivity（分配律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T9)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T9D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Covering（吸收律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T10)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><mtext> </mtext><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T10D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Combining</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T11)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi><mo>+</mo><mi>Y</mi><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T11D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Consensus</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T12)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>X</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T12D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Generalized idempotency</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T13)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mtext>  </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mtext>  </mtext><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T13D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>X</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>X</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>DeMorgan’s theorem</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>（摩根律）</mtext></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext> (T14)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">[</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo separator="true">,</mo><mo>+</mo><mo separator="true">,</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>X</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msubsup><mi>X</mi><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo separator="true">,</mo><mo>+</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Generalized</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>DeMorgan’s theorem</mtext></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{ll}

\begin{array}{rl}
\enspace\text{(T1)} &#x26; X + 0 = X \\
\enspace\text{(T1D)} &#x26; X \ \cdot\  1 = X
\end{array}
&#x26; \text{Identities（同一律）}
\\\\

\begin{array}{rl}
\enspace\text{(T2)} &#x26; X + 1 = 1 \\
\enspace\text{(T2D)} &#x26; X \ \cdot\  0 = 0
\end{array}
&#x26; \text{Null elements（零律）}
\\\\

\begin{array}{rl}
\enspace\text{(T3)} &#x26; X + X = X \\
\enspace\text{(T3D)} &#x26; X \ \cdot\  X = X
\end{array}
&#x26; \text{Idempotency（幂等律）}
\\\\

\begin{array}{rl}
\quad\ \text{(T4)} &#x26; (X')' = X
\end{array}
&#x26; \text{Involution（双重否定律）}
\\\\

\begin{array}{rl}
\enspace\text{(T5)} &#x26; X + X' = 1 \\
\enspace\text{(T5D)} &#x26; X \ \cdot\  X' = 0
\end{array}
&#x26; \text{Complements（补余律）}
\\\\

\begin{array}{rl}
\enspace\text{(T6)} &#x26; X + Y = Y + X \\
\enspace\text{(T6D)} &#x26; X \ \cdot\  Y = Y \ \cdot\  X
\end{array}
&#x26; \text{Commutativity（交换律）}
\\\\

\begin{array}{rl}
\enspace\text{(T7)} &#x26; (X + Y) + Z = X + (Y + Z) \\
\enspace\text{(T7D)} &#x26; (X \ \cdot\  Y) \ \cdot\  Z = X \ \cdot\  (Y \ \cdot\  Z)
\end{array}
&#x26; \text{Associativity（结合律）}
\\\\

\begin{array}{rl}
\enspace\text{(T8)} &#x26; X \ \cdot\  (Y + Z) = \,\: X \ \cdot\  Y \,\: + \,\: X \ \cdot\  Z \,\: \\
\enspace\text{(T8D)} &#x26; X + \,\: Y \ \cdot\  Z \,\: = (X + Y) \ \cdot\  (X + Z)
\end{array}
&#x26; \text{Distributivity（分配律）}
\\\\

\begin{array}{rl}
\enspace\text{(T9)} &#x26; X + \,\: X \ \cdot\  Y \,\: = X \\
\enspace\text{(T9D)} &#x26; X \ \cdot\  (X + Y) = X
\end{array}
&#x26; \text{Covering（吸收律）}
\\\\

\begin{array}{rl}
\text{(T10)} &#x26; \,\: X \ \cdot\  Y \,\: + \,\: X \ \cdot\  Y' \,\: = X \\
\text{(T10D)} &#x26; (X + Y) \ \cdot\  (X + Y') = X
\end{array}
&#x26; \text{Combining}
\\\\

\begin{array}{rl}
\text{(T11)} &#x26; \begin{aligned} &#x26; X \cdot Y + X' \cdot Z + Y \cdot Z \\[-0.2em] =\ &#x26; X \cdot Y + X' \cdot Z \end{aligned} \\
\text{(T11D)} &#x26; \begin{aligned} &#x26; (X + Y) \cdot (X' + Z) \cdot (Y + Z) \\[-0.2em] =\ &#x26; (X + Y) \cdot (X' + Z) \end{aligned}
\end{array}
&#x26; \text{Consensus}
\\\\

\begin{array}{rl}
\text{(T12)}  &#x26; X + X + \cdots + X = X \\
\text{(T12D)} &#x26; X \ \cdot\  X \ \cdot\ \cdots\ \cdot\  X = X
\end{array}
&#x26; \text{Generalized idempotency}
\\\\

\begin{array}{rl}
\text{(T13)} &#x26;
\begin{aligned}
&#x26; (X \ \ \cdot\  X \ \ \cdot\ \cdots\ \cdot\  X)' \\[-0.2em]
= &#x26; \,\: X' + X' + \cdots + X'
\end{aligned}
\\
\text{(T13D)} &#x26;
\begin{aligned}
&#x26; (X + X + \cdots + X)' \\[-0.2em]
= &#x26; \,\: X' \cdot\  X' \cdot\  \cdots \ \cdot\  X'
\end{aligned}
\end{array}
&#x26; \begin{array}{c} \text{DeMorgan’s theorem} \\ \text{（摩根律）} \end{array}
\\\\

\begin{array}{rl}
\enspace\ \text{(T14)} &#x26;
\begin{aligned}
 &#x26; [F(X_1, X_2, \ldots, X_n, +, \ \cdot\ )]' \\[-0.2em]
=&#x26;\ F(X_1', X_2', \ldots, X_n', \ \cdot\ , +)
\end{aligned}
\end{array}
&#x26; \begin{array}{c} \text{Generalized} \\ \text{DeMorgan’s theorem} \end{array}
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:54.81em;vertical-align:-27.155em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:27.655em;"><span style="top:-31.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T1)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T1D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-29.465em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-27.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T2)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T2D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-25.865em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-24.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T3)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T3D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-22.265em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-21.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord">(T4)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-19.855em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-18.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T5)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T5D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-16.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-14.445em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T6)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T6D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-12.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-10.845em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T7)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T7D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-9.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-7.245em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T8)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T8D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-5.455em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-3.645em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T9)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T9D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-1.855em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-0.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T10)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T10D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:1.745em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:5.155em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T11)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T11D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:8.545em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:10.355em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T12)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T12D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:12.145em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:15.555em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T13)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T13D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:18.945em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:20.955em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.65em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord">(T14)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.65em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mspace"> </span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:27.155em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:27.655em;"><span style="top:-31.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Identities</span><span class="mord cjk_fallback">（同一律）</span></span></span></span><span style="top:-27.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Null elements</span><span class="mord cjk_fallback">（零律）</span></span></span></span><span style="top:-24.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Idempotency</span><span class="mord cjk_fallback">（幂等律）</span></span></span></span><span style="top:-21.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Involution</span><span class="mord cjk_fallback">（双重否定律）</span></span></span></span><span style="top:-18.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Complements</span><span class="mord cjk_fallback">（补余律）</span></span></span></span><span style="top:-14.445em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Commutativity</span><span class="mord cjk_fallback">（交换律）</span></span></span></span><span style="top:-10.845em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Associativity</span><span class="mord cjk_fallback">（结合律）</span></span></span></span><span style="top:-7.245em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Distributivity</span><span class="mord cjk_fallback">（分配律）</span></span></span></span><span style="top:-3.645em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Covering</span><span class="mord cjk_fallback">（吸收律）</span></span></span></span><span style="top:-0.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Combining</span></span></span></span><span style="top:5.155em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Consensus</span></span></span></span><span style="top:10.355em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Generalized idempotency</span></span></span></span><span style="top:15.555em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DeMorgan’s theorem</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">（摩根律）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:20.955em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Generalized</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DeMorgan’s theorem</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:27.155em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Shannon’s expansion theorems</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T15)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><msub><mi>X</mi><mn>1</mn></msub><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T15D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>⋅</mo><mo stretchy="false">[</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{rl}
&#x26; \text{Shannon’s expansion theorems} \\[0.3em]
\text{(T15)} &#x26; F(X_1, X_2, \ldots, X_n) = \ X_1 \ \cdot\  F(1, X_2, \ldots, X_n) + X_1' \ \cdot\  F(0, X_2, \ldots, X_n) \\
\text{(T15D)} &#x26; F(X_1, X_2, \ldots, X_n) = [X_1 + F(1, X_2, \ldots, X_n)] \cdot [X_1' + F(0, X_2, \ldots, X_n)]
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.9em;vertical-align:-1.7em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.36em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.86em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T15)</span></span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T15D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.36em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Shannon’s expansion theorems</span></span></span></span><span style="top:-2.86em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<p><span class="mojikumi-line-start">（</span><s>草<span class="mojikumi-line-end">，</span>对齐好累<span class="mojikumi-line-end">，</span>我为什么要浪费这个时间<span class="mojikumi-line-end">。</span></s><span class="mojikumi-line-end">）</span></p>
<h3 id="duality" class="heading"><a href="#duality" class="heading-anchor" aria-label="章节： Duality" tabindex="-1"></a><span>Duality</span></h3>
<p>将一个等式中所有的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span><span class="mojikumi-line-end">，</span>等式依然成立<span class="mojikumi-line-end">。</span></p>
<p>上面的定理中带 <span class="mojikumi">“</span>D<span class="mojikumi">”</span> 的都是上一条的对偶<span class="mojikumi-line-end">。</span></p>
<h3 id="standard-representations-of-logic-functions" class="heading"><a href="#standard-representations-of-logic-functions" class="heading-anchor" aria-label="章节： Standard Representations of Logic Functions" tabindex="-1"></a><span>Standard Representations of Logic Functions</span></h3>
<p>这里需要翻出来我离散 (1) 写的 <a href="https://ouuan.github.io/truth-table-generator/">真值表生成器</a><span class="mojikumi-line-start">（</span>其实可以去加上 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 作为 alias<span class="mojikumi-line-end">，</span>但如果要加 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的话会很麻烦所以干脆不加了吧<span class="mojikumi-line-start">（</span></p>
<p>logic function 有若干精确的标准表示方法<span class="mojikumi-line-end">：</span></p>
<ul>
<li>真值表</li>
<li>canonical sum: 主析取范式<span class="mojikumi-line-end">，</span>极小项 (minterm) 的和</li>
<li>使用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span></span></span></span></span> 表示的 minterm list</li>
<li>canonical product: 主合取范式<span class="mojikumi-line-end">，</span>极大项 (maxterm) 的和</li>
<li>使用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></span> 表示的 maxterm list</li>
<li>Verilog <code>case</code> 语句</li>
</ul>
<p>这里用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></span> 表示 maxterm list 的下标比离散 (1) 讲的舒服多了<span class="mojikumi-line-end">：</span>minterm 的 index 就是哪组变量取值下表达式值为 1<span class="mojikumi-line-end">，</span>maxterm 的 index 就是哪组变量取值下表达式为 0<span class="mojikumi-line-end">，</span>所以两种范式的下标刚好是补集<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">X, Y, Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></span> 三个变量<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X' \cdot Y \cdot Z'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的下标是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Y</mi><mo>+</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X' + Y + Z'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的下标是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span></span><span class="mojikumi-line-end">；</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msub><mo>∏</mo><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{X,Y,Z}(1,2,6) = X' \cdot Y' \cdot Z + X' \cdot Y \cdot Z' + X \cdot Y \cdot Z' = \prod_{X,Y,Z}(0,3,4,5,7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1858em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1858em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>Verilog 的 <code>case</code> 语句大概是这个样子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>虽然还完全没学 Verilog<span class="mojikumi-line-end">，</span>但我感觉 Shiki 自带的 system-verilog 高亮看起来就比 verilog 正确许多<span class="mojikumi-line-end">，</span>以后可能也用 system-verilog 的高亮了<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="system-verilog 代码块" data-v-ad49d235>system-verilog</h4><ile-root id="ile-28"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-28--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">case</span><span style="color: #D6DEEB"> (</span><span style="color: #C792EA">{</span><span style="color: #82AAFF">X</span><span style="color: #D6DEEB">,</span><span style="color: #82AAFF">Y</span><span style="color: #D6DEEB">,</span><span style="color: #82AAFF">Z</span><span style="color: #C792EA">}</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">,</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">,</span><span style="color: #F78C6C">6</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">default:</span><span style="color: #D6DEEB">  </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">endcase</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">case</span><span style="color: #403F53"> (</span><span style="color: #994CC3">{</span><span style="color: #4876D6">X</span><span style="color: #403F53">,</span><span style="color: #4876D6">Y</span><span style="color: #403F53">,</span><span style="color: #4876D6">Z</span><span style="color: #994CC3">}</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">  </span><span style="color: #AA0982">1</span><span style="color: #403F53">,</span><span style="color: #AA0982">2</span><span style="color: #403F53">,</span><span style="color: #AA0982">6</span><span style="color: #994CC3">:</span><span style="color: #403F53">    </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">default:</span><span style="color: #403F53">  </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">endcase</span></span></code></pre></div></section>
<h2 id="combinational-circuit-analysis" class="heading"><a href="#combinational-circuit-analysis" class="heading-anchor" aria-label="章节： Combinational-Circuit Analysis" tabindex="-1"></a><span>Combinational-Circuit Analysis</span></h2>
<p>这一节就是说给你一个电路图怎么搞出它的 logic function<span class="mojikumi-line-end">。</span>其实没啥好说的<span class="mojikumi-line-end">，</span>就<span class="mojikumi-line-start">（</span>按拓扑序<span class="mojikumi-line-end">）</span>一个一个 gate 递推就行<span class="mojikumi-line-end">，</span>可以用真值表也可以用逻辑表达式<span class="mojikumi-line-end">。</span></p>
<p>有一个小 trick<span class="mojikumi-line-end">：</span>DeMorgan<span class="mojikumi-narrow-left">’</span>s theorem 在电路图中表现为<span class="mojikumi-line-end">，</span>将 inversion bubble 换到另一侧<span class="mojikumi-line-start">（</span>输入 / 输出<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且改变 gate 的类型<span class="mojikumi-line-start">（</span>AND / OR<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>这样的话<span class="mojikumi-line-end">，</span>如果两个 inversion bubble 在一条 wire 上就可以消掉<span class="mojikumi-line-end">。</span></p>
<h2 id="combinational-circuit-synthesis" class="heading"><a href="#combinational-circuit-synthesis" class="heading-anchor" aria-label="章节： Combinational-Circuit Synthesis" tabindex="-1"></a><span>Combinational-Circuit Synthesis</span></h2>
<p>在 digital design 中<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">“</span>Synthesis<span class="mojikumi">”</span> 有若干种含义<span class="mojikumi-line-start">（</span>例如从 HDL 到 FPGA<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而在这一节只是指从 formal description 到 gate-level circuit<span class="mojikumi-line-end">。</span></p>
<h3 id="circuit-descriptions-and-designs" class="heading"><a href="#circuit-descriptions-and-designs" class="heading-anchor" aria-label="章节： Circuit Descriptions and Designs" tabindex="-1"></a><span>Circuit Descriptions and Designs</span></h3>
<p>自然语言描述 → 逻辑表达式 / 真值表<span class="mojikumi-line-start">（</span>canonical sum / product<span class="mojikumi">）</span> → 电路</p>
<p>很多时候写出逻辑表达式会比列出真值表简单一些<span class="mojikumi-line-end">，</span>但在面对较为复杂的逻辑关系时<span class="mojikumi-line-end">，</span>列出真值表可以强制设计师考虑到每种情况<span class="mojikumi-line-end">，</span>从而避免漏掉 corner case<span class="mojikumi-line-end">。</span></p>
<p>一个输出是某个逻辑表达式的电路被称作 <i>realize</i> 了这个表达式<span class="mojikumi-line-end">，</span>是这个表达式的 <i>realization</i> 或者 <i>implementation</i><span class="mojikumi-line-end">。</span></p>
<h3 id="circuit-manipulations" class="heading"><a href="#circuit-manipulations" class="heading-anchor" aria-label="章节： Circuit Manipulations" tabindex="-1"></a><span>Circuit Manipulations</span></h3>
<p>在多数电路技术<span class="mojikumi-line-start">（</span>包括 CMOS<span class="mojikumi-line-end">）</span>中<span class="mojikumi-line-end">，</span>NAND / NOR 比 AND / OR 效率更高<span class="mojikumi-line-end">，</span>所以一般会修改电路来尽量使用 inverting gate 而非 noninverting gate<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 wire 上移动 inversion bubble<span class="mojikumi-line-start">（</span>从上一个输出移到下一个输入<span class="mojikumi-line-end">）</span></li>
<li>在 wire 的两侧同时加上 inversion bubble<span class="mojikumi-line-start">（</span>或者 NOT gate<span class="mojikumi-line-end">）</span></li>
<li>消除同一根 wire 上的两个 inversion bubble</li>
<li>将 inversion bubble 换到另一侧<span class="mojikumi-line-start">（</span>输入 / 输出<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且改变 gate 的类型<span class="mojikumi-line-start">（</span>AND / OR<span class="mojikumi-line-end">）</span></li>
</ul>
<h3 id="combinational-circuit-minimization" class="heading"><a href="#combinational-circuit-minimization" class="heading-anchor" aria-label="章节： Combinational-Circuit Minimization" tabindex="-1"></a><span>Combinational-Circuit Minimization</span></h3>
<p>一般情况下<span class="mojikumi-line-end">，</span>逻辑表达式的化简主要用的是定理 T10<span class="mojikumi-line-start">（</span>Combining<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>就是在 sum of products 中找到仅有一项相反的两个 product 将它们合并<span class="mojikumi-line-end">，</span>最终得到的也是一个 sum of products<span class="mojikumi-line-end">，</span>实现为 2-level<span class="mojikumi-line-start">（</span>first-level 计算 product<span class="mojikumi-line-end">，</span>second-level 计算 sum<span class="mojikumi-line-end">）</span>的电路<span class="mojikumi-line-end">。</span></p>
<p>product of sums 电路是对偶的<span class="mojikumi-line-end">，</span>就不重复了<span class="mojikumi-line-end">，</span>下文也是一样<span class="mojikumi-line-end">。</span></p>
<h3 id="karnaugh-maps" class="heading"><a href="#karnaugh-maps" class="heading-anchor" aria-label="章节： Karnaugh Maps" tabindex="-1"></a><span>Karnaugh Maps</span></h3>
<p>如 DDPP5 Figure 3-23 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-3-23.15ec6efa.webp"><img srcset="/assets/ddpp-fig-3-23.43ab9a40.png" loading="lazy" src="/assets/ddpp-fig-3-23.43ab9a40.png" width="1235" height="457" alt="2-variable, 3-variable, and 4-variable Karnaugh maps"></picture></p>
<p>在 Karnaugh map 中<span class="mojikumi-line-end">，</span>每一个表示一个 minterm<span class="mojikumi-line-end">，</span>相邻<span class="mojikumi-line-start">（</span>包括跨过边界到另一侧的相邻<span class="mojikumi-line-end">）</span>的格子仅有一位相反<span class="mojikumi-line-end">，</span>所以边长为 1 / 2 / 4 的矩形可以合并<span class="mojikumi-line-end">。</span></p>
<p>选出若干矩形<span class="mojikumi-line-end">，</span>恰好覆盖所有输出为 1 的格子<span class="mojikumi-line-end">，</span>就可以化简逻辑表达式<span class="mojikumi-line-end">。</span></p>
<p>如果一个矩形覆盖的全是 1<span class="mojikumi-line-end">，</span>并且是极大的<span class="mojikumi-line-start">（</span>在其对应的 product 中减少任何一个输入都会使其覆盖到 0<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>就称作一个 <i>prime implicant</i><span class="mojikumi-line-end">。</span>最简的逻辑表达式是若干 prime implicant 的 sum<span class="mojikumi-line-end">。</span></p>
<p>有的函数的 Karnaugh map 非常分散<span class="mojikumi-line-start">（</span>例如 parity function<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>没有连成一块的 1<span class="mojikumi-line-end">，</span>就需要多级而非 2-level 的电路来进行化简<span class="mojikumi-line-end">。</span></p>
<p>在 FPGA 中<span class="mojikumi-line-end">，</span>输入数量较少的电路都是通过 lookup table (LUT) 而非 gate-level circuit 来实现<span class="mojikumi-line-end">，</span>只需真值表就可以<span class="mojikumi-line-end">。</span>但复杂的电路需要由多个 LUT 组合起来<span class="mojikumi-line-end">，</span>此时逻辑表达式的化简依然有用<span class="mojikumi-line-end">。</span></p>
<h2 id="timing-hazards" class="heading"><a href="#timing-hazards" class="heading-anchor" aria-label="章节： Timing Hazards" tabindex="-1"></a><span>Timing Hazards</span></h2>
<p>真实的电路中会有 delay<span class="mojikumi-line-end">，</span>而上面研究的都是 combinational logic circuit 的 <i>steady-state behavior</i><span class="mojikumi-line-end">，</span>没有考虑到 <i>transient behavior</i><span class="mojikumi-line-end">。</span></p>
<p>因为 delay 的存在<span class="mojikumi-line-end">，</span>可能会发生这样的情况<span class="mojikumi-line-end">：</span>输入发生了改变<span class="mojikumi-line-end">，</span>稳态下的输出不变<span class="mojikumi-line-end">，</span>但在一瞬间内输出发生了变化<span class="mojikumi-line-start">（</span>产生了一个 short pulse<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这样的 pulse 被称作 <i>glitch</i><span class="mojikumi-line-end">。</span></p>
<p>如果一个电路有产生 glitch 的可能性<span class="mojikumi-line-end">，</span>则称这个电路存在 <i>hazard</i><span class="mojikumi-line-end">。</span>实际物理电路的 delay 大小等因素难以控制<span class="mojikumi-line-end">，</span>所以这里只是考虑产生 glitch 的可能性<span class="mojikumi-line-end">，</span>而非实际是否有 glitch 产生<span class="mojikumi-line-start">（</span>有点类似于并发编程中要保证所有可能的执行顺序下都不出错<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="static-hazards" class="heading"><a href="#static-hazards" class="heading-anchor" aria-label="章节： Static Hazards" tabindex="-1"></a><span>Static Hazards</span></h3>
<p><i>static-1 hazard</i><span class="mojikumi-line-end">：</span>稳态输出是 1<span class="mojikumi-line-end">，</span>改变某一个输入后稳态输出还是 1<span class="mojikumi-line-end">，</span>但这一个输入改变时可能会短暂地输出 0<span class="mojikumi-line-end">。</span>static-0 hazard 是类似的<span class="mojikumi-line-end">。</span></p>
<p>书上给了个例子<span class="mojikumi-line-end">，</span>但这个其实很好理解<span class="mojikumi-line-end">，</span>就是电路的一个输入作为多个 gate 的输入<span class="mojikumi-line-end">，</span>而这些 gate 的输出变化得有快有慢<span class="mojikumi-line-end">。</span></p>
<h3 id="finding-static-hazards-using-maps" class="heading"><a href="#finding-static-hazards-using-maps" class="heading-anchor" aria-label="章节： Finding Static Hazards Using Maps" tabindex="-1"></a><span>Finding Static Hazards Using Maps</span></h3>
<p>正常的 sum of products 电路中不会有 static-0 hazard<span class="mojikumi-line-end">，</span>可能有 static-1 hazard<span class="mojikumi-line-end">。</span></p>
<p>可以用 Karnaugh map 来找到 hazard<span class="mojikumi-line-end">：</span>如果两个相邻的 1 没有被同一个 gate 覆盖<span class="mojikumi-line-end">，</span>从其中一个变为另一个时就可能产生 glitch<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>因为极端情况下可能所有覆盖原来那一格的 gate 先全部变为 0<span class="mojikumi-line-end">，</span>覆盖后来那一格的 gate 才变为 1<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>消除 hazard 就是用冗余的 gate 来覆盖这样的相邻的 1<span class="mojikumi-line-end">，</span>类似于定理 T11<span class="mojikumi-line-start">（</span>Consensus<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="dynamic-hazards" class="heading"><a href="#dynamic-hazards" class="heading-anchor" aria-label="章节： Dynamic Hazards" tabindex="-1"></a><span>Dynamic Hazards</span></h3>
<p>如果变化一个输入时可能产生不止一次 glitch<span class="mojikumi-line-end">，</span>就称作 <i>dynamic hazard</i><span class="mojikumi-line-end">。</span></p>
<p>一个正常的 2-level sum of products / product of sums 电路中不会有 dynamic hazard<span class="mojikumi-line-end">。</span></p>
<h3 id="designing-hazard-free-circuits" class="heading"><a href="#designing-hazard-free-circuits" class="heading-anchor" aria-label="章节： Designing Hazard-Free Circuits" tabindex="-1"></a><span>Designing Hazard-Free Circuits</span></h3>
<p>在多数电路中<span class="mojikumi-line-start">（</span>尤其是 synchronous digital system 中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>hazard 不会造成什么影响<span class="mojikumi-line-end">。</span>但在某些电路<span class="mojikumi-line-start">（</span>asynchronous sequential circuits<span class="mojikumi-line-end">）</span>中<span class="mojikumi-line-end">，</span>需要避免 hazard 的存在<span class="mojikumi-line-end">。</span></p>
<p>在一般的电路中消除 hazard 是复杂的<span class="mojikumi-line-end">，</span>而在 sum of products 中<span class="mojikumi-line-end">，</span>可以用 Karnaugh map 或者取遍所有 prime implicant<span class="mojikumi-line-start">（</span>称作 <i>complete sum</i><span class="mojikumi-line-end">）</span>来消除 hazard<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第二章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp-2</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp-2</guid>
            <pubDate>Tue, 24 Jan 2023 14:37:12 GMT</pubDate>
            <description><![CDATA[

<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第二章 <span class="mojikumi">“</span>Number Systems and Codes<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为一些常用的编码以及纠错码的原理<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[

<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第二章 <span class="mojikumi">“</span>Number Systems and Codes<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为一些常用的编码以及纠错码的原理<span class="mojikumi-line-end">。</span></p>

<p>开头整数编码的内容很多是 <a href="/post/2022/09/csapp-2">CS:APP 第二章</a> 讲过的<span class="mojikumi-line-end">，</span>也有一些新内容<span class="mojikumi-line-end">，</span>但基本上都是标星的可选内容<span class="mojikumi-line-end">，</span>我看是看了但懒得写笔记了<span class="mojikumi-line-start">（</span></p>
<hr>
<p>一套编码被称作一个 <i>code</i><span class="mojikumi-line-end">，</span>一个 code 中的单个合法编码<span class="mojikumi-line-start">（</span>二进制串<span class="mojikumi-line-end">）</span>被称作一个 <i>code word</i><span class="mojikumi-line-end">。</span></p>
<h2 id="gray-code" class="heading"><a href="#gray-code" class="heading-anchor" aria-label="章节： Gray Code" tabindex="-1"></a><span>Gray Code</span></h2>
<p>Gray code 的性质<span class="mojikumi-line-end">：</span>相邻两个数的 code word 只有一位不同<span class="mojikumi-line-end">，</span>且 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的 code word 中只有一个 1<span class="mojikumi-line-start">（</span>也就是说 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit Gray code 的首尾也只有一位不同<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<a id="4-bit-gray-code" name="4-bit-gray-code" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>4-bit Gray code</span></h3><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h4><ile-root id="ile-29"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-29--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb"> 0: 0000</span></span>
<span><span style="color: #d6deeb"> 1: 0001</span></span>
<span><span style="color: #d6deeb"> 2: 0011</span></span>
<span><span style="color: #d6deeb"> 3: 0010</span></span>
<span><span style="color: #d6deeb"> 4: 0110</span></span>
<span><span style="color: #d6deeb"> 5: 0111</span></span>
<span><span style="color: #d6deeb"> 6: 0101</span></span>
<span><span style="color: #d6deeb"> 7: 0100</span></span>
<span><span style="color: #d6deeb"> 8: 1100</span></span>
<span><span style="color: #d6deeb"> 9: 1101</span></span>
<span><span style="color: #d6deeb">10: 1111</span></span>
<span><span style="color: #d6deeb">11: 1110</span></span>
<span><span style="color: #d6deeb">12: 1010</span></span>
<span><span style="color: #d6deeb">13: 1011</span></span>
<span><span style="color: #d6deeb">14: 1001</span></span>
<span><span style="color: #d6deeb">15: 1000</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53"> 0: 0000</span></span>
<span><span style="color: #403f53"> 1: 0001</span></span>
<span><span style="color: #403f53"> 2: 0011</span></span>
<span><span style="color: #403f53"> 3: 0010</span></span>
<span><span style="color: #403f53"> 4: 0110</span></span>
<span><span style="color: #403f53"> 5: 0111</span></span>
<span><span style="color: #403f53"> 6: 0101</span></span>
<span><span style="color: #403f53"> 7: 0100</span></span>
<span><span style="color: #403f53"> 8: 1100</span></span>
<span><span style="color: #403f53"> 9: 1101</span></span>
<span><span style="color: #403f53">10: 1111</span></span>
<span><span style="color: #403f53">11: 1110</span></span>
<span><span style="color: #403f53">12: 1010</span></span>
<span><span style="color: #403f53">13: 1011</span></span>
<span><span style="color: #403f53">14: 1001</span></span>
<span><span style="color: #403f53">15: 1000</span></span></samp></pre></div></section></div></details></aside>
<p>递归构造<span class="mojikumi-line-end">：</span></p>
<ol>
<li><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span>-bit Gray code: 0 是 0<span class="mojikumi-line-end">，</span>1 是 1</li>
<li><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>-bit Gray code:
<ul>
<li>前 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 个数和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit Gray code 相同<span class="mojikumi-line-start">（</span>开头加上 0<span class="mojikumi-line-end">）</span></li>
<li>后 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 个数是把 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit Gray code 逆序排列再在开头加上 1</li>
</ul>
</li>
</ol>
<p>直接计算单个数的 Gray code<span class="mojikumi-line-end">：</span></p>
<ul>
<li>递归就能直接计算<span class="mojikumi-line-end">，</span><s>相信大家都会做 <a href="https://uoj.ac/problem/488">NOIPD1T1</a> 吧<span class="mojikumi-line-end">，</span>记得开 <code>unsigned long long</code></s><span class="mojikumi-line-start">（</span></li>
<li>也可以这么算<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 的 Gray code 第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 位为 1 当且仅当 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 的二进制中第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 位和第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 位不同</li>
</ul>
<p>书中描述了一个使用场景<span class="mojikumi-line-end">：</span>一个磁盘的每个扇区需要编码<span class="mojikumi-line-end">，</span>从扇区上读取若干 bits 来识别当前处于哪个扇区<span class="mojikumi-line-end">，</span>在两个相邻扇区的交界处可能有部分 bits 来自其中一个扇区<span class="mojikumi-line-end">，</span>另外的 bits 来自另一个扇区<span class="mojikumi-line-end">，</span>Gray code 可以使最终读取到的结果一定是这两个扇区之一<span class="mojikumi-line-end">。</span></p>
<h2 id="codes-for-actions-conditions-and-states" class="heading"><a href="#codes-for-actions-conditions-and-states" class="heading-anchor" aria-label="章节： Codes for Actions, Conditions, and States" tabindex="-1"></a><span>Codes for Actions, Conditions, and States</span></h2>
<p>说白了就是如何编码一个 enum<span class="mojikumi-line-end">。</span>不同的编码方式有各自的特点<span class="mojikumi-line-end">，</span>可以从编码长度<span class="mojikumi-line-end">、</span>电路开销<span class="mojikumi-line-end">、</span>设计难度<span class="mojikumi-line-end">、</span>可纠错性等角度考虑<span class="mojikumi-line-end">，</span>选择最合适的编码方式<span class="mojikumi-line-end">，</span>或者组合使用多种编码方式<span class="mojikumi-line-end">。</span></p>
<ul>
<li>顺着编码为二进制可以使编码长度最短<span class="mojikumi-line-start">（</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2 n \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌉</span></span></span></span></span><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li><i>1-out-of-n-code</i><span class="mojikumi-line-end">：</span>合法的 code word 只有一位是 1<span class="mojikumi-line-end">，</span>每个 enum 对应某一位为 1<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>控制哪个灯开时<span class="mojikumi-line-end">，</span>这种编码方式无需再有电路来选择要开的灯<span class="mojikumi-line-end">，</span>直接将编码的每一位连到一盏灯就可以了<span class="mojikumi-line-end">。</span></li>
<li><i>m-out-of-n-code</i><span class="mojikumi-line-end">：</span>合法的 code word 恰有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span> 位是 1<span class="mojikumi-line-end">。</span>要检测一个 code word<span class="mojikumi-line-end">，</span>只需使用一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span>-input AND gate<span class="mojikumi-line-end">，</span>电路较为简单<span class="mojikumi-line-end">。</span>而 code word 总数有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>m</mi></mfrac><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\binom nm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7454em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>也很多<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="n-cubes-and-distance" class="heading"><a href="#n-cubes-and-distance" class="heading-anchor" aria-label="章节： n-Cubes and Distance" tabindex="-1"></a><span>n-Cubes and Distance</span></h2>
<p>以 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit 二进制串作为顶点<span class="mojikumi-line-end">，</span>在只有一个 bit 不同的串之间连边<span class="mojikumi-line-end">，</span>得到的图被称作 <i><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-cube</i><span class="mojikumi-line-end">，</span>可以画成一个<span class="mojikumi-line-start">（</span>超<span class="mojikumi-line-end">）</span>立方体<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Figure 2-8<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-2-8.a7fd31fd.webp"><img srcset="/assets/ddpp-fig-2-8.8dc5d6f5.png" loading="lazy" src="/assets/ddpp-fig-2-8.8dc5d6f5.png" width="1213" height="827" alt="n-cubes for n = 1, 2, 3, and 4."></picture></p>
<p>图上两个二进制串之间的距离被称作 <i>Hamming distance</i><span class="mojikumi-line-end">，</span>表示两个串中不相同的位数<span class="mojikumi-line-end">。</span></p>
<h2 id="codes-for-detecting-and-correcting-errors" class="heading"><a href="#codes-for-detecting-and-correcting-errors" class="heading-anchor" aria-label="章节： Codes for Detecting and Correcting Errors" tabindex="-1"></a><span>Codes for Detecting and Correcting Errors</span></h2>
<p>实际存储<span class="mojikumi-line-end">、</span>传输编码时<span class="mojikumi-line-end">，</span>可能会发生错误<span class="mojikumi-line-end">。</span>错误的具体行为可以由 <i>error model</i> 刻画<span class="mojikumi-line-end">。</span>最简单的 error model 是 <i>independent error model</i><span class="mojikumi-line-end">，</span>即每个错误只独立地改变编码中的一位<span class="mojikumi-line-end">，</span>多位同时发生错误的概率比一位发生错误的概率小得多<span class="mojikumi-line-end">。</span></p>
<h3 id="error-detecting-codes" class="heading"><a href="#error-detecting-codes" class="heading-anchor" aria-label="章节： Error-Detecting Codes" tabindex="-1"></a><span>Error-Detecting Codes</span></h3>
<p>对于一个 code<span class="mojikumi-line-end">，</span>不是 code word 的二进制串称作 <i>noncode word</i><span class="mojikumi-line-end">。</span></p>
<p><i>error-detecting code</i> 具有这样的性质<span class="mojikumi-line-end">：</span>任何一个 code word 在任意修改一位后都会得到一个 noncode word<span class="mojikumi-line-end">。</span></p>
<p>使用 error-detecting code 时<span class="mojikumi-line-end">，</span>可以认为只要是 code word 都没有发生错误<span class="mojikumi-line-end">，</span>noncode word 则一定发生了错误<span class="mojikumi-line-end">。</span></p>
<p>一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit error-detecting code 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-cube 的一个点独立集<span class="mojikumi-line-end">，</span>也就是说任意两个 code word 的 Hamming distance 都至少为 2<span class="mojikumi-line-end">。</span></p>
<p>奇偶性可以用来设计 error-detecting code<span class="mojikumi-line-end">：</span>任给一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit code<span class="mojikumi-line-end">，</span>将第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 位设为前 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 位中 1 的个数的奇偶性<span class="mojikumi-line-start">（</span>称作 <i>parity bit</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>则可以得到一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>-bit error-detecting code<span class="mojikumi-line-end">。</span>这样的编码称作 <i>1-bit parity code</i><span class="mojikumi-line-end">，</span>若 code word 都有偶数个 1 则称作 <i>even-parity code</i><span class="mojikumi-line-end">，</span>有奇数个 1 则称作 <i>odd-parity code</i><span class="mojikumi-line-end">。</span></p>
<h3 id="error-correcting-and-multiple-error-detecting-codes" class="heading"><a href="#error-correcting-and-multiple-error-detecting-codes" class="heading-anchor" aria-label="章节： Error-Correcting and Multiple-Error-Detecting Codes" tabindex="-1"></a><span>Error-Correcting and Multiple-Error-Detecting Codes</span></h3>
<p>如果一个 code 中两个 code word 的最小 Hamming distance 有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>c</mi><mo>+</mo><mi>d</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2c+d+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi-line-end">，</span>则可以对最多 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></span> 位的错误进行纠正<span class="mojikumi-line-end">，</span>并且检测到最多 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>+</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">c+d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></span> 位的错误<span class="mojikumi-line-start">（</span>一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>+</mo><mi>d</mi><mo>+</mo><mn>1</mn><mo>∼</mo><mn>2</mn><mi>c</mi><mo>+</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">c+d+1 \sim 2c+d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></span> 位的错误会被认为是来自另一个方向的错误而被错误地纠正<span class="mojikumi-line-end">，</span>从而不能被检测到<span class="mojikumi-line-end">；</span>可以选择少纠错几位来检测到更多位的错误<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>纠错就是找到和一个 noncode word 的 Hamming distance 最小的唯一一个 code word<span class="mojikumi-line-end">，</span>进行纠错的硬件被称作 error-correcting decoder<span class="mojikumi-line-end">。</span></p>
<h3 id="hamming-codes" class="heading"><a href="#hamming-codes" class="heading-anchor" aria-label="章节： Hamming Codes" tabindex="-1"></a><span>Hamming Codes</span></h3>
<p><i>Hamming code</i> 是一种通用的最小距离为 3 的编码<span class="mojikumi-line-end">。</span>一个有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 个 check bit 的 Hamming code 最多可以存储 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 个 information bit<span class="mojikumi-line-end">，</span>从而总共有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 个 bit<span class="mojikumi-line-end">。</span></p>
<p>一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2^n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span>-bit Hamming code 的 bit 依次编号为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∼</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1 \sim 2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi-line-end">，</span>编号为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1, 2, 4, \ldots, 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span> 的 bit 是 check bit<span class="mojikumi-line-end">。</span>每个 check bit 代表一个 group<span class="mojikumi-line-end">，</span>编号为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span> 的 check bit 所代表的 group 包含的是编号的二进制中包含 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span> 的所有 bit<span class="mojikumi-line-end">。</span>check bit 的取值使得每个 group 都含偶数个 1<span class="mojikumi-line-end">。</span></p>
<p>实际使用的 Hamming code 往往会将 check bit 移到末尾<span class="mojikumi-line-end">，</span>例如一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>15</mn></mrow><annotation encoding="application/x-tex">15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15</span></span></span></span></span>-bit Hamming code 中 bit 的编号依次为 15, 14, 13, 12, 11, 10, 9, 7, 6, 5, 3, 8, 4, 2, 1<span class="mojikumi-line-end">。</span></p>
<p>因为每个 bit 都至少属于一个 group<span class="mojikumi-line-end">，</span>改变一个 bit 会得到 noncode word<span class="mojikumi-line-end">。</span>改变编号为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span> 的两个 bit 时<span class="mojikumi-line-end">，</span>会改变 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 异或 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span> 对应的 group<span class="mojikumi-line-end">，</span>所以改变两个 bit 会得到 noncode word<span class="mojikumi-line-end">。</span>所以 Hamming code 中两个 code word 的 Hamming distance 至少为 3<span class="mojikumi-line-end">。</span></p>
<p>纠错时<span class="mojikumi-line-end">，</span>只要将错误的 check bit 的编号或起来就可以得到错误的 bit 的编号<span class="mojikumi-line-end">。</span></p>
<p>可以通过增加一个 parity bit 来得到一个最小距离为 4 的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>-bit extended Hamming code<span class="mojikumi-line-end">。</span></p>
<h3 id="crc-codes" class="heading"><a href="#crc-codes" class="heading-anchor" aria-label="章节： CRC Codes" tabindex="-1"></a><span>CRC Codes</span></h3>
<p><i>cyclic-redundancy-check (CRC) codes</i> 是一种得到广泛应用的 error-correcting code<span class="mojikumi-line-end">，</span>例如被用在文件系统和网络通信中<span class="mojikumi-line-end">，</span>它可以检测到成团出现的多位错误<span class="mojikumi-line-end">，</span>在一些场景中这种错误比随机出现的错误概率更高<span class="mojikumi-line-end">。</span></p>
<h3 id="two-dimensional-codes" class="heading"><a href="#two-dimensional-codes" class="heading-anchor" aria-label="章节： Two-Dimensional Codes" tabindex="-1"></a><span>Two-Dimensional Codes</span></h3>
<p>如 DDPP5 Figure 2-14 (a) 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-2-14-a.6b397e71.webp"><img srcset="/assets/ddpp-fig-2-14-a.ecefd691.png" loading="lazy" src="/assets/ddpp-fig-2-14-a.ecefd691.png" width="776" height="529" alt="所有 bits 排列成一个矩阵，矩阵被划分为四个部分: information bits, checks on rows, checks on columns, checks on checks."></picture></p>
<p>选择 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{row}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">row</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{col}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">col</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 两种编码方式<span class="mojikumi-line-end">，</span>设置 checks on rows 使得 information bits 所在的每一行都是一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{row}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">row</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的 code word<span class="mojikumi-line-end">，</span>设置 checks on columns 使得 information bits 所在的每一列都是一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{col}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">col</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的 code word<span class="mojikumi-line-end">，</span>而 checks on checks 则可以选择<span class="mojikumi-line-end">，</span>要么每一行都是一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{row}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">row</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的 code word<span class="mojikumi-line-end">，</span>要么每一列都是一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{col}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">col</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的 code word<span class="mojikumi-line-end">。</span></p>
<p>这样得到的 <i>two-dimensional code</i> 的最小距离是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{row}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">row</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">l</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{\mathrm{col}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">col</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 的乘积<span class="mojikumi-line-end">，</span>所以 two-dimensional code 也被叫做 <i>product code</i><span class="mojikumi-line-end">。</span></p>
<p>RAID 就可以看作使用了 two-dimensional code<span class="mojikumi-line-end">：</span>每块数据盘内的每个 block 都有 CRC code<span class="mojikumi-line-end">，</span>还有一块硬盘用来存所有数据盘的 parity bits<span class="mojikumi-line-end">。</span></p>
<h3 id="checksum-codes" class="heading"><a href="#checksum-codes" class="heading-anchor" aria-label="章节： Checksum Codes" tabindex="-1"></a><span>Checksum Codes</span></h3>
<p>parity bit 可以看作是 bits 在模 2 意义下的和<span class="mojikumi-line-end">，</span>可以推广为 <i>checksum</i><span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>模 256 意义下<span class="mojikumi-line-end">，</span>可以计算 bytes 的和<span class="mojikumi-line-end">，</span>来检测 bytes 的错误<span class="mojikumi-line-end">。</span></p>
<p>除了改变模数<span class="mojikumi-line-end">，</span>还可以改变计算方式<span class="mojikumi-line-end">，</span>例如使用 ones<span class="mojikumi-narrow-left">’</span> complement 加法来计算模 255 或 65535 意义下的 checksum<span class="mojikumi-line-end">。</span></p>
<h3 id="m-out-of-n-codes" class="heading"><a href="#m-out-of-n-codes" class="heading-anchor" aria-label="章节： m-out-of-n Codes" tabindex="-1"></a><span>m-out-of-n Codes</span></h3>
<p><a href="#codes-for-actions-conditions-and-states">m-out-of-n code</a> 的最小距离为 2<span class="mojikumi-line-end">，</span>并且能够检测到 <i>unidirectional multiple errors</i><span class="mojikumi-line-end">，</span>即所有错误都是 0 变 1 或 1 变 0 的改变多位的错误<span class="mojikumi-line-end">。</span></p>
<h2 id="codes-for-transmitting-and-storing-serial-data" class="heading"><a href="#codes-for-transmitting-and-storing-serial-data" class="heading-anchor" aria-label="章节： Codes for Transmitting and Storing Serial Data" tabindex="-1"></a><span>Codes for Transmitting and Storing Serial Data</span></h2>
<ul>
<li>parallel data transmission: 一个 data word 的所有 bit 同时传输</li>
<li>serial data transmission: 一个 bit 一个 bit 传输</li>
</ul>
<p>在某些场景下<span class="mojikumi-line-end">，</span>serial data transmission 可以减少线路开销<span class="mojikumi-line-end">，</span>或者减少一些设计上的困难<span class="mojikumi-line-end">。</span></p>
<p>最基本的 serial data transmission 需要三个信号<span class="mojikumi-line-end">：</span></p>
<ul>
<li>CLOCK: 将时间划分为一个个 <i>bit cell</i><span class="mojikumi-line-end">，</span>标识出每个 bit 所处的时间范围</li>
<li>SERDATA: 实际传输的数据<span class="mojikumi-line-end">，</span>具体内容依 <i>line code</i> 而定</li>
<li>SYNC: 用来标识 bit 的 significance<span class="mojikumi-line-end">，</span>例如传输 bytes 时用来标记每个 byte 的开头</li>
</ul>
<p>实际上<span class="mojikumi-line-end">，</span>也可以选择合适的 line code 从而只需传输一个信号<span class="mojikumi-line-end">，</span>从数据信号中读取出 CLOCK 和 SYNC 的信息<span class="mojikumi-line-end">。</span></p>
<a id="serial-line-codes" name="serial-line-codes" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-gray-2 dark:bg-gray-11 b-gray-6" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-timer-sand text-gray" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>WIP: </span><span data-v-a2ab257f>Serial Line Codes</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>Serial Line Codes 这一节我感觉有些地方没完全理解<span class="mojikumi-line-end">，</span>也有和 Wikipedia 有出入的地方<span class="mojikumi-line-end">，</span>也标星了<span class="mojikumi-line-end">，</span>感觉后面不一定用得上<span class="mojikumi-line-end">，</span>就先咕了<span class="mojikumi-line-end">。</span></p></div></div></aside>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 学习笔记系列 序]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp</guid>
            <pubDate>Sun, 15 Jan 2023 11:49:22 GMT</pubDate>
            <description><![CDATA[<p><a href="https://wakerly.org/DDPP/">Digital Design Principles and Practices</a> 5th edition 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[<p><a href="https://wakerly.org/DDPP/">Digital Design Principles and Practices</a> 5th edition 的学习笔记<span class="mojikumi-line-end">。</span></p>

<hr>
<p>下学期要选数电或数设<span class="mojikumi-line-end">，</span>听说数电是纯考试<span class="mojikumi-line-end">，</span>数设是考试 + 大作业<span class="mojikumi-line-end">，</span>又听说数设助教全是 tuna 群友<span class="mojikumi-line-end">，</span>就选了数设<span class="mojikumi-line-end">，</span>还好没掉课<span class="mojikumi-line-start">（</span></p>
<p>虽然不知道讲课内容和 DDPP 有多少是正交的<span class="mojikumi-line-end">，</span>但看一看 <s>除了没时间学缓考的课有挂科风险</s> 也没啥坏处<span class="mojikumi-line-end">。</span></p>
<p>上学期 <a href="/post/2022/09/csapp">在上课期间学 CS:APP</a> 还是挺痛苦的<span class="mojikumi-line-end">，</span>希望这次寒假能多学一点<span class="mojikumi-line-end">。</span>本来想寒假补完一下 CS:APP<span class="mojikumi-line-end">，</span>但大概是没时间了<span class="mojikumi-line-end">。</span>先学 DDPP 可能对 CS:APP 的第四章也会有些帮助 (?)<span class="mojikumi-line-end">。</span></p>
<p>看了下 preface 和 chapter 1 开头<span class="mojikumi-line-end">，</span>感觉这个作者说话挺有意思的<span class="mojikumi-line-end">，</span>joke 含量很高<span class="mojikumi-line-end">。</span>下面这句摘自 chapter 1 开头<span class="mojikumi-line-end">，</span>两词三义<span class="mojikumi-line-end">，</span><s><a href="https://zh.moegirl.org.cn/%E5%AE%AB%E4%B8%8B%E7%88%B1"><span class="text-aisan">爱姐</span></a><a href="https://zh.moegirl.org.cn/%E5%86%85%E7%94%B0%E7%A7%80"><span class="text-mia">秀酱</span></a>狂喜</s><span class="mojikumi-line-end">，</span><s>又多了一个不读中文翻译的理由</s><span class="mojikumi-line-end">，</span><s>让技术书籍的翻译也来体验一下<span class="text-nijigasaki">虹咲</span>烤肉 man 的痛苦吧</s><span class="mojikumi-line-end">。</span></p>
<blockquote>
<p>Or perhaps you<span class="mojikumi-narrow-left">’</span>re an electrical engineering student who already knows something about analog electronics and circuit design, but you wouldn<span class="mojikumi-narrow-left">’</span>t know a bit if it bit you.</p>
</blockquote>
<p>P.S. 为什么不是 <span class="mojikumi">“</span>DD:PP<span class="mojikumi">”</span> 呢 🤔 <s>是不是作者学 CS:APP 的时候觉得冒号打起来太麻烦了<span class="mojikumi-line-end">，</span>就想着一定要为自己的读者省去这个麻烦</s><span class="mojikumi-line-end">。</span></p>
<p>UPD: 终于读完第一章了<span class="mojikumi-line-end">。</span>drill problem 第一题是<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">“</span>Give three different definitions for the word <span class="mojikumi-narrow-right">‘</span>bit<span class="mojikumi-narrow-left">’</span> as used in this chapter<span class="mojikumi">”</span><wbr><span class="mojikumi-line-start">（</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CS:APP 第九章学习笔记]]></title>
            <link>https://ouuan.moe/post/2022/11/csapp-9</link>
            <guid>https://ouuan.moe/post/2022/11/csapp-9</guid>
            <pubDate>Mon, 26 Dec 2022 06:44:19 GMT</pubDate>
            <description><![CDATA[

<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第九章 <span class="mojikumi">“</span>Virtual Memory<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为 page table<span class="mojikumi-line-end">、</span>address translation<span class="mojikumi-line-end">、</span>memory mapping<span class="mojikumi-line-end">、</span>dynamic allocation<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[

<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第九章 <span class="mojikumi">“</span>Virtual Memory<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为 page table<span class="mojikumi-line-end">、</span>address translation<span class="mojikumi-line-end">、</span>memory mapping<span class="mojikumi-line-end">、</span>dynamic allocation<span class="mojikumi-line-end">。</span></p>

<p>虚存是对 main memory 的抽象<span class="mojikumi-line-end">，</span>它的主要作用有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>将 main memory 用作 disk 的 cache<span class="mojikumi-line-end">，</span>只将 active 的部分放在 main memory<span class="mojikumi-line-end">，</span>在需要时在 disk 和 memory 之间传递数据</li>
<li>通过给应用程序提供统一的地址空间<span class="mojikumi-line-end">，</span>简化内存管理</li>
<li>通过给不同进程提供独立的地址空间<span class="mojikumi-line-end">，</span>防止一个进程的数据被其他进程破坏</li>
</ul>
<p>虚存在系统中起着非常重要的作用<span class="mojikumi-line-end">，</span>学习虚存一方面可以学会使用它的一些强大功能<span class="mojikumi-line-start">（</span>例如将文件映射到内存中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>另一方面可以避免一些内存管理相关的错误<span class="mojikumi-line-end">。</span></p>
<h2 id="physical-and-virtual-addressing" class="heading"><a href="#physical-and-virtual-addressing" class="heading-anchor" aria-label="章节： Physical and Virtual Addressing" tabindex="-1"></a><span>Physical and Virtual Addressing</span></h2>
<p>内存有两种寻址方式<span class="mojikumi-line-end">：</span>物理寻址和虚拟寻址<span class="mojikumi-line-end">。</span></p>
<p>main memory 可以看作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span> 个 byte 排列在一起<span class="mojikumi-line-end">，</span>地址分别为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><mi>M</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim M-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi-line-end">，</span>物理寻址就是 CPU 直接将需要的地址传给 main memory<span class="mojikumi-line-end">，</span>获取到数据后传回 CPU<span class="mojikumi-line-end">。</span></p>
<p>虚拟寻址需要硬件和操作系统配合<span class="mojikumi-line-end">，</span>CPU 将虚拟地址传给 <i>memory management unit</i> (MMU)<span class="mojikumi-line-end">，</span>MMU 将虚拟地址翻译成物理地址传给 main memory<span class="mojikumi-line-end">，</span>而这个过程又和操作系统相关<span class="mojikumi-line-end">。</span></p>
<h2 id="address-spaces" class="heading"><a href="#address-spaces" class="heading-anchor" aria-label="章节： Address Spaces" tabindex="-1"></a><span>Address Spaces</span></h2>
<p><span class="mojikumi-line-start">（</span>线性<span class="mojikumi-line-end">）</span>地址空间是连续的非负整数构成的集合<span class="mojikumi-line-end">，</span>一个系统有一个物理地址空间 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, M-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span><span class="mojikumi-line-end">，</span>还有若干个虚拟地址空间 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, N-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span><span class="mojikumi-line-end">，</span>其中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">N = 2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>称作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>-bit 地址空间<span class="mojikumi-line-end">，</span>一般是 32-bit 或者 64-bit<span class="mojikumi-line-end">。</span></p>
<p>同一份数据可以在不同的地址空间有不同的地址<span class="mojikumi-line-end">，</span>是虚存的一个基本思想<span class="mojikumi-line-end">。</span></p>
<h2 id="vm-as-a-tool-for-caching" class="heading"><a href="#vm-as-a-tool-for-caching" class="heading-anchor" aria-label="章节： VM as a Tool for Caching" tabindex="-1"></a><span>VM as a Tool for Caching</span></h2>
<p>可以说<span class="mojikumi-line-end">，</span>虚存是存储在磁盘上的<span class="mojikumi-line-end">，</span>而物理内存是虚存的 cache<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>但实际上虚存在很多时候会只出现在这个 cache 里而只在必要时被写入到磁盘上<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="page" class="heading"><a href="#page" class="heading-anchor" aria-label="章节： page" tabindex="-1"></a><span>page</span></h3>
<p>虚存被分成了很多固定大小的块<span class="mojikumi-line-end">，</span>每一块称作一个 <i>virtual page</i><span class="mojikumi-line-end">，</span>而物理内存被分为同样大小的块<span class="mojikumi-line-end">，</span>每一块被称作一个 <i>physical page</i><span class="mojikumi-line-end">。</span>在 cache 中<span class="mojikumi-line-end">，</span>这样的一块一般被称作一个 block<span class="mojikumi-line-end">，</span>但在虚存中被称作一个 page<span class="mojikumi-line-end">。</span></p>
<p>因为 DRAM 比磁盘快很多<span class="mojikumi-line-end">，</span>并且磁盘的连续访问比随机访问快很多<span class="mojikumi-line-end">：</span></p>
<ul>
<li>虚存的一个 page 会比较大<span class="mojikumi-line-end">，</span>一般有 4KB ~ 2MB</li>
<li>虚存是 <a href="/post/2022/12/csapp-6#cache-%E7%9A%84%E5%88%86%E7%B1%BB">fully associative cache</a></li>
<li>操作系统会使用一些比 SRAM cache 更加复杂的算法作为 replacement policy 来管理虚存</li>
</ul>
<p>一个 virtual page 可能处于三种状态之一: unallocated<span class="mojikumi-line-end">、</span>cached<span class="mojikumi-line-end">、</span>uncached<span class="mojikumi-line-end">。</span></p>
<h3 id="page-table" class="heading"><a href="#page-table" class="heading-anchor" aria-label="章节： page table" tabindex="-1"></a><span>page table</span></h3>
<p>在物理内存中存放着一张 <i>page table</i><span class="mojikumi-line-end">，</span>虚拟地址空间中的每个 page 都对应 page table 中的一项 (<i>page table entry</i>, PTE)<span class="mojikumi-line-end">。</span>每一项包含一个 valid bit 和一个地址<span class="mojikumi-line-end">：</span></p>
<ul>
<li>cached: valid bit set<span class="mojikumi-line-end">，</span>地址为该 page 的缓存的物理地址</li>
<li>uncached: valid bit not set<span class="mojikumi-line-end">，</span>地址指向磁盘上的 virtual page</li>
<li>unallocated: valid bit not set<span class="mojikumi-line-end">，</span>地址为 null</li>
</ul>
<h3 id="page-fault" class="heading"><a href="#page-fault" class="heading-anchor" aria-label="章节： page fault" tabindex="-1"></a><span>page fault</span></h3>
<p>在地址翻译时<span class="mojikumi-line-end">，</span>MMU 会查看传入的虚拟地址对应的 PTE<span class="mojikumi-line-end">，</span>若 cached<span class="mojikumi-line-end">，</span>则称作 <i>page hit</i><span class="mojikumi-line-end">，</span>就会将 PTE 存储的物理地址传给 main memory<span class="mojikumi-line-end">；</span>否则<span class="mojikumi-line-end">，</span>就是 cache miss<span class="mojikumi-line-end">，</span>在虚存中被称作 <i>page fault</i><span class="mojikumi-line-end">。</span></p>
<p>page fault 是一个 exception<span class="mojikumi-line-end">，</span>会触发 kernel 中的 page fault handler<span class="mojikumi-line-end">。</span>page fault handler 会在 physical memory 中选择一个 physical page<span class="mojikumi-line-start">（</span>victim page<span class="mojikumi-line-end">）</span>用来存这个触发 page fault 的 page<span class="mojikumi-line-end">，</span>先将 victim page 原有的数据在必要时放回磁盘<span class="mojikumi-line-end">，</span>然后将新的数据存入 victim page<span class="mojikumi-line-end">，</span>再相应地修改 page table 中的这两个 PTE<span class="mojikumi-line-end">，</span>使得 victim page 原来存的那个 virtual page 变为 uncached<span class="mojikumi-line-end">，</span>而新存入的 virtual page 变为 cached 并且地址指向 victim page<span class="mojikumi-line-end">。</span>page fault handler 的最终效果就是<span class="mojikumi-line-end">，</span>一开始想要的 virtual page 已经 cached<span class="mojikumi-line-end">，</span>于是在返回到 exception 触发的位置时就可以 page hit 而正常读取数据了<span class="mojikumi-line-end">。</span></p>
<p>在磁盘和内存间传递数据在虚存中被称作 <i>swapping</i> 或 <i>paging</i><span class="mojikumi-line-end">：</span></p>
<blockquote>
<p>Pages are <i>swapped in</i> (<i>paged in</i>) from disk to DRAM, and <i>swapped out</i> (<i>paged out</i>) from DRAM to disk.</p>
</blockquote>
<p>虚存的 cache miss 是非常昂贵的<span class="mojikumi-line-end">，</span>但由于程序访问内存的 locality<span class="mojikumi-line-end">，</span>一般来说 page fault 很少触发<span class="mojikumi-line-end">，</span>效率就不会太差<span class="mojikumi-line-end">。</span>不断触发 page fault 的情况称作 <i>thrashing</i><span class="mojikumi-line-end">，</span>会大大影响程序的效率<span class="mojikumi-line-end">。</span></p>
<h2 id="vm-as-a-tool-for-memory-management" class="heading"><a href="#vm-as-a-tool-for-memory-management" class="heading-anchor" aria-label="章节： VM as a Tool for Memory Management" tabindex="-1"></a><span>VM as a Tool for Memory Management</span></h2>
<p>实际上<span class="mojikumi-line-end">，</span>page table 在一个系统中并非只有一份<span class="mojikumi-line-end">，</span>而是每个进程都有一份<span class="mojikumi-line-end">，</span>并且可以把同一个 physical page 映射到不同进程中的多个 virtual page<span class="mojikumi-line-end">。</span></p>
<p>虚存为内存管理提供了如下的便利<span class="mojikumi-line-end">：</span></p>
<ul>
<li>简化了 linking<span class="mojikumi-line-end">，</span>使得链接时无需考虑具体的物理地址<span class="mojikumi-line-end">，</span>不同程序可以使用同样的虚拟地址分配方案<span class="mojikumi-line-end">。</span></li>
<li>简化了 loading<span class="mojikumi-line-end">，</span>使得加载程序时只需将可执行文件的段落映射到虚存中<span class="mojikumi-line-end">，</span>不用拷贝数据<span class="mojikumi-line-end">，</span>等访问到某个 page 时才会 page in<span class="mojikumi-line-end">。</span>这样的将文件内容映射到虚存中的操作称作 <a href="#memory-mapping">memory mapping</a><span class="mojikumi-line-end">，</span>Linux 提供了 <code>mmap</code> system call 来进行 memory mapping<span class="mojikumi-line-end">。</span></li>
<li>简化了内存共享<span class="mojikumi-line-end">，</span>操作系统可以将进程私有的数据映射到不同的 physical page<span class="mojikumi-line-end">，</span>而将共享的数据映射到相同的 physical page<span class="mojikumi-line-end">。</span></li>
<li>简化了内存分配<span class="mojikumi-line-end">，</span>因为应用请求一段连续的 virtual pages 时<span class="mojikumi-line-end">，</span>操作系统可以将其映射到不连续的 physical pages<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="vm-as-a-tool-for-memory-protection" class="heading"><a href="#vm-as-a-tool-for-memory-protection" class="heading-anchor" aria-label="章节： VM as a Tool for Memory Protection" tabindex="-1"></a><span>VM as a Tool for Memory Protection</span></h2>
<ul>
<li>虚存可以轻松地给不同的进程提供不同的私有内存空间<span class="mojikumi-line-end">。</span></li>
<li>通过给 PTE 添加 permission bit <code>SUP</code><span class="mojikumi-line-end">、</span><code>READ</code><span class="mojikumi-line-end">、</span><code>WRITE</code><span class="mojikumi-line-end">，</span>就可以使某个 page 只读或者只能在 kernel mode 下被访问<span class="mojikumi-line-end">。</span>如果试图访问一个 page 时权限出错<span class="mojikumi-line-end">，</span>则会触发 CPU 的 general protection exception<span class="mojikumi-line-end">，</span>进而由 exception handler 向进程发送 SIGSEGV<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="address-translation" class="heading"><a href="#address-translation" class="heading-anchor" aria-label="章节： Address Translation" tabindex="-1"></a><span>Address Translation</span></h2>
<p>一个内存地址可以被分为两部分<span class="mojikumi-line-end">，</span>虚拟地址被分为高位的 <i>virtual page number</i> (VPN) 和低位的 <i>virtual page offset</i> (VPO)<span class="mojikumi-line-end">，</span>物理地址被分为 PPN 和 PPO<span class="mojikumi-line-end">。</span></p>
<p>CPU 中有一个 <i>page table base register</i> (PTBR)<span class="mojikumi-line-end">，</span>指向 page table 的起始地址<span class="mojikumi-line-end">。</span>地址翻译时<span class="mojikumi-line-end">，</span>MMU 通过 PTBR 和 VPN 得到 PTE 的地址<span class="mojikumi-line-end">，</span>从 main memory 获取 PTE<span class="mojikumi-line-end">，</span>根据 valid bit<span class="mojikumi-line-end">，</span>要么触发 page fault<span class="mojikumi-line-end">，</span>要么获取到 PPN<span class="mojikumi-line-end">，</span>而 PPO = VPO<span class="mojikumi-line-end">，</span>就得到了物理地址<span class="mojikumi-line-end">。</span></p>
<p>SRAM cache 一般会以物理地址来 cache main memory<span class="mojikumi-line-end">，</span>也就是说<span class="mojikumi-line-end">，</span>通过 PTE 的地址访问 PTE<span class="mojikumi-line-end">、</span>通过物理地址访问 main memory 时会首先尝试通过 SRAM cache 来访问<span class="mojikumi-line-end">。</span></p>
<p>如果每次都从 main memory 获取 PTE<span class="mojikumi-line-end">，</span>即使在 L1 cache hit 了效率也不够高<span class="mojikumi-line-end">，</span>所以 MMU 中还有一个小的 page table cache<span class="mojikumi-line-end">，</span>叫做 <i>translation lookaside buffer</i> (TLB)<span class="mojikumi-line-end">。</span>VPN 被分为两部分<span class="mojikumi-line-end">：</span>低位的 TLBI (index) 和高位的 TLBT (tag)<span class="mojikumi-line-end">，</span>其中 TLBI 用来选择 cache set<span class="mojikumi-line-end">，</span>TLBT 用来进行 cache line matching<span class="mojikumi-line-end">。</span>在地址翻译时<span class="mojikumi-line-end">，</span>会优先查询 TLB<span class="mojikumi-line-end">，</span>若 miss 再查询 page table<span class="mojikumi-line-end">。</span></p>
<p>地址空间往往很大<span class="mojikumi-line-end">，</span>如果只用一张 page table<span class="mojikumi-line-end">，</span>那么 page table 本身就会占用大量的空间<span class="mojikumi-line-end">，</span>所以可以将 page table 分层<span class="mojikumi-line-end">，</span>每层 page table 指向下一层 page table<span class="mojikumi-line-end">，</span>直到最后一层指向 VP / PP<span class="mojikumi-line-end">。</span></p>
<h2 id="case-study-core-i7-address-translation" class="heading"><a href="#case-study-core-i7-address-translation" class="heading-anchor" aria-label="章节： Case Study: Core i7 Address Translation" tabindex="-1"></a><span>Case Study: Core i7 Address Translation</span></h2>
<p>Core i7 memory system 如 CS:APP Figure 9.21 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig9.21.282f25d8.webp"><img srcset="/assets/csapp-fig9.21.032f64c1.png" loading="lazy" src="/assets/csapp-fig9.21.032f64c1.png" width="1207" height="934" alt="The Core i7 memory system"></picture></p>
<p>Core i7 使用 48-bit 的虚拟地址空间和 52-bit 的物理地址空间<span class="mojikumi-line-end">，</span>page size 可以设置为 4KB 或 4MB<span class="mojikumi-line-end">，</span>有四级 page table<span class="mojikumi-line-end">。</span></p>
<p>每个 PTE 有以下内容<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>还有一些其他内容<span class="mojikumi-line-end">）</span></p>
<ul>
<li>P: valid bit</li>
<li>R/W: 是否只读</li>
<li>U/S: 是否需要在 kernel mode 下访问</li>
<li>XD: 是否可以被读取指令<span class="mojikumi-line-start">（</span>是否可执行<span class="mojikumi-line-end">）</span></li>
<li>A: reference bit<span class="mojikumi-line-end">，</span>访问到时由 MMU 设置<span class="mojikumi-line-end">，</span>而由软件清除<span class="mojikumi-line-start">（</span>可以用于 replacement algorithm<span class="mojikumi-line-end">）</span></li>
<li>Base addr: child page table / physical page 的地址的高位 40 bits<span class="mojikumi-line-start">（</span>剩下 12 bits 即 4KB<span class="mojikumi-line-end">，</span>这要求地址以 4KB 对齐<span class="mojikumi-line-end">，</span>而 page size 一般就是 4KB<span class="mojikumi-line-end">）</span></li>
</ul>
<p>L1 page table 还有一项 PS 用来指定 page size<span class="mojikumi-line-end">。</span></p>
<p>L4 page table 还有 dirty bit D 用来表示 page 被写入过需要被 swap out (write back)<span class="mojikumi-line-end">，</span>以及 G 表示 global page 即切换进程时不从 TLB 中 evict 掉<span class="mojikumi-line-end">。</span></p>
<p>VPN 有 36 bits<span class="mojikumi-line-end">，</span>每 9 bits 用来访问一级 page table<span class="mojikumi-line-end">。</span></p>
<p>因为 L1 cache 是 8-way 32KB 的<span class="mojikumi-line-end">，</span>正好有 12 bits 用来选择 cache set<span class="mojikumi-line-end">，</span>所以在获取 PPN 的同时就可以把 VPO 发送给 L1 cache 来提前选择好 cache set<span class="mojikumi-line-end">。</span></p>
<h2 id="linux-virtual-memory-system" class="heading"><a href="#linux-virtual-memory-system" class="heading-anchor" aria-label="章节： Linux Virtual Memory System" tabindex="-1"></a><span>Linux Virtual Memory System</span></h2>
<p>kernel 的虚存中包含<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>kernel 的代码以及全局的数据结构</p>
</li>
<li>
<p>将整个物理内存连续地映射到虚存中<span class="mojikumi-line-end">，</span>这样就可以方便地访问特定的物理地址</p>
</li>
<li>
<p>和每个进程相关的数据结构<span class="mojikumi-line-end">，</span>例如 page table<span class="mojikumi-line-end">、</span>kernel stack<span class="mojikumi-line-end">、</span><code>task_struct</code> 等</p>
<p><span class="mojikumi-line-start">（</span>P.S. 这部分虽然是和每个进程相关<span class="mojikumi-line-end">，</span>但并不会在每个进程中有所不同<span class="mojikumi-line-end">，</span>CS:APP 中这里写错了<span class="mojikumi-line-end">，</span>在 errata 中指出了<span class="mojikumi-line-end">）</span></p>
</li>
</ul>
<p>Linux 将虚存划分为若干 <i>area</i><span class="mojikumi-line-start">（</span>也称 <i>segment</i><span class="mojikumi-line-end">）</span>来管理<span class="mojikumi-line-end">，</span>例如 code segment<span class="mojikumi-line-end">、</span>data segment<span class="mojikumi-line-end">、</span>heap<span class="mojikumi-line-end">、</span>shared library segment<span class="mojikumi-line-end">，</span>每个 area 是虚存中连续的一段<span class="mojikumi-line-end">。</span></p>
<p>kernel 为每个进程维护了一个 <code>task_struct</code><span class="mojikumi-line-end">，</span>其中的 <code>mm</code> 一项是一个 <code>mm_struct</code><span class="mojikumi-line-end">。</span><code>mm_struct</code> 的 <code>pgd</code> 一项是 L1 page table 的地址<span class="mojikumi-line-end">，</span>而 <code>mmap</code> 指向一个 <code>vm_<wbr>area_<wbr>struct</code><span class="mojikumi-line-end">。</span>每个 <code>vm_<wbr>area_<wbr>struct</code> 表示一个 area<span class="mojikumi-line-end">，</span>有以下几项<span class="mojikumi-line-start">（</span>还有一些其他项<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>vm_start</code> / <code>vm_end</code>: 指向 area 的开头 / 结尾</li>
<li><code>vm_page_prot</code>: area 中所有 page 的 access permission</li>
<li><code>vm_flags</code>: 一些 flag<span class="mojikumi-line-end">，</span>例如这个 area 中的 page 是否被所有进程共享</li>
<li><code>vm_prev</code> / <code>vm_next</code>: 指向相邻的 <code>vm_<wbr>area_<wbr>struct</code><span class="mojikumi-line-end">，</span>构成一个链表</li>
</ul>
<p>在处理 page fault 时<span class="mojikumi-line-end">，</span>page fault handler 首先会检查地址是否在某个 area 内<span class="mojikumi-line-start">（</span>不在则触发 segmentation fault<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>然后会检查是否有访问权限<span class="mojikumi-line-start">（</span>没有则触发 protection exception<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>如果一切 ok 就会根据 replacement algorithm 选择 victim page<span class="mojikumi-line-end">，</span>若其 dirty 则将其 swap out<span class="mojikumi-line-end">，</span>然后将新的 page swap in<span class="mojikumi-line-end">，</span>最后更新 page table 并返回<span class="mojikumi-line-end">。</span></p>
<a id="segmentation-fault-vs-protection-exception" name="segmentation-fault-vs-protection-exception" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>segmentation fault vs protection exception</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>segmentation fault 和 protection exception 有区别吗？general protection exception 不应该是 CPU 触发的吗<span class="mojikumi-line-end">，</span>怎么是 page fault handler 触发？segmentation fault 和 SIGSEGV 是什么关系？</p><p>我的理解是 kernel 收到 CPU 的 general protection exception 会向进程发送 SIGSEGV<span class="mojikumi-line-end">，</span>但 CS:APP 这里在相邻的两段分别用了 <span class="mojikumi">“</span>segmentation fault<span class="mojikumi">”</span> 和 <span class="mojikumi">“</span>protection exception<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span></p></div></div></aside>
<h2 id="memory-mapping" class="heading"><a href="#memory-mapping" class="heading-anchor" aria-label="章节： Memory Mapping" tabindex="-1"></a><span>Memory Mapping</span></h2>
<p>将一个 <i>object</i> 的内容设为一段虚存的初始值称作 <i>memory mapping</i><span class="mojikumi-line-end">。</span>这个 object 可以是文件系统中一个文件的一段 (<i>file-backed</i>)<span class="mojikumi-line-end">，</span>也可以是一个初始为空的 <i>anonymous file</i> (<i>demand-zero</i>)<span class="mojikumi-line-end">。</span></p>
<p>在 map 时并不会立即将数据放到物理内存中<span class="mojikumi-line-end">，</span>而是等到访问到某个 page 时再 swap in<span class="mojikumi-line-end">，</span>这称作 <i>demand paging</i><span class="mojikumi-line-end">。</span>操作系统会使用 <i>swap file</i> 来进行 swapping<span class="mojikumi-line-end">，</span>但只有进行了修改才会需要 swap out<span class="mojikumi-line-end">，</span>否则可以直接从 map 到的文件 swap in<span class="mojikumi-line-end">。</span></p>
<p>如果不同的进程映射到了同一个文件的同一段<span class="mojikumi-line-end">，</span>在物理内存中会只有一份数据<span class="mojikumi-line-end">。</span></p>
<p>memory mapping 有 shared 和 private 两种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>map as shared objects: 修改对其他进程可见<span class="mojikumi-line-end">，</span>如果是 file-backed 还会将内存修改同步到磁盘上的文件<span class="mojikumi-line-end">。</span></li>
<li>map as private objects: 修改对其他进程不可见<span class="mojikumi-line-end">，</span>也不会同步到磁盘上<span class="mojikumi-line-end">，</span>并且是 copy-on-write 的<span class="mojikumi-line-end">：</span>一开始将 PTE 设为只读<span class="mojikumi-line-end">，</span>在触发 protection exception 后<span class="mojikumi-line-end">，</span>exception handler 发现这个 area 是可以写入但 private 的<span class="mojikumi-line-end">，</span>就创建一个新的 page<span class="mojikumi-line-end">，</span>将原来的 page 复制过去<span class="mojikumi-line-end">，</span>将 PTE 设为可以写入<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="fork-的原理" class="heading"><a href="#fork-的原理" class="heading-anchor" aria-label="章节： fork 的原理" tabindex="-1"></a><span>fork 的原理</span></h3>
<p>fork 时会将原来的 <code>mm_struct</code> 以及 page table 复制一份<span class="mojikumi-line-end">，</span>但是将原来的 private area 中的 PTE 可以写入的重新变为只读<span class="mojikumi-line-end">，</span>从而在之后再写入时重新触发 copy-on-write<span class="mojikumi-line-end">，</span>就做到了 parent 和 child 一开始有一样的数据但后续写入独立<span class="mojikumi-line-end">。</span>在 fork 前就创建了的 shared area 会由两个进程共享<span class="mojikumi-line-end">，</span>可以利用这一点在 parent 和 child 之间通信<span class="mojikumi-line-end">。</span></p>
<h3 id="execve-的原理" class="heading"><a href="#execve-的原理" class="heading-anchor" aria-label="章节： execve 的原理" tabindex="-1"></a><span>execve 的原理</span></h3>
<ol>
<li>删除当前进程的所有 area (<code>vm_<wbr>area_<wbr>struct</code>)</li>
<li>根据 program header table 进行 memory mapping<span class="mojikumi-line-end">：</span>
<ul>
<li><code>.init</code><span class="mojikumi-line-end">、</span><code>.text</code><span class="mojikumi-line-end">、</span><code>.rodata</code>: private, file-backed, read-only</li>
<li><code>.data</code>: private, file-backed, read/write</li>
<li><code>.bss</code><span class="mojikumi-line-end">、</span>heap<span class="mojikumi-line-end">、</span>stack: private, demand-zero, read/write</li>
</ul>
</li>
<li>如果有 link 到共享库<span class="mojikumi-line-end">，</span>会进行动态链接<span class="mojikumi-line-end">，</span>将共享库 private, file-backed map</li>
<li>修改 program counter</li>
</ol>
<a id="关于共享库的-map-方式" name="关于共享库的-map-方式" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><details class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><summary class="p-3 flex justify-between items-center cursor-pointer" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>关于共享库的 map 方式</span></h4><span class="details-icon text-5" data-v-a2ab257f></span></summary><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>下面是一封发送于 2022.12.18<span class="mojikumi-line-end">，</span>尚未收到回复的邮件<span class="mojikumi-line-end">：</span></p><blockquote>
<p>Dear Drs. Randy Bryant and Dave O'Hallaron,</p>
<p>I am a student at Tsinghua University and I am writing to ask a question about the book CS:APP3e.</p>
<p>In <span class="mojikumi">“</span>9.8.3 The execve Function Revisited<span class="mojikumi">”</span> on page 837, it is stated that shared libraries are <span class="mojikumi">“</span>mapped into the shared region of the user<span class="mojikumi-narrow-left">’</span>s virtual address space<span class="mojikumi">”</span>. In Figure 9.31, it is stated that <span class="mojikumi">“</span>Memory-mapped region for shared libraries<span class="mojikumi">”</span> are <span class="mojikumi">“</span>Shared, file-backed<span class="mojikumi">”</span>.</p>
<p>However, I believe that shared libraries are actually mapped as private objects rather than shared objects. I have come to this conclusion for the following reasons:</p>
<ol>
<li>If there is data in the shared library, it should be copy-on-write, and should not be shared among different processes.</li>
<li>/proc/self/maps shows that all mappings to shared libraries of my shell are private.</li>
<li>The source code and comments of dl-load indicate that the mapping should be private. (See <a href="https://github.com/bminor/glibc/blob/71e408e45dcacf429a94b2807f75aaadd8d37cb9/elf/dl-load.h#L32-L49" class="break-all">https://github.com/bminor/glibc/blob/71e408e45dcacf429a94b2807f75aaadd8d37cb9/elf/dl-load.h#L32-L49</a> and <a href="https://github.com/bminor/glibc/commit/9b8a44cd18fbf1aedeb03e19f4bcdb06b0ee409b" class="break-all">https://github.com/bminor/glibc/commit/9b8a44cd18fbf1aedeb03e19f4bcdb06b0ee409b</a>.)</li>
</ol>
<p>I have checked the errata but did not find this issue addressed. I am writing to you in the hope that you can provide an explanation of this statement or add it to the errata. Thank you for your attention to this matter.</p>
<p>Sincerely,<br>
Yufan You</p>
</blockquote></div></details></aside>
<h3 id="mmap" class="heading"><a href="#mmap" class="heading-anchor" aria-label="章节： mmap" tabindex="-1"></a><span>mmap</span></h3>
<p><code>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)</code></p>
<ul>
<li><code>addr</code>: area 的起始地址<span class="mojikumi-line-end">，</span>仅作提示作用<span class="mojikumi-line-end">，</span>一般 <code>NULL</code> 就行</li>
<li><code>length</code>: area 的长度</li>
<li><code>prot</code>: <code>PROT_EXEC</code><span class="mojikumi-line-end">、</span><code>PROT_READ</code><span class="mojikumi-line-end">、</span><code>PROT_WRITE</code><span class="mojikumi-line-end">、</span><code>PROT_NONE</code></li>
<li><code>flags</code>: 有很多<span class="mojikumi-line-end">，</span>常用的有 <code>MAP_SHARED</code><span class="mojikumi-line-end">、</span><code>MAP_PRIVATE</code><span class="mojikumi-line-end">、</span><code>MAP_<wbr>ANONYMOUS</code></li>
<li><code>fd</code>: map 到的 file descriptor</li>
<li><code>offset</code>: map 到的文件内容的 offset<span class="mojikumi-line-end">，</span>必须是 page size 的倍数</li>
</ul>
<p>在 <code>MAP_<wbr>ANONYMOUS</code> 时<span class="mojikumi-line-end">，</span>最好将 <code>fd</code> 设为 -1<span class="mojikumi-line-end">、</span><code>offset</code> 设为 0<span class="mojikumi-line-start">（</span>在有的实现中这是必须的<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>失败时 <code>mmap</code> 会返回 <code>MAP_FAILED</code><span class="mojikumi-line-end">。</span></p>
<p><code>int<wbr> <wbr>munmap<wbr>(<wbr>void<wbr> *<wbr>addr<wbr>, <wbr>size_t<wbr> <wbr>length<wbr>)</code>: 将自 <code>addr</code> 起 <code>length</code> 长的范围内的 mapping 删除<span class="mojikumi-line-end">，</span>以后再访问就会 segmentation fault<span class="mojikumi-line-end">。</span><code>addr</code> 必须是 page size 的倍数<span class="mojikumi-line-end">。</span></p>
<h2 id="dynamic-memory-allocation" class="heading"><a href="#dynamic-memory-allocation" class="heading-anchor" aria-label="章节： Dynamic Memory Allocation" tabindex="-1"></a><span>Dynamic Memory Allocation</span></h2>
<h3 id="动态分配的相关函数" class="heading"><a href="#动态分配的相关函数" class="heading-anchor" aria-label="章节： 动态分配的相关函数" tabindex="-1"></a><span>动态分配的相关函数</span></h3>
<p>在 C 语言中<span class="mojikumi-line-end">，</span>可以用 <code>malloc</code> 和 <code>free</code> 来获取 / 释放动态分配的内存<span class="mojikumi-line-end">。</span>可以使用 <code>calloc</code> 来初始化分配到的内存并在使用乘法计算内存大小时检测是否发生溢出<span class="mojikumi-line-end">。</span>可以使用 <code>realloc</code> 来给一块动态分配的内存调整大小<span class="mojikumi-line-end">。</span>详见 <code>man malloc</code><span class="mojikumi-line-end">。</span></p>
<p>为了让动态分配得到的内存可以用于任何数据类型<span class="mojikumi-line-end">，</span>地址会以 double word 对齐<span class="mojikumi-line-end">，</span>即 32 位系统对齐到 8 的倍数<span class="mojikumi-line-end">，</span>64 位系统对齐到 16 的倍数<span class="mojikumi-line-end">。</span></p>
<p>操作系统使用 <code>brk</code> 指针来指向 heap 的结尾<span class="mojikumi-line-end">，</span>可以通过 <code>sbrk</code> 函数来增大 heap<span class="mojikumi-line-end">。</span></p>
<h3 id="allocator-的要求和目标" class="heading"><a href="#allocator-的要求和目标" class="heading-anchor" aria-label="章节： allocator 的要求和目标" tabindex="-1"></a><span>allocator 的要求和目标</span></h3>
<p>Dynamic memory allocator 会将 heap 划分为若干大小不等的 block<span class="mojikumi-line-end">，</span>每个 block 要么 allocated 要么 free<span class="mojikumi-line-end">。</span></p>
<p>allocator 需要做到<span class="mojikumi-line-end">：</span></p>
<ul>
<li>能够处理以任意顺序发送的 allocate 和 free 请求<span class="mojikumi-line-start">（</span>不能对顺序做任何假定<span class="mojikumi-line-end">）</span></li>
<li>立即对请求做出响应<span class="mojikumi-line-start">（</span>不能离线<span class="mojikumi-line-end">）</span></li>
<li>只使用 heap 存储数据<span class="mojikumi-line-start">（</span>不能将数据存储在虚存的其他位置<span class="mojikumi-line-end">）</span></li>
<li>满足对齐要求<span class="mojikumi-line-start">（</span>能够存储任何类型的数据<span class="mojikumi-line-end">）</span></li>
<li>不能修改或移动 allocated block<span class="mojikumi-line-start">（</span>可以修改 free block 或者 heap 中不是 block 的区域<span class="mojikumi-line-end">）</span></li>
</ul>
<p>而 allocator 有两个性能方面的目标<span class="mojikumi-line-end">：</span></p>
<ol>
<li>更快地响应请求<span class="mojikumi-line-start">（</span>更大的吞吐量<span class="mojikumi-line-end">）</span></li>
<li>更高效地利用内存</li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>导致内存利用率低的主要原因是 <i>fragmentation</i><span class="mojikumi-line-end">：</span></p>
<ul>
<li>internal fragmentation: 实际分配的 allocated block 比 alloc 请求中申请的大</li>
<li>external fragmentation: 所有 free block 加起来大小足够<span class="mojikumi-line-end">，</span>但每单个 free block 都不够大<span class="mojikumi-line-end">，</span>导致需要使用更多 heap 空间</li>
</ul>
<h3 id="一种简单的-allocator-实现方式" class="heading"><a href="#一种简单的-allocator-实现方式" class="heading-anchor" aria-label="章节： 一种简单的 allocator 实现方式" tabindex="-1"></a><span>一种简单的 allocator 实现方式</span></h3>
<h4 id="block-header" class="heading"><a href="#block-header" class="heading-anchor" aria-label="章节： block header" tabindex="-1"></a><span>block header</span></h4>
<p>allocator 需要记录 block 的信息<span class="mojikumi-line-end">，</span>而只能使用 heap 空间<span class="mojikumi-line-end">，</span>所以直接在 block 的开头记录 block header<span class="mojikumi-line-end">，</span>即 block size 以及是否 allocated<span class="mojikumi-line-end">。</span></p>
<p>因为地址有对齐要求<span class="mojikumi-line-end">，</span>block size 的最低几位一定是 0<span class="mojikumi-line-end">，</span>就可以用最低位来存 allocated bit<span class="mojikumi-line-end">。</span></p>
<p>block size 充当了单向链表的作用<span class="mojikumi-line-end">。</span>如果想访问 free block<span class="mojikumi-line-end">，</span>就得访问每个 block 再看是否 free<span class="mojikumi-line-end">，</span>所以这样的结构被称作 <i>implicit free list</i><span class="mojikumi-line-end">。</span></p>
<h4 id="placement-policy" class="heading"><a href="#placement-policy" class="heading-anchor" aria-label="章节： placement policy" tabindex="-1"></a><span>placement policy</span></h4>
<p>allocate 时需要找到一个足够大的 free block<span class="mojikumi-line-end">，</span>allocator 进行这样的搜索的方式称作 <i>placement policy</i><span class="mojikumi-line-end">：</span></p>
<ul>
<li>first fit<span class="mojikumi-line-end">：</span>从头开始找<span class="mojikumi-line-end">，</span>直到找到足够大的 free block</li>
<li>next fit<span class="mojikumi-line-end">：</span>从上次搜索结束的地方开始找<span class="mojikumi-line-end">，</span>直到找到足够大的 free block</li>
<li>best fit<span class="mojikumi-line-end">：</span>遍历所有 free block<span class="mojikumi-line-end">，</span>使用足够大的 free block 中最小的</li>
</ul>
<p>使用 implicit free list 时<span class="mojikumi-line-end">，</span>next fit 比 first fit 吞吐量更大但内存利用率更低<span class="mojikumi-line-end">，</span>best fit 内存利用率最好但吞吐量最差<span class="mojikumi-line-end">。</span></p>
<h4 id="分割-free-block" class="heading"><a href="#分割-free-block" class="heading-anchor" aria-label="章节： 分割 free block" tabindex="-1"></a><span>分割 free block</span></h4>
<p>如果 allocate 时 free block 的剩余空间比需要的空间大<span class="mojikumi-line-end">，</span>且大的超过一个 block 的 minimum size (double word)<span class="mojikumi-line-end">，</span>就可以将这个 block 分为两半<span class="mojikumi-line-end">，</span>一半用作 allocated block<span class="mojikumi-line-end">，</span>另一半为 free block<span class="mojikumi-line-end">。</span></p>
<h4 id="获取更多的-heap-空间" class="heading"><a href="#获取更多的-heap-空间" class="heading-anchor" aria-label="章节： 获取更多的 heap 空间" tabindex="-1"></a><span>获取更多的 heap 空间</span></h4>
<p>如果已有的 heap 空间无法满足 allocate 请求<span class="mojikumi-line-end">，</span>可以使用 <code>sbrk</code> 来获取更多的 heap 空间<span class="mojikumi-line-end">，</span>并将新得到的空间设为 free block<span class="mojikumi-line-end">。</span></p>
<h4 id="合并-free-block" class="heading"><a href="#合并-free-block" class="heading-anchor" aria-label="章节： 合并 free block" tabindex="-1"></a><span>合并 free block</span></h4>
<p>如果很多 free block 相邻地放在一起<span class="mojikumi-line-end">，</span>可能会造成 <i>false fragmentation</i><span class="mojikumi-line-end">，</span>即合并后能放下但每个单独无法放下<span class="mojikumi-line-end">，</span>所以需要对相邻的 free block 进行合并 (coalesce)<span class="mojikumi-line-end">。</span></p>
<p>合并有两种策略<span class="mojikumi-line-end">：</span></p>
<ul>
<li>immediate coalescing<span class="mojikumi-line-end">：</span>每次 free 时都将新得到的 free block 与相邻的 free block 合并<span class="mojikumi-line-end">，</span>这样的话每时每刻都不会有相邻的 free block</li>
<li>deferred coalescing<span class="mojikumi-line-end">：</span>等到某个时候再合并<span class="mojikumi-line-end">，</span>例如在未能找到足够大的 free block 时</li>
</ul>
<p>immediate coalescing 的实现较为简单<span class="mojikumi-line-end">，</span>可以在常数时间内完成<span class="mojikumi-line-end">，</span>但可能会导致反复的合并和分割<span class="mojikumi-line-end">，</span>带来不必要的性能损失<span class="mojikumi-line-end">。</span></p>
<p>合并时需要知道上一个 block 的信息<span class="mojikumi-line-end">，</span>这可以通过在 block 尾部添加一个与 header 内容相同的 footer 来实现<span class="mojikumi-line-end">，</span>这被称作使用 <i>boundary tags</i><span class="mojikumi-line-end">。</span>由于只有 free block 需要 footer<span class="mojikumi-line-end">，</span>可以省去 allocated block 的 footer<span class="mojikumi-line-end">，</span>而在 header 中存储上一块的 allocated bit<span class="mojikumi-line-end">，</span>来节省空间<span class="mojikumi-line-end">。</span></p>
<h3 id="explicit-free-list" class="heading"><a href="#explicit-free-list" class="heading-anchor" aria-label="章节： explicit free list" tabindex="-1"></a><span>explicit free list</span></h3>
<p>可以在 free block 中存储指向前驱后继的指针来维护一个 free block 的链表<span class="mojikumi-line-end">，</span>称作 <i>explicit free list</i><span class="mojikumi-line-end">。</span></p>
<p>这个 list 可以是 LIFO 的或者按地址顺序的<span class="mojikumi-line-end">。</span>LIFO 的 list 可以在常数时间内完成 free 操作<span class="mojikumi-line-end">，</span>而按地址顺序的 list 需要使用线性时间来找到一个 block 在 list 中的位置<span class="mojikumi-line-end">，</span>但内存利用率更高<span class="mojikumi-line-end">。</span></p>
<p>由于需要足够大的空间来存储前驱后继的指针<span class="mojikumi-line-end">，</span>explicit free list 的 minimum block size 更大<span class="mojikumi-line-end">，</span>可能会出现更严重的 internal fragmentation 导致内存利用率下降<span class="mojikumi-line-end">。</span></p>
<h3 id="segregated-free-lists" class="heading"><a href="#segregated-free-lists" class="heading-anchor" aria-label="章节： segregated free lists" tabindex="-1"></a><span>segregated free lists</span></h3>
<p>可以将 block 按 size 分类<span class="mojikumi-line-end">，</span>例如按 2 的次幂分类<span class="mojikumi-line-end">，</span>每一类维护一个 list<span class="mojikumi-line-end">。</span>具体实现方式有很多<span class="mojikumi-line-end">，</span>例如 simple segregated storage 和 segregated fits<span class="mojikumi-line-end">。</span></p>
<h4 id="simple-segregated-storage" class="heading"><a href="#simple-segregated-storage" class="heading-anchor" aria-label="章节： simple segregated storage" tabindex="-1"></a><span>simple segregated storage</span></h4>
<p>每一类的所有 block 都是这一类的最大 size<span class="mojikumi-line-end">，</span>如果一类 block 用光了就申请新的 heap 空间<span class="mojikumi-line-end">，</span>free 时直接放回相应的 list<span class="mojikumi-line-end">，</span>不合并也不分割<span class="mojikumi-line-end">。</span></p>
<p>这样的话<span class="mojikumi-line-end">，</span>header 和 footer 都不需要了<span class="mojikumi-line-end">，</span>只需在 free block 里存放一个后继指针即可<span class="mojikumi-line-end">，</span>但 internal fragmentation 和 external fragmentation 都很严重<span class="mojikumi-line-end">。</span></p>
<h4 id="segregated-fit" class="heading"><a href="#segregated-fit" class="heading-anchor" aria-label="章节： segregated fit" tabindex="-1"></a><span>segregated fit</span></h4>
<p>每一类中有不同大小的 block<span class="mojikumi-line-end">，</span>有分割和合并<span class="mojikumi-line-end">。</span>allocate 时从相应的类别开始找<span class="mojikumi-line-end">，</span>在一类中找不到就继续找下一类<span class="mojikumi-line-end">，</span>这样近似于 best-fit search<span class="mojikumi-line-end">，</span>但速度很快<span class="mojikumi-line-end">。</span></p>
<p>segregated fit 的综合性能较好<span class="mojikumi-line-end">，</span>所以包括 libc 中的 <code>malloc</code> 函数在内的 allocator 往往选择使用 segregated fit<span class="mojikumi-line-end">。</span></p>
<h4 id="buddy-system" class="heading"><a href="#buddy-system" class="heading-anchor" aria-label="章节： buddy system" tabindex="-1"></a><span>buddy system</span></h4>
<p>所有 block size 都是 2 的次幂<span class="mojikumi-line-end">，</span>分割时每次分成两半直到大小合适<span class="mojikumi-line-end">，</span>合并时只和 <span class="mojikumi">“</span>buddy<span class="mojikumi">”</span> 合并<span class="mojikumi-line-end">。</span></p>
<p>这里描述清楚可能比较复杂<span class="mojikumi-line-end">，</span>就感性理解一下<span class="mojikumi-line-end">，</span>所有的 block 会形成一个如下图所示树状的样子<span class="mojikumi-line-start">（</span>有点树状数组的感觉<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>parent 相同的 block 就是 buddy<span class="mojikumi-line-end">。</span></p>
<p><picture><source type="image/webp" srcset="/assets/buddy-system.955de85d.webp"><img srcset="/assets/buddy-system.2fd53174.png" loading="lazy" src="/assets/buddy-system.2fd53174.png" width="321" height="158" alt="buddy system"></picture></p>
<p>这样的话<span class="mojikumi-line-end">，</span>搜索和合并会比较快速<span class="mojikumi-line-end">，</span>但由于 block size 都是 2 的次幂<span class="mojikumi-line-end">，</span>可能出现严重的 internal fragmentation<span class="mojikumi-line-end">。</span></p>
<h3 id="平衡树维护-free-block" class="heading"><a href="#平衡树维护-free-block" class="heading-anchor" aria-label="章节： 平衡树维护 free block" tabindex="-1"></a><span>平衡树维护 free block</span></h3>
<p>CS:APP 中没有提到这种方式<span class="mojikumi-line-end">，</span>但只要理解了上面这几种 free list<span class="mojikumi-line-end">，</span>就很好理解<span class="mojikumi-line-end">，</span>free block 不一定要用链表维护<span class="mojikumi-line-end">，</span>也可以用平衡树维护<span class="mojikumi-line-end">：</span>在 free block 中存放树的节点所需的 children<span class="mojikumi-line-end">、</span>parent 等信息<span class="mojikumi-line-end">，</span>就可以高效实现严格的 best fit<span class="mojikumi-line-end">，</span>复杂度也不会像 segregated fit 一样在极端情况下发生退化<span class="mojikumi-line-end">。</span>但是树的节点需要的信息往往比链表多<span class="mojikumi-line-end">，</span>可能会让 minimum block size 增大到 6 个 word<span class="mojikumi-line-end">。</span></p>
<p>我自己写 malloc lab 的时候试着写了个 Splay<span class="mojikumi-line-end">，</span>发现一般情况下还是比 segregated fit 慢不少<span class="mojikumi-line-end">，</span>内存利用率也不一定有明显提升<span class="mojikumi-line-end">，</span>不知道其他平衡树 / 特殊场景下性能如何<span class="mojikumi-line-end">。</span>倒是在网上看到有说红黑树可以在 malloc lab 拿高分<span class="mojikumi-line-start">（</span><s>谁用好的算法拿高分啊<span class="mojikumi-line-end">，</span>不是考验对着数据调参的能力吗<span class="mojikumi-line-end">，</span>我觉得我对数据过拟合的 segregated fit 分已经够高了</s><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span><s>虚假的 segregated fit<span class="mojikumi-line-end">：</span>按 block size segregate 来寻找 fit<span class="mojikumi-line-end">；</span>真正的 segregated fit<span class="mojikumi-line-end">：</span>按测试数据 segregate 分别进行 fit</s><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h2 id="garbage-collection" class="heading"><a href="#garbage-collection" class="heading-anchor" aria-label="章节： Garbage Collection" tabindex="-1"></a><span>Garbage Collection</span></h2>
<p>可以通过 block 之间以及 stack<span class="mojikumi-line-end">、</span>register<span class="mojikumi-line-end">、</span>global 变量对 block 的引用关系找到不可达的 block 而进行 garbage collection<span class="mojikumi-line-end">。</span></p>
<p>在 C 中<span class="mojikumi-line-end">，</span>由于没有类型信息<span class="mojikumi-line-end">，</span>可能会将非指针类型的数据视作对 block 的引用<span class="mojikumi-line-end">，</span>导致不可达的 block 被视作可达<span class="mojikumi-line-end">，</span>所以 C 语言的 garbage collection 只能是 conservative 的<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/csapp">csapp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CS:APP 第八章学习笔记]]></title>
            <link>https://ouuan.moe/post/2022/11/csapp-8</link>
            <guid>https://ouuan.moe/post/2022/11/csapp-8</guid>
            <pubDate>Sat, 17 Dec 2022 06:27:26 GMT</pubDate>
            <description><![CDATA[
<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第八章 <span class="mojikumi">“</span>Exceptional Control Flow<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为 exception<span class="mojikumi-line-end">、</span>system call<span class="mojikumi-line-end">、</span>process<span class="mojikumi-line-end">、</span>signal<span class="mojikumi-line-end">、</span>longjmp<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第八章 <span class="mojikumi">“</span>Exceptional Control Flow<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为 exception<span class="mojikumi-line-end">、</span>system call<span class="mojikumi-line-end">、</span>process<span class="mojikumi-line-end">、</span>signal<span class="mojikumi-line-end">、</span>longjmp<span class="mojikumi-line-end">。</span></p>

<p>在一般情况下<span class="mojikumi-line-end">，</span>PC 会按照指令的顺序以及跳转指令来变化<span class="mojikumi-line-end">。</span>但在很多时候<span class="mojikumi-line-end">，</span>这样的控制流是不能满足需要的<span class="mojikumi-line-end">，</span>需要 <i>exceptional control flow</i> (ECF) 作为跳转指令的补充<span class="mojikumi-line-end">，</span>以处理一些<span class="mojikumi-line-start">“</span>异常<span class="mojikumi-line-end">”</span>的或者来自<span class="mojikumi-line-start">“</span>外部<span class="mojikumi-line-end">”</span>的变化<span class="mojikumi-line-end">。</span></p>
<p>ECF 存在于各个层次<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li>硬件监测到事件发生时调用 exception handler</li>
<li>操作系统在不同进程之间进行 <a href="#context-switch">context switch</a></li>
<li>不同进程间通过发送 <a href="#signals">signal</a> 来调用接收者的 signal handler</li>
<li>程序内部通过 <a href="#nonlocal-jumps">nonlocal jump</a> 来实现错误处理</li>
</ul>
<h2 id="exceptions" class="heading"><a href="#exceptions" class="heading-anchor" aria-label="章节： Exceptions" tabindex="-1"></a><span>Exceptions</span></h2>
<p><i>exception</i> 是由某种<span class="mojikumi-line-start">“</span>状态改变<span class="mojikumi">”</span><wbr><span class="mojikumi-line-start">（</span>可能是某条指令执行的结果<span class="mojikumi-line-end">，</span>或者来自外部 I/O 的变化等等<span class="mojikumi-line-end">）</span>导致的控制流的突变<span class="mojikumi-line-end">。</span></p>
<p>处理器检测到这种状态改变后<span class="mojikumi-line-end">，</span>会调用 <i>exception handler</i><span class="mojikumi-line-end">，</span>然后跳转到触发前的指令或下一条指令<span class="mojikumi-line-end">，</span>或者终止整个程序<span class="mojikumi-line-end">。</span></p>
<h3 id="exception-handling" class="heading"><a href="#exception-handling" class="heading-anchor" aria-label="章节： Exception Handling" tabindex="-1"></a><span>Exception Handling</span></h3>
<p>每种 exception 都会有一个 <i>exception number</i><span class="mojikumi-line-end">，</span>某些 exception 的 number 由硬件决定<span class="mojikumi-line-end">，</span>另一些由操作系统决定<span class="mojikumi-line-end">。</span></p>
<p>内存中会有一个 <i>exception table</i><span class="mojikumi-line-end">，</span>以 exception number 为索引<span class="mojikumi-line-end">，</span>每一项是对应的 exception handler<span class="mojikumi-line-end">。</span>处理器中有一个 <i>exception table base register</i><span class="mojikumi-line-end">，</span>用来存 exception table 的起始地址<span class="mojikumi-line-end">，</span>结合 exception number 就可以对每一项寻址<span class="mojikumi-line-end">。</span></p>
<p>exception 与 procedure call 的主要区别有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>procedure call 返回到栈顶存储的返回地址<span class="mojikumi-line-end">，</span>而 exception 返回到触发时的指令或下一条指令<span class="mojikumi-line-end">，</span>或终止程序<span class="mojikumi-line-end">。</span></li>
<li>调用 exception handler 时<span class="mojikumi-line-end">，</span>会保存包括 condition codes 在内的一些处理器状态<span class="mojikumi-line-end">，</span>在返回时恢复<span class="mojikumi-line-end">。</span></li>
<li>exception handler 在 <a href="#user-kernel-mode">kernel mode</a> 下运行<span class="mojikumi-line-end">，</span>使用的运行栈也是 kernel 的<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="classes-of-exceptions" class="heading"><a href="#classes-of-exceptions" class="heading-anchor" aria-label="章节： Classes of Exceptions" tabindex="-1"></a><span>Classes of Exceptions</span></h3>
<p>exception 一般有四种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>interrupt: 异步触发<span class="mojikumi-line-start">（</span>不是某条指令的执行导致了 exception<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>返回到下一条指令<span class="mojikumi-line-end">。</span>一般是由外部 I/O 设备触发<span class="mojikumi-line-start">（</span>设备通过 interrupt pin 告诉处理器有 interrupt<span class="mojikumi-line-end">，</span>通过 system bus 发送 exception number<span class="mojikumi-line-end">，</span>处理器在每执行完一条指令后检查 interrupt pin<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>触发后调用 interrupt handler<span class="mojikumi-line-end">，</span>再回到原来的位置继续执行下一条指令<span class="mojikumi-line-end">。</span></li>
<li>trap: 同步触发<span class="mojikumi-line-end">，</span>返回到下一条指令<span class="mojikumi-line-end">。</span>比如 <a href="#linux-%E4%B8%AD%E7%9A%84-system-call">system call</a> 是一种常见的 trap<span class="mojikumi-line-end">，</span>通过 <code>syscall</code> 指令主动触发 exception<span class="mojikumi-line-end">，</span>看上去和函数调用类似<span class="mojikumi-line-end">，</span>但可以在 kernel mode 下运行<span class="mojikumi-line-end">。</span></li>
<li>fault: 同步触发<span class="mojikumi-line-end">，</span>返回到触发 exception 的指令或退出<span class="mojikumi-line-end">。</span>一般来说<span class="mojikumi-line-end">，</span>fault handler 会尝试解决导致 fault 发生的问题<span class="mojikumi-line-end">，</span>如果成功解决则返回到触发 exception 的指令<span class="mojikumi-line-end">，</span>并且能够不再次触发 exception 而继续执行下去<span class="mojikumi-line-end">；</span>如果没能成功解决<span class="mojikumi-line-end">，</span>则 abort<span class="mojikumi-line-end">。</span></li>
<li>abort: 同步触发<span class="mojikumi-line-end">，</span>一定退出<span class="mojikumi-line-end">。</span>一般代表严重的不可恢复的错误<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="exceptions-in-linuxx86-64-systems" class="heading"><a href="#exceptions-in-linuxx86-64-systems" class="heading-anchor" aria-label="章节： Exceptions in Linux/x86-64 Systems" tabindex="-1"></a><span>Exceptions in Linux/x86-64 Systems</span></h3>
<h4 id="x86-64-中的-fault-abort" class="heading"><a href="#x86-64-中的-fault-abort" class="heading-anchor" aria-label="章节： x86-64 中的 fault / abort" tabindex="-1"></a><span>x86-64 中的 fault / abort</span></h4>
<ul>
<li>Divide Error Exception (Interrupt 0): 除以零<span class="mojikumi-line-end">。</span>它是 fault<span class="mojikumi-line-end">，</span>但实际上 Linux 不会尝试从 divide error 中恢复<span class="mojikumi-line-end">，</span>而是会直接 abort<span class="mojikumi-line-end">，</span>一般会显示为 <span class="mojikumi">“</span>floating point exception<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span></li>
<li>General Protection Exception (Interrupt 13): 有多种触发原因<span class="mojikumi-line-end">，</span>例如访问未定义的内存<span class="mojikumi-line-end">，</span>尝试写入只读的内存段<span class="mojikumi-line-end">。</span>Linux 也不会尝试从中恢复<span class="mojikumi-line-end">，</span>而是会直接 abort<span class="mojikumi-line-end">，</span>一般会显示为 <span class="mojikumi">“</span>segmentation fault<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span></li>
<li>Page-Fault Exception (Interrupt 14): page fault 是一个名副其实的 fault<span class="mojikumi-line-end">，</span>会尝试恢复<span class="mojikumi-line-end">，</span>详见<a href="/post/2022/11/csapp-9">第九章</a><span class="mojikumi-line-end">。</span></li>
<li>Machine-Check Exception (Interrupt 18): 严重的硬件错误<span class="mojikumi-line-end">，</span>是 abort<span class="mojikumi-line-end">。</span></li>
</ul>
<p><span class="mojikumi-line-start">（</span>完整列表参见 <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">Intel® 64 and IA-32 Architectures Software Developer Manuals</a> Volume 3A 的 <span class="mojikumi">“</span>6.15 EXCEPTION AND INTERRUPT REFERENCE<span class="mojikumi">”</span> 一节<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h4 id="linux-中的-system-call" class="heading"><a href="#linux-中的-system-call" class="heading-anchor" aria-label="章节： Linux 中的 system call" tabindex="-1"></a><span>Linux 中的 system call</span></h4>
<p>Linux 中常用的一些 system call 如 CS:APP Figure 8.10 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig8.10.f8581cd0.webp"><img srcset="/assets/csapp-fig8.10.9e132224.png" loading="lazy" src="/assets/csapp-fig8.10.9e132224.png" width="1094" height="320" alt="Linux 中常用的一些 system call"></picture></p>
<p><span class="mojikumi-line-start">（</span>更多 system call 参见 <code>man syscalls</code><span class="mojikumi-line-end">）</span></p>
<p>在 C 语言中<span class="mojikumi-line-end">，</span>可以使用 <code>syscall</code> 函数来调用 system call<span class="mojikumi-line-end">，</span>但一般不这样做<span class="mojikumi-line-end">，</span>而是使用每个 system call 对应的 wrapper function<span class="mojikumi-line-end">。</span><code>syscall</code> 和 wrapper function 统称为 <i>system-level function</i><span class="mojikumi-line-end">。</span></p>
<h2 id="processes" class="heading"><a href="#processes" class="heading-anchor" aria-label="章节： Processes" tabindex="-1"></a><span>Processes</span></h2>
<p>一个系统中会有很多进程同时运行<span class="mojikumi-line-end">，</span>但营造出了每个进程都独占了处理器和内存的假象<span class="mojikumi-line-end">。</span></p>
<p>进程独占内存的假象是通过每个进程的 private address space 实现的<span class="mojikumi-line-end">，</span>详见<a href="/post/2022/11/csapp-9">第九章</a><span class="mojikumi-line-end">。</span></p>
<h3 id="logical-concurrent-flow" class="heading"><a href="#logical-concurrent-flow" class="heading-anchor" aria-label="章节： Logical / Concurrent Flow" tabindex="-1"></a><span>Logical / Concurrent Flow</span></h3>
<p>根据一个程序的指令得到的 control flow 称作 <i>logical (control) flow</i><span class="mojikumi-line-end">。</span>系统会在不同的进程间来回切换<span class="mojikumi-line-end">，</span>从一个进程切换出去称作将这个进程 <i>preempt</i><span class="mojikumi-line-end">。</span></p>
<p>如果两个 control flow 的存活时间有重叠<span class="mojikumi-line-end">，</span>则称它们是 <i>concurrent flow</i> 或它们 <i>run concurrently</i><span class="mojikumi-line-end">。</span>这种现象被称作 <i>concurrency</i><span class="mojikumi-line-end">，</span>也被称作 <i>multitasking</i><span class="mojikumi-line-end">。</span>每次连续执行的同一个 logical flow 中的一段称作一个 <i>time slice</i><span class="mojikumi-line-end">，</span>所以 multitasking 也被称作 <i>time slicing</i><span class="mojikumi-line-end">。</span>如果两个 logical flow 在不同的 processor core 上运行<span class="mojikumi-line-end">，</span>则称它们是 <i>parallel flow</i><span class="mojikumi-line-end">，</span><i>run in parallel</i><span class="mojikumi-line-end">。</span></p>
<h3 id="user-kernel-mode" class="heading"><a href="#user-kernel-mode" class="heading-anchor" aria-label="章节： User / Kernel Mode" tabindex="-1"></a><span>User / Kernel Mode</span></h3>
<p>在处理器中存有一个 <i>mode bit</i><span class="mojikumi-line-end">，</span>表示当前是 user mode 还是 kernel mode<span class="mojikumi-line-end">。</span>只有在 kernel mode 下才能执行某些 <i>privileged instruction</i><span class="mojikumi-line-end">、</span>修改 mode bit<span class="mojikumi-line-end">、</span>访问地址空间中属于 kernel 的区域<span class="mojikumi-line-end">。</span></p>
<p>user mode 的程序只能通过 exception 来进入 kernel mode<span class="mojikumi-line-end">，</span>以执行 privileged instruction 或者访问 kernel 的数据<span class="mojikumi-line-end">。</span>在 Linux 中<span class="mojikumi-line-end">，</span>也可以在 user mode 下访问 <code>/proc</code><span class="mojikumi-line-end">、</span><code>/sys</code> 来获得一些 kernel 的数据<span class="mojikumi-line-end">。</span></p>
<h3 id="context-switch" class="heading"><a href="#context-switch" class="heading-anchor" aria-label="章节： Context Switch" tabindex="-1"></a><span>Context Switch</span></h3>
<p>每个进程都有一个 <i>context</i><span class="mojikumi-line-end">，</span>包括寄存器内容<span class="mojikumi-line-end">、</span>PC<span class="mojikumi-line-end">、</span>user stack<span class="mojikumi-line-end">、</span>kernel stack<span class="mojikumi-line-end">、</span>condition codes<span class="mojikumi-line-end">、</span>page table<span class="mojikumi-line-end">、</span>process table<span class="mojikumi-line-end">、</span>file table 等等<span class="mojikumi-line-end">。</span></p>
<p>操作系统通过 <i>context switch</i> 来在不同进程间切换<span class="mojikumi-line-end">，</span>即保存当前进程的 context<span class="mojikumi-line-end">，</span>恢复要切换到的进程的 context<span class="mojikumi-line-end">，</span>最后切换过去<span class="mojikumi-line-end">。</span>context switch 在 exception 中发生<span class="mojikumi-line-end">，</span>处理 exception 时操作系统中的 <i>scheduler</i> 会决定是否进行 context switch<span class="mojikumi-line-end">，</span>schedule 到哪个进程<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在通过 system call 读取文件时进行 context switch<span class="mojikumi-line-end">，</span>以在等待读取文件时先执行其他进程<span class="mojikumi-line-end">；</span>读取到文件后在 interrupt 中再 context switch 回来<span class="mojikumi-line-end">。</span></li>
<li>系统会周期性地<span class="mojikumi-line-start">（</span>例如每 1ms<span class="mojikumi-line-end">）</span>触发 interrupt<span class="mojikumi-line-end">，</span>从而可以在一个进程执行了一段时间后进行 context switch<span class="mojikumi-line-end">。</span></li>
</ul>
<p>因为程序不知道操作系统会如何 schedule<span class="mojikumi-line-end">，</span>一般来说<span class="mojikumi-line-end">，</span>不同进程的执行顺序是没有保证的<span class="mojikumi-line-end">。</span></p>
<h2 id="system-call-error-handling" class="heading"><a href="#system-call-error-handling" class="heading-anchor" aria-label="章节： System Call Error Handling" tabindex="-1"></a><span>System Call Error Handling</span></h2>
<p>system-level function 一般以返回 -1 代表出错<span class="mojikumi-line-end">，</span>而将具体的错误记录在全局整型变量 <code>errno</code> (<code>#include &#x3C;errno.h></code>)<span class="mojikumi-line-end">，</span>函数 <code>strerror</code> 可以用来根据 <code>errno</code> 得到文字错误信息<span class="mojikumi-line-end">。</span></p>
<p>调用 system-level function 时应当检查错误<span class="mojikumi-line-end">。</span>为了使错误处理更加简便<span class="mojikumi-line-end">，</span>可以使用类似下面的 wrapper function<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="c 代码块" data-v-ad49d235>c</h3><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">errno.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">stdio.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">stdlib.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">string.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">unistd.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span></span>
<span><span style="color: #C792EA">void</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">unix_error</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">char</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">*</span><span style="color: #D7DBE0">msg</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">{</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">fprintf(stderr, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #82AAFF">%s</span><span style="color: #ECC48D">: </span><span style="color: #82AAFF">%s</span><span style="color: #F78C6C">\n</span><span style="color: #D9F5DD">&quot;</span><span style="color: #82AAFF">, msg, strerror(errno))</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">exit(errno)</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">}</span></span>
<span></span>
<span><span style="color: #C792EA">pid_t</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">Fork</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">void</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">{</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">pid_t</span><span style="color: #D6DEEB"> pid </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">fork()</span><span style="color: #D6DEEB">;</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">if</span><span style="color: #D6DEEB"> (pid </span><span style="color: #C792EA">&lt;</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #82AAFF">unix_error(</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">Fork error</span><span style="color: #D9F5DD">&quot;</span><span style="color: #82AAFF">)</span><span style="color: #D6DEEB">;</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">return</span><span style="color: #D6DEEB"> pid;</span></span>
<span><span style="color: #D6DEEB">}</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">errno.h</span><span style="color: #111111">&gt;</span></span>
<span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">stdio.h</span><span style="color: #111111">&gt;</span></span>
<span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">stdlib.h</span><span style="color: #111111">&gt;</span></span>
<span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">string.h</span><span style="color: #111111">&gt;</span></span>
<span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">unistd.h</span><span style="color: #111111">&gt;</span></span>
<span></span>
<span><span style="color: #994CC3">void</span><span style="color: #403F53"> </span><span style="color: #4876D6">unix_error</span><span style="color: #403F53">(</span><span style="color: #994CC3">char</span><span style="color: #403F53"> </span><span style="color: #0C969B">*</span><span style="color: #403F53">msg)</span></span>
<span><span style="color: #403F53">{</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">fprintf(stderr, </span><span style="color: #111111">&quot;</span><span style="color: #4876D6">%s</span><span style="color: #C96765">: </span><span style="color: #4876D6">%s</span><span style="color: #AA0982">\n</span><span style="color: #111111">&quot;</span><span style="color: #4876D6">, msg, strerror(errno))</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">exit(errno)</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">}</span></span>
<span></span>
<span><span style="color: #994CC3">pid_t</span><span style="color: #403F53"> </span><span style="color: #4876D6">Fork</span><span style="color: #403F53">(</span><span style="color: #994CC3">void</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">{</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">pid_t</span><span style="color: #403F53"> pid </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">fork()</span><span style="color: #403F53">;</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">if</span><span style="color: #403F53"> (pid </span><span style="color: #994CC3">&lt;</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">unix_error(</span><span style="color: #111111">&quot;</span><span style="color: #C96765">Fork error</span><span style="color: #111111">&quot;</span><span style="color: #4876D6">)</span><span style="color: #403F53">;</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">return</span><span style="color: #403F53"> pid;</span></span>
<span><span style="color: #403F53">}</span></span></code></pre></div></section>
<h2 id="process-control" class="heading"><a href="#process-control" class="heading-anchor" aria-label="章节： Process Control" tabindex="-1"></a><span>Process Control</span></h2>
<p>C 语言中有很多用来控制 Unix 进程的函数<span class="mojikumi-line-end">。</span></p>
<h3 id="获取-pid" class="heading"><a href="#获取-pid" class="heading-anchor" aria-label="章节： 获取 PID" tabindex="-1"></a><span>获取 PID</span></h3>
<p>每个进程都有一个 PID<span class="mojikumi-line-end">。</span></p>
<ul>
<li><code>pid_t<wbr> <wbr>getpid<wbr>(<wbr>void<wbr>)</code>: 返回当前进程的 PID</li>
<li><code>pid_t<wbr> <wbr>getppid<wbr>(<wbr>void<wbr>)</code>: 返回当前进程的 parent 的 PID</li>
</ul>
<h3 id="进程的状态" class="heading"><a href="#进程的状态" class="heading-anchor" aria-label="章节： 进程的状态" tabindex="-1"></a><span>进程的状态</span></h3>
<p>每个进程可能处于三种状态之一<span class="mojikumi-line-end">：</span></p>
<ol>
<li>Running: 正在运行中<span class="mojikumi-line-end">，</span>会被 schedule<span class="mojikumi-line-end">。</span></li>
<li>Stopped: 被 suspend 了<span class="mojikumi-line-end">，</span>不会被 schedule<span class="mojikumi-line-end">。</span>Stopped 可能是 SIGSTOP<span class="mojikumi-line-end">、</span>SIGTSTP<span class="mojikumi-line-end">、</span>SIGTTIN<span class="mojikumi-line-end">、</span>SIGTTOU 导致的<span class="mojikumi-line-end">，</span>可以由 SIGCONT 恢复运行<span class="mojikumi-line-end">。</span></li>
<li>Terminated: 进程永久地结束了<span class="mojikumi-line-end">，</span>可能是从 <code>main</code> 函数返回<span class="mojikumi-line-end">、</span>调用了 <code>exit</code> 函数或者收到了某些 signal<span class="mojikumi-line-end">。</span></li>
</ol>
<ul>
<li><code>void exit(int status)</code>: 以某个 exit status 将当前进程 terminate</li>
</ul>
<h3 id="fork" class="heading"><a href="#fork" class="heading-anchor" aria-label="章节： fork" tabindex="-1"></a><span>fork</span></h3>
<ul>
<li><code>pid_t fork(void)</code>: 创建子进程</li>
</ul>
<p>fork 会将当前进程的所有状态复制一份创建一个新的进程<span class="mojikumi-line-end">，</span>新的进程有着和原来相同的代码<span class="mojikumi-line-end">、</span>数据<span class="mojikumi-line-end">、</span>文件<span class="mojikumi-line-start">（</span>例如 <code>stdout</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但 PID 不同<span class="mojikumi-line-end">，</span>并且后续对数据的修改是和原进程独立的<span class="mojikumi-line-end">。</span></p>
<p>fork 会调用一次<span class="mojikumi-line-end">，</span>返回两次<span class="mojikumi-line-end">，</span>分别在两个进程中返回<span class="mojikumi-line-end">，</span>在 parent 中返回 child 的 PID<span class="mojikumi-line-end">，</span>在 child 中返回 0<span class="mojikumi-line-end">，</span>出错则返回 -1<span class="mojikumi-line-end">。</span></p>
<p>fork 出的进程和原进程在接下来会执行同一份代码<span class="mojikumi-line-end">，</span>所以一般会判断 <code>fork</code> 的返回值是否为 0 来让两个进程执行不同的分支<span class="mojikumi-line-end">。</span></p>
<h3 id="process-group" class="heading"><a href="#process-group" class="heading-anchor" aria-label="章节： process group" tabindex="-1"></a><span>process group</span></h3>
<p>每个进程会属于一个 process group<span class="mojikumi-line-end">，</span>每个 process group 有一个 ID<span class="mojikumi-line-end">。</span></p>
<p>创建子进程时<span class="mojikumi-line-end">，</span>子进程会默认处于 parent 的 process group<span class="mojikumi-line-end">。</span></p>
<ul>
<li><code>pid_t<wbr> <wbr>getpgrp<wbr>(<wbr>void<wbr>)</code>: 返回当前进程的 process group ID</li>
<li><code>int<wbr> <wbr>setpgid<wbr>(<wbr>pid_t<wbr> <wbr>pid<wbr>, <wbr>pid_t<wbr> <wbr>pgid<wbr>)</code>: 将 <code>pid</code> 对应的进程的 progress group ID 修改为 <code>pgid</code><span class="mojikumi-line-end">，</span><code>pid</code> 为 0 表示当前进程<span class="mojikumi-line-end">，</span><code>pgid</code> 为 0 表示修改为 <code>pid</code> 对应的进程的 PID</li>
</ul>
<h3 id="wait" class="heading"><a href="#wait" class="heading-anchor" aria-label="章节： wait" tabindex="-1"></a><span>wait</span></h3>
<ul>
<li><code>pid_t<wbr> <wbr>waitpid<wbr>(<wbr>pid_t<wbr> <wbr>pid<wbr>, <wbr>int<wbr> *<wbr>statusp<wbr>, <wbr>int<wbr> <wbr>options<wbr>)</code>: 等待子进程结束</li>
<li><code>pid_t wait(int *statusp)</code>: <code>waitpid<wbr>(-<wbr>1<wbr>, <wbr>statusp<wbr>, <wbr>0<wbr>)</code></li>
</ul>
<h4 id="waitpid-的-pid-参数" class="heading"><a href="#waitpid-的-pid-参数" class="heading-anchor" aria-label="章节： waitpid 的 pid 参数" tabindex="-1"></a><span>waitpid 的 pid 参数</span></h4>
<p>参数 <code>pid</code> 决定了要等待的是哪些子进程<span class="mojikumi-line-end">：</span></p>
<ul>
<li>-1: 所有子进程</li>
<li>> 0: PID 为 <code>pid</code> 的子进程</li>
<li>0: process group 与当前进程相同的子进程</li>
<li>&#x3C; -1: process group ID 为 <code>-pid</code> 的子进程</li>
</ul>
<h4 id="waitpid-的行为-options" class="heading"><a href="#waitpid-的行为-options" class="heading-anchor" aria-label="章节： waitpid 的行为 (options)" tabindex="-1"></a><span>waitpid 的行为 (options)</span></h4>
<p>默认情况下<span class="mojikumi-line-end">，</span><code>waitpid</code> 会等待到有某个被等待的子进程 terminate 再返回<span class="mojikumi-line-end">，</span><code>options</code> 可以改变这一行为<span class="mojikumi-line-end">，</span>其值可以包含下列 flag<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>WNOHANG</code>: 立即返回<span class="mojikumi-line-end">，</span>如果没有符合条件的子进程则返回 0</li>
<li><code>WUNTRACED</code>: 除了 terminate<span class="mojikumi-line-end">，</span>子进程 stop 也可以结束等待</li>
<li><code>WCONTINUED</code>: 除了 terminate<span class="mojikumi-line-end">，</span>子进程从 stopped 中 continue 也可以结束等待</li>
</ul>
<h4 id="reap" class="heading"><a href="#reap" class="heading-anchor" aria-label="章节： reap" tabindex="-1"></a><span>reap</span></h4>
<p>除了等待<span class="mojikumi-line-end">，</span>wait 还会将 terminated 的子进程 <i>reap</i><span class="mojikumi-line-end">，</span>即彻底清除掉<span class="mojikumi-line-end">。</span>没有被 reap 但 terminated 的进程被称作 <i>zombie</i><span class="mojikumi-line-end">，</span>会占用一定的系统资源<span class="mojikumi-line-end">。</span>在 <code>ps</code> 中<span class="mojikumi-line-end">，</span>zombie 显示为 <code>[defunct]</code><span class="mojikumi-line-end">。</span></p>
<p>如果 parent terminate 了<span class="mojikumi-line-end">，</span>没有 terminate 的子进程会被设置为 PID 为 1 的 <code>init</code> 进程的子进程<span class="mojikumi-line-end">，</span>而 zombie 子进程则会被 <code>init</code> reap<span class="mojikumi-line-end">。</span></p>
<h4 id="wait-获取子进程的-status" class="heading"><a href="#wait-获取子进程的-status" class="heading-anchor" aria-label="章节： wait 获取子进程的 status" tabindex="-1"></a><span>wait 获取子进程的 status</span></h4>
<p>如果 <code>statusp</code> 参数不是 <code>NULL</code><span class="mojikumi-line-end">，</span>在 <code>waitpid</code> 返回时 <code>*statusp</code> 内就会存有引起等待结束的那个子进程的信息<span class="mojikumi-line-end">。</span></p>
<p>有一系列 macro 可以用来提取 status 中的信息<span class="mojikumi-line-start">（</span>参数是 <code>*statusp</code><span class="mojikumi-line-end">，</span>不是指针<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>WIFEXITED<wbr>(<wbr>status<wbr>)</code>: 是否正常退出 (从 <code>main</code> 函数返回或调用了 <code>exit</code> 函数)</li>
<li><code>WEXITSTATUS<wbr>(<wbr>status<wbr>)</code>: 如果正常退出<span class="mojikumi-line-end">，</span>则返回 exit status (<code>main</code> 函数返回值 / <code>exit</code> 函数参数)</li>
<li><code>WIFSIGNALED<wbr>(<wbr>status<wbr>)</code>: 是否由某个 signal terminate</li>
<li><code>WTERMSIG<wbr>(<wbr>status<wbr>)</code>: 如果是由某个 signal terminate<span class="mojikumi-line-end">，</span>返回这个 signal</li>
<li><code>WIFSTOPPED<wbr>(<wbr>status<wbr>)</code>: 是否被 stop</li>
<li><code>WSTOPSIG<wbr>(<wbr>status<wbr>)</code>: 如果被 stop<span class="mojikumi-line-end">，</span>返回使其 stop 的 signal</li>
<li><code>WIFCONTINUED<wbr>(<wbr>status<wbr>)</code>: 是否被 continue</li>
</ul>
<h4 id="wait-的报错" class="heading"><a href="#wait-的报错" class="heading-anchor" aria-label="章节： wait 的报错" tabindex="-1"></a><span>wait 的报错</span></h4>
<p>出错时 wait 会返回 -1<span class="mojikumi-line-end">，</span><code>errno</code> 可能是 <code>ECHILD</code> 表示被等待的子进程集合为空<span class="mojikumi-line-end">，</span>可能是 <code>EINTR</code> 表示 wait 函数被某个 signal 中断了<span class="mojikumi-line-end">。</span></p>
<p>wait 会在每有一个子进程结束时返回<span class="mojikumi-line-end">，</span>但子进程全部结束时会报错 <code>ECHILD</code><span class="mojikumi-line-end">，</span>可以利用这一点通过 <code>while</code> 循环来等待所有子进程全部结束<span class="mojikumi-line-end">。</span></p>
<h3 id="sleep" class="heading"><a href="#sleep" class="heading-anchor" aria-label="章节： sleep" tabindex="-1"></a><span>sleep</span></h3>
<ul>
<li><code>unsigned<wbr> <wbr>int<wbr> <wbr>sleep<wbr>(<wbr>unsigned<wbr> <wbr>int<wbr> <wbr>secs<wbr>)</code>: sleep 若干秒<span class="mojikumi-line-end">，</span>返回剩余应当 sleep 的秒数<span class="mojikumi-line-start">（</span>正常情况下没被 interrupt 就是 0<span class="mojikumi-line-end">）</span></li>
<li><code>int<wbr> <wbr>pause<wbr>(<wbr>void<wbr>)</code>: 一直 sleep<span class="mojikumi-line-end">，</span>直到被 signal interrupt<span class="mojikumi-line-end">，</span>总是返回 -1</li>
</ul>
<h3 id="execve" class="heading"><a href="#execve" class="heading-anchor" aria-label="章节： execve" tabindex="-1"></a><span>execve</span></h3>
<ul>
<li><code>int<wbr> <wbr>execve<wbr>(<wbr>const<wbr> <wbr>char<wbr> *<wbr>filename<wbr>, <wbr>char<wbr> *<wbr>const<wbr> <wbr>argv<wbr>[], <wbr>char<wbr> *<wbr>const<wbr> <wbr>envp<wbr>[])</code></li>
</ul>
<p><code>execve</code> 会以 <code>argv</code> 作为参数<span class="mojikumi-line-end">、</span><code>envp</code> 作为环境变量<span class="mojikumi-line-end">，</span>在当前进程内执行 executable object file <code>filename</code><span class="mojikumi-line-end">。</span>可以和 <code>fork</code> 配合来在子进程内执行其他程序<span class="mojikumi-line-end">。</span></p>
<p><code>argv</code> 是一个以 <code>NULL</code> 为结尾的字符串数组<span class="mojikumi-line-end">，</span>表示各个参数<span class="mojikumi-line-end">，</span>其中第一个一般是程序的名称<span class="mojikumi-line-end">。</span></p>
<p><code>envp</code> 也是以 <code>NULL</code> 为结尾的字符串数组<span class="mojikumi-line-end">，</span>每个字符串形如 <code>name=value</code><span class="mojikumi-line-end">。</span></p>
<p>有一些函数可以用来获取<span class="mojikumi-line-end">、</span>设置环境变量<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>char<wbr> *<wbr>getenv<wbr>(<wbr>const<wbr> <wbr>char<wbr> *<wbr>name<wbr>)</code>: 返回 <code>NULL</code> 或环境变量的值</li>
<li><code>int<wbr> <wbr>setenv<wbr>(<wbr>const<wbr> <wbr>char<wbr> *<wbr>name<wbr>, <wbr>const<wbr> <wbr>char<wbr> *<wbr>newvalue<wbr>, <wbr>int<wbr> <wbr>overwrite<wbr>)</code>: 成功则返回 0<span class="mojikumi-line-end">，</span>失败<span class="mojikumi-line-start">（</span><code>overwrite</code> 为 0 而 <code>name</code> 已存在<span class="mojikumi-line-end">）</span>则返回 -1</li>
<li><code>void<wbr> <wbr>unsetenv<wbr>(<wbr>const<wbr> <wbr>char<wbr> *<wbr>name<wbr>)</code></li>
</ul>
<h2 id="signals" class="heading"><a href="#signals" class="heading-anchor" aria-label="章节： Signals" tabindex="-1"></a><span>Signals</span></h2>
<h3 id="signal-的种类" class="heading"><a href="#signal-的种类" class="heading-anchor" aria-label="章节： signal 的种类" tabindex="-1"></a><span>signal 的种类</span></h3>
<p>可以用 <code>man signal.7</code> 查看 signal 的列表<span class="mojikumi-line-start">（</span>名称<span class="mojikumi-line-end">、</span>语义<span class="mojikumi-line-end">、</span>编号<span class="mojikumi-line-end">、</span>默认行为<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>特别地<span class="mojikumi-line-end">：</span></p>
<ul>
<li>除以零时会被发送 SIGFPE</li>
<li>执行非法指令时会被发送 SIGILL</li>
<li>非法访问内存时会被发送 SIGSEGV</li>
<li>按 Ctrl+C 时 foreground process group 会被发送 SIGINT</li>
<li>子进程 terminate 时会向 parent 发送 SIGCHLD</li>
<li>可以通过 SIGKILL 来强行 terminate 一个进程</li>
</ul>
<h3 id="signal-的工作流程" class="heading"><a href="#signal-的工作流程" class="heading-anchor" aria-label="章节： signal 的工作流程" tabindex="-1"></a><span>signal 的工作流程</span></h3>
<ul>
<li>每个进程会记录每个 signal 是否 <i>pending</i><span class="mojikumi-line-end">、</span>是否 <i>blocked</i></li>
<li>发送 signal 会使接收者的这个 signal 变为 pending</li>
<li>进程可以改变每个 signal 的 blocked 状态</li>
<li>在切换到 user mode 执行进程时<span class="mojikumi-line-end">，</span>如果一个 signal 处于 pending 状态且没有被 blocked<span class="mojikumi-line-end">，</span>就会接收这个 signal<span class="mojikumi-line-end">，</span>并设为没有在 pending</li>
</ul>
<p>这意味着<span class="mojikumi-line-end">：</span></p>
<ul>
<li>signal 只记录是否 pending<span class="mojikumi-line-end">，</span>不会记录发送了几次<span class="mojikumi-line-end">，</span>在被接收前多次发送只会被接收一次</li>
<li>在 blocked 状态下被发送 signal<span class="mojikumi-line-end">，</span>会在 unblock 时收到</li>
</ul>
<h3 id="发送-signal" class="heading"><a href="#发送-signal" class="heading-anchor" aria-label="章节： 发送 signal" tabindex="-1"></a><span>发送 signal</span></h3>
<h4 id="kill-命令" class="heading"><a href="#kill-命令" class="heading-anchor" aria-label="章节： kill 命令" tabindex="-1"></a><span>kill 命令</span></h4>
<p>可以用 <code>kill</code> 命令在 shell 中向指定的进程发送信号<span class="mojikumi-line-end">。</span>一般 shell 会有 builtin 的 <code>kill</code><span class="mojikumi-line-end">，</span>也有位于 <code>/<wbr>usr<wbr>/<wbr>bin<wbr>/<wbr>kill</code> 的 <code>kill</code><span class="mojikumi-line-end">，</span>可能有一定的区别<span class="mojikumi-line-end">。</span></p>
<p>基础的 <code>kill</code> 命令形如 <code>kill -sig pid</code><span class="mojikumi-line-end">，</span>其中 <code>-sig</code> 可以形如 <code>-INT</code>/<code>-SIGINT</code>/<code>-2</code><span class="mojikumi-line-end">，</span>而 <code>pid</code> 表示要把信号发送给<span class="mojikumi-line-end">：</span></p>
<ul>
<li>> 0: PID 为 <code>pid</code> 的进程</li>
<li>0: process group 和当前进程相同的进程</li>
<li>-1: 除 PID 为 1 的 <code>init</code> 外的所有进程</li>
<li>&#x3C; 0: process group ID 为 <code>-pid</code> 的进程</li>
</ul>
<p>这与 <a href="#waitpid-%E7%9A%84-pid-%E5%8F%82%E6%95%B0">waitpid 的 pid 参数</a> 是类似的<span class="mojikumi-line-end">。</span></p>
<h4 id="在-shell-中使用键盘发送-sigint-sigtstp" class="heading"><a href="#在-shell-中使用键盘发送-sigint-sigtstp" class="heading-anchor" aria-label="章节： 在 shell 中使用键盘发送 SIGINT / SIGTSTP" tabindex="-1"></a><span>在 shell 中使用键盘发送 SIGINT / SIGTSTP</span></h4>
<p>shell 中会有至多一个 foreground job 和零个或若干个 background job<span class="mojikumi-line-end">。</span>shell 会给每个 job 中的所有进程指定同样的 process group<span class="mojikumi-line-end">。</span></p>
<p>Ctrl+C 会向 foreground group 发送 SIGINT<span class="mojikumi-line-end">，</span>Ctrl+Z 会向 foreground group 发送 SIGTSTP<span class="mojikumi-line-end">。</span></p>
<h4 id="使用函数发送-signal" class="heading"><a href="#使用函数发送-signal" class="heading-anchor" aria-label="章节： 使用函数发送 signal" tabindex="-1"></a><span>使用函数发送 signal</span></h4>
<ul>
<li><code>int kill(pid_t pid, int sig)</code>: 与 <a href="#kill-%E5%91%BD%E4%BB%A4">kill 命令</a>类似</li>
<li><code>unsigned<wbr> <wbr>int<wbr> <wbr>alarm<wbr>(<wbr>unsigned<wbr> <wbr>int<wbr> <wbr>secs<wbr>)</code>: 让 kernel 在 <code>secs</code> 秒后向当前进程发送 SIGALRM<span class="mojikumi-line-end">；</span>如果有尚未发送的 alarm 则取消掉<span class="mojikumi-line-end">，</span>如果 <code>secs</code> 为 0 则取消后不会发送新的 SIGALRM<span class="mojikumi-line-end">；</span>没有尚未发送的 alarm 则返回值是 0<span class="mojikumi-line-end">，</span>否则是被取消的 alarm 还剩的秒数</li>
</ul>
<h3 id="设置-signal-handler" class="heading"><a href="#设置-signal-handler" class="heading-anchor" aria-label="章节： 设置 signal handler" tabindex="-1"></a><span>设置 signal handler</span></h3>
<p>除了 SIGKILL 和 SIGSTOP<span class="mojikumi-line-end">，</span>其他 signal 的行为可以被改变<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="c 代码块" data-v-ad49d235>c</h4><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">#include</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&lt;</span><span style="color: #ECC48D">signal.h</span><span style="color: #D9F5DD">&gt;</span></span>
<span><span style="color: #C792EA">typedef</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">void</span><span style="color: #D6DEEB"> (</span><span style="color: #7FDBCA">*</span><span style="color: #C5E478">sighandler_t</span><span style="color: #D6DEEB">)(</span><span style="color: #C792EA">int</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #C5E478">sighandler_t</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">signal</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #D7DBE0">signum</span><span style="color: #D6DEEB">, </span><span style="color: #C5E478">sighandler_t</span><span style="color: #D6DEEB"> </span><span style="color: #D7DBE0">handler</span><span style="color: #D6DEEB">);</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">#include</span><span style="color: #403F53"> </span><span style="color: #111111">&lt;</span><span style="color: #C96765">signal.h</span><span style="color: #111111">&gt;</span></span>
<span><span style="color: #994CC3">typedef</span><span style="color: #403F53"> </span><span style="color: #994CC3">void</span><span style="color: #403F53"> (</span><span style="color: #0C969B">*</span><span style="color: #4876D6">sighandler_t</span><span style="color: #403F53">)(</span><span style="color: #994CC3">int</span><span style="color: #403F53">);</span></span>
<span><span style="color: #4876D6">sighandler_t</span><span style="color: #403F53"> </span><span style="color: #4876D6">signal</span><span style="color: #403F53">(</span><span style="color: #994CC3">int</span><span style="color: #403F53"> signum, </span><span style="color: #4876D6">sighandler_t</span><span style="color: #403F53"> handler);</span></span></code></pre></div></section>
<p>函数 <code>signal</code> 用来改变处理 signal <code>signum</code> 的方式<span class="mojikumi-line-end">。</span><code>handler</code> 可以是一个函数指针<span class="mojikumi-line-end">，</span>也可以是 <code>SIG_IGN</code> 表示无视这个 signal<span class="mojikumi-line-end">，</span>或者 <code>SIG_DFL</code> 表示使用这个 signal 的默认行为<span class="mojikumi-line-end">。</span></p>
<p>有 handler 时<span class="mojikumi-line-end">，</span>接收到一个 signal 就会触发 exception 来执行 handler<span class="mojikumi-line-end">，</span>在 handler 结束时一般会返回到原来的指令<span class="mojikumi-line-end">。</span></p>
<p>在执行 handler 的过程中<span class="mojikumi-line-end">，</span>相应的 signal 会被 block<span class="mojikumi-line-end">，</span>但 handler 可以被其他类型的 signal interrupt<span class="mojikumi-line-end">，</span>在处理完这另一个 signal 后返回到一开始的 handler<span class="mojikumi-line-end">。</span></p>
<h3 id="block-unblock-signal" class="heading"><a href="#block-unblock-signal" class="heading-anchor" aria-label="章节： block / unblock signal" tabindex="-1"></a><span>block / unblock signal</span></h3>
<p>进程可以主动 block / unblock 指定的 signal<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>int<wbr> <wbr>sigprocmask<wbr>(<wbr>int<wbr> <wbr>how<wbr>, <wbr>const<wbr> <wbr>sigset_t<wbr> *<wbr>set<wbr>, <wbr>sigset_t<wbr> *<wbr>oldset<wbr>)</code></li>
</ul>
<p>其中 <code>how</code> 是 <code>SIG_BLOCK</code> / <code>SIG_UNBLOCK</code> / <code>SIG_SETMASK</code><span class="mojikumi-line-end">，</span>分别表示 block <code>set</code> 里的 signal / unblock <code>set</code> 里的 signal / 将 blocked set 设为 <code>set</code><span class="mojikumi-line-end">。</span></p>
<p>若 <code>oldset</code> 不是 <code>NULL</code><span class="mojikumi-line-end">，</span>则会将修改前的 blocked set 存下来<span class="mojikumi-line-end">。</span></p>
<p>还有一些用来设置 <code>sigset_t</code> 的函数<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>int<wbr> <wbr>sigemptyset<wbr>(<wbr>sigset_t<wbr> *<wbr>set<wbr>)</code>: 将 <code>set</code> 设为空</li>
<li><code>int<wbr> <wbr>sigfillset<wbr>(<wbr>sigset_t<wbr> *<wbr>set<wbr>)</code>: 将 <code>set</code> 设为所有 signal</li>
<li><code>int<wbr> <wbr>sigaddset<wbr>(<wbr>sigset_t<wbr> *<wbr>set<wbr>, <wbr>int<wbr> <wbr>signum<wbr>)</code>: 将 <code>signum</code> 加入 <code>set</code></li>
<li><code>int<wbr> <wbr>sigdelset<wbr>(<wbr>sigset_t<wbr> *<wbr>set<wbr>, <wbr>int<wbr> <wbr>signum<wbr>)</code>: 将 <code>signum</code> 从 <code>set</code> 中删去</li>
<li><code>int<wbr> <wbr>sigismember<wbr>(<wbr>const<wbr> <wbr>sigset_t<wbr> *<wbr>set<wbr>, <wbr>int<wbr> <wbr>signum<wbr>)</code>: 检查 <code>signum</code> 是否在 <code>set</code> 中<span class="mojikumi-line-end">，</span>返回 0/1 或出错返回 -1</li>
</ul>
<h3 id="编写、使用-signal-handler" class="heading"><a href="#编写、使用-signal-handler" class="heading-anchor" aria-label="章节： 编写、使用 signal handler" tabindex="-1"></a><span>编写<span class="mojikumi-line-end">、</span>使用 signal handler</span></h3>
<h4 id="编写安全的-signal-handler" class="heading"><a href="#编写安全的-signal-handler" class="heading-anchor" aria-label="章节： 编写安全的 signal handler" tabindex="-1"></a><span>编写安全的 signal handler</span></h4>
<p>由于 signal handler 和主程序并行运行<span class="mojikumi-line-end">、</span>共享数据<span class="mojikumi-line-end">，</span>并且主程序可能在意想不到的地方接收到 signal 而被 interrupt<span class="mojikumi-line-end">，</span>编写安全的 signal handler 是困难的<span class="mojikumi-line-end">，</span>一般要遵循下面的守则<span class="mojikumi-line-end">：</span></p>
<ol start="0">
<li>handler 应当尽量简单<span class="mojikumi-line-end">，</span>例如可以设置一个 flag 而在主程序中检查 flag 并进行处理<span class="mojikumi-line-end">，</span>而非直接在 handler 中处理</li>
<li>在 handler 中只调用 async-signal-safe 的函数<span class="mojikumi-line-start">（</span>函数列表参见 <code>man<wbr> <wbr>signal<wbr>-<wbr>safety</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>常用的 <code>printf</code><span class="mojikumi-line-end">、</span><code>sprintf</code><span class="mojikumi-line-end">、</span><code>malloc</code><span class="mojikumi-line-end">、</span><code>exit</code> 都不是 async-signal-safe 的</li>
<li>存储并恢复 <code>errno</code><span class="mojikumi-line-end">，</span>保证调用 handler 前后 <code>errno</code> 不变</li>
<li>访问 handler 与主程序共享的数据时<span class="mojikumi-line-end">，</span>block signal 以防止在访问的中途被 interrupt</li>
<li>把在 handler 中修改而在主程序中访问的的全局变量声明为 <code>volatile</code> 的<span class="mojikumi-line-end">，</span>防止编译器误认为变量没有被修改而错误地进行优化</li>
<li>将 flag 声明为 <code>sig_atomic_t</code> 类型<span class="mojikumi-line-end">，</span>它的单次访问是 atomic 的<span class="mojikumi-line-end">，</span>不会被 interrupt<span class="mojikumi-line-start">（</span>但先读后写是两次访问<span class="mojikumi-line-end">，</span>可能被 interrupt<span class="mojikumi-line-end">）</span></li>
</ol>
<a id="为什么函数会不-async-signal-safe" name="为什么函数会不-async-signal-safe" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>为什么函数会不 async-signal-safe</span></h5><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>以 <code>printf</code> 为例<span class="mojikumi-line-end">，</span><code>printf</code> 会使用一个 statically allocated buffer<span class="mojikumi-line-end">，</span>如果在中途被 interrupt<span class="mojikumi-line-end">，</span>而在返回到被 interrupt 的位置前的这段时间里<span class="mojikumi-line-end">，</span><code>printf</code> 再次被调用<span class="mojikumi-line-end">，</span>那么这个 buffer 就会处于一个 inconsistent 的中间态<span class="mojikumi-line-end">，</span>导致 UB<span class="mojikumi-line-end">。</span></p><p>也就是说<span class="mojikumi-line-end">，</span>一个函数不 async-signal-safe 一般是因为使用了一些全局变量并且可能在执行过程中被 interrupt<span class="mojikumi-line-end">。</span>要安全地调用这样的函数<span class="mojikumi-line-end">，</span>在其被 interrupt 后<span class="mojikumi-line-end">，</span>下次执行必须要是从被 interrupt 的地方继续<span class="mojikumi-line-end">，</span>而不能从头开始<span class="mojikumi-line-end">。</span></p><p>除了在 handler 中只调用 async-signal-safe 的函数<span class="mojikumi-line-end">，</span>也可以选择在主程序中调用非 async-signal-safe 函数时 block 掉 handler 使用了这一函数的 signal<span class="mojikumi-line-end">，</span>但这很难做到<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h4 id="正确处理多次发送的-signal" class="heading"><a href="#正确处理多次发送的-signal" class="heading-anchor" aria-label="章节： 正确处理多次发送的 signal" tabindex="-1"></a><span>正确处理多次发送的 signal</span></h4>
<p>多次发送 signal 可能只会收到一次<span class="mojikumi-line-end">，</span>所以处理 signal 时不能误以为收到的次数与发送的次数相同<span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>接收 SIGCHLD 来 reap child 时<span class="mojikumi-line-end">，</span>应当在 handler 中 reap 掉所有已 terminate 的子进程<span class="mojikumi-line-end">，</span>而非只 reap 一个子进程<span class="mojikumi-line-end">。</span></p>
<h4 id="不同系统上-signal-handling-的差异" class="heading"><a href="#不同系统上-signal-handling-的差异" class="heading-anchor" aria-label="章节： 不同系统上 signal handling 的差异" tabindex="-1"></a><span>不同系统上 signal handling 的差异</span></h4>
<p>在一些系统上<span class="mojikumi-line-end">，</span>signal handling 的语义会有区别<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>在一些系统上<span class="mojikumi-line-end">，</span>调用了 handler 后这个 signal 就会恢复默认行为<span class="mojikumi-line-end">，</span>需要在 handler 中重新调用 <code>signal</code> 才能一直使用这个 handler<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>在一些系统上<span class="mojikumi-line-end">，</span>需要执行较长时间的 system call 会在被 interrupt 后报错 EINTR<span class="mojikumi-line-end">，</span>而在现代系统上会尽可能地自动重新执行这个 system call<span class="mojikumi-line-end">，</span>详见 <code>man signal.7</code> 的 <span class="mojikumi">“</span>Interruption of system calls and library functions by signal handlers<span class="mojikumi">”</span> 一节<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>P.S. 这就是 <a href="https://www.dreamsongs.com/RiseOfWorseIsBetter.html">Rise of Worse Is Better</a> 中用来举例的 <span class="mojikumi">“</span>PC loser-ing problem<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>原本采用 worse-is-better 的 Unix 现在也进化成了 the right thing<span class="mojikumi-line-end">）</span>
<span class="mojikumi-line-start">（</span>P.P.S. 当时读这篇的时候我完全没看懂这一段<span class="mojikumi-line-end">，</span>没想到现在竟然还能记起来<span class="mojikumi-line-end">）</span></p>
</li>
</ul>
<p>可以通过 <code>sigaction</code> 函数来设置想要的 signal handling 语义<span class="mojikumi-line-end">。</span></p>
<h4 id="注意-handler-被调用的时机" class="heading"><a href="#注意-handler-被调用的时机" class="heading-anchor" aria-label="章节： 注意 handler 被调用的时机" tabindex="-1"></a><span>注意 handler 被调用的时机</span></h4>
<p>handler 可能会在意想不到的时机被调用<span class="mojikumi-line-end">，</span>为了避免出错<span class="mojikumi-line-start">（</span>race<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>可能会需要暂时 block signal 来确保 handler 在正确的时机被调用<span class="mojikumi-line-end">。</span>详见 CS:APP 上的例子<span class="mojikumi-line-end">。</span></p>
<h3 id="等待-signal" class="heading"><a href="#等待-signal" class="heading-anchor" aria-label="章节： 等待 signal" tabindex="-1"></a><span>等待 signal</span></h3>
<ul>
<li><code>int<wbr> <wbr>sigsuspend<wbr>(<wbr>const<wbr> <wbr>sigset_t<wbr> *<wbr>mask<wbr>)</code>: 将 blocked set 设为 <code>mask</code><span class="mojikumi-line-end">，</span>在接收到任何 signal 后返回</li>
</ul>
<p>可以在程序的其他部分 block 掉某个 signal<span class="mojikumi-line-end">，</span>然后在 <code>sigsuspend</code> 的参数中将其 unblock<span class="mojikumi-line-end">，</span>以达到等待该 signal 的目的<span class="mojikumi-line-end">。</span>因为 <code>sigsuspend</code> 等待的不是某个特定的 signal<span class="mojikumi-line-end">，</span>可以配合 <code>while</code> 循环来检查由 handler 设置的某个 flag<span class="mojikumi-line-end">。</span></p>
<p><code>sigsuspend</code> 的效果类似于下面的这段代码<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="c 代码块" data-v-ad49d235>c</h4><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #82AAFF">sigprocmask</span><span style="color: #D6DEEB">(SIG_SETMASK, </span><span style="color: #7FDBCA">&amp;</span><span style="color: #D7DBE0">mask</span><span style="color: #D6DEEB">, </span><span style="color: #7FDBCA">&amp;</span><span style="color: #D7DBE0">prev</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #82AAFF">pause</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #82AAFF">sigprocmask</span><span style="color: #D6DEEB">(SIG_SETMASK, </span><span style="color: #7FDBCA">&amp;</span><span style="color: #D7DBE0">prev</span><span style="color: #D6DEEB">, </span><span style="color: #82AAFF">NULL</span><span style="color: #D6DEEB">);</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #4876D6">sigprocmask</span><span style="color: #403F53">(SIG_SETMASK, </span><span style="color: #0C969B">&amp;</span><span style="color: #403F53">mask, </span><span style="color: #0C969B">&amp;</span><span style="color: #403F53">prev);</span></span>
<span><span style="color: #4876D6">pause</span><span style="color: #403F53">();</span></span>
<span><span style="color: #4876D6">sigprocmask</span><span style="color: #403F53">(SIG_SETMASK, </span><span style="color: #0C969B">&amp;</span><span style="color: #403F53">prev, </span><span style="color: #4876D6">NULL</span><span style="color: #403F53">);</span></span></code></pre></div></section>
<p>不同的是<span class="mojikumi-line-end">，</span>上面这段代码有可能会恰好在 <code>sigprocmask</code> 之后<span class="mojikumi-line-end">、</span><code>pause</code> 之前接收到 signal<span class="mojikumi-line-end">，</span>导致这个 signal 没有将 <code>pause</code> interrupt 而一直 sleep 下去<span class="mojikumi-line-end">。</span><code>sigsuspend</code> 是 atomic 的<span class="mojikumi-line-end">，</span>就不存在这样的问题<span class="mojikumi-line-end">。</span></p>
<h2 id="nonlocal-jumps" class="heading"><a href="#nonlocal-jumps" class="heading-anchor" aria-label="章节： Nonlocal Jumps" tabindex="-1"></a><span>Nonlocal Jumps</span></h2>
<ul>
<li><code>int<wbr> <wbr>setjmp<wbr>(<wbr>jmp_buf<wbr> <wbr>env<wbr>)</code></li>
<li><code>void<wbr> <wbr>longjmp<wbr>(<wbr>jmp_buf<wbr> <wbr>env<wbr>, <wbr>int<wbr> <wbr>val<wbr>)</code></li>
</ul>
<p><code>setjmp</code> 会将当前的 PC 和寄存器等信息存在 <code>env</code> 中<span class="mojikumi-line-end">，</span>而 <code>longjmp</code> 会恢复 <code>env</code> 中保存的信息<span class="mojikumi-line-end">，</span>跳转到 <code>setjmp</code> 的位置<span class="mojikumi-line-end">。</span></p>
<p>这意味着 <code>setjmp</code> 可能返回多次<span class="mojikumi-line-end">，</span>而 <code>longjmp</code> 不会返回<span class="mojikumi-line-end">。</span>第一次调用 <code>setjmp</code> 会返回 0<span class="mojikumi-line-end">，</span>而之后调用 <code>longjmp</code> 时会在 <code>setjmp</code> 的位置返回参数 <code>val</code> 的值<span class="mojikumi-line-start">（</span>特别地<span class="mojikumi-line-end">，</span>如果 <code>val</code> 的值是 0<span class="mojikumi-line-end">，</span>会返回 1<span class="mojikumi-line-end">，</span>强制和首次返回区分开<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>因为 <code>setjmp</code> / <code>longjmp</code> 只是恢复 PC 和寄存器<span class="mojikumi-line-start">（</span>包括 <code>%rsp</code><span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ul>
<li>调用 <code>longjmp</code> 时 <code>setjmp</code> 所在的函数必须还没有返回<span class="mojikumi-line-end">，</span>否则 <code>setjmp</code> 所在的 stack frame 就失效了<span class="mojikumi-line-end">。</span></li>
<li><code>setjmp</code> 的返回值只应出现在<a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/setjmp.html">一些简单的表达式中</a><span class="mojikumi-line-end">，</span>否则是 UB<span class="mojikumi-line-end">。</span>特别地<span class="mojikumi-line-end">，</span>不应将 <code>setjmp</code> 的返回值赋给一个变量<span class="mojikumi-line-end">，</span>但可以放在 <code>if</code> 或 <code>switch</code> 里<span class="mojikumi-line-end">。</span>这是考虑到<span class="mojikumi-line-end">，</span>计算一个复杂的表达式可能会有一些中间量以及 dynamic stack allocation<span class="mojikumi-line-end">，</span>而 <code>longjmp</code> 回来时这些中间量<span class="mojikumi-line-end">、</span>dynamic stack allocation 不一定能被正确恢复<span class="mojikumi-line-end">，</span>导致表达式不一定能被正确计算<span class="mojikumi-line-end">。</span></li>
<li>如果修改了存放在内存中的局部变量<span class="mojikumi-line-end">，</span>跳转后会是被修改过的值而不是原来的值<span class="mojikumi-line-end">，</span>而存放在寄存器中的值则会被恢复<span class="mojikumi-line-end">。</span>要确保变量不被存在寄存器中<span class="mojikumi-line-end">，</span>必须使用 <code>volatile</code> 声明变量<span class="mojikumi-line-end">，</span>否则<span class="mojikumi-line-start">（</span>即便使用了 <code>register</code> 或 <code>auto</code> 来声明变量<span class="mojikumi-line-end">）</span>编译器可能任意地把变量放在内存或寄存器中<span class="mojikumi-line-end">，</span>造成跳转后变量的值不确定<span class="mojikumi-line-end">。</span></li>
</ul>
<a id="volatile-vs-取地址" name="volatile-vs-取地址" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>volatile vs 取地址</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>C99 rationale 和 <code>man setjmp</code> 都说要用 <code>volatile</code> 才能确保局部变量存在栈上<span class="mojikumi-line-end">，</span>那如果一个局部变量被取了地址<span class="mojikumi-line-end">，</span>还有可能存在寄存器中吗？如果有可能的话<span class="mojikumi-line-end">，</span>是标准允许这样但事实上不会<span class="mojikumi-line-end">，</span>还是真的可以在 gcc 中做到？</p></div></div></aside>
<ul>
<li><code>int<wbr> <wbr>sigsetjmp<wbr>(<wbr>sigjmp_buf<wbr> <wbr>env<wbr>, <wbr>int<wbr> <wbr>savesigs<wbr>)</code></li>
<li><code>void<wbr> <wbr>siglongjmp<wbr>(<wbr>sigjmp_buf<wbr> <wbr>env<wbr>, <wbr>int<wbr> <wbr>val<wbr>)</code></li>
</ul>
<p><code>sigsetjmp</code> / <code>siglongjmp</code> 会额外存储<span class="mojikumi-line-end">、</span>恢复 pending / blocked signal 的信息<span class="mojikumi-line-start">（</span>需要以非 0 <code>savesigs</code> 调用 <code>sigsetjmp</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>可以用于 signal handler<span class="mojikumi-line-end">。</span></p>
<p>nonlocal jump 主要有两种用途<span class="mojikumi-line-end">：</span></p>
<ul>
<li>出错时直接跳转到一个集中的位置来处理错误<span class="mojikumi-line-end">，</span>而不用一层层往上返回</li>
<li>处理 signal 时不返回到被 interrupt 的位置<span class="mojikumi-line-end">，</span>而跳转到指定的位置</li>
</ul>
<p>在 signal handler 中使用 nonlocal jump 时需要注意<span class="mojikumi-line-end">：</span></p>
<ul>
<li>先 <code>sigsetjmp</code> 再 install signal handler<span class="mojikumi-line-end">，</span>否则可能 race</li>
<li><code>siglongjmp</code> 跳转到的后续代码中只能调用 async-signal-safe 的函数</li>
</ul>
<p>nonlocal jump 可能造成可读性的问题<span class="mojikumi-line-end">，</span>也可能因为跳过了中间很多函数的返回<span class="mojikumi-line-end">，</span>造成内存泄露等后果<span class="mojikumi-line-end">，</span>要谨慎使用<span class="mojikumi-line-end">。</span></p>
<h2 id="tools-for-manipulating-processes" class="heading"><a href="#tools-for-manipulating-processes" class="heading-anchor" aria-label="章节： Tools for Manipulating Processes" tabindex="-1"></a><span>Tools for Manipulating Processes</span></h2>
<ul>
<li><code>strace</code>: 显示程序调用的所有 system call<span class="mojikumi-line-end">，</span>可以静态链接来避免看到大量共享库相关的输出</li>
<li><code>ps</code>: 列出进程信息</li>
<li><code>top</code>: 列出进程的资源使用<span class="mojikumi-line-start">（</span>可以用 <code>htop</code><span class="mojikumi-line-end">）</span></li>
<li><code>pmap</code>: 查看进程的 memory map</li>
<li><code>/proc</code>: 查看各种进程相关的信息 (<code>man proc.5</code>)</li>
</ul>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/csapp">csapp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CS:APP 第六章学习笔记]]></title>
            <link>https://ouuan.moe/post/2022/12/csapp-6</link>
            <guid>https://ouuan.moe/post/2022/12/csapp-6</guid>
            <pubDate>Mon, 05 Dec 2022 07:47:43 GMT</pubDate>
            <description><![CDATA[





<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第六章 <span class="mojikumi">“</span>The Memory Hierarchy<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容有<span class="mojikumi-line-end">：</span>各种存储设备<span class="mojikumi-line-start">（</span>RAM<span class="mojikumi-line-end">、</span>ROM<span class="mojikumi-line-end">、</span>HDD<span class="mojikumi-line-end">、</span>SSD<span class="mojikumi-line-end">）</span>的特点<span class="mojikumi-line-end">、</span>程序的局部性<span class="mojikumi-line-end">、</span>缓存的结构以及原理<span class="mojikumi-line-end">、</span>缓存对程序性能的影响<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[





<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第六章 <span class="mojikumi">“</span>The Memory Hierarchy<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容有<span class="mojikumi-line-end">：</span>各种存储设备<span class="mojikumi-line-start">（</span>RAM<span class="mojikumi-line-end">、</span>ROM<span class="mojikumi-line-end">、</span>HDD<span class="mojikumi-line-end">、</span>SSD<span class="mojikumi-line-end">）</span>的特点<span class="mojikumi-line-end">、</span>程序的局部性<span class="mojikumi-line-end">、</span>缓存的结构以及原理<span class="mojikumi-line-end">、</span>缓存对程序性能的影响<span class="mojikumi-line-end">。</span></p>

<p>因为时间不太够<span class="mojikumi-line-end">，</span>本来我想先跳过这章以后再补的<span class="mojikumi-line-end">，</span>但学第九章的时候感觉还是跳不得<span class="mojikumi-line-end">，</span>否则第九章有些东西感觉学了个半懂<span class="mojikumi-line-end">。</span><s>虽然只用学一小部分就足以满足第九章的需求<span class="mojikumi-line-end">，</span>但我打算摆烂了<span class="mojikumi-line-end">，</span>该学的东西学不完就学不完<span class="mojikumi-line-end">，</span>我想学啥就学啥<span class="mojikumi-line-end">。</span></s></p>
<h2 id="storage-technologies" class="heading"><a href="#storage-technologies" class="heading-anchor" aria-label="章节： Storage Technologies" tabindex="-1"></a><span>Storage Technologies</span></h2>
<h3 id="ram" class="heading"><a href="#ram" class="heading-anchor" aria-label="章节： RAM" tabindex="-1"></a><span>RAM</span></h3>
<p><i>Random access memory</i> 分为 SRAM 和 DRAM 两种<span class="mojikumi-line-end">，</span>SRAM 有更快的访问速度但更加昂贵<span class="mojikumi-line-end">。</span></p>
<h4 id="sram" class="heading"><a href="#sram" class="heading-anchor" aria-label="章节： SRAM" tabindex="-1"></a><span>SRAM</span></h4>
<p>SRAM (Static RAM) 将每个 bit 存储在一个 <i>bistable</i> 的 memory cell 中<span class="mojikumi-line-end">，</span>每个 cell 由 6 个晶体管组成<span class="mojikumi-line-end">，</span>有两种可能的稳定态<span class="mojikumi-line-end">，</span>遇到微小的扰动也会迅速恢复到这两种状态之一<span class="mojikumi-line-end">。</span></p>
<h4 id="dram" class="heading"><a href="#dram" class="heading-anchor" aria-label="章节： DRAM" tabindex="-1"></a><span>DRAM</span></h4>
<p>DRAM (Dynamic RAM) 将每个 bit 存储在一个很小的电容中<span class="mojikumi-line-end">，</span>容易受到外界干扰<span class="mojikumi-line-end">，</span>所以需要周期性地将数据复制出去再复制回来以进行刷新<span class="mojikumi-line-end">，</span>可能还会配合纠错码来保证数据正确<span class="mojikumi-line-end">。</span></p>
<p>DRAM 的设计使其存储密度更高<span class="mojikumi-line-end">，</span>但访问速度更慢<span class="mojikumi-line-end">；</span>SRAM 则更快<span class="mojikumi-line-end">，</span>但密度更低<span class="mojikumi-line-end">，</span>更贵<span class="mojikumi-line-end">，</span>更费电<span class="mojikumi-line-end">。</span>访问 DRAM 的用时大约是 SRAM 的 10 倍<span class="mojikumi-line-end">，</span>而 SRAM 的造价大约是 DRAM 的 1000 倍<span class="mojikumi-line-end">。</span></p>
<h4 id="conventional-dram" class="heading"><a href="#conventional-dram" class="heading-anchor" aria-label="章节： Conventional DRAM" tabindex="-1"></a><span>Conventional DRAM</span></h4>
<p>DRAM 芯片被分为若干 <i>supercell</i><span class="mojikumi-line-end">，</span>每个 supercell 存储一个 word<span class="mojikumi-line-end">，</span>一般是 1 byte<span class="mojikumi-line-end">。</span>supercell 排列为二维阵列<span class="mojikumi-line-end">，</span>可以用二维坐标 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span> 定位<span class="mojikumi-line-end">。</span></p>
<p>DRAM 通过 <i>pin</i> 连接到 <i>memory controller</i> 来和外界通信<span class="mojikumi-line-end">。</span>读取位于 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span> 的 supercell 时<span class="mojikumi-line-end">，</span>memory controller 会依次发送 <i>row access strobe</i> (RAS) <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 和 <i>column access strobe</i> (CAS) <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="mojikumi-line-end">，</span>在收到 RAS 后 DRAM 会将第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></span> 行复制到一个内部的 row buffer<span class="mojikumi-line-end">，</span>收到 CAS 后再从 row buffer 里将第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></span> 列发送给 memory controller<span class="mojikumi-line-end">。</span></p>
<h4 id="memory-module" class="heading"><a href="#memory-module" class="heading-anchor" aria-label="章节： Memory Module" tabindex="-1"></a><span>Memory Module</span></h4>
<p>DRAM 芯片会被组装为 <i>memory module</i> 来插到主板上<span class="mojikumi-line-end">。</span></p>
<p>DIMM 是一种 memory module<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>一个 DIMM 可以包含 8 个 DRAM 芯片<span class="mojikumi-line-end">，</span>每个 64-bit 的 word 在每个 DRAM 芯片的同一个地址上分别存一个 byte<span class="mojikumi-line-end">，</span>从而整个 DIMM 可以以 64-bit 为单位与外界通信<span class="mojikumi-line-end">。</span></p>
<h4 id="enhanced-dram" class="heading"><a href="#enhanced-dram" class="heading-anchor" aria-label="章节： Enhanced DRAM" tabindex="-1"></a><span>Enhanced DRAM</span></h4>
<p>朴素的 DRAM 是比较慢的<span class="mojikumi-line-end">，</span>历史上曾经有过若干对 conventional DRAM 的优化<span class="mojikumi-line-end">：</span></p>
<ol>
<li>FPM (fast page mode) DRAM: 如果连续两次 RAS 是一样的<span class="mojikumi-line-end">，</span>可以省略掉后续相同的 RAS<span class="mojikumi-line-end">，</span>直接发送 CAS</li>
<li>EDO (extended data out) DRAM: 延长了数据输出的时间<span class="mojikumi-line-end">，</span>对 pipelining 有帮助</li>
<li>SDRAM (synchronous): 通过时钟信号的 rising edge 同步地通信<span class="mojikumi-line-end">，</span>而非通过发送 RAS/CAS 异步通信</li>
<li>DDR (double data-rate) SDRAM: 通过同时使用时钟信号的 rising edge 和 falling edge 达到 double data-rate<span class="mojikumi-line-end">，</span>分为 DDR<span class="mojikumi-line-end">、</span>DDR2<span class="mojikumi-line-end">、</span>DDR3<span class="mojikumi-line-end">、</span>DDR4<span class="mojikumi-line-end">、</span>DDR5 等</li>
<li>VRAM (video): 一般用于显卡<span class="mojikumi-line-end">、</span>frame buffer 等<span class="mojikumi-line-end">，</span>它的输出是直接输出整个 buffer<span class="mojikumi-line-end">，</span>并且可以并行地同时读和写</li>
</ol>
<h3 id="rom" class="heading"><a href="#rom" class="heading-anchor" aria-label="章节： ROM" tabindex="-1"></a><span>ROM</span></h3>
<p>RAM 会在断电后丢失数据<span class="mojikumi-line-end">，</span>所以是 <i>volatile</i> 的<span class="mojikumi-line-end">。</span>与之相对<span class="mojikumi-line-end">，</span>还有 nonvolatile 的存储器<span class="mojikumi-line-end">，</span>统称为 <i>read-only memory</i> (ROM)<span class="mojikumi-line-end">，</span>尽管有的 ROM 是可以写入的<span class="mojikumi-line-end">。</span>ROM 的写入称作 <i>reprogram</i><span class="mojikumi-line-end">。</span></p>
<ul>
<li>PROM (programmable ROM) 只能被写入一次<span class="mojikumi-line-end">。</span></li>
<li>EPROM (erasable PROM) 需要用特殊设备写入<span class="mojikumi-line-end">，</span>可以写入大约 1000 次<span class="mojikumi-line-end">。</span></li>
<li>EEPROM (electrically EPROM) 不需要用特殊设备就可以写入<span class="mojikumi-line-end">，</span>可以写入大约 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span> 次<span class="mojikumi-line-end">。</span></li>
<li>flash memory 是一种基于 EEPROM 的 nonvolatile 存储器<span class="mojikumi-line-end">，</span>被广泛使用<span class="mojikumi-line-end">，</span>包括用于 <a href="#ssd">SSD</a><span class="mojikumi-line-end">。</span></li>
<li>固件 (firmware) 往往存储于 ROM 中<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="访问-main-memory" class="heading"><a href="#访问-main-memory" class="heading-anchor" aria-label="章节： 访问 main memory" tabindex="-1"></a><span>访问 main memory</span></h3>
<p>一个 <i>bus</i> 是一组用来通信的导线<span class="mojikumi-line-end">，</span>可以传输地址<span class="mojikumi-line-end">、</span>数据<span class="mojikumi-line-end">、</span>控制信号等<span class="mojikumi-line-end">。</span>CPU 和 main memory 之间的通信通过 <i>bus transaction</i> 进行<span class="mojikumi-line-end">。</span></p>
<p>CPU 通过 system bus 连接 I/O bridge<span class="mojikumi-line-end">，</span>I/O bridge 通过 memory bus 连接 main memory<span class="mojikumi-line-end">。</span>I/O bridge 负责 system bus signal 和 memory bus signal 之间的转换<span class="mojikumi-line-end">。</span></p>
<h3 id="hdd" class="heading"><a href="#hdd" class="heading-anchor" aria-label="章节： HDD" tabindex="-1"></a><span>HDD</span></h3>
<h4 id="磁盘的结构" class="heading"><a href="#磁盘的结构" class="heading-anchor" aria-label="章节： 磁盘的结构" tabindex="-1"></a><span>磁盘的结构</span></h4>
<p>磁盘由若干 <i>platter</i><span class="mojikumi-line-start">（</span>盘片<span class="mojikumi-line-end">）</span>组成<span class="mojikumi-line-end">。</span>每个 platter 有两个 <i>surface</i><span class="mojikumi-line-start">（</span>表面<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>每个 surface 上覆盖着磁性记录材料<span class="mojikumi-line-end">。</span>platter 由位于中心的 <i>spindle</i><span class="mojikumi-line-start">（</span>主轴<span class="mojikumi-line-end">）</span>带动<span class="mojikumi-line-end">，</span>以某个一般是 5400~15000 RPM 的速度转动<span class="mojikumi-line-end">。</span></p>
<p>每个 surface 被分成若干个称作 <i>track</i><span class="mojikumi-line-start">（</span>磁道<span class="mojikumi-line-end">）</span>的同心圆环<span class="mojikumi-line-end">，</span>每个 track 被分为若干 <i>sector</i><span class="mojikumi-line-start">（</span>扇区<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>每个 sector 存有相同大小的数据<span class="mojikumi-line-start">（</span>一般是 512 bytes<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>相邻的 sector 之间由 <i>gap</i><span class="mojikumi-line-start">（</span>间隙<span class="mojikumi-line-end">）</span>隔开<span class="mojikumi-line-end">，</span>gap 不存储数据<span class="mojikumi-line-end">，</span>而是用来识别 sector<span class="mojikumi-line-end">。</span></p>
<p>一个磁盘通常由多个堆叠在一起的 platter 构成<span class="mojikumi-line-end">，</span>这些 platter 共享一个 spindle<span class="mojikumi-line-end">。</span>对于某个距离 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="mojikumi-line-end">，</span>一个磁盘内所有 surface 上离转轴距离为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span> 的 track 的集合称作一个 <i>cylinder</i><span class="mojikumi-line-start">（</span>柱面<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>整体结构如 CS:APP Figure 6.9 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.9.930d8843.webp"><img srcset="/assets/csapp-fig6.9.5ba83537.png" loading="lazy" src="/assets/csapp-fig6.9.5ba83537.png" width="1517" height="537" alt="磁盘结构示意图"></picture></p>
<h4 id="磁盘的容量" class="heading"><a href="#磁盘的容量" class="heading-anchor" aria-label="章节： 磁盘的容量" tabindex="-1"></a><span>磁盘的容量</span></h4>
<p>磁盘的容量有三个衡量指标<span class="mojikumi-line-end">：</span></p>
<ul>
<li>recording density: 单位长度的 track 存储的 bit 数量</li>
<li>track density: 单位长度的半径上的 track 个数</li>
<li>areal density: 单位面积上存储的 bit 数量</li>
</ul>
<p>早期的磁盘的所有 track 都有相同数量的 sector<span class="mojikumi-line-end">，</span>这样的话位于外部的 track 的 sector 就会更加稀疏<span class="mojikumi-line-end">。</span>后来为了提高容量<span class="mojikumi-line-end">，</span>将 cylinder 划分成了若干个 <i>recording zone</i><span class="mojikumi-line-end">，</span>每个 recording zone 由若干相邻的 cylinder 组成<span class="mojikumi-line-end">，</span>同一个 recording zone 内的所有 track 有相同数量的 sector<span class="mojikumi-line-end">。</span></p>
<h4 id="磁盘的读写" class="heading"><a href="#磁盘的读写" class="heading-anchor" aria-label="章节： 磁盘的读写" tabindex="-1"></a><span>磁盘的读写</span></h4>
<p>磁盘通过连在传动臂上的读写头进行读写<span class="mojikumi-line-end">，</span>每次读写前需要先将读写头移动到相应的位置<span class="mojikumi-line-start">（</span>寻道<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并等待目标 sector 转动到读写头下<span class="mojikumi-line-end">，</span>再开始读写<span class="mojikumi-line-end">。</span></p>
<p>寻道用时与读写头原本的位置到目标位置的距离有关<span class="mojikumi-line-end">，</span>等待转动的用时则看运气<span class="mojikumi-line-end">。</span>在 CS:APP 举的例子中<span class="mojikumi-line-end">，</span>寻道平均用时为 9 ms<span class="mojikumi-line-end">，</span>等待旋转平均用时为 4 ms<span class="mojikumi-line-end">，</span>读写一个 sector 用时 20 μs<span class="mojikumi-line-end">。</span></p>
<p>也就是说<span class="mojikumi-line-end">，</span>磁盘读写的主要用时是寻道以及等待旋转用时<span class="mojikumi-line-end">，</span>也就是初次访问一段连续的 sector 的用时<span class="mojikumi-line-end">，</span>而与访问多少个连续的 sector 关系不大<span class="mojikumi-line-end">。</span>对于单个 sector<span class="mojikumi-line-end">，</span>磁盘访问的用时可以达到 SRAM 的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> 倍<span class="mojikumi-line-end">，</span>DRAM 的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> 倍<span class="mojikumi-line-end">，</span>但连续 sector 的读写用时仅为 DRAM 的不到十倍<span class="mojikumi-line-end">。</span></p>
<h4 id="logical-disk-blocks" class="heading"><a href="#logical-disk-blocks" class="heading-anchor" aria-label="章节： Logical Disk Blocks" tabindex="-1"></a><span>Logical Disk Blocks</span></h4>
<p>磁盘对外提供了 <i>logical block</i> 作为 sector 的抽象<span class="mojikumi-line-end">，</span>每个 logical block 的大小和一个 sector 相同<span class="mojikumi-line-end">，</span>由连续的非负整数索引<span class="mojikumi-line-end">，</span>通过 <i>disk controller</i> 翻译成形如 <i>(surface, track, sector)</i> 的坐标<span class="mojikumi-line-end">。</span></p>
<a id="磁盘格式化" name="磁盘格式化" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>磁盘格式化</span></h5><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>磁盘在使用前需要进行格式化<span class="mojikumi-line-end">：</span>在 gap 中写入 sector 的标识信息<span class="mojikumi-line-end">，</span>识别出有故障的 cylinder<span class="mojikumi-line-end">，</span>将一些 cylinder 设为备用以防其他 cylinder 损坏<span class="mojikumi-line-end">。</span>由于备用 cylinder 的存在<span class="mojikumi-line-end">，</span>formatted capacity 会小于 maximum capacity<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="io-bus" class="heading"><a href="#io-bus" class="heading-anchor" aria-label="章节： I/O bus" tabindex="-1"></a><span>I/O bus</span></h3>
<p>不同的 I/O 设备通过 I/O bus 与 I/O bridge 连接<span class="mojikumi-line-end">。</span>例如显卡<span class="mojikumi-line-end">、</span>连接各种设备的 USB controller<span class="mojikumi-line-end">、</span>通过 SCSI/SATA 等接口连接磁盘的 host bus adapter 等都会连接到 I/O bus<span class="mojikumi-line-end">。</span></p>
<h3 id="访问磁盘" class="heading"><a href="#访问磁盘" class="heading-anchor" aria-label="章节： 访问磁盘" tabindex="-1"></a><span>访问磁盘</span></h3>
<p>访问磁盘需要向磁盘发送三条指令<span class="mojikumi-line-end">：</span></p>
<ol>
<li>向磁盘发送一个信号<span class="mojikumi-line-end">，</span>告诉磁盘要读取数据</li>
<li>将要读取的 logical block number 发送给磁盘</li>
<li>告诉磁盘读取到的数据要放在 main memory 的哪个地址</li>
</ol>
<p>发送完这些指令后<span class="mojikumi-line-end">，</span>CPU 会继续干其他事情<span class="mojikumi-line-end">。</span>磁盘读取到数据后<span class="mojikumi-line-end">，</span>会通过 I/O bus 直接将数据存放到 main memory 中而不经过 CPU<span class="mojikumi-line-end">，</span>这被称作 <i>direct memory access</i> (DMA)<span class="mojikumi-line-end">。</span>存放好数据后<span class="mojikumi-line-end">，</span>磁盘向 CPU 发送 interrupt signal 来跳转到处理磁盘读取完成的 signal handler<span class="mojikumi-line-end">。</span></p>
<h3 id="ssd" class="heading"><a href="#ssd" class="heading-anchor" aria-label="章节： SSD" tabindex="-1"></a><span>SSD</span></h3>
<p>SSD 将一个或多个 flash memory 包装起来<span class="mojikumi-line-end">，</span>并且有一个 <i>flash translation layer</i> 来将输入的 logical block number 转换为对 flash memory 的访问<span class="mojikumi-line-end">，</span>对外表现出与 HDD 类似的接口<span class="mojikumi-line-end">。</span></p>
<p>flash memory 由若干 block 组成<span class="mojikumi-line-end">，</span>每个 block 又由若干<span class="mojikumi-line-start">（</span>32-128 个<span class="mojikumi-line-end">）</span>page 组成<span class="mojikumi-line-end">，</span>每个 page 一般是 512B-4KB 大<span class="mojikumi-line-end">，</span>数据传输的最小单位是 page<span class="mojikumi-line-end">。</span></p>
<p>SSD 的写入比较特殊<span class="mojikumi-line-end">：</span>一个 page 需要在所属的整个 block 都被擦除<span class="mojikumi-line-start">（</span>改为全 1<span class="mojikumi-line-end">）</span>后才能写入一次<span class="mojikumi-line-end">，</span>如果要写入第二次就得再把整个 block 擦除一遍<span class="mojikumi-line-end">。</span>在写入时<span class="mojikumi-line-end">，</span>为了擦除某个 block<span class="mojikumi-line-end">，</span>可能会需要把这个 block 存储的数据复制到其他 block<span class="mojikumi-line-end">。</span>擦除是一个耗时相对较长的操作<span class="mojikumi-line-end">，</span>需要约 1 ms<span class="mojikumi-line-end">，</span>并且每个 block 在擦除约 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span> 次后就会损坏<span class="mojikumi-line-end">。</span></p>
<p>这使得 SSD 的写入比读取略慢<span class="mojikumi-line-end">，</span>并且写入很多次后可能损坏<span class="mojikumi-line-end">。</span>flash translation layer 会通过 <i>wear-leveling logic</i> 来尽可能使得每个 block 的擦除次数相同<span class="mojikumi-line-end">，</span>以延长 SSD 的使用寿命<span class="mojikumi-line-end">。</span></p>
<p>disk<span class="mojikumi-line-end">、</span>RAM<span class="mojikumi-line-end">、</span>CPU 速度差异的历史变化如 CS:APP Figure 6.16 所示<span class="mojikumi-line-end">，</span>其中 CPU cycle time 是单核的<span class="mojikumi-line-end">，</span>effective CPU cycle time 是多核的<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.16.737e4bc7.webp"><img srcset="/assets/csapp-fig6.16.14164224.png" loading="lazy" src="/assets/csapp-fig6.16.14164224.png" width="1017" height="464" alt="disk、RAM、CPU 速度差异的历史变化"></picture></p>
<h2 id="locality" class="heading"><a href="#locality" class="heading-anchor" aria-label="章节： Locality" tabindex="-1"></a><span>Locality</span></h2>
<p>好的程序具有良好的 <i>locality</i><span class="mojikumi-line-end">。</span>locality 有两种表现形式<span class="mojikumi-line-end">，</span><i>temporal locality</i> 指的是最近访问过的数据更有可能在不久的将来再次被访问<span class="mojikumi-line-end">，</span><i>spatial locality</i> 指的是访问过一处的数据后更有可能在不久的将来访问邻近的其他数据<span class="mojikumi-line-end">。</span></p>
<p>具有良好 locality 的程序跑得更快<span class="mojikumi-line-end">，</span>因为计算机系统设计的各个层面都利用 locality 做了优化<span class="mojikumi-line-end">。</span></p>
<p>一些 locality 的例子<span class="mojikumi-line-end">：</span></p>
<ul>
<li>重复引用同一个变量的程序有良好的 locality<span class="mojikumi-line-end">。</span></li>
<li>在一段连续内存<span class="mojikumi-line-start">（</span>数组<span class="mojikumi-line-end">）</span>中依次访问每个元素称作 <i>stride-1 reference pattern</i><span class="mojikumi-line-end">，</span>每次间隔 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 个元素进行访问称作 <i>stride-k reference pattern</i><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span> 越小 locality 越好<span class="mojikumi-line-end">。</span>遍历高维数组时尤其要注意访问的顺序<span class="mojikumi-line-end">。</span></li>
<li>由于循环会重复访问同一段指令<span class="mojikumi-line-end">，</span>循环的指令读取局部性良好</li>
</ul>
<h2 id="the-memory-hierarchy" class="heading"><a href="#the-memory-hierarchy" class="heading-anchor" aria-label="章节： The Memory Hierarchy" tabindex="-1"></a><span>The Memory Hierarchy</span></h2>
<p>在硬件上<span class="mojikumi-line-end">，</span>不同存储技术之间存在性能<span class="mojikumi-line-end">、</span>价格<span class="mojikumi-line-end">、</span>容量的 trade-off<span class="mojikumi-line-end">；</span>在软件上<span class="mojikumi-line-end">，</span>程序具有 locality<span class="mojikumi-line-end">。</span>硬件和软件的这两条性质正好可以搭配在一起<span class="mojikumi-line-end">，</span>促使 memory system 采用了如 CS:APP Figure 6.21 所示的称作 <i>memory hierarchy</i> 的组织方式<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.21.26bcdff1.webp"><img srcset="/assets/csapp-fig6.21.0c63259f.png" loading="lazy" src="/assets/csapp-fig6.21.0c63259f.png" width="1047" height="624" alt="The memory hierarchy"></picture></p>
<p>memory hierarchy 的构成并不一定和上图完全一致<span class="mojikumi-line-end">，</span>例如 SRAM 的级数可能不是三级<span class="mojikumi-line-end">、</span>DRAM 和 HDD 间可能还有 SSD<span class="mojikumi-line-end">、</span>磁带也可以作为 memory hierarchy 中比 HDD 更低的一级<span class="mojikumi-line-end">。</span></p>
<h3 id="cache" class="heading"><a href="#cache" class="heading-anchor" aria-label="章节： Cache" tabindex="-1"></a><span>Cache</span></h3>
<p>caching 指的是用一个相对小而快的存储设备来存储一个相对大而慢的存储设备中最为活跃的部分<span class="mojikumi-line-end">，</span>这个小的存储设备称作大的存储设备的 cache<span class="mojikumi-line-end">。</span></p>
<p>在 memory hierarchy 中<span class="mojikumi-line-end">，</span>每一级都是下一级的 cache<span class="mojikumi-line-end">。</span>数据会在各个相邻层级间不断地传输<span class="mojikumi-line-end">，</span>不同层级之间会以不同的 block size 作为数据传输的基本单位<span class="mojikumi-line-end">。</span></p>
<h3 id="从-cache-获取数据" class="heading"><a href="#从-cache-获取数据" class="heading-anchor" aria-label="章节： 从 cache 获取数据" tabindex="-1"></a><span>从 cache 获取数据</span></h3>
<p>想要从 memory hierarchy 的某一级获取数据时<span class="mojikumi-line-end">，</span>首先会尝试从它的 cache 获取数据<span class="mojikumi-line-end">，</span>如果成功获取则称作 <i>cache hit</i><span class="mojikumi-line-end">，</span>否则称作 <i>cache miss</i><span class="mojikumi-line-end">。</span></p>
<p>发生 cache miss 时<span class="mojikumi-line-end">，</span>一般会先将数据从下一级复制到上一级<span class="mojikumi-line-end">，</span>从而最终还是表现为从 cache 中获取数据<span class="mojikumi-line-end">。</span>如果 cache 满了<span class="mojikumi-line-end">，</span>在从下一级获取数据时<span class="mojikumi-line-end">，</span>就需要删除 cache 中的一些数据来腾出空间<span class="mojikumi-line-end">，</span>这时需要在 cache 中选择被删除的数据<span class="mojikumi-line-end">，</span>被删除的 block 称作 <i>victim block</i><span class="mojikumi-line-end">，</span>这个行为称作将 victim block <i>evict</i><span class="mojikumi-line-end">，</span>而选择 victim block 是根据 <i>replacement policy</i> 进行的<span class="mojikumi-line-end">，</span>例如 random replacement policy<span class="mojikumi-line-end">、</span>least recently used (LRU) replacement policy 等<span class="mojikumi-line-end">。</span></p>
<h3 id="cache-的管理" class="heading"><a href="#cache-的管理" class="heading-anchor" aria-label="章节： Cache 的管理" tabindex="-1"></a><span>Cache 的管理</span></h3>
<p>cache 可能由硬件<span class="mojikumi-line-end">、</span>OS<span class="mojikumi-line-end">、</span>软件以及它们之间的相互配合来进行管理<span class="mojikumi-line-end">，</span>而这在大部分时候都是自动完成的<span class="mojikumi-line-end">，</span>无需应用程序的程序员操心<span class="mojikumi-line-end">。</span></p>
<p>各级 cache 如 CS:APP Figure 6.23 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.23.2f4f3b1d.webp"><img srcset="/assets/csapp-fig6.23.5c7d2566.png" loading="lazy" src="/assets/csapp-fig6.23.5c7d2566.png" width="1593" height="609" alt="无处不在的各式各样的 cache"></picture></p>
<h3 id="cache-对-locality-的利用" class="heading"><a href="#cache-对-locality-的利用" class="heading-anchor" aria-label="章节： Cache 对 locality 的利用" tabindex="-1"></a><span>Cache 对 locality 的利用</span></h3>
<p>temporal locality 使得重复使用的数据留存在 cache 中从而更容易 cache hit<span class="mojikumi-line-end">；</span>cache 中的数据按 block 存储则利用了 spatial locality<span class="mojikumi-line-end">，</span>使得一个数据被 cache 时与其邻近的处于同一个 block 的数据也被 cache<span class="mojikumi-line-end">。</span></p>
<h2 id="cache-memories" class="heading"><a href="#cache-memories" class="heading-anchor" aria-label="章节： Cache Memories" tabindex="-1"></a><span>Cache Memories</span></h2>
<p>随着 CPU 和 DRAM 的速度差异越来越大<span class="mojikumi-line-end">，</span>SRAM 被用来填充它们之间的 gap<span class="mojikumi-line-end">。</span></p>
<p>在下面的讨论中<span class="mojikumi-line-end">，</span>为了简便<span class="mojikumi-line-end">，</span>假设只有 L1 cache<span class="mojikumi-line-end">，</span>没有 L2<span class="mojikumi-line-end">、</span>L3 cache<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>或者也可以看成是在介绍 L3 cache 是如何工作的<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="cache-的结构与读取" class="heading"><a href="#cache-的结构与读取" class="heading-anchor" aria-label="章节： Cache 的结构与读取" tabindex="-1"></a><span>Cache 的结构与读取</span></h3>
<p>设 main memory 有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">2^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span></span> 个地址<span class="mojikumi-line-end">，</span>每个地址存放一个 byte<span class="mojikumi-line-end">。</span>它的 cache 会分成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>s</mi></msup></mrow><annotation encoding="application/x-tex">2^s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span></span> 个 <i>cache set</i><span class="mojikumi-line-end">，</span>每个 cache set 包含 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></span> 个 <i>cache line</i><span class="mojikumi-line-end">，</span>每个 cache line 存放一个大小为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span></span> byte 的 data block<span class="mojikumi-line-end">、</span>一个 <i>valid bit</i><span class="mojikumi-line-end">、</span>以及长度为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>m</mi><mo>−</mo><mi>b</mi><mo>−</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">t = m-b-s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></span> 的 <i>tag bits</i><span class="mojikumi-line-end">。</span></p>
<p>每个地址会被分成三部分<span class="mojikumi-line-end">，</span>高位的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span></span> 位是 tag<span class="mojikumi-line-end">，</span>中间 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></span> 位是 set index<span class="mojikumi-line-end">，</span>低位 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span> 位是 block offset<span class="mojikumi-line-end">。</span>获取存放在某个地址的数据时<span class="mojikumi-line-end">，</span>先根据其 set index 找到对应的 cache set<span class="mojikumi-line-end">，</span>再在 cache set 中找到 valid bit 为 1 且 tag 相符的 cache line<span class="mojikumi-line-end">，</span>最后通过 block offset 来从 block 中提取出单个 byte<span class="mojikumi-line-end">。</span></p>
<p>在 cache miss 时<span class="mojikumi-line-end">，</span>需要从下一级获取数据<span class="mojikumi-line-end">，</span>存放到 cache 中<span class="mojikumi-line-end">。</span>如果对应的 cache set 所有 cache line 都满了<span class="mojikumi-line-end">，</span>就需要 evict 某个已有的 cache line<span class="mojikumi-line-end">。</span></p>
<h3 id="conflict-miss" class="heading"><a href="#conflict-miss" class="heading-anchor" aria-label="章节： Conflict Miss" tabindex="-1"></a><span>Conflict Miss</span></h3>
<p>cache set 的设计基于一个假设<span class="mojikumi-line-end">，</span>即在局部内访问的数据地址的低位往往是不同的<span class="mojikumi-line-end">，</span>但实际上可能并非如此<span class="mojikumi-line-end">。</span>如果以 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>s</mi><mo>+</mo><mi>b</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{s+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span></span></span> 的倍数为地址间隔访问数据<span class="mojikumi-line-end">，</span>就可能连续访问同一个 cache set 内的数据<span class="mojikumi-line-end">，</span>导致 cache miss<span class="mojikumi-line-start">（</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></span> 较小<span class="mojikumi-line-end">，</span>尤其是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">E=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 时<span class="mojikumi-line-end">，</span>这种情况更可能触发<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>数组的大小是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></span> 的次幂而交替访问相邻数组的同一个下标时就可能这样<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>这大概在 APIO2019 讲过<span class="mojikumi-line-end">，</span>当时我自然是啥都没听懂<span class="mojikumi-line-end">，</span>就只记得数组不要开 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></span> 的次幂<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="cache-的分类" class="heading"><a href="#cache-的分类" class="heading-anchor" aria-label="章节： Cache 的分类" tabindex="-1"></a><span>Cache 的分类</span></h3>
<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">E=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的 cache 称作 <i>direct-mapped cache</i><span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span><s>书上在这仔细解释了半天<span class="mojikumi-line-end">，</span>感觉废话好多啊<span class="mojikumi-line-end">。</span></s><span class="mojikumi-line-end">）</span></p>
<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>></mo><mn>1</mn></mrow><annotation encoding="application/x-tex">E > 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 的 cache 称作 <i>set associative cache</i><span class="mojikumi-line-end">。</span>其中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>></mo><mn>0</mn></mrow><annotation encoding="application/x-tex">s > 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span> 的称作 E-way set associative cache<span class="mojikumi-line-end">，</span>而 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">s = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span> 的称作 fully associative cache<span class="mojikumi-line-end">。</span></p>
<h3 id="cache-的写入" class="heading"><a href="#cache-的写入" class="heading-anchor" aria-label="章节： Cache 的写入" tabindex="-1"></a><span>Cache 的写入</span></h3>
<p>在 cache hit 时<span class="mojikumi-line-end">，</span>有两种处理方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li><i>write-through</i>: 既修改 cache<span class="mojikumi-line-end">，</span>又修改下一级</li>
<li><i>write-back</i>: 只修改 cache<span class="mojikumi-line-end">，</span>并且在每个 cache line 中添加一个 <i>dirty bit</i><span class="mojikumi-line-end">，</span>用来记录是否被修改过<span class="mojikumi-line-end">，</span>在被 evict 时若 dirty 则写入下一级</li>
</ul>
<p>在 cache miss 时<span class="mojikumi-line-end">，</span>也有两种处理方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li><i>write-allocate</i>: 先从下一级获取数据<span class="mojikumi-line-end">，</span>然后用与 cache hit 相同的处理方式</li>
<li><i>no-write-allocate</i>: 直接写入下一级<span class="mojikumi-line-end">，</span>不获取到 cache 中</li>
</ul>
<p>一般 write-through 和 no-write-allocate 搭配<span class="mojikumi-line-end">，</span>write-back 和 write-allocate 搭配<span class="mojikumi-line-end">。</span></p>
<p>实际上<span class="mojikumi-line-end">，</span>cache 写入的优化是非常复杂的问题<span class="mojikumi-line-end">，</span>这里只是简单介绍了一下<span class="mojikumi-line-end">。</span>作为程序员<span class="mojikumi-line-end">，</span>可以把 cache 写入当成是 write-back<span class="mojikumi-line-end">、</span>write-allocate 的<span class="mojikumi-line-end">。</span></p>
<h3 id="i-cache-和-d-cache" class="heading"><a href="#i-cache-和-d-cache" class="heading-anchor" aria-label="章节： i-cache 和 d-cache" tabindex="-1"></a><span>i-cache 和 d-cache</span></h3>
<p>只存放指令的 cache 称作 <i>i-cache</i><span class="mojikumi-line-end">，</span>只存放数据的 cache 称作 <i>d-cache</i><span class="mojikumi-line-end">，</span>都存放的 cache 称作 <i>unified cache</i><span class="mojikumi-line-end">。</span></p>
<p>将 i-cache 和 d-cache 分开<span class="mojikumi-line-end">，</span>就可以对它们分别进行优化<span class="mojikumi-line-end">，</span>例如 i-cache 是只读的<span class="mojikumi-line-end">，</span>二者可以有不一样的大小<span class="mojikumi-line-end">、</span>不一样的 cache set 设置<span class="mojikumi-line-end">。</span>将两者分开还可以一定程度上避免 conflict miss<span class="mojikumi-line-end">。</span></p>
<p>在 Core i7 处理器中<span class="mojikumi-line-end">，</span>每个核有自己的 L1 i-cache<span class="mojikumi-line-end">、</span>L1 d-cache<span class="mojikumi-line-end">、</span>L2 unified cache<span class="mojikumi-line-end">，</span>所有核共享一个 L3 unified cache<span class="mojikumi-line-end">。</span></p>
<h3 id="cache-的性能" class="heading"><a href="#cache-的性能" class="heading-anchor" aria-label="章节： Cache 的性能" tabindex="-1"></a><span>Cache 的性能</span></h3>
<p>cache 性能的衡量指标有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>miss rate</li>
<li>hit rate</li>
<li>hit time: cache hit 时的访问用时</li>
<li>miss penalty: cache miss 时的访问用时<span class="mojikumi-line-end">，</span>与最终从哪一级获取到数据有关</li>
</ul>
<p>一般来说<span class="mojikumi-line-end">，</span>cache 的参数对性能的影响是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>cache size 越大<span class="mojikumi-line-end">，</span>hit rate 就越高<span class="mojikumi-line-end">，</span>但速度会慢<span class="mojikumi-line-end">。</span></li>
<li>增大 block size 可以更好地利用 spatial locality<span class="mojikumi-line-end">，</span>但也有可能因 cache line 数量减少而降低 hit rate<span class="mojikumi-line-end">，</span>并且会因为每次需要传递的数据变多而增大 miss penalty<span class="mojikumi-line-end">。</span></li>
<li>更大的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></span> 可以降低 conflict miss 的可能性<span class="mojikumi-line-end">，</span>但也会使得 tag 匹配以及 victim line 的选择更加复杂<span class="mojikumi-line-end">，</span>从而增大 hit time 和 miss penalty<span class="mojikumi-line-end">。</span>在 Core i7 处理器中<span class="mojikumi-line-end">，</span>L1<span class="mojikumi-line-end">、</span>L2 cache 是 8-way 的<span class="mojikumi-line-end">，</span>L3 cache 是 16-way 的<span class="mojikumi-line-end">。</span></li>
<li>write-through 实现起来更加容易<span class="mojikumi-line-end">，</span>并且在 read miss 时不会触发写入<span class="mojikumi-line-end">。</span>而 write-back 可以减少数据传递的总量<span class="mojikumi-line-end">，</span>降低 I/O bus 带宽的占用<span class="mojikumi-line-end">，</span>也可能降低数据传递的用时<span class="mojikumi-line-end">。</span>一般来说<span class="mojikumi-line-end">，</span>memory hierarchy 中较低的层级更倾向于使用 write-back<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="the-impact-of-caches-on-program-performance" class="heading"><a href="#the-impact-of-caches-on-program-performance" class="heading-anchor" aria-label="章节： The Impact of Caches on Program Performance" tabindex="-1"></a><span>The Impact of Caches on Program Performance</span></h2>
<h3 id="the-memory-mountain" class="heading"><a href="#the-memory-mountain" class="heading-anchor" aria-label="章节： The Memory Mountain" tabindex="-1"></a><span>The Memory Mountain</span></h3>
<p>对一定 size 的数据按照一定的 stride 进行访问<span class="mojikumi-line-end">，</span>将 size<span class="mojikumi-line-end">、</span>stride 与数据吞吐量的关系画成三维图像<span class="mojikumi-line-end">，</span>就得到了 <i>memory mountain</i><span class="mojikumi-line-end">。</span></p>
<p>CS:APP Figure 6.41 展示了一座 Core i7 的 memory mountain:<span class="mojikumi-line-start">（</span>这也是 CS:APP 的封面<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.41.869a6222.webp"><img srcset="/assets/csapp-fig6.41.8d7d506e.png" loading="lazy" src="/assets/csapp-fig6.41.8d7d506e.png" width="1285" height="847" alt="Core i7 的 memory mountain"></picture></p>
<p>Memory mountain 较为完整地呈现了一个 memory system 的性能<span class="mojikumi-line-end">，</span>以及 temporal locality 和 spatial locality 对性能的影响<span class="mojikumi-line-end">。</span></p>
<p>在每级 cache 的容量处<span class="mojikumi-line-end">，</span>吞吐量会发生明显的突变<span class="mojikumi-line-end">。</span></p>
<p>在 size 相同时<span class="mojikumi-line-end">，</span>stride 越小吞吐量越高<span class="mojikumi-line-end">。</span>在 stride 接近 1 时变化尤其明显<span class="mojikumi-line-end">，</span>这和 Core i7 系统的 prefetching 技术息息相关<span class="mojikumi-line-end">，</span>处理器能够识别出 stride-1 reference pattern 并在实际访问到数据之前就进行 prefetch<span class="mojikumi-line-end">。</span></p>
<h3 id="矩阵乘法的循环顺序" class="heading"><a href="#矩阵乘法的循环顺序" class="heading-anchor" aria-label="章节： 矩阵乘法的循环顺序" tabindex="-1"></a><span>矩阵乘法的循环顺序</span></h3>
<p><span class="mojikumi-line-start">（</span>书上在这讲了半天<span class="mojikumi-line-end">，</span><s>感觉废话好多</s><span class="mojikumi-line-end">，</span>我就放个测试结果上来吧<span class="mojikumi">。</span><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>CS:APP Figure 6.46<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig6.46.827ccc19.webp"><img srcset="/assets/csapp-fig6.46.c7b7637e.png" loading="lazy" src="/assets/csapp-fig6.46.c7b7637e.png" width="1233" height="767" alt="Core i7 矩阵乘法性能"></picture></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/csapp">csapp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CS:APP 第七章学习笔记]]></title>
            <link>https://ouuan.moe/post/2022/10/csapp-7</link>
            <guid>https://ouuan.moe/post/2022/10/csapp-7</guid>
            <pubDate>Mon, 31 Oct 2022 10:39:06 GMT</pubDate>
            <description><![CDATA[

<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第七章 <span class="mojikumi">“</span>Linking<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为程序的链接<span class="mojikumi-line-end">。</span>学习链接有助于<span class="mojikumi-line-end">：</span>理解链接报错<span class="mojikumi-line-end">，</span>避免链接相关的 bug<span class="mojikumi-line-end">，</span>理解变量<span class="mojikumi-line-start">（</span>函数<span class="mojikumi-line-end">）</span>的作用域<span class="mojikumi-line-end">，</span>理解程序运行过程中与链接相关的步骤<span class="mojikumi-line-end">，</span>了解如何使用共享库<span class="mojikumi-line-start">（</span>动态链接库<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[

<p><a href="https://csapp.cs.cmu.edu/">CS:APP</a> 第七章 <span class="mojikumi">“</span>Linking<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>这章的主要内容为程序的链接<span class="mojikumi-line-end">。</span>学习链接有助于<span class="mojikumi-line-end">：</span>理解链接报错<span class="mojikumi-line-end">，</span>避免链接相关的 bug<span class="mojikumi-line-end">，</span>理解变量<span class="mojikumi-line-start">（</span>函数<span class="mojikumi-line-end">）</span>的作用域<span class="mojikumi-line-end">，</span>理解程序运行过程中与链接相关的步骤<span class="mojikumi-line-end">，</span>了解如何使用共享库<span class="mojikumi-line-start">（</span>动态链接库<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>

<h2 id="compiler-drivers" class="heading"><a href="#compiler-drivers" class="heading-anchor" aria-label="章节： Compiler Drivers" tabindex="-1"></a><span>Compiler Drivers</span></h2>
<p>编译源文件其实分成若干步骤<span class="mojikumi-line-end">，</span>compiler driver<span class="mojikumi-line-start">（</span>如 gcc<span class="mojikumi-line-end">）</span>会依次调用这些步骤<span class="mojikumi-line-end">，</span>可以用 <code>gcc -v</code> 来查看这些步骤的详细信息<span class="mojikumi-line-end">。</span></p>
<ol>
<li><code>cpp</code>: 预处理<span class="mojikumi-line-end">，</span>源代码 <code>.c</code> ->  intermediate file <code>.i</code></li>
<li><code>cc1</code>: <code>.i</code> -> 汇编代码 <code>.s</code></li>
<li><code>as</code>: <code>.s</code> -> relocatable object file <code>.o</code></li>
<li><code>ld</code>: 链接<span class="mojikumi-line-end">，</span>多个 <code>.o</code> (或 library) -> executable object file</li>
</ol>
<p>P.S. 中间步骤的文件也可以作为参数传递给 <code>gcc</code><span class="mojikumi-line-end">，</span>例如 <code>gcc a.s -o a</code><span class="mojikumi-line-end">。</span></p>
<h2 id="static-linking" class="heading"><a href="#static-linking" class="heading-anchor" aria-label="章节： Static Linking" tabindex="-1"></a><span>Static Linking</span></h2>
<p>静态链接主要有两个任务<span class="mojikumi-line-end">：</span></p>
<ol>
<li><i>Symbol resolution</i>: relocatable object file 中有很多 symbol<span class="mojikumi-line-end">，</span>包括函数<span class="mojikumi-line-end">、</span>全局变量<span class="mojikumi-line-end">、</span>静态变量等<span class="mojikumi-line-end">，</span>linker 需要将每个 symbol reference 对应到一个 symbol definition<span class="mojikumi-line-end">。</span></li>
<li><i>Relocation</i>: relocatable object file 中地址从 0 开始<span class="mojikumi-line-end">，</span>linker 需要将每个 symbol definition 重新分配到正确的地址<span class="mojikumi-line-end">，</span>并相应地修改每个 symbol reference<span class="mojikumi-line-end">。</span></li>
</ol>
<h2 id="object-files" class="heading"><a href="#object-files" class="heading-anchor" aria-label="章节： Object Files" tabindex="-1"></a><span>Object Files</span></h2>
<p>object file 分为三种<span class="mojikumi-line-end">：</span></p>
<ol>
<li>Relocatable object file</li>
<li>Executable object file</li>
<li>Shared object file: 一种特殊的 relocatable object file<span class="mojikumi-line-end">，</span>可以在 load time 或 run time 进行动态链接</li>
</ol>
<p>object file 有不同的格式<span class="mojikumi-line-end">，</span>Windows 使用 Portable Executable (PE) 格式<span class="mojikumi-line-end">，</span>macOS 使用 Mach-O 格式<span class="mojikumi-line-end">，</span>现代的 x86-64 Linux/Unix 系统使用 Executable and Linkable Format (ELF) 格式<span class="mojikumi-line-end">。</span>本章会基于 ELF-64<span class="mojikumi-line-end">。</span></p>
<h2 id="relocatable-object-files" class="heading"><a href="#relocatable-object-files" class="heading-anchor" aria-label="章节： Relocatable Object Files" tabindex="-1"></a><span>Relocatable Object Files</span></h2>
<p>ELF relocatable object file 通常包含以下 section<span class="mojikumi-line-end">：</span></p>
<ol>
<li><code>.text</code>: 程序的机器码</li>
<li><code>.rodata</code>: 只读的数据</li>
<li><code>.data</code>: 需要初始化的全局变量和静态变量</li>
<li><code>.bss</code>: 未初始化或初始化为零的全局变量和静态变量<span class="mojikumi-line-end">，</span>它们在运行时会以零为初值<span class="mojikumi-line-end">，</span>从而在 object file 中不占据文件大小</li>
<li><code>.symtab</code>: symbol table<span class="mojikumi-line-end">，</span>存储 symbol<span class="mojikumi-line-start">（</span>函数<span class="mojikumi-line-end">、</span>全局变量<span class="mojikumi-line-end">）</span>的信息<span class="mojikumi-line-end">，</span>不需要 <code>-g</code> 编译选项<span class="mojikumi-line-end">，</span>但不含局部变量的信息</li>
<li><code>.rel.text</code>: 列出了 <code>.text</code> 中在链接时需要修改的地方<span class="mojikumi-line-end">，</span>一般是调用外部函数或引用全局变量时需要修改<span class="mojikumi-line-end">，</span>而 <a href="/post/2022/09/csapp-3#jump-%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81">调用本地函数不需要修改</a></li>
<li><code>.rel.data</code>: 列出了 <code>.data</code> 中在链接时需要修改的地方<span class="mojikumi-line-end">，</span>一般是全局变量的值为其他全局变量或外部函数的地址时需要修改</li>
<li><code>.debug</code>: 调试信息<span class="mojikumi-line-end">，</span>包含局部变量的信息<span class="mojikumi-line-end">、</span>typedef 信息<span class="mojikumi-line-end">、</span>源代码等<span class="mojikumi-line-end">，</span>需要 <code>-g</code> 编译选项才有</li>
<li><code>.line</code>: 源代码与机器码行号间的对应关系<span class="mojikumi-line-end">，</span>需要 <code>-g</code> 编译选项才有</li>
<li><code>.strtab</code>: 一堆字符<span class="mojikumi-line-end">，</span>用于其它 section<span class="mojikumi-line-end">，</span>可以指向其中一个位置来表示一个字符串<span class="mojikumi-line-start">（</span>从这个位置起到 <code>\0</code> 为止<span class="mojikumi-line-end">）</span></li>
</ol>
<h2 id="symbols-and-symbol-tables" class="heading"><a href="#symbols-and-symbol-tables" class="heading-anchor" aria-label="章节： Symbols and Symbol Tables" tabindex="-1"></a><span>Symbols and Symbol Tables</span></h2>
<p>对 linker 来说<span class="mojikumi-line-end">，</span>symbol 有三种<span class="mojikumi-line-end">：</span></p>
<ol>
<li>本地定义<span class="mojikumi-line-end">，</span>可以被外部访问的: C 中非 <code>static</code> 的函数和全局变量</li>
<li>外部定义的<span class="mojikumi-line-end">，</span>例如 C 中 <code>extern</code> 的全局变量</li>
<li>本地定义<span class="mojikumi-line-end">，</span>外部不可访问的: C 中 <code>static</code> 的函数和变量</li>
</ol>
<p>一个 ELF64 symbol 包含如下信息<span class="mojikumi-line-start">（</span>CS:APP Figure 7.4<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="c 代码块" data-v-ad49d235>c</h3><ile-root id="ile-4"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-4--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">typedef</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">struct</span></span>
<span><span style="color: #D6DEEB">{</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">int</span><span style="color: #D6DEEB">   name;</span><span style="color: #637777">      /* String table offset */</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">char</span><span style="color: #D6DEEB">  type:</span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">,</span><span style="color: #637777">    /* Function or data (4 bits) */</span></span>
<span><span style="color: #D6DEEB">          binding:</span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">;</span><span style="color: #637777"> /* Local or global (4 bits) */</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">char</span><span style="color: #D6DEEB">  reserved;</span><span style="color: #637777">  /* Unused */</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">short</span><span style="color: #D6DEEB"> section;</span><span style="color: #637777">   /* Section header index */</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">long</span><span style="color: #D6DEEB">  value;</span><span style="color: #637777">     /* Section offset or absolute address */</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">long</span><span style="color: #D6DEEB">  size;</span><span style="color: #637777">      /* Object size in bytes */</span></span>
<span><span style="color: #D6DEEB">} Elf64_Symbol;</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">typedef</span><span style="color: #403F53"> </span><span style="color: #994CC3">struct</span></span>
<span><span style="color: #403F53">{</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">int</span><span style="color: #403F53">   name;</span><span style="color: #989FB1">      /* String table offset */</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">char</span><span style="color: #403F53">  type:</span><span style="color: #AA0982">4</span><span style="color: #403F53">,</span><span style="color: #989FB1">    /* Function or data (4 bits) */</span></span>
<span><span style="color: #403F53">          binding:</span><span style="color: #AA0982">4</span><span style="color: #403F53">;</span><span style="color: #989FB1"> /* Local or global (4 bits) */</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">char</span><span style="color: #403F53">  reserved;</span><span style="color: #989FB1">  /* Unused */</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">short</span><span style="color: #403F53"> section;</span><span style="color: #989FB1">   /* Section header index */</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">long</span><span style="color: #403F53">  value;</span><span style="color: #989FB1">     /* Section offset or absolute address */</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">long</span><span style="color: #403F53">  size;</span><span style="color: #989FB1">      /* Object size in bytes */</span></span>
<span><span style="color: #403F53">} Elf64_Symbol;</span></span></code></pre></div></section>
<p><code>value</code> 在 relocatable object file 中是 symbol 的地址相对于 section 开头的 offset<span class="mojikumi-line-end">，</span>在 executable object file 中是 symbol 的绝对地址<span class="mojikumi-line-end">。</span></p>
<p><code>section</code> 是 object file 的 section 之一<span class="mojikumi-line-start">（</span>的 index<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>在 relocatable object file 中还可以是一个 pseudosection:</p>
<ul>
<li>ABS: 不应被 relocate 的 symbol</li>
<li>UNDEF: 未定义<span class="mojikumi-line-start">（</span>在其他 module 中定义<span class="mojikumi-line-end">）</span>的 symbol</li>
<li>COMMON: 多个 module 共用的 symbol<span class="mojikumi-line-start">（</span>见 <a href="#symbol-resolution">Symbol Resolution</a><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>此时 <code>value</code> 的值给出 data alignment 的要求<span class="mojikumi-line-end">，</span><code>size</code> 给出的是 minimum size</li>
</ul>
<p>未初始化的静态变量以及初始化为零的全局或静态变量会放在 <code>.bss</code><span class="mojikumi-line-end">。</span></p>
<p>未初始化的全局变量<span class="mojikumi-line-end">，</span>如果启用了 <code>-fcommon</code> 编译选项则会放在 COMMON<span class="mojikumi-line-end">，</span>否则放在 <code>.bss</code><span class="mojikumi-line-end">。</span>在 gcc 9 及之前默认选项是 <code>-fcommon</code><span class="mojikumi-line-end">，</span>而自 gcc 10 起默认选项是 <code>-<wbr>fno<wbr>-<wbr>common</code><span class="mojikumi-line-end">。</span>在 C++ 中 <code>-fcommon</code> 是无效的<span class="mojikumi-line-end">，</span>未初始化的全局变量总是放在 <code>.bss</code><span class="mojikumi-line-end">。</span></p>
<p>可以使用 <code>readelf -s a.o</code> 来查看 <code>a.o</code> 的 <code>.symtab</code><span class="mojikumi-line-end">。</span></p>
<h2 id="symbol-resolution" class="heading"><a href="#symbol-resolution" class="heading-anchor" aria-label="章节： Symbol Resolution" tabindex="-1"></a><span>Symbol Resolution</span></h2>
<p>Symbol resolution 即把每个 symbol reference 对应到一个 symbol definition<span class="mojikumi-line-end">。</span></p>
<p>local symbol 的 resolution 是容易的<span class="mojikumi-line-end">，</span>因为编译单个 module 时就保证了 local symbol 是唯一的<span class="mojikumi-line-end">。</span></p>
<p>global symbol 可能遇到几种情况<span class="mojikumi-line-end">：</span></p>
<ul>
<li>只有一个 module 里定义了这个 global symbol<span class="mojikumi-line-end">，</span>则使用这个 symbol</li>
<li>没有任何 module 里定义了这个 global symbol<span class="mojikumi-line-end">，</span>则报错 undefined reference</li>
<li>在多个 module 里定义了这个 global symbol<span class="mojikumi-line-end">，</span>则<span class="mojikumi-line-end">：</span>
<ul>
<li>如果其中有多个 symbol 不在 COMMON 段<span class="mojikumi-line-end">，</span>则报错 multiple definition</li>
<li>如果其中只有一个不在 COMMON 段<span class="mojikumi-line-end">，</span>则使用这个 symbol</li>
<li>如果这些 symbol 都在 COMMON 段<span class="mojikumi-line-end">，</span>则使用其中 <code>size</code> 最大的一个<span class="mojikumi-line-start">（</span>如果 <code>size</code> 相同则使用哪个是没有区别的<span class="mojikumi">）</span><span class="mojikumi-line-end">；</span>如果这些 symbol 有不一样的 <code>size</code><span class="mojikumi-line-end">，</span>linker 还会给出警告</li>
</ul>
</li>
</ul>
<p>也就是说<span class="mojikumi-line-end">，</span>若编译选项为 <code>-fcommon</code><span class="mojikumi-line-end">，</span>如果在多个 module 中定义了同一个全局变量且其中最多有一个初始化了<span class="mojikumi-line-end">，</span>则可能导致意外的结果<span class="mojikumi-line-end">。</span>可以理解为<span class="mojikumi-line-end">，</span>multiple definition 在本质上是 multiple initialization<span class="mojikumi-line-end">。</span></p>
<p>在 C++ 中<span class="mojikumi-line-end">，</span>函数重载<span class="mojikumi-line-end">、</span>类方法会通过 <i>mangling</i> 来使得函数的每种重载有独特的 symbol name<span class="mojikumi-line-end">。</span></p>
<h2 id="static-libraries" class="heading"><a href="#static-libraries" class="heading-anchor" aria-label="章节： Static Libraries" tabindex="-1"></a><span>Static Libraries</span></h2>
<p>Static library 其实就是一堆 object file 包装在一起<span class="mojikumi-line-end">，</span>它的好处是<span class="mojikumi-line-end">：</span></p>
<ol>
<li>不用每次重新编译<span class="mojikumi-line-start">（</span>比起提供源码<span class="mojikumi-line-end">）</span></li>
<li>使得库和编译器解耦<span class="mojikumi-line-start">（</span>比起将库函数内置到编译器中<span class="mojikumi-line-end">）</span></li>
<li>只需将用到的 object file 复制到最终的可执行文件中<span class="mojikumi-line-end">，</span>避免空间浪费<span class="mojikumi-line-start">（</span>比起提供单个 object file<span class="mojikumi-line-end">）</span></li>
<li>可以自动选择用到的 object file<span class="mojikumi-line-end">，</span>在编译命令中只需指定少量库的名称<span class="mojikumi-line-start">（</span>比起提供一堆 object file<span class="mojikumi-line-end">）</span></li>
</ol>
<p>可以使用类似 <code>ar rcs libabc.a a.o b.o c.o</code> 的命令来创建一个 static library<span class="mojikumi-line-end">。</span></p>
<p>在编译时<span class="mojikumi-line-end">，</span>有两种使用 static library 的方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>直接将 static library 的路径作为参数: <code>libabc.a</code></li>
<li>使用 <code>-lname</code> 来使用 <code>libname.a</code><span class="mojikumi-line-end">，</span>但需要使用 <code>-Ldir</code> 来将 <code>dir</code> 加入到 <code>-l</code> 的搜索路径之中: <code>-L. -labc</code></li>
</ul>
<p>特别地<span class="mojikumi-line-end">，</span>编译器会自动将 <code>libc.a</code> 提供给 linker<span class="mojikumi-line-end">，</span>不需要手动指定<span class="mojikumi-line-end">。</span></p>
<p>在链接时<span class="mojikumi-line-end">，</span>linker 会依次处理每个参数<span class="mojikumi-line-end">：</span></p>
<ul>
<li>如果一个参数是 object file 就一定会使用</li>
<li>如果是 static library<span class="mojikumi-line-end">，</span>则会依次查看其中包含的每一个 object file<span class="mojikumi-line-end">，</span>如果一个 object file 中定义了某个当前引用了但仍未定义的 symbol<span class="mojikumi-line-end">，</span>则会使用这个 object file<span class="mojikumi-line-end">，</span>而这样的过程会反复迭代进行直到没有新的 object file 被使用为止<span class="mojikumi-line-start">（</span>例如 <code>main.c</code> 引用了 <code>b.o</code> 而没有引用 <code>a.o</code><span class="mojikumi-line-end">，</span>而 <code>b.o</code> 中引用了 <code>a.o</code><span class="mojikumi-line-end">，</span>且在 <code>libabc.a</code> 中 <code>a.o</code> 位于 <code>b.o</code> 之前<span class="mojikumi-line-end">，</span>那么第一次迭代中只会使用 <code>b.o</code><span class="mojikumi-line-end">，</span>第二次迭代才会使用 <code>a.o</code><span class="mojikumi-line-end">，</span>而 <code>c.o</code> 不会被使用<span class="mojikumi-line-end">）</span></li>
</ul>
<p>这样的过程使得编译命令中参数的顺序以及 static library 中 object file 的顺序可能影响编译结果<span class="mojikumi-line-end">：</span></p>
<ul>
<li>一般来说需要将 library 放在编译命令的末尾<span class="mojikumi-line-end">，</span>否则处理一个 library 时还没有引用其中的 symbol<span class="mojikumi-line-end">，</span>就不会使用相应的 object file<span class="mojikumi-line-end">，</span>最后就会报错 undefined reference</li>
<li>如果多个 library 之间有依赖关系<span class="mojikumi-line-end">，</span>需要将被其他 library 依赖的 library 放在靠后的位置</li>
<li>如果多个 library 之间有循环依赖<span class="mojikumi-line-end">，</span>可能需要在编译命令中多次指定同一个 library<span class="mojikumi-line-start">（</span>或者也可以将这两个 library 合并成一个<span class="mojikumi-line-end">，</span>这样的话通过多次迭代就可以解决循环依赖<span class="mojikumi-line-end">）</span></li>
<li>library 的设计应当避免 multiple definition<span class="mojikumi-line-end">，</span>但理论上存在不同的参数顺序或 static library 中 object file 的顺序导致 multiple definition 的可能</li>
</ul>
<h2 id="relocation" class="heading"><a href="#relocation" class="heading-anchor" aria-label="章节： Relocation" tabindex="-1"></a><span>Relocation</span></h2>
<p>relocation 分为两步<span class="mojikumi-line-end">：</span></p>
<ol>
<li>给 symbol definition 重新分配内存地址</li>
<li>相应地修改 symbol reference</li>
</ol>
<p>第一步是简单的<span class="mojikumi-line-end">，</span>把各个 object file 中的各个 section 分别拼在一起即可<span class="mojikumi-line-end">。</span></p>
<p>为了让 linker 知道如何修改 symbol reference<span class="mojikumi-line-end">，</span>需要让 linker 知道<span class="mojikumi-line-end">：</span></p>
<ol>
<li>需要被修改的 symbol reference 在哪</li>
<li>需要修改成什么</li>
</ol>
<p>在 relocatable object file 的 <code>.rel.text</code> 和 <code>.rel.data</code> 中存放了相关的信息<span class="mojikumi-line-end">，</span>一条这样的信息称作一个 relocation entry<span class="mojikumi-line-end">，</span>包含的内容为<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>offset</code>: 这个 symbol reference 相对于其所在的 section 的偏移量<span class="mojikumi-line-end">。</span>也就是说<span class="mojikumi-line-end">，</span>在这个 reference 所在的 section 的地址的基础上加上 <code>offset</code> 就得到了这个 reference 的地址<span class="mojikumi-line-end">。</span></li>
<li><code>type</code>: 有很多种 relocation<span class="mojikumi-line-end">，</span>CS:APP 中只介绍其中的 <code>R_<wbr>X86_<wbr>64_<wbr>PC32</code> 和 <code>R_X86_64_32</code> 两种<span class="mojikumi-line-end">。</span></li>
<li><code>symbol</code>: 被 reference 的 symbol 在 symbol table 中的 index<span class="mojikumi-line-end">。</span></li>
<li><code>addend</code>: 计算 symbol 地址时加在最后的常数<span class="mojikumi-line-start">（</span>见后文<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
</ul>
<p>简单来说<span class="mojikumi-line-end">，</span><code>R_X86_64_32</code> 使用绝对地址进行定位<span class="mojikumi-line-end">，</span><code>R_<wbr>X86_<wbr>64_<wbr>PC32</code> 使用相对于 PC 的地址进行定位<span class="mojikumi-line-end">，</span>且这两种类型的 relocation 都只支持 32 位的地址<span class="mojikumi-line-start">（</span>如果一个程序的大小超过 2GB<span class="mojikumi-line-end">，</span>就需要指定编译选项 <code>-<wbr>mcmodel<wbr>=<wbr>medium<wbr>/<wbr>large</code><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<ul>
<li><code>R_X86_64_32</code>: 修改后的 reference 为 symbol 的地址加上 <code>addend</code></li>
<li><code>R_<wbr>X86_<wbr>64_<wbr>PC32</code>: 修改后的 reference 为 symbol 的地址与 reference 的地址之差加上 <code>addend</code><span class="mojikumi-line-end">；</span>需要注意的是<span class="mojikumi-line-end">，</span>是与 reference 的地址之差<span class="mojikumi-line-end">，</span>而不是与执行到 reference 所在语句时的 PC 之差<span class="mojikumi-line-end">，</span>所以通常会需要通过 <code>addend</code> 来修正</li>
</ul>
<p>可以使用 <code>objdump -dx</code> 以在反汇编结果中显示 relocation entry<span class="mojikumi-line-end">，</span>或者使用 <code>readelf -r</code> 显示所有 relocation entry<span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>使用 GCC 8.5 编译</p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="c 代码块" data-v-ad49d235>c</h3><ile-root id="ile-5"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-5--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">foo</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">*</span><span style="color: #D7DBE0">arr</span><span style="color: #D6DEEB">);</span></span>
<span></span>
<span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">a</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> {</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">};</span></span>
<span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">*</span><span style="color: #D6DEEB">b </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">&amp;</span><span style="color: #C5E478">a</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">];</span></span>
<span></span>
<span><span style="color: #C792EA">int</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">bar</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">{</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">return</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">foo(</span><span style="color: #7FDBCA">&amp;</span><span style="color: #C5E478">a</span><span style="color: #82AAFF">[</span><span style="color: #F78C6C">1</span><span style="color: #82AAFF">])</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">}</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">int</span><span style="color: #403F53"> </span><span style="color: #4876D6">foo</span><span style="color: #403F53">(</span><span style="color: #994CC3">int</span><span style="color: #403F53"> </span><span style="color: #0C969B">*</span><span style="color: #403F53">arr);</span></span>
<span></span>
<span><span style="color: #994CC3">int</span><span style="color: #403F53"> </span><span style="color: #4876D6">a</span><span style="color: #403F53">[</span><span style="color: #AA0982">3</span><span style="color: #403F53">] </span><span style="color: #994CC3">=</span><span style="color: #403F53"> {</span><span style="color: #AA0982">1</span><span style="color: #403F53">, </span><span style="color: #AA0982">2</span><span style="color: #403F53">, </span><span style="color: #AA0982">3</span><span style="color: #403F53">};</span></span>
<span><span style="color: #994CC3">int</span><span style="color: #403F53"> </span><span style="color: #0C969B">*</span><span style="color: #403F53">b </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">&amp;</span><span style="color: #4876D6">a</span><span style="color: #403F53">[</span><span style="color: #AA0982">2</span><span style="color: #403F53">];</span></span>
<span></span>
<span><span style="color: #994CC3">int</span><span style="color: #403F53"> </span><span style="color: #4876D6">bar</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">{</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">return</span><span style="color: #403F53"> </span><span style="color: #4876D6">foo(</span><span style="color: #0C969B">&amp;</span><span style="color: #4876D6">a[</span><span style="color: #AA0982">1</span><span style="color: #4876D6">])</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">}</span></span></code></pre></div></section>
<p><code>readelf -r</code>:</p>
<section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h3><ile-root id="ile-6"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-6--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">Relocation section &#39;.rela.text&#39; at offset 0x250 contains 2 entries:</span></span>
<span><span style="color: #d6deeb">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span>
<span><span style="color: #d6deeb">000000000001  000a0000000a R_X86_64_32       0000000000000008 a + 4</span></span>
<span><span style="color: #d6deeb">000000000006  000b00000002 R_X86_64_PC32     0000000000000000 foo - 4</span></span>
<span><span style="color: #d6deeb"></span></span>
<span><span style="color: #d6deeb">Relocation section &#39;.rela.data&#39; at offset 0x280 contains 1 entry:</span></span>
<span><span style="color: #d6deeb">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span>
<span><span style="color: #d6deeb">000000000000  000a00000001 R_X86_64_64       0000000000000008 a + 8</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">Relocation section &#39;.rela.text&#39; at offset 0x250 contains 2 entries:</span></span>
<span><span style="color: #403f53">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span>
<span><span style="color: #403f53">000000000001  000a0000000a R_X86_64_32       0000000000000008 a + 4</span></span>
<span><span style="color: #403f53">000000000006  000b00000002 R_X86_64_PC32     0000000000000000 foo - 4</span></span>
<span><span style="color: #403f53"></span></span>
<span><span style="color: #403f53">Relocation section &#39;.rela.data&#39; at offset 0x280 contains 1 entry:</span></span>
<span><span style="color: #403f53">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span></span>
<span><span style="color: #403f53">000000000000  000a00000001 R_X86_64_64       0000000000000008 a + 8</span></span></samp></pre></div></section>
<p>在 <code>.rela.text</code> 中<span class="mojikumi-line-end">，</span><code>a</code> 的 <code>addend</code> 是 <code>4</code><span class="mojikumi-line-end">，</span>是直接得到 <code>a[1]</code> 而非 <code>a[0]</code> 的地址<span class="mojikumi-line-end">；</span><code>foo</code> 的 <code>addend</code> 是 <code>-4</code><span class="mojikumi-line-end">，</span>是因为 reference 的地址是 reference 所在的 <code>jmp</code> 指令的下一条指令的地址减 4<span class="mojikumi-line-end">，</span>导致 PC 的地址加上 <code>foo</code> 的地址减去 reference 的地址得到的是 <code>foo</code> 的地址加 4<span class="mojikumi-line-end">，</span>需要 <code>addend</code> 来修正<span class="mojikumi-line-end">。</span></p>
<h2 id="executable-object-files" class="heading"><a href="#executable-object-files" class="heading-anchor" aria-label="章节： Executable Object Files" tabindex="-1"></a><span>Executable Object Files</span></h2>
<p>可执行文件的内容大体上和 relocatable object file 类似<span class="mojikumi-line-end">，</span>主要的区别是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 ELF header 中指定了程序的 entry point</li>
<li>有一个 <code>.init</code> section<span class="mojikumi-line-end">，</span>定义了一个简单的函数<span class="mojikumi-line-end">，</span>用来初始化程序</li>
<li>有一个 program header table<span class="mojikumi-line-end">，</span>描述了程序文件与内存的对应关系<span class="mojikumi-line-end">，</span>即要把文件的哪一段映射到内存的哪一段<span class="mojikumi-line-end">，</span>地址如何对齐<span class="mojikumi-line-end">，</span>以及每一段的权限<span class="mojikumi-line-start">（</span><code>.init</code><span class="mojikumi-line-end">、</span><code>.text</code><span class="mojikumi-line-end">、</span><code>.rodata</code> 的权限为 <code>r-x</code><span class="mojikumi-line-end">，</span><code>.data</code> 和 <code>.bss</code> 的权限为 <code>rw-</code><span class="mojikumi-line-end">）</span></li>
<li><code>.symtab</code><span class="mojikumi-line-end">、</span><code>.debug</code><span class="mojikumi-line-end">、</span><code>.line</code><span class="mojikumi-line-end">、</span><code>.strtab</code> 在执行时不会加载到内存中</li>
<li>如果 fully linked<span class="mojikumi-line-end">，</span>则没有 <code>.rel</code> section</li>
</ul>
<h2 id="loading-executable-object-files" class="heading"><a href="#loading-executable-object-files" class="heading-anchor" aria-label="章节： Loading Executable Object Files" tabindex="-1"></a><span>Loading Executable Object Files</span></h2>
<p>在程序运行时<span class="mojikumi-line-end">，</span>run-time memory image 大致如下图<span class="mojikumi-line-start">（</span>CS:APP Figure 7.15<span class="mojikumi-line-end">）</span>所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig7.15.ce83adc4.webp"><img srcset="/assets/csapp-fig7.15.b489ac10.png" loading="lazy" src="/assets/csapp-fig7.15.b489ac10.png" width="648" height="619" alt="Linux x86-64 run-time memory image"></picture></p>
<p><span class="mojikumi-line-start">（</span><a href="https://csapp.cs.cmu.edu/3e/errata.html">errata</a> 中指出<span class="mojikumi-line-end">，</span>栈的起始地址并不是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>48</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{48}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">48</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>因为地址对齐<span class="mojikumi-line-end">、</span>address-space layout randomization 等原因<span class="mojikumi-line-end">，</span>实际上的内存结构会与上图有一定的差异<span class="mojikumi-line-end">，</span>但每一段的相对位置是和图中一致的<span class="mojikumi-line-end">。</span></p>
<p>loader 加载可执行文件时<span class="mojikumi-line-end">，</span>首先创建 memory image<span class="mojikumi-line-end">，</span>然后根据 program header table 将可执行文件的内容映射到内存中<span class="mojikumi-line-end">，</span>最后跳转到程序的 entry point<span class="mojikumi-line-end">。</span>C 语言程序的 entry point 是 <code>_start</code> 函数<span class="mojikumi-line-start">（</span>在 <code>crt1.o</code> 中定义<span class="mojikumi-line-end">）</span>的地址<span class="mojikumi-line-end">，</span><code>_start</code> 又会调用 <code>_<wbr>_<wbr>libc_<wbr>start_<wbr>main</code> 函数<span class="mojikumi-line-start">（</span>在 <code>libc.so</code> 中定义<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>进行运行环境的初始化<span class="mojikumi-line-end">，</span>然后调用 <code>main</code> 函数<span class="mojikumi-line-end">，</span>最后对返回值进行处理<span class="mojikumi-line-end">。</span></p>
<h2 id="dynamic-linking-with-shared-libraries" class="heading"><a href="#dynamic-linking-with-shared-libraries" class="heading-anchor" aria-label="章节： Dynamic Linking with Shared Libraries" tabindex="-1"></a><span>Dynamic Linking with Shared Libraries</span></h2>
<p>静态库有一些问题<span class="mojikumi-line-end">：</span></p>
<ol>
<li>更新静态库需要重新链接</li>
<li>每个程序都有一份库的拷贝<span class="mojikumi-line-end">，</span>会造成空间的浪费</li>
</ol>
<p>共享库 (shared library) 可以解决这些问题<span class="mojikumi-line-end">。</span>共享库可以在 run time 或者 load time 被动态链接<span class="mojikumi-line-end">。</span>动态链接由 dynamic linker 完成<span class="mojikumi-line-end">。</span>共享库也被称作 shared object<span class="mojikumi-line-end">，</span>在 Linux 中后缀名为 <code>.so</code><span class="mojikumi-line-end">，</span>在 Windows 中被叫做 DLL<span class="mojikumi-line-end">。</span></p>
<p>共享库在两个层面上被共享<span class="mojikumi-line-end">：</span></p>
<ol>
<li>在文件系统上只有一份 <code>.so</code> 文件<span class="mojikumi-line-end">，</span>而在可执行文件中没有库的拷贝</li>
<li>在内存中共享库的 <code>.text</code> section 的单份拷贝可以被多个进程同时使用</li>
</ol>
<p>可以用类似于 <code>gcc -shared -fpic a.c b.c c.c -o libabc.so</code> 的命令构建共享库<span class="mojikumi-line-end">。</span>编译选项中 <code>-shared</code> 告诉编译器要生成 shared object<span class="mojikumi-line-end">，</span><code>-fpic</code> 用来生成 <a href="#position-independent-code-pic">position-independent code</a><span class="mojikumi-line-end">。</span></p>
<p>可以用类似 <code>gcc<wbr> <wbr>main<wbr>.<wbr>c<wbr> ./<wbr>libabc<wbr>.<wbr>so<wbr> -<wbr>o<wbr> <wbr>main</code> 的命令来使用共享库<span class="mojikumi-line-end">。</span></p>
<p>运行 <code>main</code> 时<span class="mojikumi-line-end">，</span>loader 会在进入 entry point 前在 <code>.interp</code> section 中发现 dynamic linker <code>ld<wbr>-<wbr>linux<wbr>.<wbr>so</code><span class="mojikumi-line-end">，</span>于是让 dynamic linker 完成共享库的 relocation 并修改程序中的 symbol reference<span class="mojikumi-line-end">，</span>最后将控制权交还给程序<span class="mojikumi-line-end">。</span></p>
<h2 id="loading-and-linking-shared-libraries-from-applications" class="heading"><a href="#loading-and-linking-shared-libraries-from-applications" class="heading-anchor" aria-label="章节： Loading and Linking Shared Libraries from Applications" tabindex="-1"></a><span>Loading and Linking Shared Libraries from Applications</span></h2>
<p>除了在编译时指定要链接到的共享库并在 load time 链接<span class="mojikumi-line-end">，</span>也可以在 run time 加载并使用共享库<span class="mojikumi-line-end">。</span></p>
<p>C 语言中的相关函数放在 <code>dlfcn.h</code> 头文件中<span class="mojikumi-line-end">，</span>编译时需要 <code>-ldl</code> 来使用这些函数<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p><code>void<wbr> *<wbr>dlopen<wbr>(<wbr>const<wbr> <wbr>char<wbr> *<wbr>filename<wbr>, <wbr>int<wbr> <wbr>flag<wbr>)</code>: 加载共享库</p>
<ul>
<li>
<p>返回值: 成功加载则返回 handle<span class="mojikumi-line-end">，</span>否则返回 <code>NULL</code></p>
</li>
<li>
<p><code>filename</code>: 共享库文件名</p>
</li>
<li>
<p><code>flag</code>: 影响如何处理共享库中引用的 external symbol<span class="mojikumi-line-end">，</span>必须包含 <code>RTLD_NOW</code> 和 <code>RTLD_LAZY</code> 两者之一</p>
<ul>
<li><code>RTLD_NOW</code>: 立即 resolve 所有 external symbol</li>
<li><code>RTLD_LAZY</code>: 等到运行共享库中的代码时再 resolve external symbol</li>
<li><code>RTLD_GLOBAL</code>: 之后给其他共享库 resolve external symbol 时可以使用当前这个共享库</li>
</ul>
<p>如果编译程序时启用了 <code>-rdynamic</code> 选项<span class="mojikumi-line-end">，</span>在 resolve external symbol 时<span class="mojikumi-line-end">，</span>除了使用其他加载时启用了 <code>RTLD_GLOBAL</code> 选项的共享库<span class="mojikumi-line-end">，</span>也可以使用程序自身的 global symbol<span class="mojikumi-line-end">。</span></p>
</li>
</ul>
</li>
<li>
<p><code>void<wbr> *<wbr>dlsym<wbr>(<wbr>void<wbr> *<wbr>handle<wbr>, <wbr>char<wbr> *<wbr>symbol<wbr>)</code>: 获得共享库中某个 symbol 的地址</p>
<ul>
<li>
<p><code>symbol</code>: symbol 名称</p>
</li>
<li>
<p>返回值: 成功获取则返回 symbol 地址<span class="mojikumi-line-end">，</span>否则返回 <code>NULL</code></p>
</li>
</ul>
</li>
<li>
<p><code>int<wbr> <wbr>dlclose<wbr>(<wbr>void<wbr> *<wbr>handle<wbr>)</code>: 关闭共享库</p>
<ul>
<li>返回值: 成功关闭则返回 <code>0</code><span class="mojikumi-line-end">，</span>出错则返回 <code>-1</code></li>
</ul>
</li>
<li>
<p><code>const<wbr> <wbr>char<wbr> *<wbr>dlerror<wbr>(<wbr>void<wbr>)</code>: 获取最后一次调用 <code>dlopen</code> / <code>dlsym</code> / <code>dlclose</code> 的报错信息<span class="mojikumi-line-end">，</span>如果最后一次调用没有出错则返回 <code>NULL</code></p>
</li>
</ul>
<p>CS:APP 给出了一份参考代码 <a href="https://csapp.cs.cmu.edu/3e/ics3/code/link/dll.c">code/link/dll.c</a><span class="mojikumi-line-end">。</span></p>
<h2 id="position-independent-code-pic" class="heading"><a href="#position-independent-code-pic" class="heading-anchor" aria-label="章节： Position-Independent Code (PIC)" tabindex="-1"></a><span>Position-Independent Code (PIC)</span></h2>
<p>共享库的一条重要性质是它的代码段在内存中只有一份<span class="mojikumi-line-end">，</span>而可以被多个进程共享<span class="mojikumi-line-end">，</span>这就使得它的代码中的 symbol reference 不能在动态链接时被修改<span class="mojikumi-line-end">，</span>适用于静态链接的 relocation 无法完成<span class="mojikumi-line-end">，</span>所以共享库的代码需要是 position-independent 的<span class="mojikumi-line-end">。</span></p>
<p>PIC 的主要思路基于以下两点<span class="mojikumi-line-end">：</span></p>
<ol>
<li>虽然共享库的代码段是共享的<span class="mojikumi-line-end">，</span>但数据段是每个进程各有一份的</li>
<li>无论整个共享库被放到内存的哪个位置<span class="mojikumi-line-end">，</span>代码段和数据段地址的距离是固定的<span class="mojikumi-line-start">（</span>这与上一条不矛盾<span class="mojikumi-line-end">，</span>应该是因为虚存<span class="mojikumi-line-end">）</span></li>
</ol>
<p>因此<span class="mojikumi-line-end">，</span>可以在数据段中存放效果相当于 relocation 的信息<span class="mojikumi-line-end">，</span>来间接达到 relocation 的效果<span class="mojikumi-line-end">。</span>说白了就是<span class="mojikumi-line-end">，</span>因为没法修改代码段<span class="mojikumi-line-end">，</span>所以把 symbol 的地址放到数据段里<span class="mojikumi-line-end">。</span>具体实现中<span class="mojikumi-line-end">，</span>数据段的开头有一个 <i>global offset table</i> (GOT)<span class="mojikumi-line-end">，</span>表中每一项都是一个地址<span class="mojikumi-line-end">，</span>可以由 dynamic linker 进行修改<span class="mojikumi-line-end">，</span>而由于代码段和数据段的地址距离固定<span class="mojikumi-line-end">，</span>就可以用 PC-relative 的方式寻址到表中的项<span class="mojikumi-line-end">。</span></p>
<p>PIC data reference 是简单的<span class="mojikumi-line-end">，</span>只要在 GOT 中为每个 data symbol (全局或 static 变量) 创建一个表项<span class="mojikumi-line-end">，</span>在动态链接时由 dynamic linker 修改这些项<span class="mojikumi-line-end">，</span>而在代码中通过这个表项来间接地进行 data reference<span class="mojikumi-line-end">，</span>例如 (CS:APP Figure 7.18<span class="mojikumi-line-end">，</span><code>GOT[3]</code> 中存放了全局变量 <code>x</code> 的地址)<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="asm 代码块" data-v-ad49d235>asm</h3><ile-root id="ile-7"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-7--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">movq</span><span style="color: #D6DEEB"> Ox2OO8b9(%</span><span style="color: #82AAFF">rip</span><span style="color: #D6DEEB">), %</span><span style="color: #82AAFF">rax</span><span style="color: #D6DEEB">  </span><span style="color: #637777"> # %rax = *GOT[3] = &amp;x</span></span>
<span><span style="color: #D6DEEB">    addl $0x1, (%</span><span style="color: #82AAFF">rax</span><span style="color: #D6DEEB">)          </span><span style="color: #637777"> # ++x</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #403F53">    </span><span style="color: #0C969B">movq</span><span style="color: #403F53"> Ox2OO8b9(%</span><span style="color: #4876D6">rip</span><span style="color: #403F53">), %</span><span style="color: #4876D6">rax</span><span style="color: #403F53">  </span><span style="color: #989FB1"> # %rax = *GOT[3] = &amp;x</span></span>
<span><span style="color: #403F53">    addl $0x1, (%</span><span style="color: #4876D6">rax</span><span style="color: #403F53">)          </span><span style="color: #989FB1"> # ++x</span></span></code></pre></div></section>
<p>如果是本地定义的变量<span class="mojikumi-line-end">，</span>也可以使用 PC-relative 的定位方式直接引用<span class="mojikumi-line-end">，</span>而只对外部定义的变量使用 GOT<span class="mojikumi-line-end">，</span>但编译器也可能选择不做这样的区分而是使用统一的方法来处理<span class="mojikumi-line-end">。</span></p>
<p>PIC procedure call 也可以和 data reference 一样处理<span class="mojikumi-line-start">（</span>可以用 <code>-fno-plt</code> 编译选项来这样做<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但实际上会使用名为 <i>lazy binding</i> 的技术进行优化<span class="mojikumi-line-end">。</span></p>
<p>这是因为<span class="mojikumi-line-end">，</span>链接到一个共享库时<span class="mojikumi-line-end">，</span>往往最终会调用的只是它提供的大量函数中的一小部分<span class="mojikumi-line-end">，</span>如果对整个共享库用到的外部函数都在动态链接时计算出相应的 offset<span class="mojikumi-line-end">，</span>就可能造成浪费<span class="mojikumi-line-end">。</span>而 lazy binding 则是在第一次调用某个外部函数时绑定这个函数的地址<span class="mojikumi-line-end">。</span></p>
<p>lazy binding 基于一个名为 <i>procedure linkage table</i> (PLT) 的结构<span class="mojikumi-line-end">。</span>PLT 位于代码段中<span class="mojikumi-line-end">，</span>表中的每一项其实是三条指令<span class="mojikumi-line-end">，</span>如 CS:APP Figure 7.19 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/csapp-fig7.19.389efa4c.webp"><img srcset="/assets/csapp-fig7.19.44dfb261.png" loading="lazy" src="/assets/csapp-fig7.19.44dfb261.png" width="995" height="602" alt="PLT 原理示意图"></picture></p>
<p>整个流程就是<span class="mojikumi-line-end">：</span></p>
<ol>
<li>调用 <code>addvec</code> 时<span class="mojikumi-line-end">，</span>实际上调用的是 <code>PLT[2]</code> 的地址</li>
<li><code>PLT[2]</code> 的第一条指令会跳转到 <code>GOT[4]</code><span class="mojikumi-line-end">，</span><code>GOT[4]</code> 里一开始放的是 <code>PLT[2]</code> 的第二条指令<span class="mojikumi-line-end">，</span>所以首次调用 <code>PLT[2]</code> 时就从第一条指令跳到第二条指令</li>
<li>第二条指令是往栈里压入 <code>addvec</code> 的 ID<span class="mojikumi-line-end">，</span>是用来告诉 dynamic linker 这是哪个函数</li>
<li>第三条指令会跳转到 <code>PLT[0]</code></li>
<li><code>PLT[0]</code> 的第一条指令是往栈里压入 relocation entries 的地址<span class="mojikumi-line-end">，</span>第二条指令是跳转到 dynamic linker</li>
<li>dynamic linker 通过放在栈中的函数的 ID 以及 relocation entries 计算出 <code>addvec</code> 的地址<span class="mojikumi-line-end">，</span>放在 <code>GOT[4]</code><span class="mojikumi-line-end">，</span>然后跳转到 <code>addvec</code></li>
<li>因为一路上都是 <code>jmp</code><span class="mojikumi-line-end">，</span>跳转到 <code>addvec</code> 后可以正常返回到调用 <code>PLT[2]</code> 的位置</li>
<li>第二次调用 <code>PLT[2]</code> 时<span class="mojikumi-line-end">，</span><code>GOT[4]</code> 里已经是 <code>addvec</code> 的地址<span class="mojikumi-line-end">，</span>所以就在 <code>PLT[2]</code> 的第一条指令处跳转到了 <code>addvec</code></li>
</ol>
<h2 id="library-interpositioning" class="heading"><a href="#library-interpositioning" class="heading-anchor" aria-label="章节： Library Interpositioning" tabindex="-1"></a><span>Library Interpositioning</span></h2>
<p>Linux 的链接器支持一个名为 <i>library interpositioning</i> 的技术<span class="mojikumi-line-end">，</span>可以用来把共享库的函数替换掉<span class="mojikumi-line-end">，</span>一般会换成一个 wrapper function 用来 trace<span class="mojikumi-line-end">，</span>但也可以换成完全不同的东西<span class="mojikumi-line-end">。</span></p>
<p>看了下中文版 CS:APP<span class="mojikumi-line-end">，</span>这个东西竟然叫<span class="mojikumi-line-start">“</span>库打桩<span class="mojikumi">”</span><wbr><span class="mojikumi-line-start">（</span></p>
<p>编译时的 library interpositioning 就是用 <code>#define</code> 换掉某个函数 <s><span class="mojikumi-line-end">，</span>在机房里被 <code>#<wbr>define<wbr> <wbr>sort<wbr> <wbr>random_<wbr>shuffle</code> 过的大家想必对此非常熟悉</s><span class="mojikumi-line-end">。</span></p>
<p>链接时的 library interpositioning 是给 linker 传参 <code>--wrap foo</code><span class="mojikumi-line-end">，</span>然后调用 <code>foo</code> 就会实际上调用 <code>__wrap_foo</code><span class="mojikumi-line-end">，</span>而调用 <code>__real_foo</code> 则会调用原本的 <code>foo</code><span class="mojikumi-line-end">。</span>一般会给 <code>gcc</code> 而非 <code>ld</code> 传参<span class="mojikumi-line-end">，</span>就是用 <code>gcc<wbr> -<wbr>Wl<wbr>,--<wbr>wrap<wbr>,<wbr>foo</code> 代替 <code>ld --wrap foo</code><span class="mojikumi-line-end">，</span>其中 <code>-Wl</code> 表示给 linker 传参<span class="mojikumi-line-end">，</span>后面的逗号会被换成空格<span class="mojikumi-line-end">。</span></p>
<p>运行时的 library interpositioning 是在运行程序时设置环境变量 <code>LD_<wbr>PRELOAD<wbr>="/<wbr>path<wbr>/<wbr>to<wbr>/<wbr>wrapper<wbr>.<wbr>so<wbr> /<wbr>path<wbr>/<wbr>to<wbr>/<wbr>anotherwrapper<wbr>.<wbr>so<wbr>"</code><span class="mojikumi-line-end">，</span>然后在使用任意共享库中的函数之前就会优先尝试使用 <code>wrapper.so</code> 和 <code>anotherwrapper<wbr>.<wbr>so</code><span class="mojikumi-line-end">。</span>这时<span class="mojikumi-line-end">，</span>为了能在 wrapper function 中调用原本的函数<span class="mojikumi-line-end">，</span>就需要 <a href="#loading-and-linking-shared-libraries-from-applications">在运行时加载共享库</a><span class="mojikumi-line-end">。</span></p>
<p>如果想看具体实现<span class="mojikumi-line-end">，</span>可以参考 CS:APP<span class="mojikumi-line-end">。</span></p>
<p>编译时的 library interpositioning 需要修改源代码<span class="mojikumi-line-end">，</span>链接时的 library interpositioning 需要获取到 object file 并重新链接得到可执行文件<span class="mojikumi-line-end">，</span>而运行时 library interpositioning 只需要设置环境变量<span class="mojikumi-line-end">，</span>不需要对可执行文件进行任何修改<span class="mojikumi-line-end">，</span>可以方便地对很多不同程序的某个函数调用进行跟踪<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/csapp">csapp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
    </channel>
</rss>