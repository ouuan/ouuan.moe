<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ouuan's blog: 标签: 学习笔记</title>
        <link>https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</link>
        <description>标签: 学习笔记 - ouuan 的博客。</description>
        <lastBuildDate>Sun, 08 Oct 2023 09:32:15 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>Copyright © 2022 - 2023 ouuan
Licensed under CC BY-SA 4.0</copyright>
        <atom:link href="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[CNATDA 第七章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/09/cnatda-7</link>
            <guid>https://ouuan.moe/post/2023/09/cnatda-7</guid>
            <pubDate>Sun, 08 Oct 2023 09:32:15 GMT</pubDate>
            <description><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第七章 <span class="mojikumi">“</span>Wireless and Mobile Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第七章 <span class="mojikumi">“</span>Wireless and Mobile Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="introduction" class="heading"><a href="#introduction" class="heading-anchor" aria-label="章节： Introduction" tabindex="-1"></a><span>Introduction</span></h2>
<p><span class="mojikumi-line-start">“</span>wireless<span class="mojikumi">”</span> 和 <span class="mojikumi">“</span>mobile<span class="mojikumi">”</span> 往往是密不可分的<span class="mojikumi-line-end">，</span>但它们实际上面临着不同的挑战<span class="mojikumi-line-end">，</span>需要不同的解决方案<span class="mojikumi-line-end">。</span></p>
<p>wireless network 一般包含 wireless host<span class="mojikumi-line-end">、</span>wireless link 和 base station<span class="mojikumi-line-end">，</span>但不是所有 wireless network 都有 base station<span class="mojikumi-line-end">。</span></p>
<p>根据 wireless hop 的次数<span class="mojikumi-line-end">、</span>是否有 base station (infrastructure)<span class="mojikumi-line-end">，</span>wireless network 可以大致分为四种<span class="mojikumi-line-end">：</span></p>
<ul>
<li>single-hop, infrastructure-based: 大部分 wireless network<span class="mojikumi-line-end">，</span>例如 802.11 和 4G LTE</li>
<li>single-hop, infrastructure-less: 例如 Bluetooth</li>
<li>multi-hop, infrastructure-based: 例如 wireless mesh network</li>
<li>multi-hop, infrastructure-less: 例如 mobile ad hoc network (MANET)<span class="mojikumi-line-end">、</span>vehicular ad hoc network (VANET)</li>
</ul>
<h2 id="wireless-links-and-network-characteristics" class="heading"><a href="#wireless-links-and-network-characteristics" class="heading-anchor" aria-label="章节： Wireless Links and Network Characteristics" tabindex="-1"></a><span>Wireless Links and Network Characteristics</span></h2>
<p>wireless network 面临着几个主要问题<span class="mojikumi-line-end">：</span></p>
<ul>
<li>信号衰减<span class="mojikumi-line-end">：</span>长距离传输<span class="mojikumi-line-end">、</span>穿越障碍</li>
<li>信号干扰<span class="mojikumi-line-end">：</span>其他同频段信号<span class="mojikumi-line-end">、</span>环境噪音</li>
<li>multipath propagation<span class="mojikumi-line-end">：</span>同一信号的多个部分从 sender 到 receiver 可能会走不同的路径</li>
</ul>
<p>总之<span class="mojikumi-line-end">，</span>wireless network 通常有更多 bit error<span class="mojikumi-line-end">，</span>所以往往除了 wired network 也会使用的 CRC error detection codes<span class="mojikumi-line-end">，</span>还会使用 link-layer reliable-data-transfer protocol<span class="mojikumi-line-end">。</span></p>
<p><i>signal-to-noise ratio</i> (SNR) 是接收到的信号强度与噪音之比<span class="mojikumi-line-end">，</span><i>bit error rate</i> (BER) 是 bit error 发生的概率<span class="mojikumi-line-end">。</span></p>
<p>wireless network 通过 modulation scheme 来决定如何 encoding 和 transmission<span class="mojikumi-line-end">。</span>对于同一个 modulation scheme<span class="mojikumi-line-end">，</span>SNR 越高 BER 越低<span class="mojikumi-line-end">；</span>对于同样的 SNR<span class="mojikumi-line-end">，</span>transmission rate 越高的 modulation scheme BER 越高<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>往往会根据实际的 channel condition 动态选用 modulation scheme<span class="mojikumi-line-start">（</span>例如在 BER 满足一定限制的情况下尽可能提高 transmission rate<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>wireless network 中的 multiple access 也更加复杂<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">，</span>A 和 C 分别能传输信号到 B<span class="mojikumi-line-end">，</span>但因为障碍物或距离等原因<span class="mojikumi-line-end">，</span>A 和 C 接收不到彼此发送的信号<span class="mojikumi-line-end">，</span>这可能导致 undetectable collision<span class="mojikumi-line-end">。</span></p>
<h2 id="cdma" class="heading"><a href="#cdma" class="heading-anchor" aria-label="章节： CDMA" tabindex="-1"></a><span>CDMA</span></h2>
<p>CDMA (code division multiple access) 是一种常用于 wireless network 的 multiple access protocol<span class="mojikumi-line-end">，</span>属于 <a href="/post/2023/07/cnatda-6#channel-partitioning-protocols">channel partitioning protocol</a><span class="mojikumi-line-end">。</span></p>
<p>在 CDMA 中<span class="mojikumi-line-end">，</span>每个装有 1 bit 的 time slot 会被再分为多个 mini-slot<span class="mojikumi-line-end">，</span>sender 将每个 slot 内的 data<span class="mojikumi-line-start">（</span>mini-slot 全 0 / 全 1<span class="mojikumi-line-end">）</span>异或上一个 code<span class="mojikumi-line-end">，</span>理想状态下<span class="mojikumi-line-end">，</span>receiver 再异或上这个 code 就可以得到 data<span class="mojikumi-line-end">。</span>实际上<span class="mojikumi-line-end">，</span>会有其他信号产生干扰<span class="mojikumi-line-end">，</span>而合适地选取 code 可以在有干扰的情况下依然能够读取出 data<span class="mojikumi-line-end">。</span>这相当于是在 code space 而非 time / frequency 上进行 channel partitioning<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>书中没有说明具体细节<span class="mojikumi-line-end">，</span>例如如何选取 code<span class="mojikumi-line-end">，</span>如何处理不同 sender 的信号强度不同<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h2 id="wi-fi-802-11-wireless-lans" class="heading"><a href="#wi-fi-802-11-wireless-lans" class="heading-anchor" aria-label="章节： Wi-Fi: 802.11 Wireless LANs" tabindex="-1"></a><span>Wi-Fi: 802.11 Wireless LANs</span></h2>
<p>Wi-Fi 的全称为 <span class="mojikumi">“</span>IEEE 802.11 wireless LAN<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>有 802.11b/g/n/ac/ax/af/ah 等版本<span class="mojikumi-line-end">，</span>不同版本有不同的最大传输速率<span class="mojikumi-line-end">、</span>传输距离以及使用的频段<span class="mojikumi-line-end">。</span></p>
<h3 id="the-802-11-wireless-lan-architecture" class="heading"><a href="#the-802-11-wireless-lan-architecture" class="heading-anchor" aria-label="章节： The 802.11 Wireless LAN Architecture" tabindex="-1"></a><span>The 802.11 Wireless LAN Architecture</span></h3>
<p>802.11 architecture 的 building block 是 <i>basic service set</i> (BSS)<span class="mojikumi-line-end">，</span>每个 BSS 包含一个被称作 <i>access point</i> (AP) 的 base station 以及连接到 AP 的若干 wireless station<span class="mojikumi-line-start">（</span>即 host<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>802.11 可以通过 AP 连接为 infrastructure wireless LAN<span class="mojikumi-line-end">，</span>也可以没有 AP 而只由几个 host 互相连接成 ad hoc network<span class="mojikumi-line-start">（</span>不对外连接到 Internet<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>本书只讨论 infrastructure wireless LAN<span class="mojikumi-line-end">。</span></p>
<p>每个 AP 有一个 <i>service set identifier</i> (SSID)<span class="mojikumi-line-end">，</span>即 Wi-Fi 的名称<span class="mojikumi-line-end">。</span>可以为 AP 设置 channel number<span class="mojikumi-line-end">，</span>2.4GHz 频段共有 11 个 channel number<span class="mojikumi-line-end">，</span>但相差不到 5 的 channel 会相交<span class="mojikumi-line-end">，</span>彼此不相交的 channel 最多只能有 3 个<span class="mojikumi-line-start">（</span>1<span class="mojikumi-line-end">、</span>6<span class="mojikumi-line-end">、</span>11<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>AP 会周期性地广播 <i>beacon frame</i> 来告诉 wireless device 自己的存在<span class="mojikumi-line-end">，</span>wireless device 可以监听 beacon frame 来进行 <i>passive scanning</i><span class="mojikumi-line-end">。</span>除此之外<span class="mojikumi-line-end">，</span>也可以主动发送 probe frame 来进行 <i>active scanning</i><span class="mojikumi-line-end">。</span></p>
<p>找到 AP 后<span class="mojikumi-line-end">，</span>wireless device 需要在可用的 AP 中选择一个<span class="mojikumi-line-start">（</span>802.11 standard 中没有规定选择 AP 的算法<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>发送 association request<span class="mojikumi-line-end">，</span>AP 返回 association response<span class="mojikumi-line-end">，</span>就建立了连接<span class="mojikumi-line-end">。</span></p>
<h3 id="the-802-11-mac-protocol" class="heading"><a href="#the-802-11-mac-protocol" class="heading-anchor" aria-label="章节： The 802.11 MAC Protocol" tabindex="-1"></a><span>The 802.11 MAC Protocol</span></h3>
<h4 id="csmaca" class="heading"><a href="#csmaca" class="heading-anchor" aria-label="章节： CSMA/CA" tabindex="-1"></a><span>CSMA/CA</span></h4>
<p>802.11 使用的 <a href="/post/2023/07/cnatda-6#multiple-access-links-and-protocols">MAC protocol</a> 是称作 <i>CSMA with collision avoidance</i> (CSMA/CA) 的 <a href="/post/2023/07/cnatda-6#random-access-protocols">random access protocol</a><span class="mojikumi-line-end">，</span>和 Ethernet 使用的 <a href="/post/2023/07/cnatda-6#csmacd">CSMA/CD</a> 类似<span class="mojikumi-line-end">，</span>但又有很大不同<span class="mojikumi-line-end">：</span></p>
<ul>
<li>CSMA/CA 是 <span class="mojikumi">“</span>collision avoidance<span class="mojikumi">”</span> 而非 CSMA/CD 的 <span class="mojikumi">“</span>collision detection<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>这意味着它不是在检测 collision 时中断传输<span class="mojikumi-line-end">，</span>而是不进行检测<span class="mojikumi-line-end">，</span>通过其他机制尽量避免 collision<span class="mojikumi-line-end">。</span>这是因为 wireless network 中很难进行 collision detection<span class="mojikumi-line-end">：</span>
<ul>
<li><a href="#wireless-links-and-network-characteristics">前文</a>中提到过<span class="mojikumi-line-end">，</span>wireless network 中可能存在 undetectable collision<span class="mojikumi-line-end">；</span></li>
<li>collision detection 需要在发送的同时接收信号<span class="mojikumi-line-end">，</span>而无线信号在发送端的强度会远高于接收端的强度<span class="mojikumi-line-end">，</span>这也加大了 collision detection 的难度<span class="mojikumi-line-end">。</span></li>
</ul>
</li>
<li>802.11 引入了 link-layer <a href="/post/2023/06/cnatda-3#principles-of-reliable-data-transfer">reliable-data-transfer</a><span class="mojikumi-line-end">。</span></li>
</ul>
<p>其完整流程为<span class="mojikumi-line-end">：</span></p>
<ol>
<li>等待一小段时间<span class="mojikumi-line-start">（</span>distributed inter-frame space, DIFS) 来看 channel 是否 idle<span class="mojikumi-line-end">。</span></li>
<li>如果 channel buzy<span class="mojikumi-line-end">，</span>进入 binary exponential backoff<span class="mojikumi-line-start">（</span>只在 channel idle 时 countdown<span class="mojikumi-line-end">，</span>channel buzy 则不计入等待时间<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>经历了足够长的 channel idle 后<span class="mojikumi-line-end">，</span>发送整个 frame<span class="mojikumi-line-start">（</span>不检测 collision<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>AP 接收到 frame 后<span class="mojikumi-line-end">，</span>等待一小段时间<span class="mojikumi-line-start">（</span>short inter-frame space, SIFS<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>然后发送 ACK<span class="mojikumi-line-end">。</span></li>
<li>如果 sender 接收到了 ACK<span class="mojikumi-line-end">，</span>则结束或继续发送下一个 frame<span class="mojikumi-line-end">；</span>否则进入 binary exponential backoff<span class="mojikumi-line-end">，</span>进行 retransmission<span class="mojikumi-line-end">。</span></li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>检测到 channel buzy 时直接进入 backoff<span class="mojikumi-line-end">，</span>是为了避免 channel 变为 idle 时多个 sender 同时发送而产生 collision<span class="mojikumi-line-end">。</span>这与 CSMA/CD 不同<span class="mojikumi-line-end">，</span>因为如果有 collision detection 的话<span class="mojikumi-line-end">，</span>即使发生了这样的 collision 也代价不大<span class="mojikumi-line-end">，</span>就无需通过 backoff 来避免<span class="mojikumi-line-end">。</span></p>
<h4 id="rtscts" class="heading"><a href="#rtscts" class="heading-anchor" aria-label="章节： RTS/CTS" tabindex="-1"></a><span>RTS/CTS</span></h4>
<p>wireless network 中不仅 collision detection 非常困难<span class="mojikumi-line-end">，</span>carrier sense 也比较困难<span class="mojikumi-line-end">，</span>光靠上面这些机制还是很可能出现 collision<span class="mojikumi-line-end">，</span>所以 802.11 还提供了另一种可选的机制<span class="mojikumi-line-end">：</span>使用 <i>request to send</i> (RTS) frame 和 <i>clear to send</i> (CTS) frame 来显式地预留出通信权<span class="mojikumi-line-end">：</span></p>
<ol>
<li>sender 发送 RTS<span class="mojikumi-line-end">，</span>告诉 AP 需要预留出的时长<span class="mojikumi-line-start">（</span>传输 data 和 ACK 的用时<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>AP 发送 CTS<span class="mojikumi-line-end">，</span>告诉 sender 可以发送<span class="mojikumi-line-end">，</span>以及告诉其他 station 一段时间内不要发送<span class="mojikumi-line-end">。</span></li>
<li>sender 发送 data<span class="mojikumi-line-end">。</span></li>
<li>AP 发送 ACK<span class="mojikumi-line-end">，</span>除了普通的 ACK<span class="mojikumi-line-end">，</span>也是告诉其他 station 可以发送了<span class="mojikumi-line-end">。</span></li>
</ol>
<p>使用 RTS/CTS 可以保证 data 和 ACK 的传输不会出现 collision<span class="mojikumi-line-end">，</span>而 RTS/CTS frame 自身非常短<span class="mojikumi-line-end">，</span>如果产生 collision 代价是较小的<span class="mojikumi-line-end">。</span>然而<span class="mojikumi-line-end">，</span>RTS/CTS 自身会消耗资源<span class="mojikumi-line-end">、</span>产生延时<span class="mojikumi-line-end">，</span>所以一般只有在 data 较大时才会使用<span class="mojikumi-line-end">，</span>wireless station 一般会设置一个发送 RTS 的 frame length threshold<span class="mojikumi-line-end">，</span>很多时候这个 threshold 比 maximum frame length 还大<span class="mojikumi-line-end">，</span>实际上就是禁用了 RTS<span class="mojikumi-line-end">。</span></p>
<h4 id="use-802-11-as-point-to-point-link" class="heading"><a href="#use-802-11-as-point-to-point-link" class="heading-anchor" aria-label="章节： Use 802.11 as Point-to-Point Link" tabindex="-1"></a><span>Use 802.11 as Point-to-Point Link</span></h4>
<p>上面说的是常见的 802.11 对 multiple access 的处理<span class="mojikumi-line-end">，</span>除此之外<span class="mojikumi-line-end">，</span>802.11 也可以通过 directional antenna 作为 point-to-point link 使用<span class="mojikumi-line-end">。</span></p>
<h3 id="the-ieee-802-11-frame" class="heading"><a href="#the-ieee-802-11-frame" class="heading-anchor" aria-label="章节： The IEEE 802.11 Frame" tabindex="-1"></a><span>The IEEE 802.11 Frame</span></h3>
<p>802.11 frame 的结构如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-7.13" id="user-content-fnref-fig-7.13" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<ul>
<li>
<p>type<span class="mojikumi-line-end">、</span>subtype<span class="mojikumi-line-end">：</span>这决定了 association<span class="mojikumi-line-end">、</span>RTS<span class="mojikumi-line-end">、</span>CTS<span class="mojikumi-line-end">、</span>ACK<span class="mojikumi-line-end">、</span>data 等 frame 类型<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>duration: 这是 RTS/CTS<span class="mojikumi-line-start">（</span>预留一段时长<span class="mojikumi-line-end">）</span>所需的<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>address: 由于 AP 起到中介的作用<span class="mojikumi-line-end">，</span>在 infrastructure wireless LAN 中 frame 需要包含三个 address<span class="mojikumi-line-start">（</span>在 ad hoc mode 中需要四个<span class="mojikumi-line-end">，</span>此处不讨论<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ul>
<li>前两个是 802.11 收发双方<span class="mojikumi-line-start">（</span>station 和 AP<span class="mojikumi-line-end">）</span>的 MAC address<span class="mojikumi-line-end">：</span>这是 802.11 通信所需的<span class="mojikumi-line-end">。</span></li>
<li>第三个是 AP 连接到的 router interface 的 MAC address<span class="mojikumi-line-end">：</span>AP 工作在 link layer<span class="mojikumi-line-end">，</span>router 感知不到 AP 的存在<span class="mojikumi-line-end">；</span>在 AP 向 station 发送时<span class="mojikumi-line-end">，</span>station 可以从 address 3 得到 router 的 MAC address<span class="mojikumi-line-end">；</span>在 station 向 AP 发送时<span class="mojikumi-line-end">，</span>AP 可以从 address 3 知道 Ethernet frame 需要发给谁<span class="mojikumi-line-end">。</span>总之<span class="mojikumi-line-end">，</span>address 3 是 Ethernet 通信所需的<span class="mojikumi-line-end">。</span></li>
</ul>
<p>不同场合下每个 address 分别代表什么是不同的<span class="mojikumi-line-end">，</span>这由 frame control 中的 <span class="mojikumi">“</span>to AP<span class="mojikumi">”</span> 和 <span class="mojikumi">“</span>from AP<span class="mojikumi">”</span> 决定<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>sequence number: 这是 link-layer reliable-data-transfer 所需的<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>payload: 802.11 允许 2312 bytes 的 payload<span class="mojikumi-line-end">，</span>但由于 Ethernet 的限制<span class="mojikumi-line-end">，</span>一般不会超过 1500<span class="mojikumi-line-end">。</span></p>
</li>
</ul>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-7.13.5949ac2a.webp"><img srcset="/assets/cnatda-fig-7.13.7c70fcfe.png" loading="lazy" src="/assets/cnatda-fig-7.13.7c70fcfe.png" width="1006" height="307" alt="The 802.11 frame"></picture></p>
<h3 id="mobility-in-the-same-ip-subnet" class="heading"><a href="#mobility-in-the-same-ip-subnet" class="heading-anchor" aria-label="章节： Mobility in the Same IP Subnet" tabindex="-1"></a><span>Mobility in the Same IP Subnet</span></h3>
<p>当 host 从一个 BSS 移动到另一个 BSS 时<span class="mojikumi-line-end">，</span>如果两个 BSS 处于同一个 IP subnet 中<span class="mojikumi-line-end">，</span>mobility issue 就比较容易解决<span class="mojikumi-line-end">：</span>直接保持 IP address 不变即可<span class="mojikumi-line-end">。</span>而如果两个 AP 由 <a href="/post/2023/07/cnatda-6#link-layer-switches">switch</a> 连接<span class="mojikumi-line-end">，</span>还需要处理 switch interface 改变的问题<span class="mojikumi-line-end">，</span>由于 switch 的 self-learning<span class="mojikumi-line-end">，</span>一个处理方式是在和新的 AP 建立 association 后立刻发送一个 broadcast Ethernet frame 来告诉 switch 换了一个 interface<span class="mojikumi-line-end">。</span></p>
<p>如果使用 <a href="/post/2023/07/cnatda-6#virtual-local-area-networks-vlans">VLAN</a><span class="mojikumi-line-end">，</span>可以将很多<span class="mojikumi-line-start">（</span>地理位置不同的<span class="mojikumi-line-end">）</span>AP 放在同一个 IP subnet 中<span class="mojikumi-line-end">，</span>从而较为轻松地解决 mobility issue<span class="mojikumi-line-end">。</span></p>
<h3 id="advanced-features-in-802-11" class="heading"><a href="#advanced-features-in-802-11" class="heading-anchor" aria-label="章节： Advanced Features in 802.11" tabindex="-1"></a><span>Advanced Features in 802.11</span></h3>
<h4 id="802-11-rate-adaptation" class="heading"><a href="#802-11-rate-adaptation" class="heading-anchor" aria-label="章节： 802.11 Rate Adaptation" tabindex="-1"></a><span>802.11 Rate Adaptation</span></h4>
<p>如<a href="#wireless-links-and-network-characteristics">上文</a>所述<span class="mojikumi-line-end">，</span>不同环境下 SNR 不同会导致最佳的 transmission rate 不同<span class="mojikumi-line-end">。</span>在 802.11 中<span class="mojikumi-line-end">，</span>ACK 可以用作 rate adaptation 的 hint<span class="mojikumi-line-end">，</span>在没收到 ACK 时降低 transmission rate<span class="mojikumi-line-end">，</span>在连续收到很多 ACK 时提高 transmission rate<span class="mojikumi-line-end">，</span>这与 <a href="/post/2023/06/cnatda-3#classic-tcp-congestion-control">TCP 的 congestion control</a> 类似<span class="mojikumi-line-end">。</span></p>
<h4 id="802-11-power-management" class="heading"><a href="#802-11-power-management" class="heading-anchor" aria-label="章节： 802.11 Power Management" tabindex="-1"></a><span>802.11 Power Management</span></h4>
<p>一个 802.11 node 往往不需要一直通信<span class="mojikumi-line-end">，</span>在不进行通信的时候可以 sleep 来 save power<span class="mojikumi-line-end">：</span></p>
<ol>
<li>node 可以在 header 中设置 power management flag 来告诉 AP 自己即将 sleep<span class="mojikumi-line-end">。</span></li>
<li>如果 AP 接收到一个发送给正在 sleep 的 node 的 frame<span class="mojikumi-line-end">，</span>会将其存在 buffer 中<span class="mojikumi-line-end">。</span></li>
<li>AP 发送的 beacon frame 中包含一个有 buffered frame 的 node list<span class="mojikumi-line-end">，</span>node 会在 AP 发送 beacon frame 前 wake up<span class="mojikumi-line-end">，</span>根据自己是否有 buffered frame 来请求 AP 发送这些 buffered frame 或继续 sleep<span class="mojikumi-line-end">。</span></li>
</ol>
<p>一般来说<span class="mojikumi-line-end">，</span>AP 会周期性地每 100ms 发送一次 beacon frame<span class="mojikumi-line-end">，</span>而一次 wakeup 只需 250μs<span class="mojikumi-line-end">，</span>所以不进行通信的 station 可以在 99% 的时间内 sleep<span class="mojikumi-line-end">。</span></p>
<h2 id="personal-area-networks-bluetooth" class="heading"><a href="#personal-area-networks-bluetooth" class="heading-anchor" aria-label="章节： Personal Area Networks: Bluetooth" tabindex="-1"></a><span>Personal Area Networks: Bluetooth</span></h2>
<p>Bluetooth 使用 TDM 进行 channel partitioning<span class="mojikumi-line-end">，</span>同时在 79 个 frequency channel 中进行 pseudo-random 的 channel hopping (<i>frequency-hopping spread spectrum</i>, FHSS) 来降低外界干扰的影响<span class="mojikumi-line-end">。</span></p>
<p>Bluetooth network 是 ad hoc (infrastructure-less) 的<span class="mojikumi-line-end">，</span>一个 Bluetooth network 包含最多 8 个 active device<span class="mojikumi-line-end">，</span>其中一个是 master device<span class="mojikumi-line-end">，</span>它决定传输的 clock<span class="mojikumi-line-end">、</span>frequency-hopping pattern<span class="mojikumi-line-end">、</span>power<span class="mojikumi-line-end">，</span>邀请 client 进入 Bluetooth network<span class="mojikumi-line-end">，</span>通过 polling 来控制 client 何时通信<span class="mojikumi-line-end">。</span>network 中还可以有最多 255 个 parked device<span class="mojikumi-line-end">，</span>会长期处于 sleep mode<span class="mojikumi-line-end">，</span>周期性地接收 beacon message<span class="mojikumi-line-end">，</span>只有切换为 active 才能进行通信<span class="mojikumi-line-end">。</span></p>
<p>Bluetooth network 的建立过程为<span class="mojikumi-line-end">：</span></p>
<ol>
<li>neighbor discovery:
<ol>
<li>master 广播 inquiry message<span class="mojikumi-line-end">，</span>在 32 个不同的 frequency 发送至多 128 遍<span class="mojikumi-line-end">，</span>因为此时还没有协商好 frequency-hopping pattern<span class="mojikumi-line-end">。</span></li>
<li>client 收到 inquiry message 后<span class="mojikumi-line-end">，</span>随机等待 0~300ms 来避免 collision<span class="mojikumi-line-end">，</span>然后发送 response<span class="mojikumi-line-end">，</span>包含 client 的 device ID<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
<li>Bluetooth paging:
<ol>
<li>master 向特定的 client 发送 paging invitation<span class="mojikumi-line-end">，</span>依然是在 32 个不同的 frequency<span class="mojikumi-line-end">。</span></li>
<li>client 收到 paging invitation 后返回 acknowledgment<span class="mojikumi-line-end">。</span></li>
<li>master 向 client 发送 frequency-hopping pattern<span class="mojikumi-line-end">、</span>clock synchronization information 以及 active member address<span class="mojikumi-line-end">。</span></li>
<li>使用 frequency-hopping pattern 来 poll client<span class="mojikumi-line-end">，</span>以确认 client 连上了<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
</ol>
<h2 id="mobility-management-principles" class="heading"><a href="#mobility-management-principles" class="heading-anchor" aria-label="章节： Mobility Management: Principles" tabindex="-1"></a><span>Mobility Management: Principles</span></h2>
<a id="7-4-cellular-networks-4g-and-5g" name="7-4-cellular-networks-4g-and-5g" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-green-2 dark:bg-green-9 b-green-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-lightbulb-outline text-green" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Hint: </span><span data-v-a2ab257f>7.4 Cellular Networks: 4G and 5G</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>7.4 这一节<span class="mojikumi-line-end">，</span>感觉可以直接跳过<span class="mojikumi-line-end">，</span>或者简单扫一眼<span class="mojikumi-line-end">。</span></p><ul>
<li>7.4.1<span class="mojikumi-line-end">：</span>没看 7.5<span class="mojikumi-line-end">、</span>7.6 的话感觉会完全不知道它在说什么<span class="mojikumi-line-end">，</span>看了 7.6 之后也不太需要回过头来看这里了<span class="mojikumi-line-end">。</span></li>
<li>7.4.2~7.4.5<span class="mojikumi-line-end">：</span>非常简略<span class="mojikumi-line-end">，</span>没什么东西<span class="mojikumi-line-end">。</span></li>
<li>7.4.6<span class="mojikumi-line-end">：</span>5G 的科普<span class="mojikumi-line-end">，</span>除了大家耳熟能详的以及过于简略的<span class="mojikumi-line-end">，</span>感觉就一条<span class="mojikumi-line-end">：</span>5G 为了提升 transmission rate<span class="mojikumi-line-end">，</span>base station 需要建得更密集<span class="mojikumi-line-end">。</span></li>
</ul><p>说到底<span class="mojikumi-line-end">，</span>这样编排说是为了将 <span class="mojikumi">“</span>wireless<span class="mojikumi">”</span> 和 <span class="mojikumi">“</span>mobility<span class="mojikumi">”</span> 这两方面的问题分开讨论<span class="mojikumi-line-end">。</span>但是<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">“</span>wireless<span class="mojikumi">”</span> 的部分在 802.11 已经讲得差不多了<span class="mojikumi-line-end">，</span>细节上会有差异但书上也没有细讲<span class="mojikumi-line-end">。</span>其实讲 cellular network 主要就是要讲它的 mobility<span class="mojikumi-line-end">，</span>所以 7.5<span class="mojikumi-line-end">、</span>7.6 就够了<span class="mojikumi-line-end">。</span></p></div></div></aside>
<p>mobility 指的是 mobile device 到网络的接入点发生变化<span class="mojikumi-line-end">，</span>而从 network layer 的角度来看<span class="mojikumi-line-end">，</span>只有 access network 发生了变化且需要保持连接<span class="mojikumi-line-start">（</span>例如 TCP connection<span class="mojikumi-line-end">）</span>不中断<span class="mojikumi-line-end">，</span>才会带来 mobility issue<span class="mojikumi-line-end">。</span>如果设备在每个 session 只连到同一个接入点<span class="mojikumi-line-end">，</span>则不需要特殊处理<span class="mojikumi-line-end">。</span></p>
<p>在 cellular network 中<span class="mojikumi-line-end">，</span>有两方面的 mobility issue:</p>
<ul>
<li>handover: cellular network 中有很多 base station<span class="mojikumi-line-end">，</span>每个 base station 覆盖一个 cell 提供服务<span class="mojikumi-line-end">。</span>从一个 base station 移动到另一个 base station 时<span class="mojikumi-line-end">，</span>需要进行 handover 来改变 mobile device 连接到的 base station<span class="mojikumi-line-end">。</span></li>
<li>roaming on visited networks: 每个 cellular subscriber 会有一个 <i>home network</i><span class="mojikumi-line-end">，</span>提供了 subscriber 信息的集中管理<span class="mojikumi-line-end">。</span>home network 提供服务的范围是有限的<span class="mojikumi-line-end">，</span>如果 mobile device 移动到了 home network 之外<span class="mojikumi-line-end">，</span>可能就需要连接到由其他 cellular provider 提供的 <i>visited network</i><span class="mojikumi-line-end">，</span>此时需要特别的机制来处理 routing<span class="mojikumi-line-end">。</span></li>
</ul>
<p>mobile device 的接入点随时可能发生变化<span class="mojikumi-line-end">，</span>而 home network 会跟踪 device 当前接入的 visited network<span class="mojikumi-line-end">，</span>所以外界可以通过 home network 来找到 mobile device 当前的位置从而进行通信<span class="mojikumi-line-end">。</span></p>
<p>具体的 routing 有两种方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>indirect: mobile device 有一个固定的 IP<span class="mojikumi-line-end">，</span>外界向这个 IP 发送消息会发到 home network 的 gateway<span class="mojikumi-line-end">，</span>而 home network 与 visited network 的 gateway 之间建立了 tunnel<span class="mojikumi-line-end">，</span>最后由 visited network 的 gateway 与 mobile device 通信<span class="mojikumi-line-end">。</span>也就是说<span class="mojikumi-line-end">，</span>外界与 mobile device 通信需要经过 home network 中转<span class="mojikumi-line-end">。</span></li>
<li>direct: 向 mobile device 发送消息时<span class="mojikumi-line-end">，</span>一开始先查询 mobile device 所在的 visited network<span class="mojikumi-line-end">，</span>后续则直接与 visited network 通信<span class="mojikumi-line-end">。</span></li>
</ul>
<p>indirect routing 的缺点在于 <i>triangle routing problem</i><span class="mojikumi-line-end">，</span>即通过 home network 中转可能带来很大的浪费<span class="mojikumi-line-end">。</span>direct routing 的问题在于<span class="mojikumi-line-end">，</span>需要特殊的机制来完成一开始的 visited network 查询以及后续 visited network 变更时的通知<span class="mojikumi-line-end">，</span>也就是说需要通信另一方的配合<span class="mojikumi-line-end">。</span></p>
<h2 id="mobility-management-in-4g5g-networks" class="heading"><a href="#mobility-management-in-4g5g-networks" class="heading-anchor" aria-label="章节： Mobility Management in 4G/5G Networks" tabindex="-1"></a><span>Mobility Management in 4G/5G Networks</span></h2>
<h3 id="attach-to-visited-network" class="heading"><a href="#attach-to-visited-network" class="heading-anchor" aria-label="章节： Attach to Visited Network" tabindex="-1"></a><span>Attach to Visited Network</span></h3>
<p>连接到 base station 时<span class="mojikumi-line-end">，</span>mobile device 会提供自己的 IMSI (<i>international mobile subscriber identity</i>)<span class="mojikumi-line-end">。</span>visited network 的 MME (<i>mobility management entity</i>) 会从 local cache 或 home network 的 HSS (<i>home subscriber server</i>) 获取到 mobile device 的 authentication<span class="mojikumi-line-end">、</span>encryption<span class="mojikumi-line-end">、</span>quality of service 等信息<span class="mojikumi-line-end">，</span>并通知 home network 的 HSS<span class="mojikumi-line-end">，</span>mobile device 现在位于这个 visited network<span class="mojikumi-line-end">。</span></p>
<p>然后<span class="mojikumi-line-end">，</span>会建立两个 tunnel<span class="mojikumi-line-end">，</span>从 mobile device 到 visited network 的 <i>serving gateway</i><span class="mojikumi-line-end">，</span>再从 serving gateway 到 home network 的 PDN (<i>packet data network</i>) gateway<span class="mojikumi-line-end">。</span>这两个 tunnel 使用 <i>GPRS tunneling protocol</i> (GTP)<span class="mojikumi-line-end">，</span>原理类似于 <a href="/post/2023/06/cnatda-4#ipv6">IPv6 tunneling</a><span class="mojikumi-line-end">。</span></p>
<a id="local-breakout" name="local-breakout" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>local breakout</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>书上前后提到两次 local breakout<span class="mojikumi-line-end">，</span>给我整懵了<span class="mojikumi-line-end">，</span>它到底是 direct 还是 indirect<span class="mojikumi-line-start">（</span><span class="mojikumi-line-end">；</span>好像也不重要<span class="mojikumi-line-end">，</span>当它不存在就好<span class="mojikumi-line-start">（</span></p></div></div></aside>
<h3 id="handover-management" class="heading"><a href="#handover-management" class="heading-anchor" aria-label="章节： Handover Management" tabindex="-1"></a><span>Handover Management</span></h3>
<p>handover 是 mobile device 从一个 base station 转移到邻近的另一个 base station 的过程<span class="mojikumi-line-end">。</span>这可能是从信号差的 base station 转到信号好的<span class="mojikumi-line-end">，</span>或者是从拥挤的转到畅通的<span class="mojikumi-line-end">。</span>mobile device 会周期性地向当前连接到的 base station (称作 <i>source</i> base station) 报告它接收到的各个 base station 的信号强度等信息<span class="mojikumi-line-end">，</span>而 source base station 可以根据它掌握的信息来做出 handover 的决定<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>在同一个 network 中<span class="mojikumi-line-end">）</span>handover 的过程如下<span class="mojikumi-line-end">：</span></p>
<ol>
<li>source base station 选择一个 <i>target</i> base station<span class="mojikumi-line-end">，</span>发送 handover request<span class="mojikumi-line-end">。</span></li>
<li>如果 target base station 同意<span class="mojikumi-line-end">，</span>会提前分配好连接所需的资源<span class="mojikumi-line-start">（</span>从而让 handover 能够尽快完成<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>然后发送 handover request acknowledge<span class="mojikumi-line-end">，</span>包含连接所需的各项信息<span class="mojikumi-line-end">。</span></li>
<li>source base station 告诉 mobile device 连接到 target base station 所需的信息<span class="mojikumi-line-end">。</span>此时在 mobile device 看来 handover 已经结束了<span class="mojikumi-line-end">，</span>可以和 target base station 进行通信<span class="mojikumi-line-end">。</span></li>
<li>source base station 停止向 mobile device 转发<span class="mojikumi-line-end">，</span>而是转发给 target base station<span class="mojikumi-line-end">。</span></li>
<li>target base station 告诉 MME 自己是这个 mobile device 新连接到的 base station<span class="mojikumi-line-end">，</span>MME 会更新 serving gateway 到 base station 的 tunnel 的 end point<span class="mojikumi-line-end">。</span></li>
<li>target base station 告诉 source base station<span class="mojikumi-line-end">，</span>新的 tunnel 已经配置好了<span class="mojikumi-line-end">，</span>source base station 可以释放为这个 mobile device 提供的资源了<span class="mojikumi-line-end">。</span></li>
<li>target base station 向 mobile device 发送之前由 source base station 转发来的 datagram<span class="mojikumi-line-end">，</span>之后就可以正常通信了<span class="mojikumi-line-end">。</span></li>
</ol>
<h2 id="wireless-and-mobility-impact-on-higher-layer-protocols" class="heading"><a href="#wireless-and-mobility-impact-on-higher-layer-protocols" class="heading-anchor" aria-label="章节： Wireless and Mobility: Impact on Higher-Layer Protocols" tabindex="-1"></a><span>Wireless and Mobility: Impact on Higher-Layer Protocols</span></h2>
<h3 id="impact-on-tcp" class="heading"><a href="#impact-on-tcp" class="heading-anchor" aria-label="章节： Impact on TCP" tabindex="-1"></a><span>Impact on TCP</span></h3>
<p>TCP 以 retransmission 作为 congestion 的标志进行 congestion control<span class="mojikumi-line-end">，</span>但在 wireless network 中<span class="mojikumi-line-end">，</span>bit error 更加常见<span class="mojikumi-line-end">，</span>而 handover 时也会带来 delay 或丢包<span class="mojikumi-line-end">，</span>所以 retransmission 不一定意味着 network congestion<span class="mojikumi-line-end">，</span>如果在 wireless network 中沿用一般的 TCP congestion control 可能会有性能问题<span class="mojikumi-line-end">。</span></p>
<p>目前的解决途径有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>local recovery<span class="mojikumi-line-end">：</span>在 link layer 提供 reliable data transfer<span class="mojikumi-line-end">，</span>减少 bit error 的影响<span class="mojikumi-line-end">。</span></li>
<li>split-connection<span class="mojikumi-line-end">：</span>在 sender 到 base station<span class="mojikumi-line-end">、</span>base station 到 receiver 分别建立连接<span class="mojikumi-line-end">。</span>base station 到 mobile host 的连接可以是标准的 TCP 连接<span class="mojikumi-line-end">，</span>也可以是其他连接<span class="mojikumi-line-end">。</span></li>
<li>让通信双方意识到 wireless link 的存在<span class="mojikumi-line-end">，</span>并区分出 retransmission 是否由 congestion 引起<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="impact-on-applications" class="heading"><a href="#impact-on-applications" class="heading-anchor" aria-label="章节： Impact on Applications" tabindex="-1"></a><span>Impact on Applications</span></h3>
<ul>
<li>wireless network 的 bandwidth 通常较小<span class="mojikumi-line-end">，</span>所以为 mobile device 提供服务时更需要减少传输的数据量<span class="mojikumi-line-end">。</span></li>
<li>mobility 使得 location-aware / context-aware application 成为可能<span class="mojikumi-line-end">。</span></li>
</ul>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig-7.13">
<p>p554, Figure 7.13: The 802.11 frame <a href="#user-content-fnref-fig-7.13" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第八章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/07/cnatda-8</link>
            <guid>https://ouuan.moe/post/2023/07/cnatda-8</guid>
            <pubDate>Tue, 18 Jul 2023 14:32:44 GMT</pubDate>
            <description><![CDATA[<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第八章 <span class="mojikumi">“</span>Security in Computer Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第八章 <span class="mojikumi">“</span>Security in Computer Networks<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="what-is-network-security" class="heading"><a href="#what-is-network-security" class="heading-anchor" aria-label="章节： What Is Network Security?" tabindex="-1"></a><span>What Is Network Security?</span></h2>
<p><i>secure communication</i> 有下列性质<span class="mojikumi-line-end">：</span></p>
<ul>
<li>confidentiality: 由于通信可以被拦截<span class="mojikumi-line-end">，</span>保密意味着需要以某种方式加密</li>
<li>message integrity: 保证消息未被修改</li>
<li>end-point authentication: 能够确认对方的身份</li>
<li>operational security: 保护 organization network 不被攻击</li>
</ul>
<p>intruder 可以对 message 进行 eavesdropping<span class="mojikumi-line-end">、</span>modification<span class="mojikumi-line-end">、</span>insertion<span class="mojikumi-line-end">、</span>deletion<span class="mojikumi-line-end">，</span>进而实现各种攻击<span class="mojikumi-line-end">。</span></p>
<p>在网络中<span class="mojikumi-line-end">，</span>需要进行 secure communication 的双方可能是两个人类用户<span class="mojikumi-line-end">、</span>可能是 client 和 server<span class="mojikumi-line-end">、</span>可能是两个 router……</p>
<p>security functionality 可以在网络的各个 layer 提供<span class="mojikumi-line-end">。</span>虽然底层的 security 看起来覆盖了高层的 security<span class="mojikumi-line-end">，</span>但并非完全如此<span class="mojikumi-line-end">，</span>例如 IP-layer security 不能区分 IP address 相同的多个用户<span class="mojikumi-line-end">。</span>并且<span class="mojikumi-line-end">，</span>底层协议的更新<span class="mojikumi-line-end">、</span>普及相对更慢<span class="mojikumi-line-end">，</span>在上层采取措施可以更快生效<span class="mojikumi-line-end">。</span></p>
<h2 id="principles-of-cryptography" class="heading"><a href="#principles-of-cryptography" class="heading-anchor" aria-label="章节： Principles of Cryptography" tabindex="-1"></a><span>Principles of Cryptography</span></h2>
<p>plaintext (cleartext) 经 encryption algorithm 得到 ciphertext<span class="mojikumi-line-end">，</span>由 decryption algorithm 回到 plaintext<span class="mojikumi-line-end">。</span></p>
<p>encryption algorithm 一般是公开的<span class="mojikumi-line-end">，</span>为了达到保密的效果<span class="mojikumi-line-end">，</span>还需要使用 key<span class="mojikumi-line-end">。</span>设 plaintext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">，</span>sender 使用 key <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">K_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 进行 encrypt 得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K_A(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">，</span>receiver 使用 key <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 进行 decrypt 得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub><mo stretchy="false">(</mo><msub><mi>K</mi><mi>A</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">K_B(K_A(m)) = m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>在 symmetric key system 中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub><mo>=</mo><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_A = K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>是保密的<span class="mojikumi-line-end">；</span>在 public key system 中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">K_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 是公开的<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">K_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 是保密的<span class="mojikumi-line-end">。</span></p>
<h3 id="symmetric-key-cryptography" class="heading"><a href="#symmetric-key-cryptography" class="heading-anchor" aria-label="章节： Symmetric Key Cryptography" tabindex="-1"></a><span>Symmetric Key Cryptography</span></h3>
<p>在现代密码所使用的 block cipher 中<span class="mojikumi-line-end">，</span>plaintext 被划分为若干个 block<span class="mojikumi-line-end">，</span>例如在 AES 中每 128 bit 是一个 block<span class="mojikumi-line-end">，</span>cipher 会构建一个 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>128</mn></msup><mo>→</mo><msup><mn>2</mn><mn>128</mn></msup></mrow><annotation encoding="application/x-tex">2^{128} \to 2^{128}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">128</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">128</span></span></span></span></span></span></span></span></span></span></span></span></span> 的 plaintext 到 ciphertext 的一一对应<span class="mojikumi-line-end">，</span>而 key 用来生成这个对应关系<span class="mojikumi-line-end">，</span>AES 的 key length 可以是 128/192/256 bit<span class="mojikumi-line-end">。</span>太小的 block size / key length 会导致安全性不够<span class="mojikumi-line-end">；</span>将整个对应关系存下来 key 会过长<span class="mojikumi-line-end">，</span>所以只能用没那么长的 key 来生成对应关系<span class="mojikumi-line-end">；</span>太大的 block size / key length 可能会影响性能<span class="mojikumi-line-end">。</span></p>
<p>如果 plaintext 中有多个相同的 block<span class="mojikumi-line-end">，</span>它们对应的 ciphertext 也相同<span class="mojikumi-line-end">，</span>就会暴露出一定的信息<span class="mojikumi-line-end">。</span>为了避免这样的风险<span class="mojikumi-line-end">，</span>可以给每个 block 异或上一个随机数再加密<span class="mojikumi-line-end">。</span></p>
<p>如果真的每个 block 都独立地生成一个随机数<span class="mojikumi-line-end">，</span>则传输时需要附上这一堆随机数<span class="mojikumi-line-end">，</span>整个 message 的长度会翻倍<span class="mojikumi-line-end">。</span>所以实际上并不会这样做<span class="mojikumi-line-end">，</span>而是会使用称作 cipher block chaining (CBC) 的技术<span class="mojikumi-line-end">：</span>每条 message 只生成一个随机数<span class="mojikumi-line-end">，</span>称作 initialization vector (IV)<span class="mojikumi-line-end">，</span>记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">c_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>而 plaintext 的第一块记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">m_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>对 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_{i-1} \oplus m_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 加密得到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>即每个 block 异或的是上一个 block 的加密结果<span class="mojikumi-line-end">，</span>这样传输时的 overhead 就只有一个 block size 的 IV 了<span class="mojikumi-line-end">。</span></p>
<h3 id="public-key-encryption" class="heading"><a href="#public-key-encryption" class="heading-anchor" aria-label="章节： Public Key Encryption" tabindex="-1"></a><span>Public Key Encryption</span></h3>
<p>symmetric key cryptography 需要双方以某种方式事先做到共享 key<span class="mojikumi-line-end">，</span>而这本身就需要 secure communication<span class="mojikumi-line-end">。</span>以前这可以通过线下之类的方式进行<span class="mojikumi-line-end">，</span>而在网络中则需要另外的方式<span class="mojikumi-line-end">。</span></p>
<p>在 public key encryption 中<span class="mojikumi-line-end">，</span>接收方有一对 key<span class="mojikumi-line-end">，</span>public key 用来加密<span class="mojikumi-line-end">，</span>private key 用来解密<span class="mojikumi-line-end">。</span>public key 是公开的<span class="mojikumi-line-end">，</span>从而不需要事先依赖于 secure communication 进行 key exchange<span class="mojikumi-line-end">。</span></p>
<p>public key encryption 带来身份认证的问题<span class="mojikumi-line-end">：</span>在 symmetric key cryptography 中<span class="mojikumi-line-end">，</span>知道 key 隐含了身份<span class="mojikumi-line-end">，</span>但知道 public key 则不代表身份<span class="mojikumi-line-end">，</span>所以需要额外的机制来进行认证<span class="mojikumi-line-end">。</span></p>
<p>RSA 是目前最流行的 public key encryption algorithm:</p>
<ol>
<li>选两个大质数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="mojikumi-line-start">（</span>一般要达到 1024~4096 bit 长<span class="mojikumi-line-end">）</span></li>
<li>令 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">n = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z = (p-1)(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></li>
<li>选一个比 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 小<span class="mojikumi-line-end">、</span>和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span> 互质的数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span></li>
<li>算出 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span> 的乘法逆元 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>z</mi></mrow><annotation encoding="application/x-tex">d = e^{-1} \bmod z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></li>
<li>public key 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">，</span>private key 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span></span></li>
<li>encryption: 设 plaintext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span> (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>&#x3C;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m &#x3C; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3C;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span>)<span class="mojikumi-line-end">，</span>则 ciphertext 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c = m^e \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></li>
<li>decryption: <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m = c^d \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></li>
</ol>
<p>RSA 的计算比 AES 慢<span class="mojikumi-line-end">，</span>为了性能<span class="mojikumi-line-end">，</span>通常会结合 symmetric key cryptography 一起使用<span class="mojikumi-line-end">：</span>每次生成一个用于 symmetric key cipher 的 session key<span class="mojikumi-line-end">，</span>通过 public key encryption 来进行 key exchange<span class="mojikumi-line-end">，</span>实际的通信则使用 symmetric key cipher<span class="mojikumi-line-end">。</span></p>
<p>RSA 的安全性依赖于大数分解的困难性<span class="mojikumi-line-end">，</span>这受到量子计算的挑战<span class="mojikumi-line-end">。</span></p>
<h2 id="message-integrity-and-digital-signatures" class="heading"><a href="#message-integrity-and-digital-signatures" class="heading-anchor" aria-label="章节： Message Integrity and Digital Signatures" tabindex="-1"></a><span>Message Integrity and Digital Signatures</span></h2>
<p>message integrity 即 sender 身份真实<span class="mojikumi-line-end">，</span>message 未遭篡改<span class="mojikumi-line-end">。</span></p>
<p>cryptographic hash function 在一般的 hash 的基础上要求难以构造 collision<span class="mojikumi-line-end">，</span>从而可以用来验证消息未被篡改<span class="mojikumi-line-end">。</span></p>
<p>可以用 message authentication code (MAC) 来验证 message integrity<span class="mojikumi-line-end">：</span>双方共享保密的 authentication key<span class="mojikumi-line-end">，</span>设 message 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span><span class="mojikumi-line-end">，</span>cryptographic hash function 是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></span><span class="mojikumi-line-end">，</span>最终传输的是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(m, H(m + s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mclose">))</span></span></span></span></span><span class="mojikumi-line-start">（</span>具体实现可能有所不同<span class="mojikumi-line-end">，</span>例如 HMAC 会 hash 两次<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>可以使用 public key encryption 或者其他方式来 exchange authentication key<span class="mojikumi-line-end">。</span>MAC 本身可以不涉及 encryption<span class="mojikumi-line-end">，</span>如果只需保证 message integrity 而不在意 confidentiality 则无需付出 encryption 的性能代价<span class="mojikumi-line-end">。</span></p>
<p>digital signature 相当于 MAC 的 <span class="mojikumi">“</span>public key 版本<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>可以用来验证 sender 的身份<span class="mojikumi-line-end">，</span>而验证者只需知道 public key<span class="mojikumi-line-end">，</span>可以保持 private key 的私密<span class="mojikumi-line-end">。</span>RSA 的 encryption 和 decryption 其实是可交换的<span class="mojikumi-line-end">，</span>即先 public key 再 private key 或者先 private key 再 public key 都可以得到原来的 plaintext<span class="mojikumi-line-end">。</span>digital signature 即使用 private key 进行<span class="mojikumi-line-start">“</span>加密<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>而使用 public key 进行<span class="mojikumi-line-start">“</span>解密<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>RSA 计算慢<span class="mojikumi-line-end">，</span>所以可以对 cryptographic hash 而非 message 本身计算 digital signature<span class="mojikumi-line-end">。</span></p>
<p>虽然 MAC 和 digital signature 功能有一定的类似<span class="mojikumi-line-end">，</span>但 MAC 可以完全不涉及 encryption<span class="mojikumi-line-end">，</span>digital signature 则依赖于 public key infrastructure (PKI)<span class="mojikumi-line-end">。</span></p>
<p>digital signature 验证的是 message 和 public key 的对应关系<span class="mojikumi-line-end">，</span>还需要额外的措施来保证 public key 和 entity (sender) 的对应关系<span class="mojikumi-line-end">。</span>certification authority (CA) 提供了这一服务<span class="mojikumi-line-end">，</span>通过某些手段认证 public key 和 entity 的对应关系<span class="mojikumi-line-end">，</span>并颁发 certificate<span class="mojikumi-line-end">，</span>certificate 包含 entity 和 public key 的相关信息<span class="mojikumi-line-start">（</span>以及有效期<span class="mojikumi-line-end">）</span>以及使用 CA 的 public key 对这些信息创建的 digital signature<span class="mojikumi-line-end">。</span>有了 certificate<span class="mojikumi-line-end">，</span>对 public key 和 entity 之间关联的信任取决于对 CA 的信任<span class="mojikumi-line-end">。</span></p>
<h2 id="end-point-authentication" class="heading"><a href="#end-point-authentication" class="heading-anchor" aria-label="章节： End-Point Authentication" tabindex="-1"></a><span>End-Point Authentication</span></h2>
<p>书上说了很多<span class="mojikumi-line-end">，</span>但感觉本质上就是<span class="mojikumi-line-end">，</span>Alice 要向 Bob 证明自己的身份<span class="mojikumi-line-end">，</span>则 Bob 提供一个一次性的随机数 <i>nonce</i><span class="mojikumi-line-end">，</span>Alice 通过某种方式<span class="mojikumi-line-start">（</span>例如 symmetric key cryptography / MAC<span class="mojikumi-line-end">）</span>发回 nonce 并保证 message integrity<span class="mojikumi-line-end">。</span>nonce 用来防止 playback attack<span class="mojikumi-line-end">。</span></p>
<h2 id="securing-e-mail" class="heading"><a href="#securing-e-mail" class="heading-anchor" aria-label="章节： Securing E-Mail" tabindex="-1"></a><span>Securing E-Mail</span></h2>
<h3 id="secure-e-mail" class="heading"><a href="#secure-e-mail" class="heading-anchor" aria-label="章节： Secure E-Mail" tabindex="-1"></a><span>Secure E-Mail</span></h3>
<p>就是上面这些东西的一个实例<span class="mojikumi-line-end">，</span>没啥新东西<span class="mojikumi-line-end">：</span>结合 digital signature 和使用 session key 的 encryption 即可<span class="mojikumi-line-end">；</span>需要双方互相知道对方的 public key<span class="mojikumi-line-start">（</span>分别用于 digital signature 的验证和 session key 的传输<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>public key 可以由 CA 认证<span class="mojikumi-line-end">。</span></p>
<a id="spf、dkim、dmarc" name="spf、dkim、dmarc" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-purple-2 dark:bg-purple-9 b-purple-5" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-help-circle-outline text-purple" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Question: </span><span data-v-a2ab257f>SPF、DKIM、DMARC</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>为啥不讲 SPF<span class="mojikumi-line-end">、</span>DKIM<span class="mojikumi-line-end">、</span>DMARC 🤔</p></div></div></aside>
<h3 id="pgp" class="heading"><a href="#pgp" class="heading-anchor" aria-label="章节： PGP" tabindex="-1"></a><span>PGP</span></h3>
<p>PGP 提供了 sign<span class="mojikumi-line-end">、</span>encrypt<span class="mojikumi-line-end">、</span>sign and encrypt 等功能<span class="mojikumi-line-end">，</span>public key 通过用户之间的 web of trust 而非 CA 来 certify<span class="mojikumi-line-end">，</span>可以线下举办 key-signing party 来互相 sign<sup><a href="#user-content-fn-sign" id="user-content-fnref-sign" data-footnote-ref aria-describedby="footnote-label">1</a></sup><span class="mojikumi-line-end">。</span></p>
<h2 id="securing-tcp-connections-tls" class="heading"><a href="#securing-tcp-connections-tls" class="heading-anchor" aria-label="章节： Securing TCP Connections: TLS" tabindex="-1"></a><span>Securing TCP Connections: TLS</span></h2>
<p>TLS (Transport Layer Security) 为 TCP 提供了 security services<span class="mojikumi-line-end">，</span>是 SSL (Secure Sockets Layer) 标准化后的升级版<span class="mojikumi-line-start">（</span>只不过现在人们有时仍会把 TLS 误称为 SSL<span class="mojikumi-line-end">，</span>OpenSSL 的名字也有一定的误导性<sup><a href="#user-content-fn-opentls" id="user-content-fnref-opentls" data-footnote-ref aria-describedby="footnote-label">2</a></sup><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>TLS 通常用于 HTTP<span class="mojikumi-line-end">，</span>表现为网址开头是 <code>https://</code><span class="mojikumi-line-end">，</span>但它实际上可以用于任何基于 TCP 的 application<span class="mojikumi-line-end">。</span>TLS 位于 application layer<span class="mojikumi-line-end">，</span>但它提供了类似 TCP 的 API<span class="mojikumi-line-end">，</span>对于 application developer 来说就像是 transport layer 的一部分<span class="mojikumi-line-end">。</span></p>
<h3 id="tls-handshake" class="heading"><a href="#tls-handshake" class="heading-anchor" aria-label="章节： TLS Handshake" tabindex="-1"></a><span>TLS Handshake</span></h3>
<ol>
<li>TCP 3-way handshake</li>
<li>client 发送 TLS version<span class="mojikumi-line-end">、</span>supported cipher suites (symmetric algorithm<span class="mojikumi-line-end">、</span>public key algorithm<span class="mojikumi-line-end">、</span>HMAC algorithm)<span class="mojikumi-line-end">、</span>client nonce<span class="mojikumi-line-end">。</span></li>
<li>server 发送 selected cipher suite<span class="mojikumi-line-end">、</span>certificate<span class="mojikumi-line-end">、</span>server nonce<span class="mojikumi-line-end">。</span></li>
<li>client 验证 certificate<span class="mojikumi-line-end">，</span>得到 server 的 public key<span class="mojikumi-line-end">；</span>随机生成 pre-master secret (PMS)<span class="mojikumi-line-end">，</span>发送经 server 的 public key 加密的 PMS<span class="mojikumi-line-end">。</span></li>
<li>由 PMS<span class="mojikumi-line-end">、</span>client nonce<span class="mojikumi-line-end">、</span>server nonce 可以计算得到 master key<span class="mojikumi-line-end">，</span>由 master key 可以得到一系列用于后续加密的 key<span class="mojikumi-line-end">：</span>client 和 server 各有用于 symmetric key encryption 的 key 和用于 HMAC 的 key<span class="mojikumi-line-end">，</span>如果使用 CBC 则还有双方的 IV<span class="mojikumi-line-end">。</span></li>
<li>client 发送上面这些 handshake message 的 HMAC<span class="mojikumi-line-start">（</span>可以和 encrypted PMS 一同发送<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>server 发送上面这些 handshake message 的 HMAC<span class="mojikumi-line-end">。</span></li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>一开始的 nonce 用来防止 replay attack<span class="mojikumi-line-end">，</span>并且 server nonce 参与 master key 的计算<span class="mojikumi-line-end">，</span>可以防止 key 完全由 client 决定<span class="mojikumi-line-end">。</span>而最后的 HMAC 用来防止篡改 handshake message<span class="mojikumi-line-end">，</span>例如将 supported cipher suites 改为只有 weak algorithm<span class="mojikumi-line-end">。</span></p>
<p>TLS 1.3 对 handshake 过程进行了简化<span class="mojikumi-line-end">。</span></p>
<h3 id="tls-data-transfer" class="heading"><a href="#tls-data-transfer" class="heading-anchor" aria-label="章节： TLS Data Transfer" tabindex="-1"></a><span>TLS Data Transfer</span></h3>
<p>在 TLS 中<span class="mojikumi-line-end">，</span>TCP byte stream 被切分为 records<span class="mojikumi-line-end">，</span>为每个 record 计算 HMAC<span class="mojikumi-line-end">，</span>并将 record + HMAC 进行 encrypt<span class="mojikumi-line-end">。</span>这只保证了每个 record 的 integrity<span class="mojikumi-line-end">，</span>为了保证整个 byte stream 的 integrity<span class="mojikumi-line-end">，</span>每个 record 还有一个 sequence number<span class="mojikumi-line-end">，</span>参与 HMAC 的计算<span class="mojikumi-line-end">，</span>来防止攻击者对 record 进行 reorder / replay / remove<span class="mojikumi-line-end">。</span></p>
<p>TLS record 包含<span class="mojikumi-line-end">：</span></p>
<ol>
<li>type: handshake / data</li>
<li>TLS version</li>
<li>length: 用来标记 record 的结尾</li>
<li>data + HMAC, encrypted</li>
</ol>
<h3 id="tls-connection-closure" class="heading"><a href="#tls-connection-closure" class="heading-anchor" aria-label="章节： TLS Connection Closure" tabindex="-1"></a><span>TLS Connection Closure</span></h3>
<p>为了防止 truncation attack<span class="mojikumi-line-end">，</span>即伪造 TCP FIN segment<span class="mojikumi-line-end">，</span>在 TLS 中需要先发送保证了 integrity 的 closure TLS record 再发送 TCP FIN segment 来结束连接<span class="mojikumi-line-end">。</span></p>
<h2 id="network-layer-security-ipsec-and-virtual-private-networks" class="heading"><a href="#network-layer-security-ipsec-and-virtual-private-networks" class="heading-anchor" aria-label="章节： Network-Layer Security: IPsec and Virtual Private Networks" tabindex="-1"></a><span>Network-Layer Security: IPsec and Virtual Private Networks</span></h2>
<h3 id="ipsec-and-virtual-private-networks-vpns" class="heading"><a href="#ipsec-and-virtual-private-networks-vpns" class="heading-anchor" aria-label="章节： IPsec and Virtual Private Networks (VPNs)" tabindex="-1"></a><span>IPsec and Virtual Private Networks (VPNs)</span></h3>
<p>如果一个 institution 位于多个地理位置而想保证 institution 内通信的私密<span class="mojikumi-line-end">，</span>一种选择是建立一个 private network<span class="mojikumi-line-end">，</span>在物理上与 Internet 进行隔离<span class="mojikumi-line-end">，</span>但这样需要自己搭建整套网络基础设施<span class="mojikumi-line-end">，</span>开销非常大<span class="mojikumi-line-end">。</span></p>
<p>另一种选择是使用 virtual private network<span class="mojikumi-line-end">。</span>在 VPN 内<span class="mojikumi-line-end">，</span>通过 Internet 传输数据时会进行加密<span class="mojikumi-line-end">，</span>具体来说是在内网的 gateway router 或直接连到公网的 host 处<span class="mojikumi-line-start">（</span>例如学校连到 Internet 的 gateway router / 回家了的学生的设备上<span class="mojikumi-line-end">；</span>为了叙述方便<span class="mojikumi-line-end">，</span>下文中都假设是 gateway router 而不是 host<span class="mojikumi-line-end">）</span>在 payload 前加上 IPsec header<span class="mojikumi-line-end">。</span></p>
<h3 id="the-ah-and-esp-protocols" class="heading"><a href="#the-ah-and-esp-protocols" class="heading-anchor" aria-label="章节： The AH and ESP Protocols" tabindex="-1"></a><span>The AH and ESP Protocols</span></h3>
<p>IPsec 可以使用 Authentication Header (AH) protocol 或者 Encapsulation Security Payload (ESP) protocol<span class="mojikumi-line-end">。</span>其中 AH 只提供了 source authentication 和 data integrity<span class="mojikumi-line-end">，</span>ESP 在此基础上还提供了 confidentiality<span class="mojikumi-line-end">。</span>使用 IPsec 的场景中通常需要保证 confidentiality<span class="mojikumi-line-end">，</span>所以 ESP 用得更多<span class="mojikumi-line-end">，</span>书中只讲 ESP<span class="mojikumi-line-end">。</span></p>
<h3 id="security-associations" class="heading"><a href="#security-associations" class="heading-anchor" aria-label="章节： Security Associations" tabindex="-1"></a><span>Security Associations</span></h3>
<p>两个 entity (gateway router) 通过 IPsec 通信时需要建立称作 <i>security association</i> (SA) 的 logical connection<span class="mojikumi-line-end">。</span>SA 是单向的<span class="mojikumi-line-end">，</span>如果要互发消息则需要建立两个 SA<span class="mojikumi-line-end">。</span></p>
<p>SA 有下列 state information<span class="mojikumi-line-end">：</span></p>
<ul>
<li><i>security parameter index</i> (SPI)<span class="mojikumi-line-end">，</span>一个 32-bit identifier</li>
<li>source &#x26; destination IP address</li>
<li>encryption algorithm, encryption key</li>
<li>integrity check algorithm, authentication key</li>
</ul>
<p>一个 IPsec entity 可能同时 maintain 着很多 SA 的 state information<span class="mojikumi-line-end">，</span>存储在 security association database (SAD) 中<span class="mojikumi-line-end">。</span></p>
<h3 id="the-ipsec-datagram" class="heading"><a href="#the-ipsec-datagram" class="heading-anchor" aria-label="章节： The IPsec Datagram" tabindex="-1"></a><span>The IPsec Datagram</span></h3>
<p>IPsec 有两种 packet form<span class="mojikumi-line-end">，</span>分别用于 tunnel mode 和 transport mode<span class="mojikumi-line-end">，</span>其中 tunnel mode 更常用<span class="mojikumi-line-end">，</span>书中只讲 tunnel mode<span class="mojikumi-line-end">。</span></p>
<p>一个 IPsec datagram 的结构如下<span class="mojikumi-line-end">：</span></p>
<ul>
<li>new IP header (source / destination 是 gateway router<span class="mojikumi-line-end">，</span>protocol 是 ESP)</li>
<li><span class="mojikumi-line-start">“</span>enchilada<span class="mojikumi">”</span> (authenticated)
<ul>
<li>ESP header
<ul>
<li>SPI</li>
<li>sequence number</li>
</ul>
</li>
<li>(encrypted)
<ul>
<li>original IP header</li>
<li>original IP payload</li>
<li>ESP trailer
<ul>
<li>padding (for encryption block size requirement)</li>
<li>padding length</li>
<li>next header <span class="mojikumi">（</span><span class="mojikumi">“</span>4<span class="mojikumi">”</span> for <span class="mojikumi">“</span>IP Encapsulation within IP<span class="mojikumi">”</span> in tunnel mode<span class="mojikumi-line-end">）</span><sup><a href="#user-content-fn-esp-next-header" id="user-content-fnref-esp-next-header" data-footnote-ref aria-describedby="footnote-label">3</a></sup></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>ESP MAC <span class="mojikumi">（</span>for authentication of the <span class="mojikumi">“</span>enchilada<span class="mojikumi">”</span><span class="mojikumi-line-end">）</span></li>
</ul>
<p>gateway router 会维护一个 security policy database (SPD)<span class="mojikumi-line-end">，</span>当其接收到一个待转发的 IP datagram 时<span class="mojikumi-line-end">，</span>会查询 SPD<span class="mojikumi-line-end">，</span>根据 source IP address<span class="mojikumi-line-end">、</span>destination IP address<span class="mojikumi-line-end">、</span>protocol 来决定是否使用 IPsec 进行处理<span class="mojikumi-line-end">。</span></p>
<h3 id="ike-key-management-in-ipsec" class="heading"><a href="#ike-key-management-in-ipsec" class="heading-anchor" aria-label="章节： IKE: Key Management in IPsec" tabindex="-1"></a><span>IKE: Key Management in IPsec</span></h3>
<p>IPsec 可以手动配置 key<span class="mojikumi-line-end">，</span>但大型的 VPN 往往需要使用 Internet Key Exchange (IKE) protocol 来自动建立 SA<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>书中对 IKE 的描述太简陋了<span class="mojikumi-line-end">，</span>说了跟没说差不多<span class="mojikumi-line-end">，</span>以后再说吧<span class="mojikumi-line-start">（</span></p>
<h2 id="securing-wireless-lans-and-4g5g-cellular-networks" class="heading"><a href="#securing-wireless-lans-and-4g5g-cellular-networks" class="heading-anchor" aria-label="章节： Securing Wireless LANs and 4G/5G Cellular Networks" tabindex="-1"></a><span>Securing Wireless LANs and 4G/5G Cellular Networks</span></h2>
<p>security 在 wireless network 中更加重要<span class="mojikumi-line-end">，</span>因为 attacker 只需要将设备置于 sender 的 transmission range 内就可以窃听<span class="mojikumi-line-end">。</span></p>
<p>wireless network security 主要需要两个功能<span class="mojikumi-line-end">：</span></p>
<ul>
<li>mutual authentication: mobile device 和 access point / base station 需要互相认证对方<span class="mojikumi-line-end">。</span></li>
<li>encryption: 通信内容需要加密<span class="mojikumi-line-end">。</span>一般使用 symmetric key cryptography (AES)<span class="mojikumi-line-end">，</span>需要进行 shared symmetric key derivation<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="authentication-and-key-agreement-in-802-11-wireless-lans" class="heading"><a href="#authentication-and-key-agreement-in-802-11-wireless-lans" class="heading-anchor" aria-label="章节： Authentication and Key Agreement in 802.11 Wireless LANs" tabindex="-1"></a><span>Authentication and Key Agreement in 802.11 Wireless LANs</span></h3>
<p>802.11 的认证由 authentication server (AS) 进行<span class="mojikumi-line-end">，</span>AS 可以和 AP 一体<span class="mojikumi-line-end">，</span>也可以通过网络连接<span class="mojikumi-line-end">。</span></p>
<p>802.11 的 security specification 有 WEP<span class="mojikumi-line-end">、</span>WPA1<span class="mojikumi-line-end">、</span>WPA2<span class="mojikumi-line-end">、</span>WPA3<span class="mojikumi-line-end">，</span>其中 WEP 有严重的漏洞<span class="mojikumi-line-end">。</span></p>
<p>总体上的步骤为<span class="mojikumi-line-end">：</span></p>
<ol>
<li>在 AP 广播自己的存在时<span class="mojikumi-line-end">，</span>会附带其支持的 security mechanism<span class="mojikumi-line-end">，</span>mobile device 连接到 AP 时可以选择要使用哪个<span class="mojikumi-line-end">。</span></li>
<li>mobile device 和 AS 预先有一个 pre-shared key<span class="mojikumi-line-start">（</span>PSK<span class="mojikumi-line-end">，</span>也就是 Wi-Fi 密码<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>会根据这个 PSK 进行 mutual authentication 和 shared symmetric key derivation<span class="mojikumi-line-end">。</span></li>
<li>AS 把 shared symmetric key 告诉 AP<span class="mojikumi-line-end">。</span></li>
<li>使用 shared symmetric key 进行加密通信<span class="mojikumi-line-end">。</span></li>
</ol>
<p>WPA 的核心是一套 four-way handshake<span class="mojikumi-line-end">，</span>其中前两步完成 mutual authentication 和 shared symmetric key derivation<span class="mojikumi-line-start">（</span>后两步用于 group key derivation<span class="mojikumi-line-end">，</span>书中不涉及<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ol>
<li>AS 生成一个 AS nonce<span class="mojikumi-line-end">，</span>发给 mobile device<span class="mojikumi-line-end">。</span></li>
<li>mobile device 生成一个 mobile nonce<span class="mojikumi-line-end">，</span>根据双方的 nonce<span class="mojikumi-line-end">、</span>双方的 MAC address 以及 PSK 得到 shared symmetric key<span class="mojikumi-line-end">，</span>然后向 AS 发送 mobile nonce<span class="mojikumi-line-end">，</span>以及编码了 AS nonce 和 PSK 的 HMAC<span class="mojikumi-line-end">。</span></li>
</ol>
<p>mobile device 和 AS 的通信通过 EAP (extensible authentication protocol) 进行<span class="mojikumi-line-end">，</span>它在 mobile device 到 AP 使用 EAP over LAN<span class="mojikumi-line-end">，</span>在 AP 到 AS 使用 RADIUS 或更新的 DIAMETER 协议<span class="mojikumi-line-end">。</span></p>
<h3 id="authentication-and-key-agreement-in-4g5g-cellular-networks" class="heading"><a href="#authentication-and-key-agreement-in-4g5g-cellular-networks" class="heading-anchor" aria-label="章节： Authentication and Key Agreement in 4G/5G Cellular Networks" tabindex="-1"></a><span>Authentication and Key Agreement in 4G/5G Cellular Networks</span></h3>
<p>cellular network 使用存储在 SIM card 和 HSS 中的 PSK 进行认证<span class="mojikumi-line-end">。</span>在 4G LTE 中<span class="mojikumi-line-end">，</span>步骤如下<span class="mojikumi-line-end">：</span></p>
<ol>
<li>
<ol>
<li>mobile device 向 base station 发送 attach message<span class="mojikumi-line-end">。</span></li>
<li>MME 向 HSS 发送 IMSI 以及 visited network information<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
<li>
<ol>
<li>HSS 计算出能证明自己身份的 auth token<span class="mojikumi-line-end">，</span>以及用于证明 mobile device 身份的 expected auth response<span class="mojikumi-line-end">，</span>将它们发送给 MME<span class="mojikumi-line-end">。</span></li>
<li>MME 将 auth token 发给 mobile device<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
<li>
<ol>
<li>mobile device 根据 auth token 认证 HSS<span class="mojikumi-line-end">。</span></li>
<li>mobile device 计算出 auth response<span class="mojikumi-line-end">，</span>发送给 MME<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
<li>
<ol>
<li>MME 比较 HSS 发送的 expected auth response 和 mobile device 发送的 auth response 来认证 mobile device<span class="mojikumi-line-end">。</span></li>
<li>MME 将下一步需要用到的 key 发给 base station<span class="mojikumi-line-end">。</span></li>
</ol>
</li>
<li>base station 和 mobile device 进行 shared symmetric key derivation<span class="mojikumi-line-end">，</span>会在 control plane 和 data plane 使用不同的 key<span class="mojikumi-line-end">。</span></li>
</ol>
<p>5G 的认证有一些不同<span class="mojikumi-line-end">：</span></p>
<ul>
<li>authentication decision 从 MME 挪到了 HSS<span class="mojikumi-line-end">，</span>使得 visited network 的 middleman 作用更小<span class="mojikumi-line-end">。</span></li>
<li>新增了两种 authentication protocol<span class="mojikumi-line-end">，</span>一种和 4G 类似但使用了 EAP<span class="mojikumi-line-end">，</span>一种不需要 PSK 而适用于 IoT<span class="mojikumi-line-end">。</span></li>
<li>使用了 public key cryptography 来加密 IMSI<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="operational-security-firewalls-and-intrusion-detection-systems" class="heading"><a href="#operational-security-firewalls-and-intrusion-detection-systems" class="heading-anchor" aria-label="章节： Operational Security: Firewalls and Intrusion Detection Systems" tabindex="-1"></a><span>Operational Security: Firewalls and Intrusion Detection Systems</span></h2>
<h3 id="firewalls" class="heading"><a href="#firewalls" class="heading-anchor" aria-label="章节： Firewalls" tabindex="-1"></a><span>Firewalls</span></h3>
<p>firewall 用来控置哪些流量可以进入 internal network / host<span class="mojikumi-line-end">，</span>一般要保证所有出入的流量都经过 firewall<span class="mojikumi-line-end">，</span>并且 firewall 自身不会被攻击者控制<span class="mojikumi-line-end">。</span></p>
<h4 id="traditional-packet-filters" class="heading"><a href="#traditional-packet-filters" class="heading-anchor" aria-label="章节： Traditional Packet Filters" tabindex="-1"></a><span>Traditional Packet Filters</span></h4>
<p>通过 packet header 来控制是否允许 packet 通过<span class="mojikumi-line-end">。</span>例如根据 IP address<span class="mojikumi-line-end">、</span>protocol type<span class="mojikumi-line-end">、</span>port<span class="mojikumi-line-end">、</span>TCP flags<span class="mojikumi-line-end">、</span>ICMP message type<span class="mojikumi-line-end">、</span>router interface 等进行控制<span class="mojikumi-line-end">。</span></p>
<p>一些 packet filter 可以实现的 policy 的例子<span class="mojikumi-line-end">：</span></p>
<ul>
<li>drop outgoing 的对 port 80/443 的访问<span class="mojikumi-line-end">：</span>禁止访问外部 Web<span class="mojikumi-line-end">。</span></li>
<li>drop incoming TCP SYN segment<span class="mojikumi-line-end">：</span>禁止从外界创建 TCP connection<span class="mojikumi-line-end">。</span></li>
<li>drop 除了外界 port 是 53 的所有 UDP traffic<span class="mojikumi-line-end">：</span>禁止其他 UDP traffic<span class="mojikumi-line-end">，</span>只允许 DNS<span class="mojikumi-line-end">。</span></li>
<li>drop 发向 broadcast address 的 ICMP ping packets<span class="mojikumi-line-end">：</span>避免遭受 smurf DoS attack<span class="mojikumi-line-end">。</span></li>
<li>drop outgoing ICMP TTL expired packets<span class="mojikumi-line-end">：</span>避免被 traceroute<span class="mojikumi-line-end">。</span></li>
</ul>
<h4 id="stateful-packet-filters" class="heading"><a href="#stateful-packet-filters" class="heading-anchor" aria-label="章节： Stateful Packet Filters" tabindex="-1"></a><span>Stateful Packet Filters</span></h4>
<p>stateful packet filter 可以通过记录状态信息来实现更复杂的控制<span class="mojikumi-line-end">，</span>例如跟踪 TCP connection<span class="mojikumi-line-end">，</span>从而更加精准地只允许从内部建立的 TCP connection 而拒绝从外部建立的 TCP connection<span class="mojikumi-line-end">。</span></p>
<h4 id="application-gateway" class="heading"><a href="#application-gateway" class="heading-anchor" aria-label="章节： Application Gateway" tabindex="-1"></a><span>Application Gateway</span></h4>
<p>packet filter 只根据 header 中的信息进行控制<span class="mojikumi-line-end">，</span>而不管 application data<span class="mojikumi-line-end">。</span></p>
<p>application gateway 是一个 application-specific server<span class="mojikumi-line-end">，</span>所有 application data 都需要通过它<span class="mojikumi-line-end">。</span>一个 host 可以同时运行多个 application gateway<span class="mojikumi-line-end">。</span></p>
<p>application gateway 可以根据 application data 进行控制<span class="mojikumi-line-end">，</span>提供例如 authorization 的高级 filter 功能<span class="mojikumi-line-end">，</span>还可以提供除了 filter 外的其他功能<span class="mojikumi-line-end">，</span>例如 proxy<span class="mojikumi-line-end">。</span></p>
<h3 id="intrusion-detection-systems" class="heading"><a href="#intrusion-detection-systems" class="heading-anchor" aria-label="章节： Intrusion Detection Systems" tabindex="-1"></a><span>Intrusion Detection Systems</span></h3>
<p>和 application gateway 类似<span class="mojikumi-line-end">，</span>intrusion detection system (IDS) 不止查看 header<span class="mojikumi-line-end">，</span>还会查看 application data<span class="mojikumi-line-end">，</span>这称作 deep packet inspection<span class="mojikumi-line-end">。</span></p>
<p>与 application gateway 不同<span class="mojikumi-line-end">，</span>IDS 不是 application-specific 的<span class="mojikumi-line-end">，</span>而是会检测到各种各样的 suspicious packet / series of packets<span class="mojikumi-line-end">，</span>例如 network mapping<span class="mojikumi-line-end">、</span>port scan<span class="mojikumi-line-end">、</span>TCP stack scan<span class="mojikumi-line-end">、</span>DoS attack<span class="mojikumi-line-end">、</span>worm / virus<span class="mojikumi-line-end">、</span>OS / application vulnerability attack<span class="mojikumi-line-end">。</span>检测到时<span class="mojikumi-line-end">，</span>IDS 会向管理员发送警告<span class="mojikumi-line-end">，</span>而 intrustion prevention system (IPS) 则会 filter out 这些 packet<span class="mojikumi-line-end">。</span></p>
<p>因为 deep packet inspection 需要一定的算力<span class="mojikumi-line-end">，</span>当流量过大时<span class="mojikumi-line-end">，</span>一个 organization 往往需要多个 IDS<span class="mojikumi-line-end">，</span>分散在网络中<span class="mojikumi-line-end">，</span>而非只设置一个在整个网络的入口<span class="mojikumi-line-end">。</span></p>
<p>IDS 分为 signature-based 和 anomaly-based 两种<span class="mojikumi-line-end">。</span></p>
<p>signature 即 packet 的特征<span class="mojikumi-line-end">，</span>例如 header 的某些项以及 application data 包含某一内容<span class="mojikumi-line-end">。</span>IDS 维护了一个 signature database 用来进行匹配<span class="mojikumi-line-end">。</span>signature-based IDS 需要事先知道 attack 的特征<span class="mojikumi-line-end">，</span>所以无法防范新型 attack<span class="mojikumi-line-end">。</span>signature 的匹配容易出现 false alarm<span class="mojikumi-line-end">，</span>而且性能开销较大<span class="mojikumi-line-end">。</span></p>
<p>anomaly-based IDS 基于平时的 traffic 来检测 statistically unusual 的 traffic<span class="mojikumi-line-end">，</span>例如检测到突然增多的 ICMP packets<span class="mojikumi-line-end">。</span>anomaly-based IDS 不依赖于实现对攻击的了解<span class="mojikumi-line-end">，</span>所以有可能检测到新型的攻击<span class="mojikumi-line-end">。</span>但是区分 normal traffic 和 statistically unusual traffic 是困难的<span class="mojikumi-line-end">，</span>现在的 IDS 通常还是以 signature-based 为主<span class="mojikumi-line-end">。</span></p>
<p>Snort 是一款 open-source IDS<span class="mojikumi-line-end">，</span>有一个活跃的 community 维护着 signature database<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-sign">
<p>P.S. 我有幸在 <a href="https://tuna.moe/event/2021/welcome-and-debian/">第一次参加 tunight</a> 时获得了续老师的 signing<span class="mojikumi-line-end">，</span>当时还完全不懂这些<span class="mojikumi-line-start">（</span><s>现在也不是很懂<span class="mojikumi-line-start">（</span></s> <a href="#user-content-fnref-sign" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-opentls">
<p>See <a href="https://github.com/openssl/openssl/issues/6384">Rename OpenSSL to OpenTLS To Comply with RFC7568 · Issue #6384 · openssl/openssl</a> &#x26; <a href="https://www.openssl.org/blog/blog/2018/12/20/20years/">Celebrating 20 Years of OpenSSL - OpenSSL Blog</a> <a href="#user-content-fnref-opentls" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-esp-next-header">
<p>可以参考 <a href="http://www.tcpipguide.com/free/t_IPSecEncapsulatingSecurityPayloadESP-2.htm" class="break-all">http://www.tcpipguide.com/free/t_IPSecEncapsulatingSecurityPayloadESP-2.htm</a> <a href="#user-content-fnref-esp-next-header" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第六章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/07/cnatda-6</link>
            <guid>https://ouuan.moe/post/2023/07/cnatda-6</guid>
            <pubDate>Sat, 15 Jul 2023 09:18:30 GMT</pubDate>
            <description><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第六章 <span class="mojikumi">“</span>The Link Layer and LANs<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第六章 <span class="mojikumi">“</span>The Link Layer and LANs<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="introduction-to-the-link-layer" class="heading"><a href="#introduction-to-the-link-layer" class="heading-anchor" aria-label="章节： Introduction to the Link Layer" tabindex="-1"></a><span>Introduction to the Link Layer</span></h2>
<p>link layer 的主要功能是将 datagram 从一个 node 传输到另一个 node<span class="mojikumi-line-end">，</span>还可以提供下列 service<span class="mojikumi-line-end">：</span></p>
<ul>
<li>framing: 将 network-layer datagram 封装在 link-layer frame 中进行传输<span class="mojikumi-line-end">。</span></li>
<li>link access: 通过 medium access control (MAC) protocol 控制 frame 在 link 上如何传输<span class="mojikumi-line-end">。</span>这对于 point-to-point link 来说是简单的<span class="mojikumi-line-end">，</span>但在 broadcast link 中会遇到 multiple access problem<span class="mojikumi-line-end">，</span>需要 MAC protocol 来进行协调<span class="mojikumi-line-end">。</span></li>
<li>reliable delivery: 通过与 TCP 类似的方式<span class="mojikumi-line-start">（</span>acknowledgement<span class="mojikumi-line-end">、</span>retransmission<span class="mojikumi-line-end">）</span>来保证单个 link 上的 reliable delivery<span class="mojikumi-line-end">。</span>这在出错率较高时可以避免单个 link 的传输错误导致 end-to-end retransmission<span class="mojikumi-line-end">，</span>而在出错率较低时会造成不必要的 overhead<span class="mojikumi-line-end">，</span>所以一般是出错率较高的 wireless link 才会提供 reliable delivery<span class="mojikumi-line-end">。</span></li>
<li>error detection and correction</li>
</ul>
<p>在 host 中<span class="mojikumi-line-end">，</span>link layer 一般实现于外接的 network adapter (network interface controller, NIC) 中<span class="mojikumi-line-end">，</span>由硬件实现<span class="mojikumi-line-end">。</span>host 中还会有软件用来连接 link layer 和 network layer<span class="mojikumi-line-end">。</span></p>
<h2 id="error-detection-and-correction-techniques" class="heading"><a href="#error-detection-and-correction-techniques" class="heading-anchor" aria-label="章节： Error-Detection and -Correction Techniques" tabindex="-1"></a><span>Error-Detection and -Correction Techniques</span></h2>
<p>参见 <a href="/post/2023/01/ddpp-2#codes-for-detecting-and-correcting-errors">DDPP 第二章的相关内容</a><span class="mojikumi-line-end">。</span></p>
<h2 id="multiple-access-links-and-protocols" class="heading"><a href="#multiple-access-links-and-protocols" class="heading-anchor" aria-label="章节： Multiple Access Links and Protocols" tabindex="-1"></a><span>Multiple Access Links and Protocols</span></h2>
<p>在 broadcast link 中<span class="mojikumi-line-end">，</span>同时只能有一方发送信息<span class="mojikumi-line-end">。</span>如果多方同时发送<span class="mojikumi-line-end">，</span>则会产生 collision<span class="mojikumi-line-end">，</span>每一方发送的信息都会丢失<span class="mojikumi-line-end">。</span>为了解决 multiple access problem<span class="mojikumi-line-end">，</span>需要使用 multiple access protocol 来进行协调<span class="mojikumi-line-end">。</span></p>
<p>一个理想的 multiple access protocol 能做到<span class="mojikumi-line-end">：</span></p>
<ul>
<li>只有一方发送时<span class="mojikumi-line-end">，</span>完全利用带宽</li>
<li>多方同时发送时<span class="mojikumi-line-end">，</span>均分全部的带宽</li>
<li>decentralized<span class="mojikumi-line-end">，</span>没有 single point of failure</li>
<li>simple, inexpensive to implement</li>
</ul>
<p>multiple access protocol 有非常多<span class="mojikumi-line-end">，</span>总体可以分为三大类<span class="mojikumi-line-end">：</span>channel partitioning protocols<span class="mojikumi-line-end">、</span>ramdom access protocols<span class="mojikumi-line-end">、</span>taking-turns protocols<span class="mojikumi-line-end">。</span></p>
<h3 id="channel-partitioning-protocols" class="heading"><a href="#channel-partitioning-protocols" class="heading-anchor" aria-label="章节： Channel Partitioning Protocols" tabindex="-1"></a><span>Channel Partitioning Protocols</span></h3>
<p>将单个 channel 分成多个 channel<span class="mojikumi-line-end">。</span></p>
<p>TDM (time-division multiplexing) 将时间分成 time frames<span class="mojikumi-line-end">，</span>将每个 time frame 分成 time slots<span class="mojikumi-line-end">，</span>将每个 time frame 内的各个 time slot 分配给各个 node<span class="mojikumi-line-end">。</span></p>
<p>FDM (frequency-division multiplexing) 利用不同的频率作为不同的 channel<span class="mojikumi-line-end">。</span></p>
<p>TDM 和 FDM 都能完全避免 collision<span class="mojikumi-line-end">，</span>但在只有一方发送时效率非常低<span class="mojikumi-line-end">：</span>唯一的 active sender 不能使用分配给其他 node 的 channel<span class="mojikumi-line-end">。</span></p>
<p>CDMA (code-division multiple access) 通过给每个 node 分配一个 code 来允许各方同时发送<span class="mojikumi-line-end">，</span>在 wireless channel 中较为常用<span class="mojikumi-line-end">。</span></p>
<h3 id="random-access-protocols" class="heading"><a href="#random-access-protocols" class="heading-anchor" aria-label="章节： Random Access Protocols" tabindex="-1"></a><span>Random Access Protocols</span></h3>
<p>通过随机的等待时间来在 collision 发生后错开发送时机<span class="mojikumi-line-end">。</span></p>
<h4 id="aloha" class="heading"><a href="#aloha" class="heading-anchor" aria-label="章节： ALOHA" tabindex="-1"></a><span>ALOHA</span></h4>
<p>假设传输每个 frame 的用时相同<span class="mojikumi-line-end">，</span>将时间划分为长度为这一用时的 slots<span class="mojikumi-line-end">，</span>所有 node 是同步的<span class="mojikumi-line-end">，</span>只在 slot 的开头发送信息<span class="mojikumi-line-end">，</span>发生 collision 后能在这一 slot 内检测到<span class="mojikumi-line-end">。</span></p>
<p>slotted ALOHA 在没有 collision 时在每个 slot 开头发送 frame<span class="mojikumi-line-end">，</span>在发生了 collision 后在每个 slot 开头以 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></span> 的概率进行 retransmission 直到发送成功为止<span class="mojikumi-line-end">。</span></p>
<p>如果一个 slot 中没有任何一方发送信息或者有多方同时发送信息则这个 slot 就浪费掉了<span class="mojikumi-line-end">，</span>只有恰好有一方发送信息的 slot 才是 successful slot<span class="mojikumi-line-end">。</span></p>
<p>其 efficiency 就是 successful slot 的占比<span class="mojikumi-line-end">，</span>有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 个 active slot 时<span class="mojikumi-line-end">，</span>efficiency 为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">np(1-p)^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>在 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 很大时<span class="mojikumi-line-end">，</span>其最大值是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>e</mi><mo>≈</mo><mn>0.37</mn></mrow><annotation encoding="application/x-tex">1/e \approx 0.37</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.37</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>pure ALOHA 不进行 time slot 的划分<span class="mojikumi-line-end">，</span>或者说是每一方的 time slot 不是同步的<span class="mojikumi-line-end">，</span>这样更加去中心化<span class="mojikumi-line-end">，</span>但 efficiency 只有 slotted ALOHA 的一半<span class="mojikumi-line-end">。</span></p>
<h4 id="csmacd" class="heading"><a href="#csmacd" class="heading-anchor" aria-label="章节： CSMA(/CD)" tabindex="-1"></a><span>CSMA(/CD)</span></h4>
<p>CSMA (carrier sense multiple access) 基于 <span class="mojikumi">“</span>listen before speaking<span class="mojikumi">”</span> 的原则<span class="mojikumi-line-end">，</span>进行 <i>carrier sensing</i><span class="mojikumi-line-end">。</span></p>
<p>如果再加上 <span class="mojikumi">“</span>If someone else begins talking at the same time, stop talking<span class="mojikumi">”</span> 的原则<span class="mojikumi-line-end">，</span>即 <i>collision detection</i><span class="mojikumi-line-end">，</span>则是 CSMA/CD<span class="mojikumi-line-end">。</span></p>
<p>在理想状态下<span class="mojikumi-line-end">，</span>carrier sensing 可以完全消除 collision<span class="mojikumi-line-end">。</span>但实际上<span class="mojikumi-line-end">，</span>由于 propagation delay<span class="mojikumi-line-end">，</span>一方开始发送到另一方收到需要时间<span class="mojikumi-line-end">，</span>在这段时间内可能另一方也发送了信息<span class="mojikumi-line-end">。</span></p>
<p>在 CSMA/CD 中<span class="mojikumi-line-end">，</span>遇到 collision 需要等待一段时间再 retransmit<span class="mojikumi-line-end">，</span>等待时间通常由 binary exponential backoff 得到<span class="mojikumi-line-end">：</span>在一个范围内随机选择等待时间<span class="mojikumi-line-end">，</span>每多 retransmit 一次这个范围就加倍<span class="mojikumi-line-end">。</span>在 Ethernet 中<span class="mojikumi-line-end">，</span>第 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 次 retransmission 会在 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">0, 1, \ldots, 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span> 中随机选择一个数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="mojikumi-line-end">，</span>然后等待传输 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>512</mn><mo>⋅</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">512 \cdot k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">512</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span> bits 的用时<span class="mojikumi-line-end">，</span>而 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span> 超过 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span></span> 时也取 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span></span><span class="mojikumi-line-end">。</span>这里 retransmission 次数是每个 frame 分别计算的<span class="mojikumi-line-end">，</span>新的 frame 会从 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span> 开始<span class="mojikumi-line-end">。</span></p>
<p>CSMA/CD 的 efficiency 约为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mn>5</mn><msub><mi>d</mi><mrow><mi mathvariant="normal">p</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">p</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi mathvariant="normal">t</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">s</mi></mrow></msub></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{1 + 5 d_{\mathrm{prop}} / d_{\mathrm{trans}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2935em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">prop</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">trans</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>其中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi mathvariant="normal">p</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{\mathrm{prop}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">prop</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span> 表示 propagation delay<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi mathvariant="normal">t</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{\mathrm{trans}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">trans</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 表示一个 maximum-size frame 的传输用时<span class="mojikumi-line-end">。</span></p>
<h3 id="taking-turns-protocols" class="heading"><a href="#taking-turns-protocols" class="heading-anchor" aria-label="章节： Taking-Turns Protocols" tabindex="-1"></a><span>Taking-Turns Protocols</span></h3>
<p>轮流让各方发送信息<span class="mojikumi-line-end">，</span>如果一方不想发送则交给下一位<span class="mojikumi-line-end">。</span></p>
<p>在 polling protocol 中<span class="mojikumi-line-end">，</span>设有一个 master node<span class="mojikumi-line-end">，</span>它轮流 poll 每个 node 来让它发送至多若干个 frame<span class="mojikumi-line-end">，</span>发完再 poll 下一个<span class="mojikumi-line-end">。</span>polling protocol 是 centralized 的<span class="mojikumi-line-end">，</span>有 single point of failure<span class="mojikumi-line-end">；</span>并且<span class="mojikumi-line-end">，</span>对 inactive node 的 poll 会造成浪费<span class="mojikumi-line-end">。</span></p>
<p>token-passing protocol 是 decentralized 的<span class="mojikumi-line-end">，</span>有一个 token 在各个 node 之间环状地传递<span class="mojikumi-line-end">，</span>拿着 token 就可以发送至多若干个 frame<span class="mojikumi-line-end">，</span>发送完<span class="mojikumi-line-start">（</span>或者不想发送<span class="mojikumi-line-end">）</span>就把 token 交给下一个<span class="mojikumi-line-end">。</span>token-passing protocol 在有任何一个 node 出错时就会卡住<span class="mojikumi-line-end">，</span>需要采取一些 recovery procedure<span class="mojikumi-line-end">。</span></p>
<h3 id="docsis-the-link-layer-protocol-for-cable-internet-access" class="heading"><a href="#docsis-the-link-layer-protocol-for-cable-internet-access" class="heading-anchor" aria-label="章节： DOCSIS: The Link-Layer Protocol for Cable Internet Access" tabindex="-1"></a><span>DOCSIS: The Link-Layer Protocol for Cable Internet Access</span></h3>
<p>DOCSIS 用于 cable access network<span class="mojikumi-line-end">，</span>将 residential cable modems 连接到 cable modem termination system (CMTS)<span class="mojikumi-line-end">。</span>它同时用到了多种 multiple access protocol<span class="mojikumi-line-end">，</span>是一个很好的例子<span class="mojikumi-line-end">。</span></p>
<p>使用 FDM 分为 downstream 和 upstream 两个 channel<span class="mojikumi-line-end">，</span>其中 downstream channel 由 CMTS 向 cable modem 发送<span class="mojikumi-line-end">，</span>sender 唯一<span class="mojikumi-line-end">，</span>比较简单<span class="mojikumi-line-end">。</span></p>
<p>upstream channel 被分成了若干 mini-slots<span class="mojikumi-line-start">（</span>与 TDM 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而这些 mini-slots 是由 CMTS 动态分配的<span class="mojikumi-line-end">，</span>需要由 cable modem 发送 mini-slot-request frame<span class="mojikumi-line-end">，</span>这些 request 在一些特殊的 mini-slots 以 random access 的方式发送<span class="mojikumi-line-end">，</span>通过是否收到来自 CMTS 的 mini-slot 分配来判断 request 是否成功发送<span class="mojikumi-line-end">，</span>使用 binary exponential backoff<span class="mojikumi-line-end">。</span></p>
<h2 id="switched-local-area-networks" class="heading"><a href="#switched-local-area-networks" class="heading-anchor" aria-label="章节： Switched Local Area Networks" tabindex="-1"></a><span>Switched Local Area Networks</span></h2>
<h3 id="link-layer-addressing" class="heading"><a href="#link-layer-addressing" class="heading-anchor" aria-label="章节： Link-Layer Addressing" tabindex="-1"></a><span>Link-Layer Addressing</span></h3>
<p>host 和 router 的每个 interface (adapter) 都有一个 link-layer address<span class="mojikumi-line-end">：</span>MAC address (physical address / LAN address)<span class="mojikumi-line-end">。</span></p>
<p>MAC address 的长度为 6 bytes<span class="mojikumi-line-end">，</span>与 IP address 不同<span class="mojikumi-line-end">，</span>物理上的每个 interface 的 MAC address 是固定的<span class="mojikumi-line-end">，</span>不会因移动而变化<span class="mojikumi-line-end">。</span>MAC address 由 IEEE 管理<span class="mojikumi-line-end">，</span>在全球范围内是唯一的<span class="mojikumi-line-end">。</span></p>
<p>如果使用 broadcast link<span class="mojikumi-line-end">，</span>多个 interface 都会收到同样的 frame<span class="mojikumi-line-end">。</span>只有 MAC address 符合时才会接收<span class="mojikumi-line-end">，</span>否则会丢弃<span class="mojikumi-line-start">（</span>不会传递给 network layer<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>MAC broadcast address 是 <code>ff<wbr>:<wbr>ff<wbr>:<wbr>ff<wbr>:<wbr>ff<wbr>:<wbr>ff<wbr>:<wbr>ff</code><span class="mojikumi-line-end">。</span></p>
<h3 id="address-resolution-protocol" class="heading"><a href="#address-resolution-protocol" class="heading-anchor" aria-label="章节： Address Resolution Protocol" tabindex="-1"></a><span>Address Resolution Protocol</span></h3>
<p>ARP 用来将 subnet 内部的 IP address 翻译为 MAC address<span class="mojikumi-line-end">。</span></p>
<p>每个 host / router 会维护一张 ARP table<span class="mojikumi-line-end">，</span>用来记录 IP address 和 MAC address 的对应关系<span class="mojikumi-line-end">。</span>表项有过期时间<span class="mojikumi-line-end">，</span>到期自动删除<span class="mojikumi-line-end">。</span></p>
<p>如果在 ARP table 内没有查询到需要的 IP address<span class="mojikumi-line-end">，</span>则会发送一个 ARP query<span class="mojikumi-line-start">（</span>一个 broadcast packet<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>具有这个 IP address 的 interface 在收到 ARP query 后会回复 ARP response<span class="mojikumi-line-start">（</span>一般不是 broadcast<span class="mojikumi-line-end">，</span>因为此时 broadcast 可能造成浪费<span class="mojikumi-line-end">；</span>但是若采用 broadcast 也有助于发现 address conflict<sup><a href="#user-content-fn-arp-response-broadcast" id="user-content-fnref-arp-response-broadcast" data-footnote-ref aria-describedby="footnote-label">1</a></sup><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>收到 ARP response 后更新 ARP table<span class="mojikumi-line-end">。</span>通过这样的机制<span class="mojikumi-line-end">，</span>ARP table 可以自动建立<span class="mojikumi-line-end">，</span>不需要任何手动配置<span class="mojikumi-line-end">。</span></p>
<p>如果要向 subnet 外发送信息<span class="mojikumi-line-end">，</span>则需要向 gateway (first-hop router) 发送信息<span class="mojikumi-line-end">，</span>所以需要查询的是 gateway 的 MAC address<span class="mojikumi-line-end">。</span></p>
<h3 id="ethernet" class="heading"><a href="#ethernet" class="heading-anchor" aria-label="章节： Ethernet" tabindex="-1"></a><span>Ethernet</span></h3>
<p>Ethernet 是现在最常用的 wired LAN<span class="mojikumi-line-end">。</span></p>
<p>Ethernet 通常使用 hub 或 switch 来连接各个 interface<span class="mojikumi-line-end">。</span>hub 会将收到的每个 bit 转发给其他所有 interface<span class="mojikumi-line-end">，</span>可能产生 collision<span class="mojikumi-line-end">。</span>switch 则根据 MAC address 进行转发<span class="mojikumi-line-end">，</span>不会产生 collision<span class="mojikumi-line-end">。</span></p>
<p>Ethernet frame 包含<span class="mojikumi-line-end">：</span></p>
<ol>
<li>preamble (8 bytes): 31 个 <span class="mojikumi">“</span>10<span class="mojikumi">”</span> 和 1 个 <span class="mojikumi">“</span>11<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>用来标识 frame 的开头<span class="mojikumi-line-end">，</span>并同步时钟<span class="mojikumi-line-end">。</span></li>
<li>destination MAC address (6 bytes)</li>
<li>source MAC address (6 bytes)</li>
<li>type (2 bytes): upper layer protocol<span class="mojikumi-line-end">，</span>例如 IP<span class="mojikumi-line-end">、</span>ARP<span class="mojikumi-line-end">。</span></li>
<li>data (46 ~ 1500 bytes): 如果需要传送的数据不足 46 bytes 需要进行填充<span class="mojikumi-line-end">。</span>通过 type 以及 data 中的 header<span class="mojikumi-line-start">（</span>例如 IP header<span class="mojikumi-line-end">）</span>来判断 data 的长度<span class="mojikumi-line-end">。</span></li>
<li>CRC checksum (4 bytes)</li>
</ol>
<p>Ethernet 是 connectionless<span class="mojikumi-line-end">、</span>unreliable 的<span class="mojikumi-line-end">。</span></p>
<p>Ethernet 既是 link-layer protocol<span class="mojikumi-line-end">，</span>也是 physical layer protocol<span class="mojikumi-line-end">，</span>而且实际上是一类而非一个 protocol<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>10BASE-T<span class="mojikumi-line-end">、</span>10BASE-2<span class="mojikumi-line-end">、</span>100BASE-T<span class="mojikumi-line-end">、</span>1000BASE-LX<span class="mojikumi-line-end">、</span>10GBASE-T<span class="mojikumi-line-end">、</span>40GBASE-T 是不同的 Ethernet technology<span class="mojikumi-line-end">。</span>开头表示 10Mbps<span class="mojikumi-line-end">、</span>100Mbps<span class="mojikumi-line-end">、</span>1Gbps<span class="mojikumi-line-end">、</span>10Gbps<span class="mojikumi-line-end">、</span>40Gbps 的传输速度<span class="mojikumi-line-end">，</span>BASE 表示 media 只传送 Ethernet traffic<span class="mojikumi-line-end">，</span>最后是不同的 physical media<span class="mojikumi-line-end">。</span></p>
<h3 id="link-layer-switches" class="heading"><a href="#link-layer-switches" class="heading-anchor" aria-label="章节： Link-Layer Switches" tabindex="-1"></a><span>Link-Layer Switches</span></h3>
<p>switch 和 router 的功能类似<span class="mojikumi-line-end">，</span>但它工作于 link layer<span class="mojikumi-line-end">，</span>而且是 <i>transparent</i> 的<span class="mojikumi-line-end">，</span>其他设备感受不到 switch 的存在<span class="mojikumi-line-end">，</span>也不需要手动进行任何配置<span class="mojikumi-line-end">。</span></p>
<p>switch 的每个 interface 都有一个 output buffer<span class="mojikumi-line-end">，</span>与 router 类似<span class="mojikumi-line-end">。</span></p>
<p>switch 维护了一张 switch table<span class="mojikumi-line-end">，</span>表示每个 MAC address 对应的 switch 的 interface<span class="mojikumi-line-end">，</span>以及表项的过期时间<span class="mojikumi-line-end">。</span></p>
<p>对于从 interface <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> 收到的 destination MAC address 为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 的 frame<span class="mojikumi-line-end">：</span></p>
<ol>
<li>若 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 不在 switch table 中<span class="mojikumi-line-end">，</span>broadcast<span class="mojikumi-line-end">；</span></li>
<li>若 switch table 中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 对应 interface <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span><span class="mojikumi-line-end">，</span>discard<span class="mojikumi-line-end">；</span></li>
<li>若 switch table 中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 对应 interface <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo mathvariant="normal">≠</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y \ne x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span><span class="mojikumi-line-end">，</span>forward to <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="mojikumi-line-end">。</span></li>
</ol>
<p>switch 是 <i>self-learning</i> 的<span class="mojikumi-line-end">：</span>如果在 interface <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> 收到 source MAC address 为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 的 frame<span class="mojikumi-line-end">，</span>则会在 switch table 中记录 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span> 到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span> 的对应关系<span class="mojikumi-line-end">。</span></p>
<p>相对于 hub<span class="mojikumi-line-end">，</span>switch 的优点有<span class="mojikumi-line-end">：</span></p>
<ul>
<li>没有 collision<span class="mojikumi-line-end">，</span>可以优化性能<span class="mojikumi-line-end">。</span></li>
<li>可以将不同 technology 的 link (media) 连接在一起<span class="mojikumi-line-end">。</span></li>
<li>switch 还提供了一些 network management 功能<span class="mojikumi-line-end">，</span>例如自动检测异常的 adapter 并禁用<span class="mojikumi-line-end">、</span>对流量进行统计<span class="mojikumi-line-end">。</span></li>
</ul>
<p>switch 减少了 broadcast<span class="mojikumi-line-end">，</span>在提升性能的同时也增强了安全性<span class="mojikumi-line-end">。</span>但是 attacker 可以设法用 bogus entries 将 switch table 填满<span class="mojikumi-line-end">，</span>使得大部分 frame 被 broadcast<span class="mojikumi-line-end">，</span>这被称作 <i>switch poisoning</i><span class="mojikumi-line-end">。</span></p>
<p>switch 和 router 都可以将多个 host 连接在一起<span class="mojikumi-line-end">：</span></p>
<ul>
<li>switch 不需要手动配置<span class="mojikumi-line-end">；</span>性能一般更好<span class="mojikumi-line-end">。</span>只能连成生成树<span class="mojikumi-line-end">，</span>不能连出环<span class="mojikumi-line-end">；</span>如果同一个 subnet 内有太多 host 可能影响性能<span class="mojikumi-line-end">；</span>可能遭受 broadcast storm<span class="mojikumi-line-end">。</span></li>
<li>router 需要手动配置<span class="mojikumi-line-end">；</span>性能可能略差<span class="mojikumi-line-end">。</span>可以随便连<span class="mojikumi-line-end">，</span>从而可以提供多条 route 供 routing protocol 选择<span class="mojikumi-line-end">；</span>提供 firewall 来防止遭受 broadcast storm<span class="mojikumi-line-end">。</span></li>
</ul>
<p>一般来说多至数百个 host 时用 switch 即可<span class="mojikumi-line-end">，</span>有更多 host 的话则需要适当使用 router 来进行中转<span class="mojikumi-line-end">。</span></p>
<h3 id="virtual-local-area-networks-vlans" class="heading"><a href="#virtual-local-area-networks-vlans" class="heading-anchor" aria-label="章节： Virtual Local Area Networks (VLANs)" tabindex="-1"></a><span>Virtual Local Area Networks (VLANs)</span></h3>
<p>有时<span class="mojikumi-line-end">，</span>物理上的 switch 会对网络管理造成一些限制<span class="mojikumi-line-end">：</span></p>
<ul>
<li>一个 switch 一般有很多 port<span class="mojikumi-line-end">，</span>但希望设置的 subnet 大小<span class="mojikumi-line-start">（</span>为了安全等原因想分成不同的 subnet<span class="mojikumi-line-end">）</span>可能和 port 数量不符<span class="mojikumi-line-end">。</span></li>
<li>如果要在不同 subnet 之间移动 host<span class="mojikumi-line-end">，</span>需要更改物理连线<span class="mojikumi-line-end">。</span></li>
</ul>
<p>VLAN 可以用来解决这些问题<span class="mojikumi-line-end">。</span></p>
<p>VLAN 通过软件控制一个 switch 上哪些 port 属于同一个 subnet<span class="mojikumi-line-end">。</span>为了将两个 subnet 相连<span class="mojikumi-line-end">，</span>需要将它们连到同一个 router 上<span class="mojikumi-line-end">，</span>为了方便这样操作<span class="mojikumi-line-end">，</span>支持 VLAN 的 switch 往往自带一个 router<span class="mojikumi-line-end">。</span></p>
<p>可以使用 VLAN trunking 来将多个 switch 上的 port 合并为一个 VLAN<span class="mojikumi-line-end">：</span>每个 switch 上有一个 trunk port<span class="mojikumi-line-end">，</span>将需要 trunking 的 switch 的 trunk port 相连<span class="mojikumi-line-end">，</span>发送到 VLAN 的 frame 会被 forward 到 trunk port<span class="mojikumi-line-end">。</span>trunking 时所属 VLAN 的识别通过扩展的 Ethernet frame format 802.1Q 来实现<span class="mojikumi-line-end">，</span>在 header 中添加 VLAN tag 来表示所属的 VLAN<span class="mojikumi-line-end">。</span></p>
<p>除了基于 switch port 的 VLAN<span class="mojikumi-line-end">，</span>还有基于 MAC address 的 VLAN<span class="mojikumi-line-end">，</span>以及基于 network-layer protocol 的 VLAN<span class="mojikumi-line-end">。</span></p>
<h2 id="multiprotocol-label-switching-mpls" class="heading"><a href="#multiprotocol-label-switching-mpls" class="heading-anchor" aria-label="章节： Multiprotocol Label Switching (MPLS)" tabindex="-1"></a><span>Multiprotocol Label Switching (MPLS)</span></h2>
<p>MPLS 基于 fixed-length label 进行 switch<span class="mojikumi-line-end">，</span>在 link-layer header 和 IP header 之间添加 MPLS header<span class="mojikumi-line-end">，</span>需要在支持 MPLS 的 router 之间进行传输<span class="mojikumi-line-end">，</span>switch 时不需要管 IP header<span class="mojikumi-line-end">。</span></p>
<p>MPLS 有 switch 速度快<span class="mojikumi-line-end">、</span>便于进行 traffic management 等优点<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>书中对它的介绍过于简略<span class="mojikumi-line-end">，</span>感觉说了和没说差不多<span class="mojikumi-line-end">，</span>我就在此基础上再简略一点（<span class="mojikumi">（</span></p>
<h2 id="data-center-networking" class="heading"><a href="#data-center-networking" class="heading-anchor" aria-label="章节： Data Center Networking" tabindex="-1"></a><span>Data Center Networking</span></h2>
<p>很多大型互联网公司都有由数万台 server 组成的 data center<span class="mojikumi-line-end">。</span>data center 对外接入 Internet<span class="mojikumi-line-end">，</span>而其内部又有一套 data center network<span class="mojikumi-line-end">。</span></p>
<p>data center 主要提供三部分的功能<span class="mojikumi-line-end">：</span>向终端用户 serve content<span class="mojikumi-line-end">，</span>进行 distributed computation<span class="mojikumi-line-end">，</span>对外提供 cloud computing 服务<span class="mojikumi-line-end">。</span></p>
<p>data center 中的 host 被称作 <i>blade</i><span class="mojikumi-line-end">，</span>一般数十个 blade 会放在一起组成一个 <i>rack</i><span class="mojikumi-line-end">，</span>连到同一个 switch<span class="mojikumi-line-start">（</span>top of rack, TOR switch<span class="mojikumi-line-end">）</span>上<span class="mojikumi-line-end">，</span>而整个 data center 通过多级 router 和 switch 构成一个 hierarchy<span class="mojikumi-line-end">，</span>其中 access router 的下方可以分为多个 VLAN<span class="mojikumi-line-end">。</span>如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-6.30" id="user-content-fnref-fig-6.30" data-footnote-ref aria-describedby="footnote-label">2</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-6.30.2bc76e92.webp"><img srcset="/assets/cnatda-fig-6.30.93c4cef6.png" loading="lazy" src="/assets/cnatda-fig-6.30.93c4cef6.png" width="1643" height="996" alt="A data center network with a hierarchical topology"></picture></p>
<p>在 data center 中<span class="mojikumi-line-end">，</span>一个 application 通常由很多 host 来提供同样的服务<span class="mojikumi-line-end">，</span>而对外只提供一个 IP address<span class="mojikumi-line-end">。</span>load balancer 通过类似 NAT 的方式<span class="mojikumi-line-end">，</span>将 request 均衡地分配给各个 host 进行处理<span class="mojikumi-line-end">。</span></p>
<p>树状的网络结构使得一个 data center 可以有数万台 server<span class="mojikumi-line-end">，</span>但 host-to-host capacity 还是会受限<span class="mojikumi-line-end">，</span>尤其是两个 host 的 LCA 位于较高层级时<span class="mojikumi-line-end">。</span>为了解决这一问题<span class="mojikumi-line-end">，</span>可以<span class="mojikumi-line-end">：</span></p>
<ul>
<li>使用更高速的 router 和 switch<span class="mojikumi-line-end">，</span>但这会大大增加开销<span class="mojikumi-line-end">。</span></li>
<li>尽量将需要互相通信的 host 放在较低的同一棵子树内<span class="mojikumi-line-end">，</span>但这不一定做得到<span class="mojikumi-line-start">（</span>可能大量 host 都需要互相通信<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>也会影响 host 位置的灵活性<span class="mojikumi-line-end">。</span></li>
<li>增加 interconnection 的数量<span class="mojikumi-line-end">，</span>从而增加 host-to-host 的路径数量<span class="mojikumi-line-end">，</span>在优化性能的同时也可以提升系统的可靠性<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>每个 TOR switch 连接到 8 个 tier-2 switch<span class="mojikumi-line-end">，</span>每个 tier-2 switch 连接到 16 个 tier-1 switch…… 这也被称作 <i>Clos network</i><span class="mojikumi-line-end">。</span></li>
</ul>
<p>data center 通常使用 SDN 来对网络进行集中管理<span class="mojikumi-line-end">。</span></p>
<p>为了支持 cloud computing<span class="mojikumi-line-end">、</span>更方便地进行管理<span class="mojikumi-line-end">，</span>通常会使用 virtual machine (VM) 等技术将 software 和 hardware 解耦<span class="mojikumi-line-end">。</span>为了让 VM 能方便地在不同 host 之间移动<span class="mojikumi-line-end">，</span>可以将 ARP 的 broadcast 机制改为类似于 DNS 的机制<span class="mojikumi-line-end">，</span>存储 VM 的 IP address 到 TOR switch 的映射关系<span class="mojikumi-line-end">。</span></p>
<p>data center network 通常具有极低的延迟以及较小的 buffer size<span class="mojikumi-line-end">，</span>而 congestion control 需要快速作出反应<span class="mojikumi-line-end">，</span>传统的 TCP 不再适用<span class="mojikumi-line-end">，</span>通常会使用为 data center 设计的 TCP 等方式来进行优化<span class="mojikumi-line-end">。</span></p>
<p>modular data center (MDC) 是一个内有至多数千个 host 的 container<span class="mojikumi-line-end">，</span>用来作为 data center 的组成部分<span class="mojikumi-line-end">。</span>在 MDC 的部分 component 坏掉时<span class="mojikumi-line-end">，</span>MDC 可以继续以 degraded performance 工作<span class="mojikumi-line-end">，</span>而在坏掉的 component 过多时则会报废<span class="mojikumi-line-end">。</span></p>
<p>很多公司会自己定制 data center 中的各个组成部分<span class="mojikumi-line-end">，</span>包括 network adapter<span class="mojikumi-line-end">、</span>switch<span class="mojikumi-line-end">、</span>router<span class="mojikumi-line-end">、</span>software<span class="mojikumi-line-end">、</span>networking protocol<span class="mojikumi-line-end">。</span></p>
<p>Amazon 通过 <span class="mojikumi">“</span>availability zone<span class="mojikumi">”</span> 提高了服务的可靠性<span class="mojikumi-line-end">，</span>即将 data center 在邻近但不同的地理位置上进行复刻<span class="mojikumi-line-end">，</span>从而提供 fault tolerance<span class="mojikumi-line-end">，</span>而地理位置上的邻近保证了 low latency<span class="mojikumi-line-end">，</span>便于同步<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-arp-response-broadcast">
<p><a href="https://networkengineering.stackexchange.com/questions/7136/arp-replies-can-they-be-broadcast">ethernet - ARP Replies can they be Broadcast - Network Engineering Stack Exchange</a> <a href="#user-content-fnref-arp-response-broadcast" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-6.30">
<p>p506, Figure 6.30: A data center network with a hierarchical topology <a href="#user-content-fnref-fig-6.30" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第五章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/07/cnatda-5</link>
            <guid>https://ouuan.moe/post/2023/07/cnatda-5</guid>
            <pubDate>Sat, 08 Jul 2023 12:37:49 GMT</pubDate>
            <description><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第五章 <span class="mojikumi">“</span>The Network Layer: Control Plane<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第五章 <span class="mojikumi">“</span>The Network Layer: Control Plane<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="introduction" class="heading"><a href="#introduction" class="heading-anchor" aria-label="章节： Introduction" tabindex="-1"></a><span>Introduction</span></h2>
<p>control plane 需要计算出 forwarding table / flow table<span class="mojikumi-line-end">，</span>有两种方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>per-router control: router 之间互相发送信息<span class="mojikumi-line-end">，</span>分别进行计算</li>
<li>logicially centralized control: 使用 remote controller 集中地获取信息<span class="mojikumi-line-end">、</span>计算<span class="mojikumi-line-end">、</span>分发结果</li>
</ul>
<h2 id="routing-algorithms" class="heading"><a href="#routing-algorithms" class="heading-anchor" aria-label="章节： Routing Algorithms" tabindex="-1"></a><span>Routing Algorithms</span></h2>
<p>在 routing algorithm 中<span class="mojikumi-line-end">，</span>网络被抽象为一张图<span class="mojikumi-line-end">，</span>考虑 physical length<span class="mojikumi-line-end">、</span>link speed<span class="mojikumi-line-end">、</span>monetary cost 等因素作为边权<span class="mojikumi-line-end">。</span></p>
<p>routing algorithm 可以分为<span class="mojikumi-line-end">：</span></p>
<ul>
<li>centralized / decentralized<span class="mojikumi-line-end">：</span>计算过程中是否知道整个图的信息</li>
<li>static / dynamic<span class="mojikumi-line-end">：</span>是否对网络负载<span class="mojikumi-line-end">、</span>拓扑结构等的改变即时做出响应</li>
<li>load-sensitive/insensitive: 是否考虑 congestion 状况</li>
</ul>
<h3 id="the-link-state-ls-routing-algorithm" class="heading"><a href="#the-link-state-ls-routing-algorithm" class="heading-anchor" aria-label="章节： The Link-State (LS) Routing Algorithm" tabindex="-1"></a><span>The Link-State (LS) Routing Algorithm</span></h3>
<p>LS 是一个 centralized routing algorithm<span class="mojikumi-line-end">，</span>需要每个 node 将其 attached links 的信息进行广播<span class="mojikumi-line-start">（</span>link-state broadcast<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>使得每个 node 都有整张图的信息<span class="mojikumi-line-end">，</span>再用 Dijkstra 等算法计算最短路<span class="mojikumi-line-end">。</span></p>
<p>在 load-sensitive routing algorithm 中<span class="mojikumi-line-end">，</span>traffic load 的改变可能导致 oscillation<span class="mojikumi-line-end">，</span>要么改为 load-insensitive<span class="mojikumi-line-end">，</span>要么设法保证各个 router 不同时运行 routing algorithm<span class="mojikumi-line-end">。</span></p>
<h3 id="the-distance-vector-dv-routing-algorithm" class="heading"><a href="#the-distance-vector-dv-routing-algorithm" class="heading-anchor" aria-label="章节： The Distance-Vector (DV) Routing Algorithm" tabindex="-1"></a><span>The Distance-Vector (DV) Routing Algorithm</span></h3>
<p>每个 node 维护一个到其他每个 node 的 distance vector<span class="mojikumi-line-end">，</span>告诉 neighbor 自己的 distance vector<span class="mojikumi-line-end">，</span>通过 neighbor 的 distance vector 更新自己的 distance vector<span class="mojikumi-line-end">。</span>link state 发生改变时<span class="mojikumi-line-end">，</span>会经过多轮迭代进行传播并最终收敛<span class="mojikumi-line-end">。</span></p>
<p>在 link cost 减小时<span class="mojikumi-line-end">，</span>收敛是较快的<span class="mojikumi-line-end">。</span></p>
<p>但是在 link cost 增大时<span class="mojikumi-line-end">，</span>收敛可能需要边权值域大小轮次的迭代<span class="mojikumi-line-start">（</span>称作 <i>count-to-infinity problem</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并在过程中产生 routing loop<span class="mojikumi-line-end">，</span>例如下图所示的情况<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-5.7-b" id="user-content-fnref-fig-5.7-b" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-5.7-b.4a53bb07.webp"><img srcset="/assets/cnatda-fig-5.7-b.f5520e4f.png" loading="lazy" src="/assets/cnatda-fig-5.7-b.f5520e4f.png" width="371" height="207" alt="Changes in link cost"></picture></p>
<p>使用 <i>poisoned reverse</i> 可以避免出现二元环<span class="mojikumi-line-end">：</span>如果 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 使用了 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span> 这条边来走向 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="mojikumi-line-end">，</span>则在 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 告诉 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></span> 的 distance vector 中<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span></span> 到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span> 的距离是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>但是 poisoned reverse 不能避免多元环的出现<span class="mojikumi-line-end">。</span></p>
<h3 id="comparison-of-ls-and-dv-routing-algorithms" class="heading"><a href="#comparison-of-ls-and-dv-routing-algorithms" class="heading-anchor" aria-label="章节： Comparison of LS and DV Routing Algorithms" tabindex="-1"></a><span>Comparison of LS and DV Routing Algorithms</span></h3>
<ul>
<li>message complexity: LS 需要让每个 node 都获取到全局的 link state<span class="mojikumi-line-end">，</span>要传送大量信息<span class="mojikumi-line-end">，</span>且信息需要发送到很远的地方<span class="mojikumi-line-end">；</span>DV 只需要从 neighbor 获取信息<span class="mojikumi-line-end">。</span></li>
<li>speed of convergence: LS 有 Dijkstra 的低复杂度<span class="mojikumi-line-end">，</span>DV 则较慢<span class="mojikumi-line-end">，</span>而且过程中可能出现 routing loop<span class="mojikumi-line-end">，</span>还有 count-to-infinity problem<span class="mojikumi-line-end">。</span></li>
<li>robustness: 在 LS 中<span class="mojikumi-line-end">，</span>每个 node 可以提供错误的 link state<span class="mojikumi-line-end">，</span>但影响有限<span class="mojikumi-line-end">，</span>每个 node 只为自己计算 forwarding table<span class="mojikumi-line-end">；</span>在 DV 中<span class="mojikumi-line-end">，</span>每个 node 的计算结果都是其他 node 的计算的一部分<span class="mojikumi-line-end">，</span>影响可以很大<span class="mojikumi-line-end">。</span></li>
</ul>
<p>实际上<span class="mojikumi-line-end">，</span>Internet 同时使用了这两种算法<span class="mojikumi-line-end">。</span></p>
<h2 id="intra-as-routing-in-the-internet-ospf" class="heading"><a href="#intra-as-routing-in-the-internet-ospf" class="heading-anchor" aria-label="章节： Intra-AS Routing in the Internet: OSPF" tabindex="-1"></a><span>Intra-AS Routing in the Internet: OSPF</span></h2>
<p>如果统一管理所有 router<span class="mojikumi-line-end">，</span>一方面规模过大性能无法接受<span class="mojikumi-line-end">，</span>另一方面无法满足自治的需求<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>实际上 router 被分成了很多个 autonomous system (AS)<span class="mojikumi-line-end">，</span>每个 AS 有一个 ICANN 赋予的编号<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>每个 ISP 可能管理着一个或多个 AS<span class="mojikumi-line-end">。</span></p>
<p>每个 AS 内使用同一个 intra-AS routing protocol<span class="mojikumi-line-end">，</span>例如 OSPF (Open Shortest Path First) <span class="mojikumi-line-end">，</span>它非常复杂<span class="mojikumi-line-end">，</span>书中只有简要介绍<span class="mojikumi-line-end">。</span></p>
<p>OSPF 使用的是 LS routing algorithm<span class="mojikumi-line-end">，</span>边权由管理员设置<span class="mojikumi-line-end">，</span>每个 router 都会向整个 AS 内的其他所有 router<span class="mojikumi-line-start">（</span>在 link state 发生变化时 &#x26; 周期性地<span class="mojikumi-line-end">）</span>broadcast link state<span class="mojikumi-line-end">。</span></p>
<ul>
<li>OSPF message 直接通过 IP 传输<span class="mojikumi-line-end">，</span>不使用 transport-layer protocol<span class="mojikumi-line-end">。</span></li>
<li>支持 authentication<span class="mojikumi-line-end">。</span></li>
<li>有多条最短路时<span class="mojikumi-line-end">，</span>可以同时使用<span class="mojikumi-line-end">。</span></li>
<li>有 MOSPF 扩展来支持 multicast<span class="mojikumi-line-end">。</span></li>
<li>可以将 AS 划分为多个 area 形成 AS 内部的 hierarchy<span class="mojikumi-line-end">，</span>每个 area 内部走最短路<span class="mojikumi-line-end">，</span>不同 area 之间通过每个 area 的 border router 走 backbone area<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="routing-among-the-isps-bgp" class="heading"><a href="#routing-among-the-isps-bgp" class="heading-anchor" aria-label="章节： Routing Among the ISPs: BGP" tabindex="-1"></a><span>Routing Among the ISPs: BGP</span></h2>
<h3 id="the-role-of-bgp" class="heading"><a href="#the-role-of-bgp" class="heading-anchor" aria-label="章节： The Role of BGP" tabindex="-1"></a><span>The Role of BGP</span></h3>
<p>BGP (Border Gateway Protocol) 是所有 AS 共用的 inter-AS routing protocol<span class="mojikumi-line-end">，</span>将各个 AS 连接在一起<span class="mojikumi-line-end">。</span></p>
<p>在 BGP 中<span class="mojikumi-line-end">，</span>destination 不是特定的 IP address<span class="mojikumi-line-end">，</span>而是 CIDR prefix<span class="mojikumi-line-end">。</span>BGP 使得一个 AS 可以向其他 AS advertise prefix<span class="mojikumi-line-end">，</span>并计算出到达各个 prefix 的 route<span class="mojikumi-line-end">。</span></p>
<h3 id="advertising-bgp-route-information" class="heading"><a href="#advertising-bgp-route-information" class="heading-anchor" aria-label="章节： Advertising BGP Route Information" tabindex="-1"></a><span>Advertising BGP Route Information</span></h3>
<p>不同 router 之间会建立称作 BGP connection 的 TCP connection<span class="mojikumi-line-start">（</span>不是 physical link<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>一般来说负责连接两个 AS 的 gateway router 之间会建立 external BGP (eBGP) connection<span class="mojikumi-line-end">；</span>而 AS 内部的 router 两两之间建立 internal BGP (iBGP) connection<span class="mojikumi-line-end">。</span></p>
<p>一条 BGP advertisement<span class="mojikumi-line-start">（</span>称作一个 <i>route</i><span class="mojikumi-line-end">）</span>包含 AS-PATH 和 NEXT-HOP 等信息<span class="mojikumi-line-end">：</span></p>
<ul>
<li>AS-PATH 即经过哪几个 AS 能到达目的地<span class="mojikumi-line-end">，</span>一个 AS 收到来自其他 AS 的 route 后<span class="mojikumi-line-end">，</span>可以在 AS-PATH 中加上自己<span class="mojikumi-line-end">，</span>继续向 neighbor 发送<span class="mojikumi-line-end">；</span></li>
<li>NEXT-HOP 是从当前 AS 出发向目的地走<span class="mojikumi-line-end">，</span>走出当前 AS 遇到的第一个 router 的 IP address<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="determining-the-best-routes" class="heading"><a href="#determining-the-best-routes" class="heading-anchor" aria-label="章节： Determining the Best Routes" tabindex="-1"></a><span>Determining the Best Routes</span></h3>
<p>从一个 AS 出发到达某个 prefix 可能有很多条路径<span class="mojikumi-line-end">，</span>BGP 按照下面的顺序来决定 best route<span class="mojikumi-line-start">（</span>平局则使用下一条规则<span class="mojikumi">）</span><span class="mojikumi-line-end">：</span></p>
<ol>
<li>由管理员设置或从其他 AS 获取的 local preference</li>
<li>shortest AS-PATH<span class="mojikumi-line-start">（</span>经过最少个 AS<span class="mojikumi-line-end">）</span></li>
<li>在 AS 内走最短路<span class="mojikumi-line-start">（</span>通过 intra-AS protocol 以及 NEXT-HOP 得到<span class="mojikumi-line-end">）</span>到达 gateway router</li>
<li>根据 BGP identifier 选</li>
</ol>
<h3 id="ip-anycast" class="heading"><a href="#ip-anycast" class="heading-anchor" aria-label="章节： IP-anycast" tabindex="-1"></a><span>IP-anycast</span></h3>
<p>BGP 可以计算出到达某个 prefix (IP address) 的 best route<span class="mojikumi-line-end">，</span>如果为多个 host 设置相同的 IP address<span class="mojikumi-line-end">，</span>则可以实现 IP-anycast<span class="mojikumi-line-end">，</span>例如在 CDN 中可以让用户从多个内容相同的 server 中挑选最适合的一个<span class="mojikumi-line-end">，</span>而这一挑选是在 router 处通过 BGP 实现的<span class="mojikumi-line-end">。</span></p>
<p>但是 IP-anycast 如果用于 TCP 可能导致同一个 TCP connection 发给不同 host<span class="mojikumi-line-end">，</span>所以 CDN 一般不采用 IP-anycast<span class="mojikumi-line-end">，</span>而 DNS root server 则采用了 IP-anycast<span class="mojikumi-line-start">（</span>DNS 使用 UDP<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="routing-policy" class="heading"><a href="#routing-policy" class="heading-anchor" aria-label="章节： Routing Policy" tabindex="-1"></a><span>Routing Policy</span></h3>
<p>BGP 通过 local preference 给管理员提供了决定如何选择 route 的自由<span class="mojikumi-line-end">，</span>以实现某些 policy<span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>当一个 access ISP 连接到多个 backbone ISP<span class="mojikumi-line-start">（</span>即 multi-home<span class="mojikumi-line-end">）</span>时<span class="mojikumi-line-end">，</span>access ISP 不应该作为中介在不同 backbone ISP 之间进行传输<span class="mojikumi-line-end">。</span>一般来说<span class="mojikumi-line-end">，</span>一个 ISP 只会在通信双方至少有一方是其 customer 时提供服务<span class="mojikumi-line-end">。</span></p>
<h2 id="the-sdn-control-plane" class="heading"><a href="#the-sdn-control-plane" class="heading-anchor" aria-label="章节： The SDN Control Plane" tabindex="-1"></a><span>The SDN Control Plane</span></h2>
<p>SDN 分为 SDN controller<span class="mojikumi-line-end">、</span>network management applications<span class="mojikumi-line-start">（</span>例如 routing<span class="mojikumi-line-end">、</span>access control<span class="mojikumi-line-end">、</span>load balancing<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>controlled devices 三个部分<span class="mojikumi-line-end">。</span>其中 SDN controller 连接了 network management applications 和 controlled devices<span class="mojikumi-line-end">。</span></p>
<p>SDN 使用 generalized forwarding<span class="mojikumi-line-end">，</span>将 data plane 和 control plane 分开<span class="mojikumi-line-end">，</span>通过 network management applications 提供 network control functions<span class="mojikumi-line-end">，</span>实现了 programmable network<span class="mojikumi-line-end">。</span></p>
<p>SDN 将 network functionality 进行了 unbundle<span class="mojikumi-line-end">，</span>使得 packet switches<span class="mojikumi-line-end">、</span>SDN controller<span class="mojikumi-line-end">、</span>network management applications 可以来自不同的供应商<span class="mojikumi-line-end">，</span>各自发展<span class="mojikumi-line-end">。</span></p>
<ul>
<li>communication layer (<i>northbound API</i>): controlled devices 和 SDN controller 进行通信<span class="mojikumi-line-end">。</span>SDN controller 向 controlled device 发送信息<span class="mojikumi-line-start">（</span>例如 flow table<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从 controlled device 获取 link state 等信息<span class="mojikumi-line-end">，</span>并在 network state 发生改变时被通知<span class="mojikumi-line-end">。</span>可以使用 OpenFlow<span class="mojikumi-line-end">、</span>SNMP 等协议<span class="mojikumi-line-end">。</span></li>
<li>network-wide state-management layer: SDN controller 存储了一些信息<span class="mojikumi-line-end">，</span>包括 network state<span class="mojikumi-line-end">、</span>flow table<span class="mojikumi-line-end">、</span>统计数据等<span class="mojikumi-line-end">。</span></li>
<li>interface to the network-control application layer (<i>southbound API</i>): network management applications 可以从 SDN controller 获取 network state<span class="mojikumi-line-end">，</span>订阅状态发生改变的 event<span class="mojikumi-line-end">。</span>通过 RESTful API 等方式通信<span class="mojikumi-line-end">。</span></li>
</ul>
<p>在 OpenFlow 中<span class="mojikumi-line-end">，</span>SDN controller 可以向 controlled device 发送<span class="mojikumi-line-end">：</span></p>
<ul>
<li>configuration<span class="mojikumi-line-end">，</span>修改配置参数</li>
<li>modify-state<span class="mojikumi-line-end">，</span>例如修改 flow table</li>
<li>read-state<span class="mojikumi-line-end">，</span>例如获取统计信息</li>
<li>send-packet<span class="mojikumi-line-end">，</span>让 router 发出一个 packet</li>
</ul>
<p>controlled device 可以向 SDN controller 发送<span class="mojikumi-line-end">：</span></p>
<ul>
<li>flow-removed: 通知一个 flow table entry 已被移除<span class="mojikumi-line-start">（</span>timeout 或者被 modify-state 删除<span class="mojikumi-line-end">）</span></li>
<li>port-status: 例如一个 link up/down 了</li>
<li>packet-in: 如果一个 packet 在 flow table 中没有 match<span class="mojikumi-line-end">，</span>或者 action 为发送到 controller</li>
</ul>
<h2 id="icmp-the-internet-control-message-protocol" class="heading"><a href="#icmp-the-internet-control-message-protocol" class="heading-anchor" aria-label="章节： ICMP: The Internet Control Message Protocol" tabindex="-1"></a><span>ICMP: The Internet Control Message Protocol</span></h2>
<p>ICMP 用来进行 router 和 host 之间的通信<span class="mojikumi-line-end">，</span>作为 IP payload 进行传输<span class="mojikumi-line-end">。</span></p>
<p>ICMP message 有很多种<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li>用来 ping 的 echo request 和 echo reply</li>
<li>destination network/host/protocol/port unreachable</li>
<li>router advertisement</li>
<li>router discovery</li>
<li>TTL expired</li>
<li>IP header bad</li>
</ul>
<p>Traceroute 就是通过 ICMP 实现的<span class="mojikumi-line-end">：</span>向一个 unlikely port number 发送 TTL 递增的 UDP datagram<span class="mojikumi-line-end">，</span>通过 TTL expired 得到每个 router 的信息<span class="mojikumi-line-end">，</span>通过 port unreachable 得到终点的信息<span class="mojikumi-line-end">。</span></p>
<h2 id="network-management-and-snmp-netconfyang" class="heading"><a href="#network-management-and-snmp-netconfyang" class="heading-anchor" aria-label="章节： Network Management and SNMP, NETCONF/YANG" tabindex="-1"></a><span>Network Management and SNMP, NETCONF/YANG</span></h2>
<blockquote>
<p>Network management involves the deployment, integration and coordination of all the hardware, software and human elements to monitor, test, poll, configure, analyze, evaluate, and control the network and element resources to meet the real-time, operational performance and quality-of-service (QoS) requirements at reasonable cost.<sup><a href="#user-content-fn-saydam-1996" id="user-content-fnref-saydam-1996" data-footnote-ref aria-describedby="footnote-label">2</a></sup></p>
</blockquote>
<p>network management 包括 managing server (以及 network manager)<span class="mojikumi-line-end">、</span>managed device<span class="mojikumi-line-end">、</span>data<span class="mojikumi-line-start">（</span>每个 device 有 configuration<span class="mojikumi-line-end">、</span>operational data<span class="mojikumi-line-end">、</span>device statistics<span class="mojikumi-line-end">，</span>而 managing server 有每个 device 以及整个 network 的 data<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>network management agent<span class="mojikumi-line-end">、</span>network management protocol<span class="mojikumi-line-end">。</span></p>
<p>network management 有若干方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>CLI: error-prone<span class="mojikumi-line-end">，</span>难以 scale<span class="mojikumi-line-end">。</span></li>
<li>SNMP/MIB: 每个 device 有 management information base (MIB) objects<span class="mojikumi-line-end">，</span>可以通过 simple network management protocol (SNMP) 来获取/设置 MIB objects 中的 data<span class="mojikumi-line-end">，</span>device 也可以通过 trap message 向 managing server 通知状态变化<span class="mojikumi-line-end">。</span>SNMP/MIB 是针对单个 device 的<span class="mojikumi-line-end">，</span>也难以 scale<span class="mojikumi-line-end">。</span></li>
<li>NETCONF/YANG: NETCONF 比起 SNMP 更注重于配置管理<span class="mojikumi-line-end">，</span>可以一次性操控多个 device (atomic network management transaction)<span class="mojikumi-line-end">，</span>可以设置 constraint 检查配置的正确性<span class="mojikumi-line-end">，</span>使用 YANG 作为 data modeling language<span class="mojikumi-line-end">，</span>以 XML 格式通过 TLS 进行通信<span class="mojikumi-line-end">。</span></li>
</ul>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig-5.7-b">
<p>p393, Figure 5.7: Changes in link cost, b. <a href="#user-content-fnref-fig-5.7-b" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-saydam-1996">
<p>Saydam, T., Magedanz, T. From networks and network management into service and service management. J Netw Syst Manage 4, 345–348 (1996). <a href="https://doi.org/10.1007/BF02283158">https<wbr>://<wbr>doi<wbr>.<wbr>org<wbr>/<wbr>10<wbr>.<wbr>1007<wbr>/<wbr>BF02283158</a> <a href="#user-content-fnref-saydam-1996" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第四章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/06/cnatda-4</link>
            <guid>https://ouuan.moe/post/2023/06/cnatda-4</guid>
            <pubDate>Wed, 05 Jul 2023 14:31:33 GMT</pubDate>
            <description><![CDATA[

<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第四章 <span class="mojikumi">“</span>The Network Layer: Data Plane<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[

<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第四章 <span class="mojikumi">“</span>The Network Layer: Data Plane<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="overview-of-network-layer" class="heading"><a href="#overview-of-network-layer" class="heading-anchor" aria-label="章节： Overview of Network Layer" tabindex="-1"></a><span>Overview of Network Layer</span></h2>
<p>Network Layer 可以被细分为 data plane 和 control plane 两部分<span class="mojikumi-line-end">。</span></p>
<p>data plane 的主要功能是 <i>forwarding</i><span class="mojikumi-line-start">（</span>也称作 <i>switching</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>即一个 router 将 input link 收到的数据转发到正确的 output link<span class="mojikumi-line-end">。</span></p>
<p>control plane 的主要功能是 <i>routing</i><span class="mojikumi-line-end">，</span>即决定从 sending host 到 receiving host 的路径<span class="mojikumi-line-end">。</span></p>
<p>router 中会有一个 <i>forwarding table</i><span class="mojikumi-line-end">，</span>从 packet header 中选取某些 field 用来 index forwarding table<span class="mojikumi-line-end">，</span>得到 outgoing link interface<span class="mojikumi-line-end">。</span></p>
<p>计算 forwarding table 则是 control plane 的任务<span class="mojikumi-line-end">，</span>有两种实现方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>the traditional approach: router 之间根据 routing protocol 互相通信<span class="mojikumi-line-end">，</span>根据 routing algorithm 计算得到 forwarding table<span class="mojikumi-line-end">。</span></li>
<li>the SDN approach: router 只实现 forwarding<span class="mojikumi-line-end">，</span>而 routing 由一个 remote controller 完成<span class="mojikumi-line-end">：</span>router 向 remote controller 发送信息<span class="mojikumi-line-end">，</span>由 remote controller 计算得到 forwarding table 发给 router<span class="mojikumi-line-end">。</span>这个 remote controller 通常是由软件实现的<span class="mojikumi-line-end">，</span>所以这种方法被称作 <i>software-defined networking</i> (SDN)<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="what’s-inside-a-router" class="heading"><a href="#what’s-inside-a-router" class="heading-anchor" aria-label="章节： What’s Inside a Router?" tabindex="-1"></a><span>What<span class="mojikumi-narrow-left">’</span>s Inside a Router?</span></h2>
<p>router 一般包含以下部分<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>input ports</p>
<ul>
<li>incoming link 的 physical layer 和 link layer</li>
<li>input queue</li>
<li>lookup:
<ul>
<li>从 forwarding table 查 output port</li>
<li>将 control packet<span class="mojikumi-line-start">（</span>例如包含 routing protocol information 的 packet<span class="mojikumi-line-end">）</span>forward 到 routing processor</li>
</ul>
</li>
</ul>
</li>
<li>
<p>switching fabric: 连接 input ports 和 output ports</p>
</li>
<li>
<p>output ports</p>
<ul>
<li>outgoing link 的 link layer 和 physical layer</li>
<li>output queue</li>
</ul>
</li>
<li>
<p>routing processor: 得到 forwarding table<span class="mojikumi-line-end">，</span>进行 network management</p>
<ul>
<li>traditional: 执行 routing protocol</li>
<li>SDN: 与 remote controller 通信</li>
</ul>
</li>
</ul>
<p>为了保证通信速度<span class="mojikumi-line-end">，</span>forwarding 的用时需要在 ns 级<span class="mojikumi-line-end">，</span>所以要用硬件实现<span class="mojikumi-line-end">；</span>而 control plane 的用时一般在 ms 或 s 级<span class="mojikumi-line-end">，</span>可以用软件实现<span class="mojikumi-line-end">。</span></p>
<h3 id="input-port-processing-and-destination-based-forwarding" class="heading"><a href="#input-port-processing-and-destination-based-forwarding" class="heading-anchor" aria-label="章节： Input Port Processing and Destination-Based Forwarding" tabindex="-1"></a><span>Input Port Processing and Destination-Based Forwarding</span></h3>
<p>多个 input port 可以合并到一个 line card 上<span class="mojikumi-line-end">。</span></p>
<p>forwarding table 会从 routing processor 给每个 line card 都复制一份<span class="mojikumi-line-end">，</span>从而可以在每个局部分别计算<span class="mojikumi-line-end">，</span>不需要集中计算<span class="mojikumi-line-end">。</span></p>
<p>对于 destination-based forwarding<span class="mojikumi-line-end">，</span>forwarding table 一般是 index 为 IP 地址前缀<span class="mojikumi-line-end">，</span>value 为 link interface<span class="mojikumi-line-end">，</span>采用 longest prefix matching<span class="mojikumi-line-end">。</span></p>
<p>lookup 通常要在 ns 级别的时间内完成<span class="mojikumi-line-end">，</span>而 forwarding table 很大<span class="mojikumi-line-end">，</span>不仅需要通过硬件实现<span class="mojikumi-line-end">，</span>还需要使用特殊的算法或存储器<span class="mojikumi-line-end">，</span>例如使用 TCAM<span class="mojikumi-line-end">。</span></p>
<p>input port processing 除了 lookup 还有 physical-layer 和 link-layer processing<span class="mojikumi-line-end">，</span>还需要检查/更新 packet version<span class="mojikumi-line-end">、</span>checksum<span class="mojikumi-line-end">、</span>TTL<span class="mojikumi-line-end">，</span>更新 network management 的 counter<span class="mojikumi-line-end">。</span></p>
<h3 id="switching" class="heading"><a href="#switching" class="heading-anchor" aria-label="章节： Switching" tabindex="-1"></a><span>Switching</span></h3>
<p>switching 有多种形式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>via memory: packet 从 input port 复制到 memory 再复制到 output port<span class="mojikumi-line-end">，</span>如果使用集中的 memory 而非每个 line card 分别的 memory<span class="mojikumi-line-end">，</span>则传输速率会受 memory 的速率限制<span class="mojikumi-line-end">。</span></li>
<li>via bus: 将 packet 加上一个 switch-internal label 再通过 bus 发送给所有 output port<span class="mojikumi-line-end">，</span>收到后根据 label 决定是否保留这个 packet<span class="mojikumi-line-end">，</span>传输速率会受 bus 的速率限制<span class="mojikumi-line-end">。</span></li>
<li>via interconnection network: 每个 input port 对应一个 bus<span class="mojikumi-line-end">，</span>每个 output port 对应一个 bus<span class="mojikumi-line-end">，</span>每对 input port bus 和 output port bus 之间都有 crosspoint<span class="mojikumi-line-end">，</span>通过控制 crosspoint 来控制从哪传到哪<span class="mojikumi-line-start">（</span>结构和 ROM 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这是 non-blocking 的<span class="mojikumi-line-end">，</span>只要两个 packet 的 output port 不同就可以同时传输<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="input-queuing" class="heading"><a href="#input-queuing" class="heading-anchor" aria-label="章节： Input Queuing" tabindex="-1"></a><span>Input Queuing</span></h3>
<p>如果 switching fabric 的速率达到了所有 input port 的速率之和<span class="mojikumi-line-end">，</span>则不会发生 input queuing<span class="mojikumi-line-end">，</span>否则可能要等待其他 packet 在 switching fabric 上传输<span class="mojikumi-line-end">。</span></p>
<p>以 switching via interconnection network 为例<span class="mojikumi-line-end">，</span>只有多个 packet 传输到同一个 output port 才会发生 input queuing<span class="mojikumi-line-end">，</span>但是一个 packet 即使没有和它 output port 相同的 packet 也可能因为 input queue 中在它前面的其他 packet 而被 block<span class="mojikumi-line-end">，</span>即 HOL blocking<span class="mojikumi-line-end">。</span></p>
<h3 id="output-queuing" class="heading"><a href="#output-queuing" class="heading-anchor" aria-label="章节： Output Queuing" tabindex="-1"></a><span>Output Queuing</span></h3>
<p>如果 packet 到达 output port 的速率超过了 output line 的速率<span class="mojikumi-line-end">，</span>则会发生 output queuing<span class="mojikumi-line-end">。</span></p>
<p>若 packet 到达时 buffer 已经满了<span class="mojikumi-line-end">，</span>则需要决定 drop 哪个 packet<span class="mojikumi-line-end">。</span>在 buffer 满之前进行 packet dropping 或 marking 称作 active queue management (AQM)<span class="mojikumi-line-end">，</span>例如 <a href="/post/2023/06/cnatda-3#network-assisted-explicit-congestion-notification">ECN</a><span class="mojikumi-line-end">、</span>random early detection (RED) 等<span class="mojikumi-line-end">。</span></p>
<h3 id="how-much-buffering-is-“enough”" class="heading"><a href="#how-much-buffering-is-“enough”" class="heading-anchor" aria-label="章节： How Much Buffering Is “Enough”?" tabindex="-1"></a><span>How Much Buffering Is <span class="mojikumi">“</span>Enough<span class="mojikumi-line-end">”</span>?</span></h3>
<p>有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span> 个 independent TCP flow 经过一个带宽为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span> 的 link 时<span class="mojikumi-line-end">，</span>buffer 需要有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">T</mi></mrow><mo>⋅</mo><mi>C</mi><mi mathvariant="normal">/</mi><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\mathrm{RTT} \cdot C / \sqrt N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathrm">RTT</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1767em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9267em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;padding-left:0.833em;">N</span></span><span style="top:-2.8867em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1133em;"><span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>更大的 buffer 能减少 packet loss<span class="mojikumi-line-end">，</span>但可能会增加 delay<span class="mojikumi-line-end">。</span>TCP 可能会使得 buffer 一直不被清空<span class="mojikumi-line-end">，</span>从而导致 queuing delay 是 constant 且 persistent 的<span class="mojikumi-line-end">，</span>这被称作 <i>bufferbloat</i><span class="mojikumi-line-end">，</span>可以通过一些 AQM 措施来缓解<span class="mojikumi-line-end">。</span></p>
<h3 id="packet-scheduling" class="heading"><a href="#packet-scheduling" class="heading-anchor" aria-label="章节： Packet Scheduling" tabindex="-1"></a><span>Packet Scheduling</span></h3>
<ul>
<li>FIFO (FCFS)</li>
<li>priority queuing<br>
<span class="mojikumi-line-start">（</span>在 non-preemptive priority queuing 中<span class="mojikumi-line-end">，</span>如果低优先级的 packet 已经开始传输<span class="mojikumi-line-end">，</span>高优先级的 packet 再到来不会打断传输<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></li>
<li>weighted fair queuing (WFQ): 给每种 packet 类型一个 weight<span class="mojikumi-line-end">，</span>决定选择这种类型的频率<span class="mojikumi-line-end">。</span></li>
</ul>
<p>packet scheduling 可以根据 IP datagram header 中的各种信息优先传输或 block 某一类 packet<span class="mojikumi-line-end">。</span><i>Order on Protecting and Promoting an Open Internet</i> (2015) 规定了 net neutrality 的三条原则<span class="mojikumi-line-end">：</span>no blocking<span class="mojikumi-line-end">、</span>no throttling<span class="mojikumi-line-end">、</span>no paid prioritization<span class="mojikumi-line-end">。</span>而 <i>Restoring Internet Freedom Order</i> (2017) 则收回了这些限制<span class="mojikumi-line-end">，</span>而是注重于 ISP transparency<span class="mojikumi-line-end">。</span></p>
<h2 id="the-internet-protocol-ip" class="heading"><a href="#the-internet-protocol-ip" class="heading-anchor" aria-label="章节： The Internet Protocol (IP)" tabindex="-1"></a><span>The Internet Protocol (IP)</span></h2>
<h3 id="ipv4-datagram-format" class="heading"><a href="#ipv4-datagram-format" class="heading-anchor" aria-label="章节： IPv4 Datagram Format" tabindex="-1"></a><span>IPv4 Datagram Format</span></h3>
<p>IPv4 datagram 的格式如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-4.17" id="user-content-fnref-fig-4.17" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-4.17.68bb8fa1.webp"><img srcset="/assets/cnatda-fig-4.17.7354e07d.png" loading="lazy" src="/assets/cnatda-fig-4.17.7354e07d.png" width="757" height="553" alt="IPv4 datagram format"></picture></p>
<ul>
<li>version: 例如 IPv4<span class="mojikumi-line-end">、</span>IPv6</li>
<li>header length: 因为可能有 options<span class="mojikumi-line-end">，</span>header 是不定长的</li>
<li>type of service (TOS): 用来识别各种类型的流量<span class="mojikumi-line-end">，</span>例如 real-time datagram (对延时敏感)<span class="mojikumi-line-end">，</span>其中有 2 个 bit 用于 <a href="/post/2023/06/cnatda-3#network-assisted-explicit-congestion-notification">ECN</a></li>
<li>datagram length: header + data 的长度<span class="mojikumi-line-end">，</span>为放入 Ethernet frame<span class="mojikumi-line-end">，</span>一般不超过 1500 bytes</li>
<li>identifier<span class="mojikumi-line-end">、</span>flags<span class="mojikumi-line-end">、</span>fragmentation offset: 用于 IP fragmentation<span class="mojikumi-line-end">，</span>在 IPv6 中已被弃用</li>
<li>TTL: 为了防止死循环<span class="mojikumi-line-end">，</span>TTL 每经过一个 router 会减一<span class="mojikumi-line-end">，</span>到 0 就会被 drop</li>
<li>protocol: transport-layer protocol<span class="mojikumi-line-end">，</span>用来连接 network layer 和 transport layer</li>
<li>header checksum: 只计算 header 不计算 data<span class="mojikumi-line-end">，</span>使用 ones<span class="mojikumi-narrow-left">’</span> complement sum<span class="mojikumi-line-end">；</span>header 每经过一个 router 都会更新<span class="mojikumi-line-end">，</span>checksum 也要相应地更新</li>
<li>source and destination IP address</li>
<li>options: 由于会影响性能<span class="mojikumi-line-end">，</span>在 IPv6 中已被弃用</li>
<li>data: 一般是 transport-layer segment<span class="mojikumi-line-end">，</span>但也可能是 ICMP message 之类的其他数据</li>
</ul>
<h3 id="ipv4-addressing" class="heading"><a href="#ipv4-addressing" class="heading-anchor" aria-label="章节： IPv4 Addressing" tabindex="-1"></a><span>IPv4 Addressing</span></h3>
<p>一般来说<span class="mojikumi-line-end">，</span>每个 host 有至少一个 interface 来接入网络<span class="mojikumi-line-end">，</span>每个 router 有多个 interface 来与其他 router 或 host 连接<span class="mojikumi-line-end">。</span>每个<span class="mojikumi-line-start">（</span>接入 Internet 而不在 NAT 后的<span class="mojikumi-line-end">）</span>interface 都有一个 IP address<span class="mojikumi-line-end">。</span></p>
<p>多个 host 和 router 之间可以通过 Ethernet switch<span class="mojikumi-line-end">、</span>wireless access point 等方式互相连接<span class="mojikumi-line-end">，</span>构成一个 routerless network<span class="mojikumi-line-end">。</span>在 IP 中<span class="mojikumi-line-end">，</span>这被称作一个 <i>subnet</i><span class="mojikumi-line-end">，</span>即 interface 之间由 link 连接<span class="mojikumi-line-end">、</span>不经过 router 和 host 而构成的连通块<span class="mojikumi-line-end">。</span></p>
<p>一个 subnet 会有一个 subnet address<span class="mojikumi-line-end">，</span>例如 223.1.1.0/24<span class="mojikumi-line-end">，</span>而其中的 IP address 包括 223.1.1.1<span class="mojikumi-line-end">、</span>223.1.1.2<span class="mojikumi-line-end">、</span>223.1.1.3 等<span class="mojikumi-line-end">。</span></p>
<p>Internet 分配 IP address 的方案是 classless interdomain routing (CIDR)<span class="mojikumi-line-end">，</span>其规定了 subnet address 的格式<span class="mojikumi-line-end">，</span>例如 <code>/24</code> 表示前 24 位是这个 subnet 的地址<span class="mojikumi-line-start">（</span>network prefix<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>这个 subnet 中的 IP address 的后 8 位可以取其他值<span class="mojikumi-line-end">。</span>这样的地址分配方案和 router lookup 使用的 longest prefix matching 配合在一起可以减少 lookup table 的表项<span class="mojikumi-line-end">。</span></p>
<p>在 CIDR 之前<span class="mojikumi-line-end">，</span>曾使用过 classful addressing<span class="mojikumi-line-end">，</span>相当于是 mask length 只能是 8<span class="mojikumi-line-end">、</span>16<span class="mojikumi-line-end">、</span>24<span class="mojikumi-line-end">，</span>分别被称作 class A, B, C network<span class="mojikumi-line-end">，</span>这使得不同 class 之间的 address 数量相差过大<span class="mojikumi-line-end">，</span>难以按需选择<span class="mojikumi-line-end">，</span>容易造成浪费<span class="mojikumi-line-end">，</span>最终促成了 classless 的 CIDR<span class="mojikumi-line-end">。</span></p>
<p>longest prefix matching 也使得 address aggregation 成为可能<span class="mojikumi-line-end">：</span>可以在 lookup table 中将多个有 common prefix 的 subnet 合并为一个更大的 subnet address<span class="mojikumi-line-end">，</span>即使这些 subnet 并没有覆盖这个大的 subnet address 中的所有 address<span class="mojikumi-line-end">，</span>没覆盖到的部分还可以由更小的 subnet address<span class="mojikumi-line-start">（</span>更长的 prefix<span class="mojikumi-line-end">）</span>override<span class="mojikumi-line-end">。</span></p>
<p>255.255.255.255 是一个特殊的 IP address<span class="mojikumi-line-end">，</span>表示 broadcast<span class="mojikumi-line-end">，</span>destination address 为 broadcast address 的 datagram 会发送给整个 subnet 内的所有 host<span class="mojikumi-line-end">，</span>还有可能发送给 neighbour<span class="mojikumi-line-end">。</span></p>
<h3 id="obtaining-addresses" class="heading"><a href="#obtaining-addresses" class="heading-anchor" aria-label="章节： Obtaining Addresses" tabindex="-1"></a><span>Obtaining Addresses</span></h3>
<h4 id="obtaining-a-block-of-addresses" class="heading"><a href="#obtaining-a-block-of-addresses" class="heading-anchor" aria-label="章节： Obtaining a Block of Addresses" tabindex="-1"></a><span>Obtaining a Block of Addresses</span></h4>
<p>IP address 由 ICANN 管理<span class="mojikumi-line-end">，</span>ISP 以及 organization 可以从由 ICANN 管理的 Internet registry (Address Supporting Organization) 处获得 IP address block<span class="mojikumi-line-end">。</span></p>
<p>ISP 可以将其拥有的 IP address block 再进行细分来提供给用户<span class="mojikumi-line-end">。</span></p>
<h4 id="obtaining-a-host-address-dhcp" class="heading"><a href="#obtaining-a-host-address-dhcp" class="heading-anchor" aria-label="章节： Obtaining a Host Address: DHCP" tabindex="-1"></a><span>Obtaining a Host Address: DHCP</span></h4>
<p>router 的 IP address 一般是手动<span class="mojikumi-line-start">（</span>半自动<span class="mojikumi-line-end">）</span>配置的<span class="mojikumi-line-end">，</span>而 host 的 IP address 通常是通过 Dynamic Host Configuration Protocol (DHCP) 自动进行的<span class="mojikumi-line-end">。</span></p>
<p>使用 DHCP 能减少手动配置的工作量<span class="mojikumi-line-end">，</span>尤其是在 host 经常移动时<span class="mojikumi-line-start">（</span>例如笔记本电脑在教室和寝室之间移动<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>手动配置几乎是不可能的<span class="mojikumi-line-end">。</span></p>
<p>DHCP 可以给 host 提供一个固定或临时的 IP address<span class="mojikumi-line-end">，</span>除此之外还能提供 subnet mask<span class="mojikumi-line-end">、</span>first-hop router address (default gateway)<span class="mojikumi-line-end">、</span>local DNS server address 等信息<span class="mojikumi-line-end">。</span></p>
<p>每个 subnet 一般都会有至少一个 DHCP server<span class="mojikumi-line-end">，</span>或者一个知道 DHCP server address 的 DHCP relay agent<span class="mojikumi-line-start">（</span>一个 router<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>使用 DHCP 获取 IP address 的步骤如下<span class="mojikumi-line-end">：</span></p>
<ol>
<li>host 发送 DHCP discover message<span class="mojikumi-line-end">：</span>通过 UDP 发送到 255.255.255.255<span class="mojikumi-line-end">、</span>port 67<span class="mojikumi-line-end">，</span>包含一个 transaction ID<span class="mojikumi-line-start">（</span>由于 DHCP 使用 broadcast<span class="mojikumi-line-end">，</span>需要通过 transaction ID 区分不同 host<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>DHCP server 收到 DHCP discover message 后发送 DHCP offer message<span class="mojikumi-line-end">，</span>是一个发送到 port 68 的 broadcast<span class="mojikumi-line-end">，</span>包含 transaction ID<span class="mojikumi-line-end">、</span>proposed IP address<span class="mojikumi-line-end">、</span>IP address lease time<span class="mojikumi-line-start">（</span>proposed IP address 的有效时间<span class="mojikumi-line-end">，</span>一般是几个小时或几天<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>DHCP server address 等信息<span class="mojikumi-line-end">。</span></li>
<li>host 收到 DHCP offer message 后<span class="mojikumi-line-end">，</span>选择其中一个<span class="mojikumi-line-start">（</span>如果收到了多个<span class="mojikumi-line-end">）</span>发送 DHCP request message<span class="mojikumi-line-end">，</span>包含和 DHCP offer message 类似的信息<span class="mojikumi-line-end">，</span>也是一个 broadcast<span class="mojikumi-line-start">（</span>虽然此时已知 DHCP server address<span class="mojikumi-line-end">，</span>但可能有多个 DHCP server<span class="mojikumi-line-end">，</span>broadcast 可以让其他 server 知道可以取消 address reservation 了<sup><a href="#user-content-fn-dhcp-request-broadcast" id="user-content-fnref-dhcp-request-broadcast" data-footnote-ref aria-describedby="footnote-label">2</a></sup><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>DHCP server 收到 DHCP request message 后回应 DHCP ACK message<span class="mojikumi-line-end">。</span></li>
</ol>
<p><span class="mojikumi-line-start">（</span>实际上<span class="mojikumi-line-end">，</span>DHCP offer 和 ACK 也可能不是 broadcast<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-dhcp-offer-ack-broadcast" id="user-content-fnref-dhcp-offer-ack-broadcast" data-footnote-ref aria-describedby="footnote-label">3</a></sup><span class="mojikumi-line-end">）</span></p>
<p>host 收到 DHCP ACK message 后就可以在 lease time 内使用这个 IP address 了<span class="mojikumi-line-end">。</span>DHCP 还提供了延长 lease time 的机制<span class="mojikumi-line-end">。</span></p>
<h3 id="network-address-translation-nat" class="heading"><a href="#network-address-translation-nat" class="heading-anchor" aria-label="章节： Network Address Translation (NAT)" tabindex="-1"></a><span>Network Address Translation (NAT)</span></h3>
<p>subnet 需要一段连续的 IP address<span class="mojikumi-line-end">，</span>如果设备数量增长超过了原来的 IP address block 大小<span class="mojikumi-line-end">，</span>新地址的分配将会变得困难<span class="mojikumi-line-end">。</span>而且<span class="mojikumi-line-end">，</span>每个设备都有一个 globally unique address 对于 IPv4 来说难以承担<span class="mojikumi-line-end">。</span>Network Address Translation (NAT) 可以解决<span class="mojikumi-line-start">（</span>缓解<span class="mojikumi-line-end">）</span>这些问题<span class="mojikumi-line-end">。</span></p>
<p>使用 NAT 时<span class="mojikumi-line-end">，</span>subnet 内使用 IP address space reserved for private network<span class="mojikumi-line-start">（</span>10.0.0.0/8<span class="mojikumi-line-end">、</span>172.16.0.0/12<span class="mojikumi-line-end">、</span>192.168.0.0/16<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>有一个 router 与外界连接并进行 NAT<span class="mojikumi-line-end">，</span>这个 router 对外界表现为 a single device with a single IP address<span class="mojikumi-line-end">，</span>通过 NAT translation table 在 private address + port 和 WAN-side address + port 之间进行转换<span class="mojikumi-line-start">（</span>使用不同的 NAT port 来区分不同的 host 以及 application port<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这个 router 的 public address 从 ISP<span class="mojikumi-line-start">（</span>可以通过 DHCP<span class="mojikumi-line-end">）</span>获得<span class="mojikumi-line-end">，</span>而它作为 DHCP server 为 subnet 内部提供 private address<span class="mojikumi-line-end">。</span></p>
<p>NAT 一般会改变 port<span class="mojikumi-line-end">，</span>而有时需要使用特定的 port 不能改变<span class="mojikumi-line-end">，</span>可以通过 NAT traversal 来实现<span class="mojikumi-line-end">。</span><span class="heimu"><span class="mojikumi-line-start">（</span>勾起了一些远古的 MC 联机回忆<span class="mojikumi-line-end">，</span>虽然当时并没成功<span class="mojikumi-line-start">（</span></span></p>
<h3 id="ipv6" class="heading"><a href="#ipv6" class="heading-anchor" aria-label="章节： IPv6" tabindex="-1"></a><span>IPv6</span></h3>
<p>为了解决 IPv4 address 即将耗尽的问题<span class="mojikumi-line-end">，</span>IPv6 被研发了出来<span class="mojikumi-line-end">。</span>除了将 IP address 从 32 bits 扩展到 128 bits<span class="mojikumi-line-end">，</span>IPv6 还顺带解决了 IPv4 中的一些其他问题<span class="mojikumi-line-end">。</span></p>
<p>IPv6 datagram 的格式如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-4.26" id="user-content-fnref-fig-4.26" data-footnote-ref aria-describedby="footnote-label">4</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-4.26.15f4647d.webp"><img srcset="/assets/cnatda-fig-4.26.7d119d85.png" loading="lazy" src="/assets/cnatda-fig-4.26.7d119d85.png" width="755" height="419" alt="IPv6 datagram format"></picture></p>
<p>IPv6 的主要变化<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 unicast 和 broadcast 的基础上引入了 anycast<span class="mojikumi-line-end">，</span>即向多个地址之一发送信息<span class="mojikumi-line-end">，</span>例如可以用来向多个有相同内容的 server 发送 anycast 来获取其中最近的一个的 response<span class="mojikumi-line-end">。</span></li>
<li>使用定长 (40 bytes) 的 header<span class="mojikumi-line-end">。</span></li>
<li>引入了 <i>flow label</i> 使得 router 可以对 flow 进行特殊处理<span class="mojikumi-line-end">。</span></li>
<li>删除了 fragmentation 功能以提高性能<span class="mojikumi-line-end">。</span></li>
<li>删除了 checksum<span class="mojikumi-line-end">，</span>因为 transport-layer segment 一般已经有 checksum 了<span class="mojikumi-line-end">，</span>每次修改 TTL 都更新 checksum 也非常耗时<span class="mojikumi-line-end">。</span></li>
<li>删除了 options<span class="mojikumi-line-end">，</span>而 next header 不一定是 transport-layer protocol<span class="mojikumi-line-end">，</span>也可以是 option<span class="mojikumi-line-end">。</span></li>
<li>TOS 改为 traffic class<span class="mojikumi-line-end">，</span>TTL 改为 hop limit<span class="mojikumi-line-end">，</span>datagram length 改为 payload length<span class="mojikumi-line-start">（</span>不含 header length<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>protocol 改为 next header<span class="mojikumi-line-end">。</span></li>
</ul>
<p>network-layer protocol 的改动非常困难<span class="mojikumi-line-end">，</span>IPv4 到 IPv6 的转换至今仍在进行中<span class="mojikumi-line-end">。</span></p>
<p>新的设备<span class="mojikumi-line-start">（</span>router<span class="mojikumi-line-end">）</span>可以同时支持 IPv4 和 IPv6<span class="mojikumi-line-end">，</span>但旧的设备只能支持 IPv4<span class="mojikumi-line-end">，</span>为了使它们共存<span class="mojikumi-line-end">，</span>可以采用 <i>tunneling</i><span class="mojikumi-line-end">，</span>即将 IPv6 datagram 作为 IPv4 的 payload 进行传输<span class="mojikumi-line-end">，</span>两个 IPv6 router 之间的一系列 IPv4 router 被称作 <i>tunnel</i><span class="mojikumi-line-end">。</span></p>
<h3 id="generalized-forwarding-and-sdn" class="heading"><a href="#generalized-forwarding-and-sdn" class="heading-anchor" aria-label="章节： Generalized Forwarding and SDN" tabindex="-1"></a><span>Generalized Forwarding and SDN</span></h3>
<p>generalized forwarding 基于<span class="mojikumi-line-start">“</span>match-plus-action<span class="mojikumi-line-end">”</span>的原则<span class="mojikumi-line-end">，</span>比起 destination-based forwarding<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">“</span>match<span class="mojikumi-line-end">”</span>时可以考虑 IP header 中 destination 以外的其他 field<span class="mojikumi-line-end">，</span>也可以考虑 link-layer header<span class="mojikumi-line-end">、</span>transport-layer header<span class="mojikumi-line-end">、</span>ingress port 等<span class="mojikumi">；</span><wbr><span class="mojikumi-line-start">“</span>action<span class="mojikumi-line-end">”</span>除了 forward 还可以是 drop<span class="mojikumi-line-end">、</span>修改 header field 等<span class="mojikumi-line-end">。</span></p>
<p>OpenFlow 是一个 generalized forwarding 的协议<span class="mojikumi-line-end">，</span>规定了 match 时可以/不能使用哪些 field<span class="mojikumi-line-end">，</span>以及可以采取哪些 action<span class="mojikumi-line-end">。</span>设计一个 flow table<span class="mojikumi-line-end">，</span>就可以实现各种功能<span class="mojikumi-line-end">，</span>例如 forwarding<span class="mojikumi-line-end">、</span>load balancing<span class="mojikumi-line-end">、</span>NAT<span class="mojikumi-line-end">、</span>firewall 等<span class="mojikumi-line-end">。</span></p>
<p>P4 (Programming Protocol-independent Packet Processors) 是一个用来实现 generalized forwarding 的 programming language<span class="mojikumi-line-end">，</span>可以比 flow table 更加灵活<span class="mojikumi-line-end">。</span></p>
<h2 id="middleboxes" class="heading"><a href="#middleboxes" class="heading-anchor" aria-label="章节： Middleboxes" tabindex="-1"></a><span>Middleboxes</span></h2>
<p>在 network 中<span class="mojikumi-line-end">，</span>除了基础的 forwarding<span class="mojikumi-line-end">，</span>还有一些用来实现其他功能的设施<span class="mojikumi-line-end">，</span>称作 <i>middlebox</i><span class="mojikumi-line-end">：</span></p>
<ul>
<li>NAT translation</li>
<li>security services<span class="mojikumi-line-end">，</span>例如 firewall<span class="mojikumi-line-end">、</span>email filter</li>
<li>performance enhancement<span class="mojikumi-line-end">，</span>例如 Web cache<span class="mojikumi-line-end">、</span>load balancing<span class="mojikumi-line-end">、</span>TCP splitter</li>
</ul>
<p>为了降低运营维护的成本<span class="mojikumi-line-end">，</span>有的 middlebox 用软件甚至云服务代替硬件来实现<span class="mojikumi-line-end">，</span>称作 network function virtualization (NFV)<span class="mojikumi-line-end">。</span></p>
<p>middlebox 在一定程度上破坏了 network 的 layered architecture<span class="mojikumi-line-end">：</span>很多 middlebox 位于 network layer<span class="mojikumi-line-end">，</span>却依赖于 transport layer 甚至 application layer 的信息<span class="mojikumi-line-end">。</span>例如 NAT 会修改 IP address 和 port<span class="mojikumi-line-end">，</span>firewall 可能依赖于 application message 的内容<span class="mojikumi-line-end">。</span></p>
<p>Internet architecture 的基本原则是<span class="mojikumi-line-start">“</span>the goal is connectivity, the tool is the Internet Protocol, and the intelligence is end to end rather than hidden in the network<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-rfc-1958" id="user-content-fnref-rfc-1958" data-footnote-ref aria-describedby="footnote-label">5</a></sup>在 network layer 中只有 IP 一个 protocol<span class="mojikumi-line-end">、</span>将 complexity 放在 end system<span class="mojikumi-line-end">，</span>可以简化 network layer 的功能<span class="mojikumi-line-end">，</span>保证 connectivity<span class="mojikumi-line-end">，</span>而 middlebox 在一定程度上破坏了这样的原则<span class="mojikumi-line-end">。</span></p>
<p>尽管在架构上有些不完美<span class="mojikumi-line-end">，</span>但 middlebox 承担着非常重要的功能<span class="mojikumi-line-end">，</span>并不会消亡<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig-4.17">
<p>p331, Figure 4.17: IPv4 datagram format <a href="#user-content-fnref-fig-4.17" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-dhcp-request-broadcast">
<p><a href="https://networkengineering.stackexchange.com/a/48881">Why is broadcast used at the DHCPREQUEST step? - Network Engineering Stack Exchange</a> <a href="#user-content-fnref-dhcp-request-broadcast" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-dhcp-offer-ack-broadcast">
<p><a href="https://stackoverflow.com/a/10757849">Why are DHCP Offer and Ack broadcasted? - Stack Overflow</a> <a href="#user-content-fnref-dhcp-offer-ack-broadcast" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-4.26">
<p>p349, Figure 4.26: IPv6 datagram format <a href="#user-content-fnref-fig-4.26" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-rfc-1958">
<p><a href="https://datatracker.ietf.org/doc/html/rfc1958#section-2">2. Is there an Internet Architecture? - RFC1958</a> <a href="#user-content-fnref-rfc-1958" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第三章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/06/cnatda-3</link>
            <guid>https://ouuan.moe/post/2023/06/cnatda-3</guid>
            <pubDate>Sat, 24 Jun 2023 11:29:55 GMT</pubDate>
            <description><![CDATA[



<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第三章 <span class="mojikumi">“</span>Transport Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[



<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第三章 <span class="mojikumi">“</span>Transport Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="introduction-and-transport-layer-services" class="heading"><a href="#introduction-and-transport-layer-services" class="heading-anchor" aria-label="章节： Introduction and Transport-Layer Services" tabindex="-1"></a><span>Introduction and Transport-Layer Services</span></h2>
<p>transport layer 将 application-layer message 封装于 transport-layer segment<span class="mojikumi-line-end">，</span>然后交给 network layer 进行传输<span class="mojikumi-line-end">，</span>将 network layer 提供的 host-to-host logical communication 扩展为了 process-to-process (application-to-application) logical communication<span class="mojikumi-line-end">。</span></p>
<p>Internet 的 network-layer protocol 是 Internet Protocol (IP)<span class="mojikumi-line-end">，</span>IP 提供的是 <span class="mojikumi">“</span>best-effort delivery service<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>就是说它会尽力但并不保证 datagram 能成功传输<span class="mojikumi-line-end">，</span>也不保证传输到的顺序以及数据的完整性<span class="mojikumi-line-end">、</span>正确性<span class="mojikumi-line-end">。</span></p>
<p>UDP 仅提供 process-to-process delivery 和 error checking<span class="mojikumi-line-end">，</span>同样是一个 unreliable service<span class="mojikumi-line-end">。</span>TCP 在 UDP 的基础上还提供 reliable data transfer 和 congestion control<span class="mojikumi-line-end">。</span></p>
<a id="segment-or-datagram" name="segment-or-datagram" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>segment or datagram?</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>在 CNATDA 中<span class="mojikumi-line-end">，</span>network layer packet 被统称为 <span class="mojikumi">“</span>segment<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>但一般应当是 TCP 的 packet 被称作 <span class="mojikumi">“</span>segment<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>而 UDP 的 packet 被称作 <span class="mojikumi">“</span>datagram<span class="mojikumi">”</span><wbr><span class="mojikumi-line-start">（</span>UDP 名字中的 <span class="mojikumi">“</span>D<span class="mojikumi">”</span> 就是 <span class="mojikumi">“</span>datagram<span class="mojikumi">”</span><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>为了方便<span class="mojikumi-line-end">，</span>我也将 network layer packet 统称为 <span class="mojikumi">“</span>segment<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>但在特指时<span class="mojikumi-line-end">，</span>称作 <span class="mojikumi">“</span>TCP segment<span class="mojikumi">”</span><span class="mojikumi">、</span><wbr><span class="mojikumi-line-start">“</span>UDP datagram<span class="mojikumi">”</span> 和 <span class="mojikumi">“</span>IP datagram<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>语境明确时也可能略去协议名<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h2 id="multiplexing-and-demultiplexing" class="heading"><a href="#multiplexing-and-demultiplexing" class="heading-anchor" aria-label="章节： Multiplexing and Demultiplexing" tabindex="-1"></a><span>Multiplexing and Demultiplexing</span></h2>
<p><dfn>multiplexing</dfn> 指的是将多个信道的信息合并到一个信道进行传输<span class="mojikumi-line-end">，</span>而 <dfn>demultiplexing</dfn> 指的是将这个合并后的信息再拆分到多个信道去<span class="mojikumi-line-end">。</span></p>
<p>一般来说<span class="mojikumi-line-end">，</span>一个 host 会有很多 application 从而有很多 socket<span class="mojikumi-line-end">，</span>但只有一个 transport layer 以及一个 network layer<span class="mojikumi-line-end">。</span></p>
<ul>
<li>在发送方<span class="mojikumi-line-end">，</span>transport layer 从多个 socket 收集 message 并发送给 network layer 的过程被称作 multiplexing<span class="mojikumi-line-end">；</span></li>
<li>在接收方<span class="mojikumi-line-end">，</span>transport layer 从 network layer 接收到 message 后传递给正确的 socket 的过程被称作 demultiplexing<span class="mojikumi-line-end">。</span></li>
</ul>
<p>multiplexing 以及 demultiplexing 需要每个 socket 有 unique identifier<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 UDP 中<span class="mojikumi-line-end">，</span>只以 port 作为 socket identifier</li>
<li>在 TCP 中<span class="mojikumi-line-end">，</span>以 destination port 和 source IP 作为 socket identifier</li>
</ul>
<h2 id="connectionless-transport-udp" class="heading"><a href="#connectionless-transport-udp" class="heading-anchor" aria-label="章节： Connectionless Transport: UDP" tabindex="-1"></a><span>Connectionless Transport: UDP</span></h2>
<p>UDP 仅提供 multiplexing and demultiplexing 以及 error checking<span class="mojikumi-line-end">，</span>但在一些 application 中它比 TCP 更加适合<span class="mojikumi-line-end">，</span>主要因为下列原因<span class="mojikumi-line-end">：</span></p>
<ul>
<li>更好地控制何时发送数据<span class="mojikumi-line-end">、</span>发送什么数据<span class="mojikumi-line-end">：</span>TCP 有 congestion control<span class="mojikumi-line-end">，</span>可能会延迟发送的时间<span class="mojikumi-line-end">；</span>在传输失败时会重新发送<span class="mojikumi-line-end">，</span>可能耗时很久才传输成功<span class="mojikumi-line-end">。</span></li>
<li>无需建立连接<span class="mojikumi-line-end">：</span>建立 TCP connection 会产生 delay<span class="mojikumi-line-end">。</span></li>
<li>无连接状态<span class="mojikumi-line-end">：</span>保存 TCP connection state 需要占用系统资源<span class="mojikumi-line-end">。</span></li>
<li>small header overhead<span class="mojikumi-line-end">：</span>TCP segment header 有 20 byte 的 overhead<span class="mojikumi-line-end">，</span>UDP 只有 8 byte<span class="mojikumi-line-end">。</span></li>
</ul>
<p>一些使用 UDP 的例子<span class="mojikumi-line-end">：</span></p>
<ul>
<li>DNS 使用 UDP 来避免建立 TCP 连接的 delay<span class="mojikumi-line-end">。</span></li>
<li>在 HTTP/3 中<span class="mojikumi-line-end">，</span>使用基于 UDP 的 application-layer protocol QUIC 来提供 reliable data transfer 并避免建立 TCP 连接的 delay<span class="mojikumi-line-end">。</span></li>
<li>在 network management (SNMP) 中<span class="mojikumi-line-end">，</span>使用 UDP 以在网络非常拥堵时发送消息<span class="mojikumi-line-end">。</span></li>
<li>在 multimedia application 尤其是即时通话中经常会使用 UDP<span class="mojikumi-line-end">，</span>因为对延时敏感而 loss-tolerant<span class="mojikumi-line-end">。</span></li>
</ul>
<p>但是<span class="mojikumi-line-end">，</span>尤其是传输 multimedia 时<span class="mojikumi-line-end">，</span>在没有 congestion control 的情况下传输大量数据可能导致网络拥堵<span class="mojikumi-line-end">，</span>进而导致 UDP 大量丢包而 TCP 传输缓慢<span class="mojikumi-line-end">。</span></p>
<p>UDP datagram 的结构为<span class="mojikumi-line-end">：</span></p>
<ul>
<li>source port (16 bits)</li>
<li>destination port (16 bits)</li>
<li>length (16 bits): 整个 datagram<span class="mojikumi-line-start">（</span>包含 header 和 data<span class="mojikumi-line-end">）</span>的 byte 数</li>
<li>checksum (16 bits)<span class="mojikumi-line-end">：</span>将 UDP datagram 以及 IP header 的一些 field 以 16 bits 为单位视作 ones<span class="mojikumi-narrow-left">’</span> complement integer 加在一起<span class="mojikumi-line-start">（</span>即在进位时加 1<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>最后取反<span class="mojikumi-line-start">（</span>即按位取反<span class="mojikumi">）</span><span class="mojikumi-line-end">；</span>校验时只需检查 sum 是否全 1</li>
<li>application data (message)</li>
</ul>
<p>UDP 的 checksum 只能用来进行 error detecting<span class="mojikumi-line-end">，</span>不能用来进行 error correcting<span class="mojikumi-line-end">，</span>错误时可以直接扔掉或者通知 application<span class="mojikumi-line-end">。</span></p>
<p>虽然在很多 link-layer protocol 中也有 error checking<span class="mojikumi-line-end">，</span>但并不能保证一路上所有 link 都有 error checking<span class="mojikumi-line-end">；</span>并且<span class="mojikumi-line-end">，</span>error 可能不是在 link-to-link 的传输过程中产生的<span class="mojikumi-line-end">，</span>例如可能是存储在 router 中时产生的<span class="mojikumi-line-end">。</span>所以<span class="mojikumi-line-end">，</span>UDP 要提供 checksum<span class="mojikumi-line-end">，</span>这也是体现了 end-to-end principle 的一个例子<span class="mojikumi-line-end">。</span></p>
<h2 id="principles-of-reliable-data-transfer" class="heading"><a href="#principles-of-reliable-data-transfer" class="heading-anchor" aria-label="章节： Principles of Reliable Data Transfer" tabindex="-1"></a><span>Principles of Reliable Data Transfer</span></h2>
<a id="关于这部分的详细程度" name="关于这部分的详细程度" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h3 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>关于这部分的详细程度</span></h3><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>这部分我写的比较简略<span class="mojikumi-line-end">，</span>仅作为摘要<span class="mojikumi-line-end">，</span>更循序渐进的讲解以及实现细节等需要看书<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="stop-and-wait" class="heading"><a href="#stop-and-wait" class="heading-anchor" aria-label="章节： Stop-And-Wait" tabindex="-1"></a><span>Stop-And-Wait</span></h3>
<p>在 stop-and-wait protocol 中<span class="mojikumi-line-end">，</span>sender 每次确认 receiver 收到了 packet 才会发下一个 packet<span class="mojikumi-line-end">。</span></p>
<ol>
<li>checksum: 传输过程中可能出错<span class="mojikumi-line-end">，</span>需要进行 error detection</li>
<li>acknowledgment (ACK):
<ul>
<li>需要告诉 sender 没有丢包</li>
<li>收到 packet 时需要告诉 sender 是否出错</li>
</ul>
</li>
<li>retransmission: 未收到 ACK 或收到 negative acknowledgment (NAK) 时需要重新传输</li>
<li>sequence number: retransmission 可能是因为 ACK 的传输出了问题<span class="mojikumi-line-end">，</span>这会导致 duplicate packet<span class="mojikumi-line-end">，</span>sequence number 的作用之一是识别 duplicate packet<span class="mojikumi-line-end">；</span>在 stop-and-wait protocol 中<span class="mojikumi-line-end">，</span>用 0/1 作为 sequence number 即可<span class="mojikumi-line-end">，</span>这也被称作 <i>alternating-bit protocol</i></li>
<li>timeout: 丢包需要通过超时来检测<span class="mojikumi-line-end">，</span>超时了就 retransmit<span class="mojikumi-line-end">；</span>如果等待太久性能会受影响<span class="mojikumi-line-end">，</span>所以 timeout 一般被设为较有可能是丢包的值而非几乎能确定是丢包的值</li>
<li>ACK with sequence number: 通过超时检测丢包可能带来 duplicate packet<span class="mojikumi-line-start">（</span>ACK 传输出错或用时过长<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>需要通过在 ACK 中加入 sequence number 来标识 acknowledge 的是哪个 packet<span class="mojikumi-line-end">，</span>以此也可以通过上一个 packet 的 ACK 代替表示当前 packet 出错的 NAK</li>
</ol>
<h3 id="pipelined-reliable-data-transfer" class="heading"><a href="#pipelined-reliable-data-transfer" class="heading-anchor" aria-label="章节： Pipelined Reliable Data Transfer" tabindex="-1"></a><span>Pipelined Reliable Data Transfer</span></h3>
<p>stop-and-wait 虽然 work<span class="mojikumi-line-end">，</span>但每次都要等上一个 packet 成功传输才能传下一个<span class="mojikumi-line-end">，</span>性能太差<span class="mojikumi-line-end">。</span></p>
<p>同时传输多个 packet 被称作 <i>pipelining</i><span class="mojikumi-line-end">，</span>这意味着<span class="mojikumi-line-end">：</span></p>
<ul>
<li>sequence number 需要更大的值域<span class="mojikumi-line-start">（</span>不止是 1 bit 的 0/1<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>至少正在传输的这些 packet 需要互不相同的 sequence number</li>
<li>sender 需要 buffer 以支持多个 packet 的 retransmission<span class="mojikumi-line-end">，</span>receiver 也可能需要 buffer</li>
</ul>
<p>有两种基础的实现方法<span class="mojikumi-line-end">：</span>go-back-n (GBN) 和 selective repeat (SR)<span class="mojikumi-line-end">。</span></p>
<h3 id="go-back-n" class="heading"><a href="#go-back-n" class="heading-anchor" aria-label="章节： Go-Back-N" tabindex="-1"></a><span>Go-Back-N</span></h3>
<p>receiver: 只接受按正确顺序依次收到的 packet<span class="mojikumi-line-end">，</span>顺序错误的 packet 直接扔掉<span class="mojikumi-line-start">（</span>顺序正确但有 error 的 packet 通过发送上一个 packet 的 ACK 进行 negative acknowledgment<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>sender:</p>
<ul>
<li>有一个 sliding window 表示当前有效的 sequence number 范围</li>
<li>window 内前一半已发送尚未收到 ACK<span class="mojikumi-line-end">，</span>后一半 sequence number 尚未使用</li>
<li>如果 window 内所有 sequence number 均已被使用<span class="mojikumi-line-end">，</span>将不能发送新的 packet</li>
<li>收到的 ACK 被视作 <i>cumulative acknowledgment</i><span class="mojikumi-line-end">，</span>即在这个 ACK 的 sequence number 之前的 packet 也被视作已 ACK</li>
<li>收到 ACK 时将 window 滑动到这个 ACK 之后</li>
<li>所有未 ACK 的 packet 共用一个 timer</li>
<li>retransmit 时发送 window 内所有尚未 ACK 的 packet</li>
</ul>
<p>GBN 的好处是 receiver 不需要 buffer<span class="mojikumi-line-end">，</span>坏处是一个 packet 出错就要把整个 window 内的 packet 重新发送<span class="mojikumi-line-end">。</span></p>
<h3 id="selective-repeat" class="heading"><a href="#selective-repeat" class="heading-anchor" aria-label="章节： Selective Repeat" tabindex="-1"></a><span>Selective Repeat</span></h3>
<p>sender:</p>
<ul>
<li>sliding window 与 GBN 类似<span class="mojikumi-line-end">，</span>但前一半中除了开头<span class="mojikumi-line-start">（</span>如果有<span class="mojikumi-line-end">）</span>一定未 ACK<span class="mojikumi-line-end">，</span>后面的可能已 ACK 也可能没有</li>
<li>ACK<span class="mojikumi-line-end">、</span>timer<span class="mojikumi-line-end">、</span>retransmission 都是每个 packet 独立的</li>
<li>收到 window 开头的 ACK 时滑动到首个未 ACK 处<span class="mojikumi-line-start">（</span>如果均已 ACK 则是未使用处<span class="mojikumi-line-end">）</span></li>
</ul>
<p>receiver:</p>
<ul>
<li>也需要维护一个 sliding window<span class="mojikumi-line-end">，</span>但这个 window 和 sender 的不保证一致<span class="mojikumi-line-end">，</span>其开头是尚未收到的最小的 sequence number</li>
<li>收到非 window 开头的 packet 时需要 buffer 下来</li>
<li>收到 window 开头的 packet 时将已 buffer 的 packet 连续段按顺序传给 application<span class="mojikumi-line-end">，</span>并滑动 window</li>
<li>收到 window 开头减去 window 大小到 window 开头减一这个范围内的 packet 时<span class="mojikumi-line-start">（</span>这表示之前对这个 packet 的 ACK 的传输出了问题或者耗时过长<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>也需要 ACK</li>
<li>无论收到的是哪个 packet<span class="mojikumi-line-end">，</span>如果有 error 则直接不管<span class="mojikumi-line-start">（</span>因为 ACK 对每个 packet 独立<span class="mojikumi-line-end">，</span>不能通过设置 ACK 的 sequence number 来表示 negative acknowledgment<span class="mojikumi-line-end">；</span>也可以选择引入 NAK<span class="mojikumi-line-end">，</span>若不引入则只能不管<span class="mojikumi-line-end">）</span></li>
</ul>
<p>需要注意的是<span class="mojikumi-line-end">，</span>由于 sender 和 receiver 的 window 可能不同<span class="mojikumi-line-end">，</span>window 大小不能超过 sequence number 值域的一半<span class="mojikumi-line-end">。</span></p>
<p>最后<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">（</span>无论是 GBN 还是 SR<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>因为 sequence number 的值域有限<span class="mojikumi-line-start">（</span>循环使用<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>如果一个 duplicate packet (duplicate ACK) 的传输耗时太久<span class="mojikumi-line-end">，</span>可能会占用重复的 sequence number<span class="mojikumi-line-end">，</span>在实践中采取的解决方法一般是在一个 packet 传输了几分钟后便认为它已经没了<span class="mojikumi-line-end">。</span></p>
<h2 id="connection-oriented-transport-tcp" class="heading"><a href="#connection-oriented-transport-tcp" class="heading-anchor" aria-label="章节： Connection-Oriented Transport: TCP" tabindex="-1"></a><span>Connection-Oriented Transport: TCP</span></h2>
<h3 id="the-tcp-connection" class="heading"><a href="#the-tcp-connection" class="heading-anchor" aria-label="章节： The TCP Connection" tabindex="-1"></a><span>The TCP Connection</span></h3>
<p>TCP connection 在两个 end system 中都建立了一些 state variable<span class="mojikumi-line-end">，</span>但它只是 logical connection<span class="mojikumi-line-end">，</span>并没有在 network core 中建立 circuit<span class="mojikumi-line-start">（</span>与 circuit-switched network 不同<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>TCP connection 是 full-duplex 的<span class="mojikumi-line-end">，</span>即建立连接后双方都可以向对方发送信息<span class="mojikumi-line-end">；</span>是 point-to-point 的<span class="mojikumi-line-end">，</span>即不能 multicasting<span class="mojikumi-line-end">。</span></p>
<p>TCP connection 是通过 <i>three-way handshake</i> 建立的<span class="mojikumi-line-end">。</span>通过 TCP 发送 message 时会先放入 send buffer<span class="mojikumi-line-end">，</span>接收到 message 时会先放入 receive buffer<span class="mojikumi-line-end">。</span></p>
<p>TCP 会根据 maximum transmission unit (MTU<span class="mojikumi-line-end">，</span>link-layer frame 的最大 size) 计算出合适的 maximum segment size (MSS<span class="mojikumi-line-end">，</span>segment 包含的 data (application message) 的最大 size) 使得 data 加上 TCP header 和 IP header 后不超过 MTU<span class="mojikumi-line-end">。</span></p>
<h3 id="tcp-segment-structure" class="heading"><a href="#tcp-segment-structure" class="heading-anchor" aria-label="章节： TCP Segment Structure" tabindex="-1"></a><span>TCP Segment Structure</span></h3>
<p>TCP segment 的结构如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-3.29" id="user-content-fnref-fig-3.29" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-3.29.c8a13933.webp"><img srcset="/assets/cnatda-fig-3.29.2ff11b60.png" loading="lazy" src="/assets/cnatda-fig-3.29.2ff11b60.png" width="812" height="652" alt="TCP segment structure"></picture></p>
<p>其中 <span class="mojikumi">“</span>options<span class="mojikumi">”</span> 是可选且可变长的<span class="mojikumi-line-end">，</span>所以 TCP header 是可变长的<span class="mojikumi-line-end">，</span>但一般是 20 byte<span class="mojikumi-line-end">。</span></p>
<p>各项的含义<span class="mojikumi-line-start">（</span>部分<span class="mojikumi-line-end">）</span>见下文<span class="mojikumi-line-end">。</span></p>
<h3 id="sequence-numbers-and-acknowledgment-numbers" class="heading"><a href="#sequence-numbers-and-acknowledgment-numbers" class="heading-anchor" aria-label="章节： Sequence Numbers and Acknowledgment Numbers" tabindex="-1"></a><span>Sequence Numbers and Acknowledgment Numbers</span></h3>
<p>TCP 将发送的所有 message 连在一起视作一个无结构但有序的 byte stream<span class="mojikumi-line-end">，</span>segment 的 sequence number 表示的是 message 的第一个 byte 在 byte stream 中的位置<span class="mojikumi-line-end">。</span>双方<span class="mojikumi-line-start">（</span>client 和 server<span class="mojikumi-line-end">）</span>的 sequence number 是分别计算的<span class="mojikumi-line-end">。</span></p>
<p>为了尽量避免 sequence number 与留存在网络中的其他 segment 发生冲突<span class="mojikumi-line-end">，</span>以及其他安全原因<span class="mojikumi-line-end">，</span>一次连接中的首个 byte 的 sequence number 一般不是 0<span class="mojikumi-line-end">，</span>而是随机选择<span class="mojikumi-line-end">。</span></p>
<p>acknowledgment number 是期待收到的下个<span class="mojikumi-line-start">（</span>尚未收到的首个<span class="mojikumi-line-end">）</span>byte 的 sequence number<span class="mojikumi-line-end">，</span>是 cumulative acknowledgment<span class="mojikumi-line-end">。</span></p>
<p>收到顺序错误的 segment 时<span class="mojikumi-line-end">，</span>TCP 没有规定如何处理<span class="mojikumi-line-end">，</span>但一般都会 buffer 下来<span class="mojikumi-line-end">。</span></p>
<p>一个 segment 中可以同时包含 acknowledgment 和 data<span class="mojikumi-line-end">，</span>这时 acknowledgment 被称作 <span class="mojikumi">“</span>piggybacked on the data segment<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>也可以只有 acknowledgment 没有 data<span class="mojikumi-line-end">，</span>此时 segment 仍有 sequence number<span class="mojikumi-line-end">，</span>设为下一个 byte 的 sequence number<span class="mojikumi-line-end">。</span></p>
<h3 id="round-trip-time-estimation-and-timeout" class="heading"><a href="#round-trip-time-estimation-and-timeout" class="heading-anchor" aria-label="章节： Round-Trip Time Estimation and Timeout" tabindex="-1"></a><span>Round-Trip Time Estimation and Timeout</span></h3>
<p>一个 segment 的 sample RTT (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></span>) 指的是 segment 进入 network layer 直到 acknowledgment 被接收的用时<span class="mojikumi-line-end">。</span></p>
<p>在多数 TCP implementation 中<span class="mojikumi-line-end">，</span>在计算一个 segment 的 sample RTT 时不会再去计算正在同时传输的其他 segment 的 sample RTT<span class="mojikumi-line-end">，</span>并且只会计算一次就传输成功的 segment 的 sample RTT<span class="mojikumi-line-end">，</span>不会计算 retransmission 的 sample RTT<span class="mojikumi-line-end">。</span></p>
<p>estimated RTT (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span></span>) 是计算出的这些 sample RTT 的 exponential weighted moving average (EWMA)<span class="mojikumi-line-end">，</span>用来平缓 RTT 的波动<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>←</mo><mfrac><mn>7</mn><mn>8</mn></mfrac><mi>e</mi><mo>+</mo><mfrac><mn>1</mn><mn>8</mn></mfrac><mi>s</mi></mrow><annotation encoding="application/x-tex">e \gets \frac 78 e + \frac 18 s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">s</span></span></span></span></span></p>
<p>dev RTT (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></span>) 用来衡量 RTT 波动的大小<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>←</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><mi>d</mi><mo>+</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mi mathvariant="normal">∣</mi><mi>s</mi><mo>−</mo><mi>e</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">d \gets \frac 34 d + \frac 14 |s - e|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord">∣</span></span></span></span></span></p>
<p>timeout interval (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span></span>) 在 estimated RTT 的基础上根据 dev RTT 提供了一定的冗余<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>e</mi><mo>+</mo><mn>4</mn><mi>d</mi></mrow><annotation encoding="application/x-tex">t = e + 4d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">4</span><span class="mord mathnormal">d</span></span></span></span></span></p>
<p>timeout interval 的初始值一般是 1 秒<span class="mojikumi-line-end">。</span>在发生 retransmission 时<span class="mojikumi-line-end">，</span>timeout interval 会翻倍<span class="mojikumi-line-end">，</span>而在得到新的 sample RTT 后<span class="mojikumi-line-start">（</span>即某个 segment 一次就传输成功后<span class="mojikumi-line-end">）</span>又会回到正常的计算方式<span class="mojikumi-line-end">。</span></p>
<h3 id="reliable-data-transfer" class="heading"><a href="#reliable-data-transfer" class="heading-anchor" aria-label="章节： Reliable Data Transfer" tabindex="-1"></a><span>Reliable Data Transfer</span></h3>
<p>TCP 一般只使用一个 retransmission timer<span class="mojikumi-line-end">，</span>用来给 oldest segment 计时<span class="mojikumi-line-end">。</span></p>
<p>虽然 TCP 和 GBN 有些类似<span class="mojikumi-line-end">，</span>但 TCP 在 retransmit 时一次只传一个 segment<span class="mojikumi-line-end">，</span>而 receiver 往往也会 buffer 顺序错误的 segment<span class="mojikumi-line-end">。</span></p>
<p>retransmission 在两种情况下发生<span class="mojikumi-line-end">：</span>timeout 或者收到三个 duplicate ACK<span class="mojikumi-line-start">（</span>即相同 sequence number 的第四个 ACK<span class="mojikumi-line-end">；</span>这被称作 <i>fast retransmit</i><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这意味着只收到一个或两个 duplicate ACK 的时候还是会等到 timeout 才 retransmit<span class="mojikumi-line-end">，</span>因为这往往意味着只是顺序错误而不是丢包<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-fast-retransmit" id="user-content-fnref-fast-retransmit" data-footnote-ref aria-describedby="footnote-label">2</a></sup></p>
<p>一般还会实现 delayed ACK<span class="mojikumi-line-end">，</span>即只 ACK 一个 segment 时会尝试等到下一个 segment 一起 ACK<span class="mojikumi-line-start">（</span>但不会等超过 500ms<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这样可以减少通信量<span class="mojikumi-line-end">，</span>尤其是经过等待后 ACK 可以被 piggyback 时<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-delayed-ack" id="user-content-fnref-delayed-ack" data-footnote-ref aria-describedby="footnote-label">3</a></sup>但是 cumulative ACK 以及 duplicate ACK 都会立即发送不会等待<span class="mojikumi-line-end">。</span></p>
<h3 id="flow-control" class="heading"><a href="#flow-control" class="heading-anchor" aria-label="章节： Flow Control" tabindex="-1"></a><span>Flow Control</span></h3>
<p>receiver 有一个 buffer<span class="mojikumi-line-end">，</span>但 application 不一定会立刻从 buffer 中读取<span class="mojikumi-line-end">，</span>如果 application 读得太慢<span class="mojikumi-line-end">，</span>就需要 sender 不要发太快来避免 buffer overflow<span class="mojikumi-line-end">。</span></p>
<p>TCP header 中包含 receive window (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span></span></span></span></span>) 表示 buffer 的剩余空间<span class="mojikumi-line-end">，</span>而 sender 需要保证已发送未被 ACK 的数据总量不超过 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span></span></span></span></span> 为 0 会阻断 sender 发送更多 segment<span class="mojikumi-line-end">，</span>而为了让 receiver 有机会告诉 sender 更新后的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span></span></span></span></span><span class="mojikumi-line-end">，</span>防止通信被一直阻断下去<span class="mojikumi-line-end">，</span>sender 需要发送 probing of zero window<span class="mojikumi-line-end">，</span>即 1 byte 的 data<span class="mojikumi-line-end">，</span>可以以以指数上升的间隔发送<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-zero-window-probing-793" id="user-content-fnref-zero-window-probing-793" data-footnote-ref aria-describedby="footnote-label">4</a></sup> <sup><a href="#user-content-fn-zero-window-probing-1122" id="user-content-fnref-zero-window-probing-1122" data-footnote-ref aria-describedby="footnote-label">5</a></sup><span class="mojikumi-line-start">（</span><s>好多以</s><span class="mojikumi-line-end">）</span></p>
<h3 id="tcp-connection-management" class="heading"><a href="#tcp-connection-management" class="heading-anchor" aria-label="章节： TCP Connection Management" tabindex="-1"></a><span>TCP Connection Management</span></h3>
<p>书上只讲了最基本的情况<span class="mojikumi-line-end">，</span>没有讲各种 corner case<span class="mojikumi-line-end">，</span>说是可以去看<span class="mojikumi-line-start">《</span>TCP/IP Illustrated<span class="mojikumi">》</span><wbr><span class="mojikumi-line-start">（</span></p>
<p>建立 TCP connection<span class="mojikumi-line-end">：</span></p>
<ol>
<li>client 向 server 发 SYN segment: SYN flag set<span class="mojikumi-line-end">，</span>sequence number 是 client ISN<span class="mojikumi-line-start">（</span>initial sequence number<span class="mojikumi-line-end">，</span>第一个 byte 的 sequence number 是 client ISN + 1<span class="mojikumi-line-end">）</span></li>
<li>server 收到 SYN segment<span class="mojikumi-line-end">，</span>建立 buffer 和 state<span class="mojikumi-line-end">，</span>向 client 发 SYNACK segment: SYN flag set<span class="mojikumi-line-end">，</span>ACK 了 SYN segment<span class="mojikumi-line-end">，</span>sequence number 是 server ISN</li>
<li>client 收到 SYNACK segment<span class="mojikumi-line-end">，</span>建立 buffer 和 state<span class="mojikumi-line-end">，</span>向 server 发 SYNACK 的 ACK<span class="mojikumi-line-end">，</span>可以携带 application data</li>
</ol>
<p>或者也可以拆开看<span class="mojikumi-line-end">：</span></p>
<ul>
<li>client 和 server 互发 SYN<span class="mojikumi-line-end">，</span>client 先发<span class="mojikumi-line-end">，</span>SYN 不携带 application data<span class="mojikumi-line-end">，</span>sequence number 用来表示 ISN</li>
<li>收到 SYN 要 ACK<span class="mojikumi-line-end">，</span>ACK 可以 piggyback 到 SYN 或者 application data 上</li>
<li>收到 SYN 时会建立 buffer 以及 state variable</li>
</ul>
<p>在断开连接时<span class="mojikumi-line-end">，</span>双方会互相发送 FIN package (FIN flag set)<span class="mojikumi-line-end">，</span>以及相应的 ACK<span class="mojikumi-line-end">。</span>首先提出断开连接的一方在发送最后一个 ACK 后会等待一段时间<span class="mojikumi-line-start">（</span>一般是 30s<span class="mojikumi-line-end">）</span>再真的断开连接<span class="mojikumi-line-end">，</span>以给对方机会 retransmit FIN segment<span class="mojikumi-line-end">，</span>防止这最后一个 ACK 丢包导致对方一直等着<span class="mojikumi-line-end">。</span></p>
<p>如果尝试连接到一个不接受 TCP 连接的端口<span class="mojikumi-line-end">，</span>会返回 RST flag set 的 segment<span class="mojikumi-line-end">。</span></p>
<a id="syn-flood-attack" name="syn-flood-attack" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>SYN flood attack</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>如果 server 在收到 SYN 时就建立 buffer 以及 state 会带来遭受 SYN flood attack 的可能<span class="mojikumi-line-end">，</span>即向 server 发送大量 SYN segment 而不发送后续的 ACK<span class="mojikumi-line-end">，</span>从而占用 server 的大量资源<span class="mojikumi-line-end">。</span></p><p>SYN flood attack 的一个防范方式是使用 SYN cookie<span class="mojikumi-line-end">：</span>在收到 SYN segment 时不建立 buffer 以及 state variable 等<span class="mojikumi-line-end">，</span>而是计算 low resolution timestamp + 双方 IP + 双方 port + server secret 的 hash<span class="mojikumi-line-end">，</span>将 timestamp (5 bits) + MSS (encoded to 3 bits) + hash (24 bits) 作为 server ISN<span class="mojikumi-line-end">，</span>在收到 SYN segment 时不建立 buffer 和 state<span class="mojikumi-line-end">，</span>而在收到 ACK 时根据 ACK number 得到 server ISN<span class="mojikumi-line-end">，</span>检查 hash 是否正确并得到 MSS 然后再建立 buffer 和 state<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h2 id="principles-of-congestion-control" class="heading"><a href="#principles-of-congestion-control" class="heading-anchor" aria-label="章节： Principles of Congestion Control" tabindex="-1"></a><span>Principles of Congestion Control</span></h2>
<p>congestion 会导致<span class="mojikumi-line-end">：</span></p>
<ul>
<li>large queue delay</li>
<li>router buffer overflow 会导致丢包以及 retransmission</li>
<li>large delay 会导致 premature timeout 以及 unneeded retransmission</li>
<li>在传输路径上如果在一个 router 处发生了丢包<span class="mojikumi-line-end">，</span>在此之前的 router 的 work 都浪费了</li>
</ul>
<p>congestion control 分为两大类<span class="mojikumi-line-end">：</span></p>
<ul>
<li>end-to-end: 不依赖于 network layer<span class="mojikumi-line-end">，</span>依靠 retransmission 或 delay 增大等现象推断出 congestion<span class="mojikumi-line-end">。</span></li>
<li>network-assisted: router 提供 congestion feedback<span class="mojikumi-line-start">（</span>一个 bit 表示 link 是否 congested<span class="mojikumi-line-end">，</span>或者更复杂的信息<span class="mojikumi-line-end">，</span>例如 available bit rate<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>可以是由 router 发一个新的 packet<span class="mojikumi-line-end">，</span>或者修改正在传输的其他 packet<span class="mojikumi-line-end">，</span>一方收到 feedback 后再发给另一方<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="tcp-congestion-control" class="heading"><a href="#tcp-congestion-control" class="heading-anchor" aria-label="章节： TCP Congestion Control" tabindex="-1"></a><span>TCP Congestion Control</span></h2>
<h3 id="classic-tcp-congestion-control" class="heading"><a href="#classic-tcp-congestion-control" class="heading-anchor" aria-label="章节： Classic TCP Congestion Control" tabindex="-1"></a><span>Classic TCP Congestion Control</span></h3>
<p>classic TCP congestion control 是 end-to-end 的<span class="mojikumi-line-end">。</span></p>
<p>TCP 使用 congestion window (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span>) 来限制发送速率<span class="mojikumi-line-end">。</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 的效果与 receive window (<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{rwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span></span></span></span></span>) 类似<span class="mojikumi-line-end">，</span>会将 unacknowledged 的数据总量限制在 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mo separator="true">,</mo><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\min(\mathrm{cwnd}, \mathrm{rwnd})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">cwnd</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">rwnd</span></span><span class="mclose">)</span></span></span></span></span> 之内<span class="mojikumi-line-end">，</span>从而将发送速率限制在约 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mi mathvariant="normal">/</mi><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">T</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{cwnd} / \mathrm{RTT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span><span class="mord">/</span><span class="mord"><span class="mord mathrm">RTT</span></span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>classic TCP congestion control 的基本原则<span class="mojikumi-line-end">：</span></p>
<ul>
<li>retransmission 是 congestion 的征兆<span class="mojikumi-line-end">，</span>需要减小 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span></li>
<li>segment 被 acknowledge 是没有 congestion 的征兆<span class="mojikumi-line-end">，</span>可以增大 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span></li>
<li>增大 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 相当于是在进行试探<span class="mojikumi-line-end">，</span>即不断增大发送速率来试探增大到多大会发生 congestion</li>
</ul>
<p>具体分为三种模式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>slow start: 初始状态以及 timeout 后转移到的状态<span class="mojikumi-line-end">，</span>从 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mo>=</mo><mn>1</mn><mtext> </mtext><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">S</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{cwnd} = 1\ \mathrm{MSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">MSS</span></span></span></span></span></span> 开始<span class="mojikumi-line-end">，</span>每个 RTT <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 翻倍<span class="mojikumi-line-end">，</span>直到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi><mo>⩾</mo><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">h</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{cwnd \geqslant \mathrm{ssthresh}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8311em;vertical-align:-0.1367em;"></span><span class="mord"><span class="mord mathrm">cwnd</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">ssthresh</span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>转移到 congestion avoidance<span class="mojikumi-line-end">。</span></li>
<li>congestion avoidance: 每个 RTT 内 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 增大 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext> </mtext><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">S</mi></mrow></mrow><annotation encoding="application/x-tex">1\ \mathrm{MSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">MSS</span></span></span></span></span></span><span class="mojikumi-line-end">。</span></li>
<li>fast recovery: fast retransmit 后转移到的状态<span class="mojikumi-line-end">，</span>从 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mo>=</mo><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">h</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">h</mi></mrow><mo>+</mo><mn>3</mn><mtext> </mtext><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">S</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{cwnd} = \mathrm{ssthresh} + 3\ \mathrm{MSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathrm">ssthresh</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">3</span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">MSS</span></span></span></span></span></span> 开始<span class="mojikumi-line-end">，</span>每个 duplicate ACK 都让 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 增大 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext> </mtext><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">S</mi></mrow></mrow><annotation encoding="application/x-tex">1\ \mathrm{MSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">MSS</span></span></span></span></span></span><span class="mojikumi-line-end">，</span>直到收到非 duplicate 的新的 ACK<span class="mojikumi-line-end">，</span>转移到 congestion avoidance<span class="mojikumi-line-end">。</span></li>
</ul>
<p>具体细节如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-3.51" id="user-content-fnref-fig-3.51" data-footnote-ref aria-describedby="footnote-label">6</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-3.51.5c10e88c.webp"><img srcset="/assets/cnatda-fig-3.51.26a2bfa1.png" loading="lazy" src="/assets/cnatda-fig-3.51.26a2bfa1.png" width="1315" height="996" alt="FSM description of TCP congestion control"></picture></p>
<p>正常情况下会在 congestion avoidance 和 fast recovery 之间反复切换<span class="mojikumi-line-end">，</span>此时 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 的增长是线性的<span class="mojikumi-line-end">，</span>降低是减半<span class="mojikumi-line-end">，</span>称其是 <i>additive-increase, multiplicative-decrease</i> (AIMD) 的<span class="mojikumi-line-end">。</span>AIMD congestion control 会导致 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 呈锯齿状变化<span class="mojikumi-line-end">。</span></p>
<p>TCP congestion control 有多个版本<span class="mojikumi-line-end">，</span>上文描述的是 TCP Reno<span class="mojikumi-line-end">，</span>如果用 slow start 来代替 fast recovery 则是更古老的 TCP Tahoe<span class="mojikumi-line-end">。</span></p>
<p>TCP Reno 的锯齿状 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><annotation encoding="application/x-tex">\mathrm{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span></span></span></span></span> 变化曲线实际上没能快速恢复到导致 congestion 的临界值<span class="mojikumi-line-end">，</span>会产生较大的浪费<span class="mojikumi-line-end">。</span>一个优化后的版本是 TCP CUBIC<span class="mojikumi-line-end">，</span>它修改了 congestion avoidance 阶段的上升曲线<span class="mojikumi-line-end">，</span>使其是一个三次函数曲线<span class="mojikumi-line-end">，</span>如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-3.54" id="user-content-fnref-fig-3.54" data-footnote-ref aria-describedby="footnote-label">7</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-3.54.bd38af1d.webp"><img srcset="/assets/cnatda-fig-3.54.1d92cc88.png" loading="lazy" src="/assets/cnatda-fig-3.54.1d92cc88.png" width="934" height="632" alt="TCP congestion avoidance sending rates: TCP Reno and TCP CUBIC"></picture></p>
<a id="tcp-splitting" name="tcp-splitting" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>TCP splitting</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>如果 RTT 过大<span class="mojikumi-line-end">，</span>slow start 可能导致初次连接时 response time 较大<span class="mojikumi-line-start">（</span>一般会有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>⋅</mo><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">T</mi></mrow></mrow><annotation encoding="application/x-tex">4 \cdot \mathrm{RTT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathrm">RTT</span></span></span></span></span></span> 左右<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>TCP splitting 在 client 和 data center 之间增设了一个 frontend server 作为代理<span class="mojikumi-line-end">，</span>frontend server 与 data center 之间建立了 persistent TCP connection 来避免 slow start<span class="mojikumi-line-end">，</span>而 client 和 frontend server 之间的 RTT 较小<span class="mojikumi-line-end">，</span>slow start 的影响就较小<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="network-assisted-explicit-congestion-notification" class="heading"><a href="#network-assisted-explicit-congestion-notification" class="heading-anchor" aria-label="章节： Network-Assisted Explicit Congestion Notification" tabindex="-1"></a><span>Network-Assisted Explicit Congestion Notification</span></h3>
<p><a href="https://datatracker.ietf.org/doc/html/rfc3168">Explicit Congestion Notification (ECN)</a> 是 network-assisted congestion control 的一种手段<span class="mojikumi-line-end">，</span>它对 TCP 和 IP 都进行了扩展<span class="mojikumi-line-end">。</span></p>
<p>ECN 使用了 IP datagram header 的两个 bit<span class="mojikumi-line-end">，</span>一个用来告诉 router 通信双方是 ECN-capable 的<span class="mojikumi-line-end">，</span>另一个由 router 设置<span class="mojikumi-line-end">，</span>表示自己处于 congestion<span class="mojikumi-line-start">（</span>一般会在丢包实际发生前就设置<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>在一方收到 router 的 congestion 信息后<span class="mojikumi-line-end">，</span>会在发给另一方的 ACK segment 里设置 ECE (explicit congestion notification echo) flag<span class="mojikumi-line-end">，</span>另一方收到 ECE 后会将 congestion window 减半<span class="mojikumi-line-end">，</span>并在下一个 segment 里设置 CWR (congestion window reduced) flag<span class="mojikumi-line-end">。</span></p>
<p>除了 TCP<span class="mojikumi-line-end">，</span>还有其他 transport-layer protocol 利用了 ECN<span class="mojikumi-line-end">，</span>例如与 UDP 类似但提供了 congestion control 的 DCCP<span class="mojikumi-line-end">，</span>为 data center 设计的 DCTCP<span class="mojikumi-line-end">、</span>DCQCN 等<span class="mojikumi-line-end">。</span></p>
<h3 id="delayed-based-congestion-control" class="heading"><a href="#delayed-based-congestion-control" class="heading-anchor" aria-label="章节： Delayed-based Congestion Control" tabindex="-1"></a><span>Delayed-based Congestion Control</span></h3>
<p>delay-based congestion control 也能在丢包发生前就检测到 congestion<span class="mojikumi-line-end">。</span></p>
<p>TCP Vegas 会检测历史最大的 throughput<span class="mojikumi-line-start">（</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">c</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">d</mi></mrow><mi mathvariant="normal">/</mi><mrow><mi mathvariant="normal">R</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">T</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{cwnd} / \mathrm{RTT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">cwnd</span></span><span class="mord">/</span><span class="mord"><span class="mord mathrm">RTT</span></span></span></span></span></span><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>若当前的 throughput 明显小于历史最大值<span class="mojikumi-line-end">，</span>则说明发生了 congestion<span class="mojikumi-line-end">。</span></p>
<p>BBR 的思路类似<span class="mojikumi-line-end">，</span>并采用了一些机制使其在与非 delay-based 的 congestion control 竞争时保持 fair<span class="mojikumi-line-end">。</span>Google 在 2016 年已经在内部的 B4 网络中采用 BBR 替换了 TCP CUBIC<span class="mojikumi-line-end">。</span></p>
<p>此外<span class="mojikumi-line-end">，</span>还有 TIMELY<span class="mojikumi-line-end">、</span>Compound TCP<span class="mojikumi-line-end">、</span>FAST 等 delay-based congestion control protocol<span class="mojikumi-line-end">。</span></p>
<h3 id="fairness" class="heading"><a href="#fairness" class="heading-anchor" aria-label="章节： Fairness" tabindex="-1"></a><span>Fairness</span></h3>
<p>假设有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span></span> 个 TCP 连接共用一个 transmission rate 为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></span> 的 bottleneck link<span class="mojikumi-line-end">，</span>并且这个 link 上没有其他数据传输<span class="mojikumi-line-end">。</span>如果每个连接的 throughput 都大约是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi mathvariant="normal">/</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">R/K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span></span><span class="mojikumi-line-end">，</span>则称所使用的 congestion control mechanism 是 fair 的<span class="mojikumi-line-end">。</span></p>
<p>在各方的 RTT 相同且只有 TCP 连接时<span class="mojikumi-line-end">，</span>AIMD congestion control 是 fair 的<span class="mojikumi-line-end">，</span>如下图所示<sup><a href="#user-content-fn-fig-3.57" id="user-content-fnref-fig-3.57" data-footnote-ref aria-describedby="footnote-label">8</a></sup><span class="mojikumi-line-end">，</span>addictive increase 是沿 45 度方向的<span class="mojikumi-line-end">，</span>multiplicative decrease 是朝着原点的<span class="mojikumi-line-end">，</span>所以会趋向 fair<span class="mojikumi-line-end">。</span></p>
<p>但是<span class="mojikumi-line-end">，</span>在各方 RTT 不同时<span class="mojikumi-line-end">，</span>RTT 小的往往能获得更大的 throughput<span class="mojikumi-line-end">。</span></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-3.57.18b0e5dd.webp"><img srcset="/assets/cnatda-fig-3.57.35ca77c5.png" loading="lazy" src="/assets/cnatda-fig-3.57.35ca77c5.png" width="813" height="792" alt="Throughput realized by two TCP connections"></picture></p>
<p>在有 UDP 连接参与时<span class="mojikumi-line-end">，</span>由于 UDP 没有 congestion control<span class="mojikumi-line-end">，</span>可能会导致 unfair<span class="mojikumi-line-end">。</span></p>
<p>上面讨论的 fairness 是对于 connection 而言的<span class="mojikumi-line-end">，</span>而对于 application / host 就不一定 fair 了<span class="mojikumi-line-end">，</span>因为可以建立多个 parallel TCP connection<span class="mojikumi-line-end">，</span>例如浏览器一般就会这样做<span class="mojikumi-line-end">。</span></p>
<h2 id="evolution-of-transport-layer-functionality" class="heading"><a href="#evolution-of-transport-layer-functionality" class="heading-anchor" aria-label="章节： Evolution of Transport-Layer Functionality" tabindex="-1"></a><span>Evolution of Transport-Layer Functionality</span></h2>
<p>虽然 Internet 只有 TCP 和 UDP 两个 transport-layer protocol<span class="mojikumi-line-end">，</span>但 transport-layer functionality 依然在不断演化<span class="mojikumi-line-end">。</span></p>
<p>现在有非常多不同版本的 TCP 实现<span class="mojikumi-line-start">（</span>例如上文提到的 TCP CUBIC<span class="mojikumi-line-end">、</span>BBR 等<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>或是解决了旧版实现中的一些问题<span class="mojikumi-line-end">，</span>或是更适配于特定的应用场景<span class="mojikumi-line-start">（</span>网络环境<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>QUIC 是一个基于 UDP 的 application-layer protocol<span class="mojikumi-line-end">，</span>有下列 feature<span class="mojikumi-line-end">：</span></p>
<ul>
<li>需要 handshake 建立连接<span class="mojikumi-line-end">，</span>且所有数据都是加密的<span class="mojikumi-line-end">。</span>connection-establishment handshake 和 authentication and encryption handshake 被合并在了一起<span class="mojikumi-line-end">，</span>从而比 TLS 更快<span class="mojikumi-line-end">。</span></li>
<li>以 stream 为单位传输 application data<span class="mojikumi-line-end">，</span>而多个 stream 可以放在单个 packet 中传输<span class="mojikumi-line-end">。</span></li>
<li>reliable data transfer<span class="mojikumi-line-end">，</span>其中 in-order delivery 是对每个 stream 分别保序<span class="mojikumi-line-end">，</span>所以不同 stream 之间不会带来阻塞 (HOL blocking)<span class="mojikumi-line-end">。</span></li>
<li>与 TCP 类似的 congestion control<span class="mojikumi-line-end">。</span></li>
</ul>
<p>作为一个 application-level protocol<span class="mojikumi-line-end">，</span>QUIC 可以比 transport-layer protocol 更频繁地更新<span class="mojikumi-line-end">。</span></p>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig-3.29">
<p>p231, Figure 3.29: TCP segment structure <a href="#user-content-fnref-fig-3.29" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fast-retransmit">
<p><a href="https://datatracker.ietf.org/doc/html/rfc2001#section-3">3 Fast Retransmit - RFC2001</a> <a href="#user-content-fnref-fast-retransmit" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-delayed-ack">
<p><a href="https://datatracker.ietf.org/doc/html/rfc1122#page-97">4.2.3.2  When to Send an ACK Segment - RFC1122</a> <a href="#user-content-fnref-delayed-ack" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-zero-window-probing-793">
<p><a href="https://datatracker.ietf.org/doc/html/rfc793#page-42">Managing the Window - RFC793</a> <a href="#user-content-fnref-zero-window-probing-793" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-zero-window-probing-1122">
<p><a href="https://datatracker.ietf.org/doc/html/rfc1122#page-92">4.2.2.17 Probing Zero Windows - RFC1122</a> <a href="#user-content-fnref-zero-window-probing-1122" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-3.51">
<p>p268, Figure 3.51: FSM description of TCP congestion control <a href="#user-content-fnref-fig-3.51" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-3.54">
<p>p272, Figure 3.54: TCP congestion avoidance sending rates: TCP Reno and TCP CUBIC <a href="#user-content-fnref-fig-3.54" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-3.57">
<p>p278, Figure 3.57: Throughput realized by TCP connections 1 and 2 <a href="#user-content-fnref-fig-3.57" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[CNATDA 第二章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/06/cnatda-2</link>
            <guid>https://ouuan.moe/post/2023/06/cnatda-2</guid>
            <pubDate>Fri, 16 Jun 2023 15:24:34 GMT</pubDate>
            <description><![CDATA[


<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第二章 <span class="mojikumi">“</span>Application Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[


<p><span class="mojikumi-line-start">《</span>Computer Networking: A Top-Down Approach (8th Edition)<span class="mojikumi-line-end">》</span>第二章 <span class="mojikumi">“</span>Application Layer<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>

<h2 id="principles-of-network-applications" class="heading"><a href="#principles-of-network-applications" class="heading-anchor" aria-label="章节： Principles of Network Applications" tabindex="-1"></a><span>Principles of Network Applications</span></h2>
<p>application architecture 主要分为 client-server 和 P2P 两种<span class="mojikumi-line-end">。</span></p>
<p><i>process</i> 即在某个 end system 上运行的程序<span class="mojikumi-line-start">（</span>进程<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>不同 end system 上的 process 在网络上互相发送 message 以进行通信<span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>message 即 application-layer packet<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>在一次通信中<span class="mojikumi-line-end">，</span>发起通信的一方被称作 <i>client</i><span class="mojikumi-line-end">，</span>等待接收消息的一方被称作 <i>server</i><span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>在 P2P 中<span class="mojikumi-line-end">，</span>client 和 server 的身份不是固定的<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>process 和网络<span class="mojikumi-line-end">，</span>或者说和 transport layer 之间以 <i>socket</i> 作为 API<span class="mojikumi-line-end">。</span></p>
<p>host 由 IP 地址识别<span class="mojikumi-line-end">，</span>而 process 由 IP 地址 + 端口识别<span class="mojikumi-line-end">。</span></p>
<p>一个 application 可以选择 TCP 或者 UDP 来提供 transport service<span class="mojikumi-line-end">。</span>TCP 提供 connection-oriented service<span class="mojikumi-line-start">（</span>需要通过 handshaking 建立 TCP connection<span class="mojikumi-line-end">）</span>和 reliable data transfer service<span class="mojikumi-line-start">（</span>保证接收到 &#x26; 保序<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>以及 congestion control<span class="mojikumi-line-end">。</span>UDP 则这些都不提供<span class="mojikumi-line-end">。</span>一般会根据是否 loss-tolerant<span class="mojikumi-line-start">（</span>是否允许丢失部分数据<span class="mojikumi-line-end">）</span>以及对延时的敏感度来进行选择<span class="mojikumi-line-end">。</span></p>
<p>TLS (Transport Layer Security) 可以在 TCP 的基础上提供 encryption<span class="mojikumi-line-end">、</span>data integrity<span class="mojikumi-line-end">、</span>end-point authentication<span class="mojikumi-line-end">。</span>它自身位于 application layer<span class="mojikumi-line-start">（</span>或者可以说是 application 与 transport layer 之间 🤔<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>不与 TCP<span class="mojikumi-line-end">、</span>UDP 并列<span class="mojikumi-line-end">。</span></p>
<p>application-layer protocol 决定了 message 的结构以及相应的行为<span class="mojikumi-line-end">。</span>常见的 application-layer protocol 包括 HTTP<span class="mojikumi-line-end">、</span>SMTP<span class="mojikumi-line-end">、</span>Telnet<span class="mojikumi-line-end">、</span>FTP<span class="mojikumi-line-end">、</span>SIP<span class="mojikumi-line-end">、</span>RTP<span class="mojikumi-line-end">、</span>DASH 等<span class="mojikumi-line-end">。</span>有的 application 会使用专有而非 public domain 的 application-layer protocol<span class="mojikumi-line-end">。</span></p>
<h2 id="the-web-and-http" class="heading"><a href="#the-web-and-http" class="heading-anchor" aria-label="章节： The Web and HTTP" tabindex="-1"></a><span>The Web and HTTP</span></h2>
<p>HTTP (HyperText Transfer Protocol) 是 Web 的 application-layer protocol<span class="mojikumi-line-end">，</span>定义了 client (browser) 如何向 server 请求文件<span class="mojikumi-line-start">（</span>web page<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>server 如何将文件传输给 client<span class="mojikumi-line-end">。</span></p>
<p>HTTP 的默认端口是 80<span class="mojikumi-line-end">。</span></p>
<p>HTTP 不存储 client 的信息<span class="mojikumi-line-end">，</span>是一个 <i>stateless protocol</i><span class="mojikumi-line-end">。</span></p>
<p>HTTP<span class="mojikumi-line-start">（</span>1.0<span class="mojikumi-line-end">、</span>1.1<span class="mojikumi-line-end">、</span>2<span class="mojikumi-line-end">）</span>基于 TCP<span class="mojikumi-line-end">，</span>有 persistent connection 和 non-persistent connection 两种工作方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>non-persistent connection<span class="mojikumi-line-end">：</span>每次 request-response 都会建立一个新的 TCP connection<span class="mojikumi-line-end">，</span>收到 response 后立刻关闭 TCP connection<span class="mojikumi-line-end">。</span></li>
<li>persistent connection<span class="mojikumi-line-end">：</span>同一对 client-server 的多次 request-response<span class="mojikumi-line-start">（</span>例如一个页面引用的多个资源<span class="mojikumi-line-end">）</span>可以共用同一个 TCP connection<span class="mojikumi-line-start">（</span>在闲置一段时间后自动关闭<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且无需等待 response 就可以连续发送多个 request<span class="mojikumi-line-start">（</span>被称作 <i>pipelining</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而省下每次建立 TCP connection 耗费的 RTT (round-trip time)<span class="mojikumi-line-end">。</span></li>
</ul>
<p>HTTP message 是纯文本<span class="mojikumi-line-end">，</span>格式如下<span class="mojikumi-line-end">。</span></p>
<p>HTTP request:<sup><a href="#user-content-fn-fig2.8" id="user-content-fnref-fig2.8" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.8.6bb26d3f.webp"><img srcset="/assets/cnatda-fig-2.8.de34594f.png" loading="lazy" src="/assets/cnatda-fig-2.8.de34594f.png" width="793" height="439" alt="General format of an HTTP request message"></picture></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HTTP 代码块" data-v-ad49d235>HTTP</h3><ile-root id="ile-1"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-1--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">GET</span><span style="color: #D6DEEB"> /wireshark-labs/INTRO-wireshark-file1.html </span><span style="color: #C792EA">HTTP</span><span style="color: #D6DEEB">/</span><span style="color: #F78C6C">1.1</span></span>
<span><span style="color: #CAECE6">Host</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">gaia.cs.umass.edu</span></span>
<span><span style="color: #CAECE6">User-Agent</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">curl/8.1.2</span></span>
<span><span style="color: #CAECE6">Accept</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">*/*</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">GET</span><span style="color: #403F53"> /wireshark-labs/INTRO-wireshark-file1.html </span><span style="color: #994CC3">HTTP</span><span style="color: #403F53">/</span><span style="color: #AA0982">1.1</span></span>
<span><span style="color: #994CC3">Host:</span><span style="color: #403F53"> </span><span style="color: #4876D6">gaia.cs.umass.edu</span></span>
<span><span style="color: #994CC3">User-Agent:</span><span style="color: #403F53"> </span><span style="color: #4876D6">curl/8.1.2</span></span>
<span><span style="color: #994CC3">Accept:</span><span style="color: #403F53"> </span><span style="color: #4876D6">*/*</span></span></code></pre></div></section>
<p>HTTP response:<sup><a href="#user-content-fn-fig2.9" id="user-content-fnref-fig2.9" data-footnote-ref aria-describedby="footnote-label">2</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.9.d6740f57.webp"><img srcset="/assets/cnatda-fig-2.9.c01ee471.png" loading="lazy" src="/assets/cnatda-fig-2.9.c01ee471.png" width="792" height="443" alt="General format of an HTTP response message"></picture></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="HTTP 代码块" data-v-ad49d235>HTTP</h3><ile-root id="ile-2"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-2--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #D6DEEB">HTTP/1.1 200 OK</span></span>
<span><span style="color: #CAECE6">Date</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Tue, 13 Jun 2023 11:14:57 GMT</span></span>
<span><span style="color: #CAECE6">Server</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span></span>
<span><span style="color: #CAECE6">Last-Modified</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">Tue, 13 Jun 2023 05:59:01 GMT</span></span>
<span><span style="color: #CAECE6">ETag</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">&quot;51-5fdfc882a3e6f&quot;</span></span>
<span><span style="color: #CAECE6">Accept-Ranges</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">bytes</span></span>
<span><span style="color: #CAECE6">Content-Length</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">81</span></span>
<span><span style="color: #CAECE6">Content-Type</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">text/html; charset=UTF-8</span></span>
<span></span>
<span><span style="color: #D6DEEB">&lt;html&gt;</span></span>
<span><span style="color: #D6DEEB">Congratulations!  You&#39;ve downloaded the first Wireshark lab file!</span></span>
<span><span style="color: #D6DEEB">&lt;/html&gt;</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #403F53">HTTP/1.1 200 OK</span></span>
<span><span style="color: #994CC3">Date:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Tue, 13 Jun 2023 11:14:57 GMT</span></span>
<span><span style="color: #994CC3">Server:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span></span>
<span><span style="color: #994CC3">Last-Modified:</span><span style="color: #403F53"> </span><span style="color: #4876D6">Tue, 13 Jun 2023 05:59:01 GMT</span></span>
<span><span style="color: #994CC3">ETag:</span><span style="color: #403F53"> </span><span style="color: #4876D6">&quot;51-5fdfc882a3e6f&quot;</span></span>
<span><span style="color: #994CC3">Accept-Ranges:</span><span style="color: #403F53"> </span><span style="color: #4876D6">bytes</span></span>
<span><span style="color: #994CC3">Content-Length:</span><span style="color: #403F53"> </span><span style="color: #4876D6">81</span></span>
<span><span style="color: #994CC3">Content-Type:</span><span style="color: #403F53"> </span><span style="color: #4876D6">text/html; charset=UTF-8</span></span>
<span></span>
<span><span style="color: #403F53">&lt;html&gt;</span></span>
<span><span style="color: #403F53">Congratulations!  You&#39;ve downloaded the first Wireshark lab file!</span></span>
<span><span style="color: #403F53">&lt;/html&gt;</span></span></code></pre></div></section>
<p>server 可以通过 Cookie 识别用户<span class="mojikumi-line-end">，</span>cookie 通过 response 中的 <code>Set-Cookie</code> header 设置<span class="mojikumi-line-end">，</span>在之后的每次 request 中通过 <code>Cookie</code> header 发给 server<span class="mojikumi-line-end">。</span></p>
<p>机构可以设置 Web cache<span class="mojikumi-line-end">，</span>使用户先向 Web cache 发送请求<span class="mojikumi-line-end">，</span>若 cache hit 则直接由 Web cache 发给用户<span class="mojikumi-line-end">，</span>若 cache miss 则 Web cache 向 origin server 发送请求再返回给用户<span class="mojikumi-line-end">。</span>Web cache 可以减小延迟<span class="mojikumi-line-end">，</span>降低带宽压力<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>与之类似的 CDN 则在<a href="#content-distribution-networks">后文</a>有详细讲解<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>可以通过 <code>If<wbr>-<wbr>Modified<wbr>-<wbr>Since</code> header 进行 <i>conditional GET</i><span class="mojikumi-line-end">，</span>若没有修改则会返回 body 为空的 304 Not Modified<span class="mojikumi-line-end">。</span></p>
<p>HTTP/2 提供了 request and response multiplexing<span class="mojikumi-line-end">、</span>prioritization<span class="mojikumi-line-end">、</span>server push 来优化性能<span class="mojikumi-line-end">：</span></p>
<ul>
<li>multiplexing<span class="mojikumi-line-end">：</span>persistent connection 减少了建立 TCP connection 带来的 RTT<span class="mojikumi-line-end">，</span>但又引入了 Head of Line (HOL) blocking<span class="mojikumi-line-end">，</span>即共用一个 TCP connection 时较小的资源需要等待较大的资源加载完毕<span class="mojikumi-line-end">，</span>所以在 HTTP/1.1 中浏览器经常还是会建立多个 TCP 连接<span class="mojikumi-line-end">，</span>除了解决 HOL blocking<span class="mojikumi-line-end">，</span>也可以在 TCP 的 congestion control 中取得更多带宽<span class="mojikumi-line-end">。</span>HTTP/2 则将每个 message 划分成了多个小的 frame<span class="mojikumi-line-end">，</span>并交替发送不同 message 的 frame<span class="mojikumi-line-start">（</span>frame interleaving<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而小的资源无需等待大的资源发送完毕<span class="mojikumi-line-end">。</span></li>
<li>prioritization<span class="mojikumi-line-end">：</span>同时发送多个请求时<span class="mojikumi-line-end">，</span>可以为每个 response 设置优先级<span class="mojikumi-line-end">，</span>让 server 优先发送高优先级的 response<span class="mojikumi-line-end">。</span>除此之外<span class="mojikumi-line-end">，</span>还可以设置 response 之间的依赖关系<span class="mojikumi-line-end">。</span></li>
<li>server push<span class="mojikumi-line-end">：</span>一个 request 可以有多个 response<span class="mojikumi-line-end">，</span>即除了对应于 request 的 response<span class="mojikumi-line-end">，</span>server 还可以额外 <i>push</i><span class="mojikumi-line-end">，</span>例如在返回一个 HTML 页面时可以 push 这个页面引用的其他资源<span class="mojikumi-line-end">。</span></li>
</ul>
<p>HTTP/3 使用基于 UDP 的 QUIC 代替了 TCP<span class="mojikumi-line-end">。</span></p>
<h2 id="electronic-mail-in-the-internet" class="heading"><a href="#electronic-mail-in-the-internet" class="heading-anchor" aria-label="章节： Electronic Mail in the Internet" tabindex="-1"></a><span>Electronic Mail in the Internet</span></h2>
<p>e-mail 系统有三个主要组件<span class="mojikumi-line-end">：</span>user agent<span class="mojikumi-line-end">、</span>mail server 和 SMTP (Simple Mail Transfer Protocol)<span class="mojikumi-line-end">。</span></p>
<p>发送邮件时<span class="mojikumi-line-end">，</span>Alice 写完邮件后由她的 user agent 发送到她的 mail server<span class="mojikumi-line-end">，</span>她的 mail server 再发到 Bob 的 mail server 中属于 Bob 的 mailbox<span class="mojikumi-line-end">，</span>之后 Bob 再通过他的 user agent 从他的 mail server 获取他的 mailbox 中的邮件并阅读<span class="mojikumi-line-end">。</span></p>
<p>发送方的 mail server 会维护一个待发送邮件列表<span class="mojikumi-line-end">，</span>如果接收方的 mail server 在当时不可用<span class="mojikumi-line-end">，</span>则会等待一段时间后再次尝试<span class="mojikumi-line-end">，</span>多次失败则会退回<span class="mojikumi-line-end">。</span></p>
<p>mail server 使用 SMTP 向其他 mail server 发送邮件<span class="mojikumi-line-end">，</span>发送方作为 SMTP client<span class="mojikumi-line-end">，</span>接收方作为 SMTP server<span class="mojikumi-line-end">。</span></p>
<p>SMTP 的默认端口是 25<span class="mojikumi-line-end">。</span></p>
<p>SMTP 是一个比 HTTP 还古老的协议<span class="mojikumi-line-end">，</span>带来的后果之一是它整个 message 都只能包含 ASCII<span class="mojikumi-line-end">。</span></p>
<p>一次 SMTP 通信如下所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-smtp-example" id="user-content-fnref-smtp-example" data-footnote-ref aria-describedby="footnote-label">3</a></sup></p>
<section class="code-block relative my-6 shadow" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" aria-label="plain text 代码块" data-v-ad49d235>plain text</h3><ile-root id="ile-3"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-3--></div><div class="light:hidden" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><samp><span><span style="color: #d6deeb">S: 220 smtp.example.com ESMTP Postfix</span></span>
<span><span style="color: #d6deeb">C: HELO relay.example.org</span></span>
<span><span style="color: #d6deeb">S: 250 Hello relay.example.org, I am glad to meet you</span></span>
<span><span style="color: #d6deeb">C: MAIL FROM:&lt;bob@example.org&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: RCPT TO:&lt;alice@example.com&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: RCPT TO:&lt;theboss@example.com&gt;</span></span>
<span><span style="color: #d6deeb">S: 250 Ok</span></span>
<span><span style="color: #d6deeb">C: DATA</span></span>
<span><span style="color: #d6deeb">S: 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span></span>
<span><span style="color: #d6deeb">C: From: &quot;Bob Example&quot; &lt;bob@example.org&gt;</span></span>
<span><span style="color: #d6deeb">C: To: &quot;Alice Example&quot; &lt;alice@example.com&gt;</span></span>
<span><span style="color: #d6deeb">C: Cc: theboss@example.com</span></span>
<span><span style="color: #d6deeb">C: Date: Tue, 15 Jan 2008 16:02:43 -0500</span></span>
<span><span style="color: #d6deeb">C: Subject: Test message</span></span>
<span><span style="color: #d6deeb">C:</span></span>
<span><span style="color: #d6deeb">C: Hello Alice.</span></span>
<span><span style="color: #d6deeb">C: This is a test message with 5 header fields and 4 lines in the message body.</span></span>
<span><span style="color: #d6deeb">C: Your friend,</span></span>
<span><span style="color: #d6deeb">C: Bob</span></span>
<span><span style="color: #d6deeb">C: .</span></span>
<span><span style="color: #d6deeb">S: 250 Ok: queued as 12345</span></span>
<span><span style="color: #d6deeb">C: QUIT</span></span>
<span><span style="color: #d6deeb">S: 221 Bye</span></span></samp></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><samp><span><span style="color: #403f53">S: 220 smtp.example.com ESMTP Postfix</span></span>
<span><span style="color: #403f53">C: HELO relay.example.org</span></span>
<span><span style="color: #403f53">S: 250 Hello relay.example.org, I am glad to meet you</span></span>
<span><span style="color: #403f53">C: MAIL FROM:&lt;bob@example.org&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: RCPT TO:&lt;alice@example.com&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: RCPT TO:&lt;theboss@example.com&gt;</span></span>
<span><span style="color: #403f53">S: 250 Ok</span></span>
<span><span style="color: #403f53">C: DATA</span></span>
<span><span style="color: #403f53">S: 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</span></span>
<span><span style="color: #403f53">C: From: &quot;Bob Example&quot; &lt;bob@example.org&gt;</span></span>
<span><span style="color: #403f53">C: To: &quot;Alice Example&quot; &lt;alice@example.com&gt;</span></span>
<span><span style="color: #403f53">C: Cc: theboss@example.com</span></span>
<span><span style="color: #403f53">C: Date: Tue, 15 Jan 2008 16:02:43 -0500</span></span>
<span><span style="color: #403f53">C: Subject: Test message</span></span>
<span><span style="color: #403f53">C:</span></span>
<span><span style="color: #403f53">C: Hello Alice.</span></span>
<span><span style="color: #403f53">C: This is a test message with 5 header fields and 4 lines in the message body.</span></span>
<span><span style="color: #403f53">C: Your friend,</span></span>
<span><span style="color: #403f53">C: Bob</span></span>
<span><span style="color: #403f53">C: .</span></span>
<span><span style="color: #403f53">S: 250 Ok: queued as 12345</span></span>
<span><span style="color: #403f53">C: QUIT</span></span>
<span><span style="color: #403f53">S: 221 Bye</span></span></samp></pre></div></section>
<p>其中 <code>HELO</code><span class="mojikumi-line-end">、</span><code>MAIL FROM</code><span class="mojikumi-line-end">、</span><code>RCPT TO</code><span class="mojikumi-line-end">、</span><code>DATA</code><span class="mojikumi-line-end">、</span><code>QUIT</code> 等是 <i>command</i><span class="mojikumi-line-end">，</span>用来进行 handshake 等操作<span class="mojikumi-line-end">。</span>如果要向同一个 mail server 连续发送多封邮件<span class="mojikumi-line-end">，</span>可以只 <code>HELO</code><span class="mojikumi-line-end">、</span><code>QUIT</code> 一次<span class="mojikumi-line-start">（</span>但要 <code>MAIL FROM</code><span class="mojikumi-line-end">、</span><code>RCPT TO</code> 多次<span class="mojikumi-line-end">）</span>从而共用一个 TCP 连接<span class="mojikumi-line-end">。</span><code>DATA</code> 后是邮件的内容<span class="mojikumi-line-end">，</span>这一内容的开头是邮件的 header<span class="mojikumi-line-end">，</span>结尾是仅包含 <code>.</code> 的一行<span class="mojikumi-line-end">。</span></p>
<p>email 是 user agent → mail server → mail server → user agent 而非 user agent → user agent<span class="mojikumi-line-end">，</span>一大原因是如果 user agent 经常不在线则直接发很可能收不到邮件<span class="mojikumi-line-end">，</span>需要用 mail server 来提高在线率以及提供对方不在线时重试的机制<span class="mojikumi-line-end">。</span></p>
<p>从 user agent 发到 mail server 时可以使用 SMTP 或 HTTP<span class="mojikumi-line-end">，</span>从 mail server 拉取到 user agent 时可以使用 HTTP 或 IMAP (Internet Mail Access Protocol)<span class="mojikumi-line-start">（</span>不能用 SMTP<span class="mojikumi-line-end">，</span>因为 SMTP 是 push protocol<span class="mojikumi-line-end">，</span>不能用来 pull<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h2 id="dns--the-internet’s-directory-service" class="heading"><a href="#dns--the-internet’s-directory-service" class="heading-anchor" aria-label="章节： DNS—The Internet’s Directory Service" tabindex="-1"></a><span>DNS—The Internet<span class="mojikumi-narrow-left">’</span>s Directory Service</span></h2>
<h3 id="services-provided-by-dns" class="heading"><a href="#services-provided-by-dns" class="heading-anchor" aria-label="章节： Services Provided by DNS" tabindex="-1"></a><span>Services Provided by DNS</span></h3>
<p>host 由 hostname 或 IP 地址识别<span class="mojikumi-line-end">，</span>hostname 对人类更友好<span class="mojikumi-line-end">，</span>而 IP 地址对路由器更友好<span class="mojikumi-line-end">。</span></p>
<p>将 hostname 翻译为 IP 地址是 DNS 的主要任务<span class="mojikumi-line-end">。</span>DNS 是由多个层级的 DNS server 共同构成的 distributed database<span class="mojikumi-line-end">，</span>也是使得 application 能够查询这个 distributed database 的 application-layer protocol<span class="mojikumi-line-end">。</span></p>
<p>DNS 被很多其他 application-layer protocol 所使用<span class="mojikumi-line-end">，</span>例如在 HTTP/SMTP 中<span class="mojikumi-line-end">，</span>可以使用 hostname 来访问网站 / mail server<span class="mojikumi-line-end">，</span>这时就会调用 DNS<span class="mojikumi-line-end">。</span></p>
<p>DNS 在提供 hostname 到 IP 地址的翻译的同时<span class="mojikumi-line-end">，</span>还提供了下列功能<span class="mojikumi-line-end">：</span></p>
<ul>
<li>host aliasing: 可以让一个 host 在有 canonical hostname 的同时还有其他 alias<span class="mojikumi-line-end">。</span></li>
<li>mail server aliasing: 可以让同一个 hostname 在作为 Web server 和作为 mail server 时指向不同的 host<span class="mojikumi-line-end">。</span></li>
<li>load distribution: 可以让同一个 hostname 指向多个 host<span class="mojikumi-line-end">，</span>在返回查询结果时进行 rotate<span class="mojikumi-line-start">（</span>即改变位于首位的 IP 地址<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="overview-of-how-dns-works" class="heading"><a href="#overview-of-how-dns-works" class="heading-anchor" aria-label="章节： Overview of How DNS Works" tabindex="-1"></a><span>Overview of How DNS Works</span></h3>
<p>由于下列原因<span class="mojikumi-line-end">，</span>DNS 必须是分布式的<span class="mojikumi-line-end">，</span>单点式的 DNS 无法 scale<span class="mojikumi-line-end">：</span></p>
<ul>
<li>single point of failure</li>
<li>traffic volume 过大</li>
<li>离部分用户距离过远<span class="mojikumi-line-end">，</span>带来较大的延时</li>
<li>难以维护<span class="mojikumi-line-start">（</span>数据总量大<span class="mojikumi-line-end">，</span>更新频繁<span class="mojikumi-line-end">）</span></li>
</ul>
<p>一般来说<span class="mojikumi-line-end">，</span>DNS 分为以下几层<span class="mojikumi-line-end">：</span></p>
<ol>
<li>root DNS server: 分散在世界各地的 13 个不同 root server 各自的共上千个 copy<span class="mojikumi-line-end">，</span>用来查询 TLD server</li>
<li>top-level domain (TLD) server: 每个 TLD 有自己的 TLD server (or server cluster)<span class="mojikumi-line-end">，</span>用来查询 authoritative DNS server</li>
<li>authoritative DNS server: 每个 subdomain 有自己的 authoritative DNS server<span class="mojikumi-line-end">，</span>可以是组织自己维护的或者由服务商提供的<span class="mojikumi-line-end">，</span>用来查询 hostname 到 IP 地址的映射</li>
</ol>
<p>除此之外<span class="mojikumi-line-end">，</span>TLD server 和 authoritative DNS server 之间还可能有 intermediate DNS server<span class="mojikumi-line-end">。</span></p>
<p>在上述 DNS server 的 hierarchy 之外<span class="mojikumi-line-end">，</span>还有 local DNS server<span class="mojikumi-line-start">（</span>就是电脑的网络设置里设的 DNS 服务器<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>作为 proxy 来代替 requesting host 向 DNS server 进行查询<span class="mojikumi-line-end">。</span></p>
<p>从逻辑上来说<span class="mojikumi-line-end">，</span>向一个 DNS server 进行查询时<span class="mojikumi-line-end">，</span>如果它自己不知道最终的 answer (IP 地址)<span class="mojikumi-line-end">，</span>它可以让你换一个 DNS server 继续查 (iterative query)<span class="mojikumi-line-end">，</span>或者帮你向其他 DNS server 发送查询 (recursive query) 然后返回最终的结果<span class="mojikumi-line-end">。</span>而在实际中<span class="mojikumi-line-end">，</span>如上文所述<span class="mojikumi-line-end">，</span>一般是向 local DNS server 查询时会进行 recursive query<span class="mojikumi-line-end">，</span>而 local DNS server 再从 root DNS server 向下直到 authoritative DNS server 进行 iterative query<span class="mojikumi-line-end">。</span></p>
<p>为了减少查询的数量<span class="mojikumi-line-end">，</span>DNS 设有 caching<span class="mojikumi-line-end">。</span>每个查询的发起者<span class="mojikumi-line-start">（</span>requesting host 或者 local DNS server<span class="mojikumi-line-end">）</span>会将收到的查询结果保存一段时间<span class="mojikumi-line-end">，</span>cache miss 才会向其他 DNS server 发起查询<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>常用的 TLD server 的 IP 地址往往都在 cache 中<span class="mojikumi-line-end">，</span>大大减少了 root DNS server 收到的请求数量<span class="mojikumi-line-end">。</span></p>
<h3 id="dns-records" class="heading"><a href="#dns-records" class="heading-anchor" aria-label="章节： DNS Records" tabindex="-1"></a><span>DNS Records</span></h3>
<p>DNS distributed database 存储的信息单元是 <i>resource record</i> (RR)<span class="mojikumi-line-end">。</span></p>
<p>每个 RR 包含 type<span class="mojikumi-line-end">、</span>name<span class="mojikumi-line-end">、</span>value<span class="mojikumi-line-end">、</span>TTL 四项信息<span class="mojikumi-line-end">，</span>其中 TTL 表示 cache 多久过期<span class="mojikumi-line-end">。</span>常见的 type 包括以下几个<span class="mojikumi-line-end">：</span></p>
<ul>
<li>A: name 是 hostname<span class="mojikumi-line-end">，</span>value 是 IP 地址<span class="mojikumi-line-end">，</span>表示一个 hostname 到 IP 地址的映射<span class="mojikumi-line-end">。</span></li>
<li>NS: name 是 domain<span class="mojikumi-line-end">，</span>value 是其 name server 的 hostname<span class="mojikumi-line-end">，</span>表示可以在这个 name server 进行这个 domain 的进一步查询<span class="mojikumi-line-end">。</span></li>
<li>CNAME: name 是 alias hostname<span class="mojikumi-line-end">，</span>value 是 canonical hostname<span class="mojikumi-line-end">，</span>用来提供 host aliasing<span class="mojikumi-line-end">。</span></li>
<li>MX: name 是 alias hostname<span class="mojikumi-line-end">，</span>value 是 canonical hostname<span class="mojikumi-line-end">，</span>用来提供 mail server aliasing<span class="mojikumi-line-end">。</span></li>
</ul>
<p>对一个 hostname 来说 authoritative 的 DNS server 会包含被查询的 host 的 A record<span class="mojikumi-line-end">。</span>不 authoritative 的 DNS server 则会包含相应的 NS record<span class="mojikumi-line-end">，</span>以及这个 name server 的 A record<span class="mojikumi-line-end">。</span></p>
<p>下面是一个例子<span class="mojikumi-line-end">：</span></p>
<div class="overflow-auto my-6"><table>
<thead>
<tr>
<th align="center">type</th>
<th align="center">name</th>
<th align="center">value</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">NS</td>
<td align="center"><code>.</code></td>
<td align="center"><code>a<wbr>.<wbr>root<wbr>-<wbr>servers<wbr>.<wbr>net<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>a<wbr>.<wbr>root<wbr>-<wbr>servers<wbr>.<wbr>net<wbr>.</code></td>
<td align="center"><code>198.41.0.4</code></td>
</tr>
<tr>
<td align="center">NS</td>
<td align="center"><code>moe.</code></td>
<td align="center"><code>ns1<wbr>.<wbr>dns<wbr>.<wbr>nic<wbr>.<wbr>moe<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>ns1<wbr>.<wbr>dns<wbr>.<wbr>nic<wbr>.<wbr>moe<wbr>.</code></td>
<td align="center"><code>156<wbr>.<wbr>154<wbr>.<wbr>144<wbr>.<wbr>114</code></td>
</tr>
<tr>
<td align="center">NS</td>
<td align="center"><code>ouuan.moe.</code></td>
<td align="center"><code>amos<wbr>.<wbr>ns<wbr>.<wbr>cloudflare<wbr>.<wbr>com<wbr>.</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>amos<wbr>.<wbr>ns<wbr>.<wbr>cloudflare<wbr>.<wbr>com<wbr>.</code></td>
<td align="center"><code>172<wbr>.<wbr>64<wbr>.<wbr>35<wbr>.<wbr>120</code></td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"><code>ouuan.moe.</code></td>
<td align="center"><code>172<wbr>.<wbr>67<wbr>.<wbr>181<wbr>.<wbr>123</code></td>
</tr>
</tbody>
</table></div>
<p>在 registar 购买域名时可以填写 name server 的信息<span class="mojikumi-line-end">，</span>由 registar 负责将相应的 NS 以及 A record 添加到 TLD server<span class="mojikumi-line-end">。</span>可以使用域名商的 DNS server<span class="mojikumi-line-end">、</span>其他服务商<span class="mojikumi-line-start">（</span>例如 Cloudflare<span class="mojikumi-line-end">）</span>的 DNS server 或者自己搭建的 DNS server 作为 authoritative DNS server<span class="mojikumi-line-end">。</span></p>
<p>DNS 最初只能静态更新<span class="mojikumi-line-start">（</span>通过配置文件等方式<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>后来有了 DDNS 来通过 DNS message 动态更新<span class="mojikumi-line-end">。</span></p>
<h3 id="dns-messages" class="heading"><a href="#dns-messages" class="heading-anchor" aria-label="章节： DNS Messages" tabindex="-1"></a><span>DNS Messages</span></h3>
<p>DNS message 通过 UDP 发送到 port 53<span class="mojikumi-line-end">。</span></p>
<p>DNS message 的结构如下图所示<span class="mojikumi-line-end">：</span><sup><a href="#user-content-fn-fig-2.21" id="user-content-fnref-fig-2.21" data-footnote-ref aria-describedby="footnote-label">4</a></sup></p>
<p><picture><source type="image/webp" srcset="/assets/cnatda-fig-2.21.b9121041.webp"><img srcset="/assets/cnatda-fig-2.21.8f9be477.png" loading="lazy" src="/assets/cnatda-fig-2.21.8f9be477.png" width="1349" height="804" alt="DNS message format"></picture></p>
<p>identification 由 client 设置<span class="mojikumi-line-end">，</span>即用来识别 query 和 reply 对应关系的 ID<span class="mojikumi-line-end">。</span></p>
<p>flags 包括以下几个<span class="mojikumi-line-end">：</span></p>
<ul>
<li>query or reply: 这条 message 是 query 还是 reply</li>
<li>authoritative or not: 返回的结果是否是最终的答案</li>
<li>recursion desired: client 是否希望 server 进行 recursive query</li>
<li>recursion available: server 是否可以进行 recursive query</li>
</ul>
<p>4 个 section 中都包含若干 RR<span class="mojikumi-line-end">。</span></p>
<p>在 query 中<span class="mojikumi-line-end">，</span>question section 里会包含 name 和 type<span class="mojikumi-line-end">。</span></p>
<p>对于 type A 的查询<span class="mojikumi-line-end">：</span></p>
<ul>
<li>如果 reply 是 authoritative 的<span class="mojikumi-line-start">（</span>向 authoritative DNS server 查询<span class="mojikumi-line-end">，</span>或者进行了 recursive query<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>则会在 answer section 中列出所查询的 A record<span class="mojikumi-line-end">。</span></li>
<li>如果不是 authoritative 的<span class="mojikumi-line-end">，</span>则会在 authority section 中列出 NS record<span class="mojikumi-line-end">，</span>在 additional section 中列出这些 name server 的 A record<span class="mojikumi-line-end">。</span></li>
</ul>
<p>在 additional section 中<span class="mojikumi-line-end">，</span>还可能列出 canonical hostname 的 A record 之类的<span class="mojikumi-line-end">。</span></p>
<h2 id="peer-to-peer-file-distribution" class="heading"><a href="#peer-to-peer-file-distribution" class="heading-anchor" aria-label="章节： Peer-to-Peer File Distribution" tabindex="-1"></a><span>Peer-to-Peer File Distribution</span></h2>
<p>在传输大文件时<span class="mojikumi-line-end">，</span>client-server 的架构在用户数量增多时需要更大的 server bandwidth 才能保证用户的下载速度<span class="mojikumi-line-end">，</span>而 P2P 的架构则是 self-scalable 的<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>书中有简化模型的定量计算<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>BitTorrent 是较为流行的 P2P file distribution protocol<span class="mojikumi-line-end">。</span>在 BitTorrent 中<span class="mojikumi-line-end">，</span>以 chunk 为下载文件的基本单位<span class="mojikumi-line-end">。</span>一个 peer 刚加入 torrent 时没有 trunk 所以只能下载<span class="mojikumi-line-end">，</span>在获取到一些 trunk 后就会开始上传给其他 peer<span class="mojikumi-line-end">，</span>下载完成后可以自私地离开或者无私地保种<span class="mojikumi-line-end">。</span></p>
<p>每个 torrent 会有<span class="mojikumi-line-start">（</span>至少<span class="mojikumi-line-end">）</span>一个 tracker<span class="mojikumi-line-end">，</span>peer 在加入/离开时会通知 tracker<span class="mojikumi-line-end">，</span>并在过程中定期告知 tracker 自己仍在活动<span class="mojikumi-line-end">。</span>tracker 会给每个 peer 提供一些其他 peer 的 IP 地址和端口<span class="mojikumi-line-end">。</span></p>
<p>在下载过程中<span class="mojikumi-line-end">，</span>每个 peer 拥有一部分 chunk<span class="mojikumi-line-end">，</span>并向其他 peer 请求 chunk<span class="mojikumi-line-end">。</span>每个 peer 需要决定优先下载哪个 trunk 以及上传给谁<span class="mojikumi-line-end">。</span></p>
<p>优先下载的 trunk 可以采用 <i>rarest first</i> 的策略<span class="mojikumi-line-end">，</span>即优先下载已知的 peer 中拥有人数最少的 chunk<span class="mojikumi-line-end">，</span>这样的话就能使得各个 trunk 较为均匀地在 peer 间分布<span class="mojikumi-line-end">。</span></p>
<p>在下载过程中<span class="mojikumi-line-end">，</span>会采用被称作<span class="mojikumi-line-start">“</span>tit-for-tat<span class="mojikumi-line-end">”</span>的策略决定上传给谁<span class="mojikumi-line-end">：</span>上传给自己<span class="mojikumi-line-start">（</span>即从他那下载<span class="mojikumi-line-end">）</span>的速度最快的几个 peer 被称作<span class="mojikumi-line-start">“</span>unchoked<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>除此之外还会每隔一段时间随机选择一个 peer 被称作<span class="mojikumi-line-start">“</span>optimistically unchoked<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>最后做出的选择就是上传给<span class="mojikumi-line-start">“</span>unchoked<span class="mojikumi-line-end">”</span>和<span class="mojikumi-line-start">“</span>optimistically unchoked<span class="mojikumi-line-end">”</span>的这些 peer<span class="mojikumi-line-end">。</span>这个策略实际上可以被绕过<span class="mojikumi-line-end">，</span>但不被绕过时它提供了一个激励大家上传的机制<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>注<span class="mojikumi-line-end">：</span>在下载完毕后保种时<span class="mojikumi-line-end">，</span>会使用另外的策略<span class="mojikumi-line-end">。</span><sup><a href="#user-content-fn-seed-choking" id="user-content-fnref-seed-choking" data-footnote-ref aria-describedby="footnote-label">5</a></sup><span class="mojikumi-line-end">）</span></p>
<p>除了通过 tracker<span class="mojikumi-line-end">，</span>还可以通过 Distributed Hash Table (DHT<span class="mojikumi-line-end">，</span>一种 P2P 架构的 distributed database) 来获取 peer<span class="mojikumi-line-end">。</span></p>
<h2 id="video-streaming-and-content-distribution-networks" class="heading"><a href="#video-streaming-and-content-distribution-networks" class="heading-anchor" aria-label="章节： Video Streaming and Content Distribution Networks" tabindex="-1"></a><span>Video Streaming and Content Distribution Networks</span></h2>
<h3 id="http-streaming-and-dash" class="heading"><a href="#http-streaming-and-dash" class="heading-anchor" aria-label="章节： HTTP Streaming and DASH" tabindex="-1"></a><span>HTTP Streaming and DASH</span></h3>
<p>视频需要耗费大量的流量<span class="mojikumi-line-start">（</span>以及存储空间<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而 streaming 时需要保证至少有视频 bitrate 这么多的带宽才能避免卡顿<span class="mojikumi-line-end">，</span>所以一般会根据可用的带宽选择不同质量的视频版本<span class="mojikumi-line-end">。</span></p>
<p>最基础的 streaming 方式是 HTTP streaming<span class="mojikumi-line-end">，</span>即通过 HTTP GET 获取视频文件至缓冲区并播放<span class="mojikumi-line-end">，</span>但这样无法适应不同用户的不同带宽<span class="mojikumi-line-end">，</span>更无法适应同一个用户随时间变化的带宽<span class="mojikumi-line-end">。</span></p>
<p>在 Dynamic Adaptive Streaming over HTTP (DASH) 中<span class="mojikumi-line-end">，</span>视频被编码为多个不同质量的版本<span class="mojikumi-line-end">，</span>client 每次获取一个几秒的视频片段<span class="mojikumi-line-end">，</span>并根据可用带宽动态调整选择的版本<span class="mojikumi-line-end">。</span></p>
<p>在开始播放之前<span class="mojikumi-line-end">，</span>client 首先会获取 manifest file 来得到各个视频版本的 URL 以及 bitrate<span class="mojikumi-line-end">。</span>在播放过程中<span class="mojikumi-line-end">，</span>通过 HTTP GET 请求以及 byte range header 获取视频片段<span class="mojikumi-line-end">，</span>同时计算可用带宽<span class="mojikumi-line-end">，</span>决定接下来选择的视频版本<span class="mojikumi-line-end">。</span></p>
<h3 id="content-distribution-networks" class="heading"><a href="#content-distribution-networks" class="heading-anchor" aria-label="章节： Content Distribution Networks" tabindex="-1"></a><span>Content Distribution Networks</span></h3>
<p>和 DNS 类似<span class="mojikumi-line-end">，</span>video streaming 往往也不能仅通过单个 data center 实现<span class="mojikumi-line-end">，</span>因为<span class="mojikumi-line-end">：</span></p>
<ul>
<li>离部分用户过远<span class="mojikumi-line-end">，</span>虽然 streaming 对延时要求不高<span class="mojikumi-line-end">，</span>但更多的 communication link 很可能意味着更低的 bottleneck bandwidth<span class="mojikumi-line-end">。</span></li>
<li>同一个视频会在同一个 communication link 上被传输多次<span class="mojikumi-line-end">，</span>造成网络资源以及资费的浪费<span class="mojikumi-line-end">。</span></li>
<li>single point of failure</li>
</ul>
<p>为了解决这些问题<span class="mojikumi-line-end">，</span>video-streaming company 往往会使用 Content Distribution Networks (CDN) 来分发视频<span class="mojikumi-line-end">。</span></p>
<p>CDN 会在全球各地放置 server (cluster)<span class="mojikumi-line-end">，</span>在每个节点存放一份 content 的 copy<span class="mojikumi-line-end">，</span>在处理 user request 时尽量由最好<span class="mojikumi-line-start">（</span>最近<span class="mojikumi-line-end">）</span>的节点负责响应<span class="mojikumi-line-end">。</span></p>
<p>CDN 可以是 private CDN<span class="mojikumi-line-start">（</span>例如 Google 的 CDN<span class="mojikumi-line-end">）</span>或者 third-party CDN<span class="mojikumi-line-start">（</span>例如 Akamai<span class="mojikumi-line-end">、</span>Limelight<span class="mojikumi-line-end">、</span>Level-3<span class="mojikumi-line-end">，</span><s>书中竟然没提到 Cloudflare</s><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>CDN 通常有两种放置策略<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Enter Deep: 放在 access ISP<span class="mojikumi-line-end">，</span>cluster 数量多<span class="mojikumi-line-end">，</span>性能更好<span class="mojikumi-line-end">，</span>维护成本更高<span class="mojikumi-line-end">。</span></li>
<li>Bring Home: 放在 IXP<span class="mojikumi-line-end">，</span>cluster 数量少<span class="mojikumi-line-end">，</span>维护成本更低<span class="mojikumi-line-end">，</span>性能相对差<span class="mojikumi-line-end">。</span></li>
</ul>
<p>CDN 的更新有 push 和 pull 两种方式<span class="mojikumi-line-end">，</span>push 就是内容更新时 push 到各个 cluster<span class="mojikumi-line-end">，</span>pull 则与 cache 类似<span class="mojikumi-line-end">，</span>在 cache miss 时再从上游获取并<span class="mojikumi-line-start">（</span>在 stream 给用户的同时<span class="mojikumi-line-end">）</span>保存下来<span class="mojikumi-line-end">。</span></p>
<p>将用户重定向到 CDN 节点的一种方式是通过 DNS<span class="mojikumi-line-end">：</span>authoritative DNS server 返回 CDN 的 DNS server 的 NS record<span class="mojikumi-line-end">，</span>然后再由 CDN 的 DNS server 进行节点选择并返回节点的 IP 地址<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>基于 DNS 进行 CDN 重定向时<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>选择节点的两种方式是<span class="mojikumi-line-end">：</span></p>
<ul>
<li>
<p>geographically closest: 由 local DNS server 的 IP 确定地理位置<span class="mojikumi-line-end">，</span>然后选择最近的节点<span class="mojikumi-line-end">。</span>这样做的主要问题在于<span class="mojikumi-line-end">，</span>地理位置近不一定意味着网络距离近/带宽高<span class="mojikumi-line-end">，</span>并且 local DNS server 有可能离用户很远<span class="mojikumi-line-end">。</span></p>
</li>
<li>
<p>real-time measurements: 可以每隔一段时间向各个 local DNS server 发送探测信号来检测网络性能<span class="mojikumi-line-end">，</span>这样做的主要问题在于 DNS server 可能会拒绝响应这样的探测<span class="mojikumi-line-end">。</span></p>
</li>
</ul>
<h3 id="case-studies-netflix-and-youtube" class="heading"><a href="#case-studies-netflix-and-youtube" class="heading-anchor" aria-label="章节： Case Studies: Netflix and YouTube" tabindex="-1"></a><span>Case Studies: Netflix and YouTube</span></h3>
<p>Netflix 和 YouTube 都是大型 video streaming 服务商<span class="mojikumi-line-end">，</span>但它们的架构有很大不同<span class="mojikumi-line-end">，</span>这很大程度上是由于它们视频类型的不同<span class="mojikumi-line-start">（</span>剧 vs UGC<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h4 id="netflix" class="heading"><a href="#netflix" class="heading-anchor" aria-label="章节： Netflix" tabindex="-1"></a><span>Netflix</span></h4>
<p>Netflix 使用 Amazon cloud 运行 Web server 以及视频处理<span class="mojikumi-line-end">，</span>而使用私有的 CDN 分发视频<span class="mojikumi-line-end">。</span></p>
<p>Netflix 的私有 CDN cluster 安装在 ISP 和 IXP 中<span class="mojikumi-line-end">，</span>其中 IXP 的 cluster 往往容量较大<span class="mojikumi-line-end">，</span>可以装下整个 Netflix 的所有视频的各个版本<span class="mojikumi-line-end">，</span>而 ISP 的 cluster 往往容量较小<span class="mojikumi-line-end">，</span>只存放最热门的视频<span class="mojikumi-line-end">。</span></p>
<p>Netflix 不使用 pull-caching<span class="mojikumi-line-end">，</span>而是在每天的低峰期采用 push 进行更新<span class="mojikumi-line-end">。</span></p>
<p>因为 Netflix 的私有 CDN 只负责分发视频<span class="mojikumi-line-end">，</span>它不需要使用 DNS redirect<span class="mojikumi-line-end">，</span>直接由 Web server 告诉 client IP 地址即可<span class="mojikumi-line-end">。</span></p>
<h4 id="youtube" class="heading"><a href="#youtube" class="heading-anchor" aria-label="章节： YouTube" tabindex="-1"></a><span>YouTube</span></h4>
<a id="google-的-network-infrastructure" name="google-的-network-infrastructure" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h5 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>Google 的 network infrastructure</span></h5><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>Google 部署了一个庞大的 private network and CDN infrastructure<span class="mojikumi-line-end">，</span>包含以下三级 server clusters<span class="mojikumi-line-end">：</span></p><ol>
<li>约 20 个<span class="mojikumi-line-start">“</span>mega data center<span class="mojikumi">”</span><span class="mojikumi-line-end">，</span>分布在北美<span class="mojikumi-line-end">、</span>欧洲和亚洲<span class="mojikumi-line-end">，</span>每个 cluster 有数十万服务器<span class="mojikumi-line-end">，</span>用来 serve dynamic content<span class="mojikumi-line-end">。</span></li>
<li>约 90 个部署在 IXP 的 cluster<span class="mojikumi-line-end">，</span>每个 cluster 有数百个服务器<span class="mojikumi-line-end">，</span>用来 serve 包括 YouTube 视频在内的 static content<span class="mojikumi-line-end">。</span></li>
<li>数百个部署在 access ISP 的 cluster<span class="mojikumi-line-end">，</span>每个 cluster 有数十个服务器<span class="mojikumi-line-end">，</span>用来进行 TCP splitting 以及 server static content<span class="mojikumi-line-end">，</span>例如网页上的静态资源<span class="mojikumi-line-end">。</span></li>
</ol><p>在访问 Google 的服务时<span class="mojikumi-line-end">，</span>不同内容往往会来自不同层级的 cluster<span class="mojikumi-line-end">。</span></p><p>这些 cluster 通过 Google 的 private network 连接<span class="mojikumi-line-end">，</span>使得它们之间的很多通信都不依赖于 public Internet<span class="mojikumi-line-end">，</span>与用户的通信也往往只涉及到 access ISP 这一层<span class="mojikumi-line-end">。</span></p></div></div></aside>
<p>YouTube 使用 Google 的私有 CDN 分发视频<span class="mojikumi-line-end">，</span>并且使用 pull-caching 和 DNS redirect<span class="mojikumi-line-end">。</span>在选择节点时<span class="mojikumi-line-end">，</span>会综合考虑 client 到 cluster 的 RTT 以及负载均衡<span class="mojikumi-line-end">。</span></p>
<p>在用户上传视频时<span class="mojikumi-line-end">，</span>会在 Google 的 data center 进行处理<span class="mojikumi-line-end">。</span></p>
<h2 id="socket-programming-creating-network-applications" class="heading"><a href="#socket-programming-creating-network-applications" class="heading-anchor" aria-label="章节： Socket Programming: Creating Network Applications" tabindex="-1"></a><span>Socket Programming: Creating Network Applications</span></h2>
<p>一般来说<span class="mojikumi-line-end">，</span>编写 network application 需要编写 client program 和 server program<span class="mojikumi-line-end">。</span></p>
<h3 id="socket-programming-with-udp" class="heading"><a href="#socket-programming-with-udp" class="heading-anchor" aria-label="章节： Socket Programming with UDP" tabindex="-1"></a><span>Socket Programming with UDP</span></h3>
<p>使用 UDP 时<span class="mojikumi-line-end">，</span>每次发送 datagram 都需要指定 address<span class="mojikumi-line-start">（</span>IP 地址 &#x26; 端口<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>接收 datagram 时也会收到对方的 address<span class="mojikumi-line-end">。</span></p>
<p><s>一看就懂但书上解释了半天的</s> 例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Python 代码块" data-v-ad49d235>Python</h4><ile-root id="ile-4"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-4--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverName </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">hostname</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">clientSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_DGRAM</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># AF_INET 表示 IPv4 地址，SOCK_DGRAM 表示 UDP</span></span>
<span><span style="color: #D6DEEB">message </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">Input lowercase sentence:</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">sendto</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">message.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">()</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> (serverName, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">modifiedMessage, serverAddress </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> clientSocket.</span><span style="color: #B2CCD6">recvfrom</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">2048</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># 2048 是 buffer size</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">modifiedMessage.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverName </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">hostname</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">clientSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_DGRAM</span><span style="color: #403F53">) </span><span style="color: #989FB1"># AF_INET 表示 IPv4 地址，SOCK_DGRAM 表示 UDP</span></span>
<span><span style="color: #403F53">message </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">Input lowercase sentence:</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">sendto</span><span style="color: #403F53">(</span><span style="color: #4876D6">message.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">()</span><span style="color: #111111">,</span><span style="color: #4876D6"> (serverName, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">modifiedMessage, serverAddress </span><span style="color: #994CC3">=</span><span style="color: #403F53"> clientSocket.</span><span style="color: #0C969B">recvfrom</span><span style="color: #403F53">(</span><span style="color: #AA0982">2048</span><span style="color: #403F53">) </span><span style="color: #989FB1"># 2048 是 buffer size</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #4876D6">modifiedMessage.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Python 代码块" data-v-ad49d235>Python</h4><ile-root id="ile-5"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-5--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">serverSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_DGRAM</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">bind</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(</span><span style="color: #D9F5DD">&#39;&#39;</span><span style="color: #82AAFF">, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">The server is ready to receive</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C792EA">while</span><span style="color: #D6DEEB"> </span><span style="color: #FF5874">True</span><span style="color: #D6DEEB">:</span></span>
<span><span style="color: #D6DEEB">    message, clientAddress </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> serverSocket.</span><span style="color: #B2CCD6">recvfrom</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">2048</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">    modifiedMessage </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> message.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">().</span><span style="color: #B2CCD6">upper</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    serverSocket.</span><span style="color: #B2CCD6">sendto</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">modifiedMessage.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">()</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> clientAddress</span><span style="color: #D6DEEB">)</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">serverSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_DGRAM</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">bind</span><span style="color: #403F53">(</span><span style="color: #4876D6">(</span><span style="color: #111111">&#39;&#39;</span><span style="color: #4876D6">, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">The server is ready to receive</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #994CC3">while</span><span style="color: #403F53"> </span><span style="color: #BC5454">True</span><span style="color: #403F53">:</span></span>
<span><span style="color: #403F53">    message, clientAddress </span><span style="color: #994CC3">=</span><span style="color: #403F53"> serverSocket.</span><span style="color: #0C969B">recvfrom</span><span style="color: #403F53">(</span><span style="color: #AA0982">2048</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">    modifiedMessage </span><span style="color: #994CC3">=</span><span style="color: #403F53"> message.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">().</span><span style="color: #0C969B">upper</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    serverSocket.</span><span style="color: #0C969B">sendto</span><span style="color: #403F53">(</span><span style="color: #4876D6">modifiedMessage.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">()</span><span style="color: #111111">,</span><span style="color: #4876D6"> clientAddress</span><span style="color: #403F53">)</span></span></code></pre></div></section>
<h3 id="socket-programming-with-tcp" class="heading"><a href="#socket-programming-with-tcp" class="heading-anchor" aria-label="章节： Socket Programming with TCP" tabindex="-1"></a><span>Socket Programming with TCP</span></h3>
<p>TCP 是一个 connection-oriented protocol<span class="mojikumi-line-end">，</span>在 server 上分为 welcoming socket 和 connection socket<span class="mojikumi-line-end">，</span>一开始需要通过 welcoming socket 建立 connection 并得到 connection socket<span class="mojikumi-line-end">，</span>而在建立了 connection 之后就无需再指定对方的 address<span class="mojikumi-line-end">。</span></p>
<p><span class="mojikumi-line-start">（</span>下面的代码除了换成 TCP 还对上面的 UDP 代码有若干没有本质区别的修改<span class="mojikumi-line-end">，</span>要是我写肯定会避免<span class="mojikumi-line-end">，</span>但是从书上复制就懒得改了<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Python 代码块" data-v-ad49d235>Python</h4><ile-root id="ile-6"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-6--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverName </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">servername</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">clientSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_STREAM</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># SOCK_STREAM 是 TCP</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">connect</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(serverName, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">sentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">Input lowercase sentence:</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">send</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">sentence.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">modifiedSentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> clientSocket.</span><span style="color: #B2CCD6">recv</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1024</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">From Server: </span><span style="color: #D9F5DD">&#39;</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> modifiedSentence.</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">clientSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverName </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">servername</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">clientSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_STREAM</span><span style="color: #403F53">) </span><span style="color: #989FB1"># SOCK_STREAM 是 TCP</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">connect</span><span style="color: #403F53">(</span><span style="color: #4876D6">(serverName, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">sentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">input</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">Input lowercase sentence:</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">send</span><span style="color: #403F53">(</span><span style="color: #4876D6">sentence.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">modifiedSentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> clientSocket.</span><span style="color: #0C969B">recv</span><span style="color: #403F53">(</span><span style="color: #AA0982">1024</span><span style="color: #403F53">)</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">From Server: </span><span style="color: #111111">&#39;</span><span style="color: #111111">,</span><span style="color: #4876D6"> modifiedSentence.</span><span style="color: #0C969B">decode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">clientSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Python 代码块" data-v-ad49d235>Python</h4><ile-root id="ile-7"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-7--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">from</span><span style="color: #D6DEEB"> socket </span><span style="color: #C792EA">import</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">*</span></span>
<span><span style="color: #D6DEEB">serverPort </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">12000</span></span>
<span><span style="color: #D6DEEB">serverSocket </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #B2CCD6">socket</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">AF_INET</span><span style="color: #D9F5DD">,</span><span style="color: #82AAFF"> SOCK_STREAM</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">bind</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">(</span><span style="color: #D9F5DD">&#39;&#39;</span><span style="color: #82AAFF">, serverPort)</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">serverSocket.</span><span style="color: #B2CCD6">listen</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">) </span><span style="color: #637777"># 1 是 connection queue 的最大长度</span></span>
<span><span style="color: #C5E478">print</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">The server is ready to receive</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #C792EA">while</span><span style="color: #D6DEEB"> </span><span style="color: #FF5874">True</span><span style="color: #D6DEEB">:</span></span>
<span><span style="color: #D6DEEB">    connectionSocket, addr </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> serverSocket.</span><span style="color: #B2CCD6">accept</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    sentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> connectionSocket.</span><span style="color: #B2CCD6">recv</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">1024</span><span style="color: #D6DEEB">).</span><span style="color: #B2CCD6">decode</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    capitalizedSentence </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> sentence.</span><span style="color: #B2CCD6">upper</span><span style="color: #D6DEEB">()</span></span>
<span><span style="color: #D6DEEB">    connectionSocket.</span><span style="color: #B2CCD6">send</span><span style="color: #D6DEEB">(</span><span style="color: #82AAFF">capitalizedSentence.</span><span style="color: #B2CCD6">encode</span><span style="color: #D6DEEB">())</span></span>
<span><span style="color: #D6DEEB">    connectionSocket.</span><span style="color: #B2CCD6">close</span><span style="color: #D6DEEB">()</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">from</span><span style="color: #403F53"> socket </span><span style="color: #994CC3">import</span><span style="color: #403F53"> </span><span style="color: #994CC3">*</span></span>
<span><span style="color: #403F53">serverPort </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">12000</span></span>
<span><span style="color: #403F53">serverSocket </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #0C969B">socket</span><span style="color: #403F53">(</span><span style="color: #4876D6">AF_INET</span><span style="color: #111111">,</span><span style="color: #4876D6"> SOCK_STREAM</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">bind</span><span style="color: #403F53">(</span><span style="color: #4876D6">(</span><span style="color: #111111">&#39;&#39;</span><span style="color: #4876D6">, serverPort)</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">serverSocket.</span><span style="color: #0C969B">listen</span><span style="color: #403F53">(</span><span style="color: #AA0982">1</span><span style="color: #403F53">) </span><span style="color: #989FB1"># 1 是 connection queue 的最大长度</span></span>
<span><span style="color: #4876D6">print</span><span style="color: #403F53">(</span><span style="color: #111111">&#39;</span><span style="color: #C96765">The server is ready to receive</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #994CC3">while</span><span style="color: #403F53"> </span><span style="color: #BC5454">True</span><span style="color: #403F53">:</span></span>
<span><span style="color: #403F53">    connectionSocket, addr </span><span style="color: #994CC3">=</span><span style="color: #403F53"> serverSocket.</span><span style="color: #0C969B">accept</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    sentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> connectionSocket.</span><span style="color: #0C969B">recv</span><span style="color: #403F53">(</span><span style="color: #AA0982">1024</span><span style="color: #403F53">).</span><span style="color: #0C969B">decode</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    capitalizedSentence </span><span style="color: #994CC3">=</span><span style="color: #403F53"> sentence.</span><span style="color: #0C969B">upper</span><span style="color: #403F53">()</span></span>
<span><span style="color: #403F53">    connectionSocket.</span><span style="color: #0C969B">send</span><span style="color: #403F53">(</span><span style="color: #4876D6">capitalizedSentence.</span><span style="color: #0C969B">encode</span><span style="color: #403F53">())</span></span>
<span><span style="color: #403F53">    connectionSocket.</span><span style="color: #0C969B">close</span><span style="color: #403F53">()</span></span></code></pre></div></section>
<section data-footnotes class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-fig2.8">
<p>p103, Figure 2.8: General format of an HTTP request message <a href="#user-content-fnref-fig2.8" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig2.9">
<p>p104, Figure 2.9: General format of an HTTP response message <a href="#user-content-fnref-fig2.9" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-smtp-example">
<p><a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#SMTP_transport_example">SMTP transport example - Simple Mail Transfer Protocol - Wikipedia</a> <a href="#user-content-fnref-smtp-example" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-fig-2.21">
<p>p133, Figure 2.21: DNS message format <a href="#user-content-fnref-fig-2.21" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-seed-choking">
<p><a href="https://www.libtorrent.org/reference-Settings.html#seed_choking_algorithm_t">seed_choking_algorithm - libtorrent</a> <a href="#user-content-fnref-seed-choking" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/cnatda">cnatda</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第五章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/04/ddpp-5</link>
            <guid>https://ouuan.moe/post/2023/04/ddpp-5</guid>
            <pubDate>Sat, 29 Apr 2023 16:24:36 GMT</pubDate>
            <description><![CDATA[<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第五章 <span class="mojikumi">“</span>Verilog Hardware Description Language<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>也就是初学 (System)Verilog 的笔记<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第五章 <span class="mojikumi">“</span>Verilog Hardware Description Language<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>也就是初学 (System)Verilog 的笔记<span class="mojikumi-line-end">。</span></p>

<p>本来想寒假学<span class="mojikumi-line-end">，</span>结果还是拖到了数字逻辑实验开始用 FPGA<span class="mojikumi-line-end">，</span>只不过手上有模块了再来学也挺好的<span class="mojikumi-line-end">。</span></p>
<p>虽然从创建到发布拖了很久<span class="mojikumi-line-end">，</span>但其实大部分内容都是新建文件后一周内写的<span class="mojikumi-line-end">，</span>只是后来感觉学的东西已经差不多能应付上课了<span class="mojikumi-line-end">，</span>就一直咕着没把最后一点学完 &#x26; 写完<span class="mojikumi-line-start">（</span></p>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h2 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-info-circle-outline text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Info: </span><span data-v-a2ab257f>SystemVerilog</span></h2><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>DDPP5 中讲的是 Verilog 而不是 SystemVerilog<span class="mojikumi-line-end">，</span>我根据在其他地方找到的一些资料补充了少量 SystemVerilog 的内容<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h2 id="neovim-配置" class="heading"><a href="#neovim-配置" class="heading-anchor" aria-label="章节： neovim 配置" tabindex="-1"></a><span>neovim 配置</span></h2>
<p>用的是老师推荐的 Vivado 2019.2 WebPack<span class="mojikumi-line-end">，</span>而它自带的文本编辑器多少有点拉胯<span class="mojikumi-line-end">，</span>所以研究了一下配 neovim<span class="mojikumi-line-end">。</span></p>
<p>最后选择的是 <a href="https://github.com/vivekmalneedi/veridian">veridian</a> + 通过 <a href="https://github.com/jose-elias-alvarez/null-ls.nvim">null-ls</a> 使用 Vivado 的 <code>xvlog</code><span class="mojikumi-line-end">。</span>一开始我还看 veridian 没在维护而且 star 少<span class="mojikumi-line-start">（</span><s>但它好歹最后更新是在 2021<span class="mojikumi-line-end">，</span>Vivado 还在用 2019</s><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>先试了另外几个<span class="mojikumi-line-end">，</span>后来发现<span class="mojikumi-line-end">，</span>不说别的<span class="mojikumi-line-end">，</span>只有 veridian 支持 hover<span class="mojikumi-line-end">。</span>同时使用 <code>xvlog</code> 是觉得还是 Vivado 自带的 lint 比较靠谱<span class="mojikumi-line-end">。</span></p>
<p>veridian 就是用 <a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#veridian">lspconfig</a><span class="mojikumi-line-end">，</span>记得同时装 <a href="https://github.com/chipsalliance/verible">verible</a> 才能使用某些 feature<span class="mojikumi-line-start">（</span>在 lspconfig 里只需启用 veridian<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>可以把 <code>root_dir</code> 设为 <code>util<wbr>.<wbr>root_pattern<wbr>('*.<wbr>xpr<wbr>', '.<wbr>git<wbr>')</code> 来检测 Vivado 项目的根目录<span class="mojikumi-line-end">。</span></p>
<p>null-ls 的配置如下<span class="mojikumi-line-end">，</span>因为 <code>xvlog</code> 实际上是一个不能禁用文件输出的 simulator<span class="mojikumi-line-end">，</span>采取了一些措施来防止它到处倒垃圾<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Lua 代码块" data-v-ad49d235>Lua</h3><ile-root id="ile-8"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-8--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">utils</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls.utils</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">helpers</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">require</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">null-ls.helpers</span><span style="color: #D9F5DD">&quot;</span></span>
<span></span>
<span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">xvlog_sv</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">name</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">method</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.methods.DIAGNOSTICS,</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">filetypes</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">systemverilog</span><span style="color: #D9F5DD">&quot; </span><span style="color: #D6DEEB">},</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">generator</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">generator</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">command</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">bwrap</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #637777">-- only permit writing in /tmp</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">args</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--ro-bind</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--bind</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/tmp/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/tmp/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--dev</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/dev</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">/home/ouuan/Xilinx/Vivado/2019.2/bin/xvlog</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">--sv</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">$FILENAME</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    },</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">cwd</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">function</span><span style="color: #D9F5DD">(</span><span style="color: #7FDBCA">params</span><span style="color: #D9F5DD">)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #637777">-- output in /tmp</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">local</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">dir</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">/tmp/xvlog/</span><span style="color: #D9F5DD">&#39; </span><span style="color: #7FDBCA">..</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">params</span><span style="color: #D6DEEB">.bufnr</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C5E478">vim</span><span style="color: #D6DEEB">.fn.</span><span style="color: #C5E478">mkdir</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">dir</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">p</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">return</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">dir</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">end</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">to_temp_file</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">true</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">format</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">line</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">check_exit_code</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB"> },</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">on_output</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">helpers</span><span style="color: #D6DEEB">.diagnostics.</span><span style="color: #C5E478">from_patterns</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">      {</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">pattern</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">(.+): %[.+%] (.+) %[.+:(%d+)%]</span><span style="color: #D9F5DD">&#39;</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">groups</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> { </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">severity</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">message</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">row</span><span style="color: #D9F5DD">&quot; </span><span style="color: #D6DEEB">},</span></span>
<span><span style="color: #D6DEEB">        </span><span style="color: #C5E478">overrides</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">          </span><span style="color: #C5E478">severities</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">ERROR</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">WARNING</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">            [</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">INFO</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">] </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">          },</span></span>
<span><span style="color: #D6DEEB">        },</span></span>
<span><span style="color: #D6DEEB">      },</span></span>
<span><span style="color: #D6DEEB">    },</span></span>
<span><span style="color: #D6DEEB">  },</span></span>
<span><span style="color: #D6DEEB">}</span></span>
<span></span>
<span><span style="color: #C5E478">null_ls</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">setup</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">sources</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> {</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">xvlog_sv</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #D6DEEB">  },</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">root_dir</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">utils</span><span style="color: #D6DEEB">.</span><span style="color: #C5E478">root_pattern</span><span style="color: #D6DEEB">(</span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">*.xpr</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">, </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">.git</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">}</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">utils</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls.utils</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">helpers</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">require</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">null-ls.helpers</span><span style="color: #111111">&quot;</span></span>
<span></span>
<span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">xvlog_sv</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">name</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">method</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.methods.DIAGNOSTICS,</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">filetypes</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #111111">&quot;</span><span style="color: #C96765">systemverilog</span><span style="color: #111111">&quot; </span><span style="color: #403F53">},</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">generator</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.</span><span style="color: #4876D6">generator</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">command</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">bwrap</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #989FB1">-- only permit writing in /tmp</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">args</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--ro-bind</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--bind</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/tmp/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/tmp/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--dev</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/dev</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">/home/ouuan/Xilinx/Vivado/2019.2/bin/xvlog</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">      </span><span style="color: #111111">&quot;</span><span style="color: #C96765">--sv</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">$FILENAME</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    },</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">cwd</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #994CC3">function</span><span style="color: #111111">(</span><span style="color: #0C969B">params</span><span style="color: #111111">)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #989FB1">-- output in /tmp</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">local</span><span style="color: #403F53"> </span><span style="color: #4876D6">dir</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">/tmp/xvlog/</span><span style="color: #111111">&#39; </span><span style="color: #0C969B">..</span><span style="color: #403F53"> </span><span style="color: #4876D6">params</span><span style="color: #403F53">.bufnr</span></span>
<span><span style="color: #403F53">      </span><span style="color: #4876D6">vim</span><span style="color: #403F53">.fn.</span><span style="color: #4876D6">mkdir</span><span style="color: #403F53">(</span><span style="color: #4876D6">dir</span><span style="color: #403F53">, </span><span style="color: #111111">&#39;</span><span style="color: #C96765">p</span><span style="color: #111111">&#39;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">return</span><span style="color: #403F53"> </span><span style="color: #4876D6">dir</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">end</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">to_temp_file</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">true</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">format</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">line</span><span style="color: #111111">&quot;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">check_exit_code</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #AA0982">0</span><span style="color: #403F53">, </span><span style="color: #AA0982">1</span><span style="color: #403F53"> },</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">on_output</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">helpers</span><span style="color: #403F53">.diagnostics.</span><span style="color: #4876D6">from_patterns</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">      {</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">pattern</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">(.+): %[.+%] (.+) %[.+:(%d+)%]</span><span style="color: #111111">&#39;</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">groups</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> { </span><span style="color: #111111">&quot;</span><span style="color: #C96765">severity</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">message</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">row</span><span style="color: #111111">&quot; </span><span style="color: #403F53">},</span></span>
<span><span style="color: #403F53">        </span><span style="color: #4876D6">overrides</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">          </span><span style="color: #4876D6">severities</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">ERROR</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">WARNING</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">2</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">            [</span><span style="color: #111111">&quot;</span><span style="color: #C96765">INFO</span><span style="color: #111111">&quot;</span><span style="color: #403F53">] </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">3</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">          },</span></span>
<span><span style="color: #403F53">        },</span></span>
<span><span style="color: #403F53">      },</span></span>
<span><span style="color: #403F53">    },</span></span>
<span><span style="color: #403F53">  },</span></span>
<span><span style="color: #403F53">}</span></span>
<span></span>
<span><span style="color: #4876D6">null_ls</span><span style="color: #403F53">.</span><span style="color: #4876D6">setup</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">sources</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> {</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">xvlog_sv</span><span style="color: #403F53">,</span></span>
<span><span style="color: #403F53">  },</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">root_dir</span><span style="color: #403F53"> </span><span style="color: #0C969B">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">utils</span><span style="color: #403F53">.</span><span style="color: #4876D6">root_pattern</span><span style="color: #403F53">(</span><span style="color: #111111">&quot;</span><span style="color: #C96765">*.xpr</span><span style="color: #111111">&quot;</span><span style="color: #403F53">, </span><span style="color: #111111">&quot;</span><span style="color: #C96765">.git</span><span style="color: #111111">&quot;</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">}</span></span></code></pre></div></section>
<p>另外可以用 <a href="https://github.com/amal-khailtash/vim-xdc-syntax">vim-xdc-syntax</a> 添加管脚约束文件的高亮<span class="mojikumi-line-end">。</span></p>
<p>Vivado 的 custom text editor 使用下面的脚本<span class="mojikumi-line-end">。</span>是针对 <a href="https://i3wm.org/">i3</a> 配的<span class="mojikumi-line-end">，</span>给 konsole 设了 name 参数<span class="mojikumi-line-end">，</span>i3 设成 <code>assign<wbr> [<wbr>instance<wbr>="<wbr>konsole<wbr>"]</code><span class="mojikumi-line-start">（</span><code>instance</code> 而非 <code>class</code><span class="mojikumi-line-end">）</span>就可以不把这个 konsole 挪到其他 konsole 所在的 workspace<span class="mojikumi-line-end">，</span>并且可以在打开新文件时 focus 过去<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="Shell 代码块" data-v-ad49d235>Shell</h3><ile-root id="ile-9"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-9--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #637777">#!/bin/bash</span></span>
<span></span>
<span><span style="color: #637777"># vivado-nvim.sh &quot;[file name]&quot; [line number]</span></span>
<span></span>
<span><span style="color: #C5E478">set</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">-euo</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">pipefail</span></span>
<span></span>
<span><span style="color: #C5E478">unset</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">LD_LIBRARY_PATH</span></span>
<span></span>
<span><span style="color: #C5E478">NVIM_LISTEN_ADDRESS</span><span style="color: #C792EA">=</span><span style="color: #ECC48D">/tmp/vivado-nvim.pipe</span></span>
<span></span>
<span><span style="color: #C792EA">if</span><span style="color: #D6DEEB"> [[ </span><span style="color: #C792EA">!</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">-e</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> ]]; </span><span style="color: #C792EA">then</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">exec</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">konsole</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--name</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">vivado-nvim</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">-e</span><span style="color: #D6DEEB"> </span><span style="color: #ECC48D">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--listen</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #D7DBE0">$1</span><span style="color: #D9F5DD">&quot;</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">+</span><span style="color: #D7DBE0">$2</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #C792EA">else</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--server</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--remote</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #D7DBE0">$1</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">nvim</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--server</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">$NVIM_LISTEN_ADDRESS</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">--remote-send</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&quot;</span><span style="color: #ECC48D">:</span><span style="color: #D7DBE0">$2</span><span style="color: #ECC48D">&lt;CR&gt;</span><span style="color: #D9F5DD">&quot;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">i3-msg</span><span style="color: #D6DEEB"> </span><span style="color: #D9F5DD">&#39;</span><span style="color: #ECC48D">[instance=&quot;vivado-nvim&quot;] focus</span><span style="color: #D9F5DD">&#39;</span></span>
<span><span style="color: #C792EA">fi</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #989FB1">#!/bin/bash</span></span>
<span></span>
<span><span style="color: #989FB1"># vivado-nvim.sh &quot;[file name]&quot; [line number]</span></span>
<span></span>
<span><span style="color: #4876D6">set</span><span style="color: #403F53"> </span><span style="color: #4876D6">-euo</span><span style="color: #403F53"> </span><span style="color: #4876D6">pipefail</span></span>
<span></span>
<span><span style="color: #4876D6">unset</span><span style="color: #403F53"> </span><span style="color: #4876D6">LD_LIBRARY_PATH</span></span>
<span></span>
<span><span style="color: #4876D6">NVIM_LISTEN_ADDRESS</span><span style="color: #994CC3">=</span><span style="color: #4876D6">/tmp/vivado-nvim.pipe</span></span>
<span></span>
<span><span style="color: #994CC3">if</span><span style="color: #403F53"> [[ </span><span style="color: #994CC3">!</span><span style="color: #403F53"> </span><span style="color: #994CC3">-e</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> ]]; </span><span style="color: #994CC3">then</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">exec</span><span style="color: #403F53"> </span><span style="color: #4876D6">konsole</span><span style="color: #403F53"> </span><span style="color: #4876D6">--name</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">vivado-nvim</span><span style="color: #111111">&quot;</span><span style="color: #403F53"> </span><span style="color: #4876D6">-e</span><span style="color: #403F53"> </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--listen</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #403F53">$1</span><span style="color: #111111">&quot;</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">+</span><span style="color: #403F53">$2</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #994CC3">else</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--server</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #4876D6">--remote</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #403F53">$1</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">nvim</span><span style="color: #403F53"> </span><span style="color: #4876D6">--server</span><span style="color: #403F53"> </span><span style="color: #4876D6">$NVIM_LISTEN_ADDRESS</span><span style="color: #403F53"> </span><span style="color: #4876D6">--remote-send</span><span style="color: #403F53"> </span><span style="color: #111111">&quot;</span><span style="color: #C96765">:</span><span style="color: #403F53">$2</span><span style="color: #C96765">&lt;CR&gt;</span><span style="color: #111111">&quot;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">i3-msg</span><span style="color: #403F53"> </span><span style="color: #111111">&#39;</span><span style="color: #C96765">[instance=&quot;vivado-nvim&quot;] focus</span><span style="color: #111111">&#39;</span></span>
<span><span style="color: #994CC3">fi</span></span></code></pre></div></section>
<h2 id="基础语法" class="heading"><a href="#基础语法" class="heading-anchor" aria-label="章节： 基础语法" tabindex="-1"></a><span>基础语法</span></h2>
<h3 id="module" class="heading"><a href="#module" class="heading-anchor" aria-label="章节： module" tabindex="-1"></a><span>module</span></h3>
<p>Verilog 以 module 为基本单位<span class="mojikumi-line-start">（</span>和前端的 component 有点类似<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-10"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-10--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> inhibit (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  invin,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> out </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> in </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">invin;</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> inhibit (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  invin,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> out </span><span style="color: #994CC3">=</span><span style="color: #403F53"> in </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">invin;</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>convention 是每个文件只写一个 module<span class="mojikumi-line-end">。</span></p>
<h3 id="signal-net-variable" class="heading"><a href="#signal-net-variable" class="heading-anchor" aria-label="章节： signal (net &#x26; variable)" tabindex="-1"></a><span>signal (net &#x26; variable)</span></h3>
<p>一个 1-bit 的 signal 有四种取值<span class="mojikumi-line-end">：</span>0<span class="mojikumi-line-end">、</span>1<span class="mojikumi-line-end">、</span>x<span class="mojikumi-line-start">（</span>未知<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span>z<span class="mojikumi-line-start">（</span>高阻抗<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>位运算<span class="mojikumi-line-end">：</span><code>&#x26;</code><span class="mojikumi-line-end">、</span><code>|</code><span class="mojikumi-line-end">、</span><code>~</code><span class="mojikumi-line-end">、</span><code>^</code><span class="mojikumi-line-end">、</span><code>~^</code>/<code>^~</code><span class="mojikumi-line-end">。</span></p>
<p>signal 有两大类<span class="mojikumi-line-end">：</span><i>net</i> 和 <i>variable</i><span class="mojikumi-line-end">：</span></p>
<ul>
<li>net 表示线路<span class="mojikumi-line-end">，</span>一般是 <code>wire</code><span class="mojikumi-line-end">，</span>还可以是 <code>supply0</code><span class="mojikumi-line-end">、</span><code>supply1</code> 等<span class="mojikumi-line-start">（</span>我用 <code>supply1</code> 的时候出现了神秘的问题<span class="mojikumi-line-end">，</span>没细究<span class="mojikumi-line-end">，</span>反正用恒为 1 的 <code>logic</code> 也差不多<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></li>
<li>variable 用于 procedural statement 中<span class="mojikumi-line-end">，</span>不一定对应到物理上的线路<span class="mojikumi-line-end">，</span>可以是 <code>reg</code> 或者 <code>integer</code><span class="mojikumi-line-end">。</span>其中 <code>reg</code> 就是变量的意思<span class="mojikumi-line-start">（</span>名字取得不太好<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>表示单个 bit 或者 vector<span class="mojikumi-line-end">，</span>与基于 flip-flop 的寄存器无关<span class="mojikumi-line-end">。</span><code>integer</code> 是有符号整型<span class="mojikumi-line-end">，</span>一般不用来存储数据或信号<span class="mojikumi-line-end">，</span>而是用于 for 循环之类的地方<span class="mojikumi-line-end">。</span></li>
</ul>
<p>input 只能是 net<span class="mojikumi-line-end">，</span>而 output 可以是 net 或 <code>reg</code><span class="mojikumi-line-end">。</span>不写 <code>wire</code> / <code>reg</code> 时默认是 <code>wire</code><span class="mojikumi-line-end">。</span></p>
<p>在 SystemVerilog 中推荐用 <code>logic</code> 来代替 <code>reg</code><span class="mojikumi-line-end">。</span></p>
<h3 id="数字字面量-parameter" class="heading"><a href="#数字字面量-parameter" class="heading-anchor" aria-label="章节： 数字字面量 &#x26; parameter" tabindex="-1"></a><span>数字字面量 &#x26; parameter</span></h3>
<p>直接写十进制数会得到一个 signed number<span class="mojikumi-line-end">。</span></p>
<p>可以指定位数和进制<span class="mojikumi-line-end">：</span><code>1'b0</code> 是 1 bit 的 0<span class="mojikumi-line-end">，</span><code>4'ha</code> 是 4 bit 的 10<span class="mojikumi-line-start">（</span>十六进制的 A<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span><code>8<wbr>'<wbr>b01x0z1x1</code> 的一些 bit 是未知 / 高阻抗<span class="mojikumi-line-end">。</span>如果后面写的值的位数超过前面指定的位数<span class="mojikumi-line-end">，</span>高位会被扔掉<span class="mojikumi-line-end">，</span>如果少了则会高位补零<span class="mojikumi-line-start">（</span>或者补 <code>x</code> 或 <code>z</code><span class="mojikumi-line-end">，</span>如果最高位是 <code>x</code> 或 <code>z</code><span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这样得到的会是一个 unsigned vector<span class="mojikumi-line-end">，</span>可以加上 <code>s</code> 得到 signed vector<span class="mojikumi-line-end">：</span><code>4'sb1101</code><span class="mojikumi-line-end">。</span></p>
<p><code>parameter</code> 用来设置带默认值的参数<span class="mojikumi-line-end">：</span><code>parameter SIZE = 32, MSB = SIZE - 1, LSB = 0</code><span class="mojikumi-line-end">，</span><code>parameter ESC = 7'h1b</code><span class="mojikumi">。</span> <code>parameter</code> 一般用作常量<span class="mojikumi-line-end">，</span>而在 <a href="#structural-model">instance statement</a> 中可以被修改<span class="mojikumi-line-end">。</span></p>
<h3 id="vector-算术运算" class="heading"><a href="#vector-算术运算" class="heading-anchor" aria-label="章节： vector &#x26; 算术运算" tabindex="-1"></a><span>vector &#x26; 算术运算</span></h3>
<p>多个 bit 可以组成一个 vector<span class="mojikumi-line-end">，</span>net<span class="mojikumi-line-end">、</span><code>reg</code><span class="mojikumi-line-end">、</span><code>parameter</code> 都可以是 vector<span class="mojikumi-line-end">。</span></p>
<p>vector 的下标可以是左边<span class="mojikumi-line-start">（</span>MSB<span class="mojikumi-line-end">）</span>大<span class="mojikumi-line-start">（</span><code>reg [7:0] byte1, byte2</code><span class="mojikumi-line-end">）</span>也可以是右边<span class="mojikumi-line-start">（</span>LSB<span class="mojikumi-line-end">）</span>大<span class="mojikumi-line-start">（</span><code>reg [1:16] bus</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>起止的下标都可以指定<span class="mojikumi-line-end">。</span>左边的下标对应字面量中左边的 bit<span class="mojikumi-line-end">。</span><code>byte1[7]</code> 是 <code>byte1</code> 最左边的 bit<span class="mojikumi-line-end">，</span><code>bus[16]</code> 是 <code>bus</code> 最右边的 bit<span class="mojikumi-line-end">。</span><code>bus[1:8]</code> 和 <code>bus[9:16]</code> 是 <code>bus</code> 的左右两边<span class="mojikumi-line-end">。</span>读取越界会读到 <code>x</code><span class="mojikumi-line-end">，</span>写入会忽略越界的部分<span class="mojikumi-line-end">。</span></p>
<p><code>{}</code> 用来连接 vector<span class="mojikumi-line-end">，</span>例如 <code>{2'b10, 2'b01}</code> 等于 <code>4'b1001</code><span class="mojikumi-line-end">，</span><code>{2{byte1}, 2{byte2}}</code> 等于 <code>{byte1, byte1, byte2, byte2}</code><span class="mojikumi-line-end">。</span></p>
<p>vector 可以按位进行位运算<span class="mojikumi-line-end">，</span>在二元运算中短的会高位补零后进行运算<span class="mojikumi-line-end">。</span></p>
<p>二元位运算符也有一元的版本<span class="mojikumi-line-end">，</span>表示将 vector 内所有 bit 运算在一起得到 1-bit 的结果<span class="mojikumi-line-end">，</span>例如 <code>&#x26;byte1</code> 是 <code>1'b1</code> 表示 <code>byte1</code> 的所有 bit 都是 1<span class="mojikumi-line-end">。</span></p>
<p>vector 之间进行赋值时会截低位或高位补零<span class="mojikumi-line-end">。</span></p>
<p>vector 之间可以进行算术<span class="mojikumi-line-end">：</span><code>+</code><span class="mojikumi-line-end">、</span><code>-</code><span class="mojikumi-line-end">、</span><code>*</code><span class="mojikumi-line-end">、</span><code>/</code><span class="mojikumi-line-end">、</span><code>%</code><span class="mojikumi-line-end">、</span><code>**</code><span class="mojikumi-line-end">、</span><code>&#x3C;&#x3C;</code><span class="mojikumi-line-end">、</span><code>>></code><span class="mojikumi-line-end">、</span><code>&#x3C;&#x3C;&#x3C;</code><span class="mojikumi-line-start">（</span>算术左移<span class="mojikumi">）</span><span class="mojikumi-line-end">、</span><code>>>></code><span class="mojikumi-line-start">（</span>算术右移<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>算术的高位和低位基于左右而与下标大小无关<span class="mojikumi-line-end">。</span></p>
<p>除法和取模在某些情况下可能不 synthesizable<span class="mojikumi-line-end">，</span>除非除数是 2 的次幂<span class="mojikumi-line-end">。</span>synthesizable 时也可能会生成除法器的电路而非常昂贵<span class="mojikumi-line-end">。</span></p>
<p>逻辑移位得到 unsigned<span class="mojikumi-line-end">，</span>算术移位保持原来的 signed/unsigned<span class="mojikumi-line-end">，</span>算术右移高位补符号位<span class="mojikumi-line-end">。</span>二元算术中只要有一个是 unsigned 就会将另一个转成 unsigned 再计算<span class="mojikumi-line-end">。</span>signal 可以声明为 signed<span class="mojikumi-line-end">：</span><code>reg signed [15:0] a</code><span class="mojikumi-line-end">。</span></p>
<h3 id="array" class="heading"><a href="#array" class="heading-anchor" aria-label="章节： array" tabindex="-1"></a><span>array</span></h3>
<p>array 是相同类型的一列东西<span class="mojikumi-line-start">（</span>一列 <code>reg</code><span class="mojikumi-line-end">、</span><code>integer</code><span class="mojikumi-line-end">、</span><code>wire</code> 等<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>array 也可以指定下标范围<span class="mojikumi-line-end">，</span>而与 vector 相反<span class="mojikumi-line-end">，</span>声明 array 时框放在右边<span class="mojikumi-line-end">，</span>例如 <code>reg<wbr> [<wbr>7<wbr>:<wbr>0<wbr>] <wbr>byte1<wbr>, <wbr>mem1<wbr>[<wbr>0<wbr>:<wbr>255<wbr>]</code> 表示一个 8-bit <code>reg</code> 和一个由 256 个 8-bit <code>reg</code> 组成的 array<span class="mojikumi-line-end">。</span></p>
<p>array 可以嵌套为高维数组<span class="mojikumi-line-end">，</span>而访问只能访问单个下标<span class="mojikumi-line-end">，</span>不能像 vector 一样一下访问一个区间<span class="mojikumi-line-end">。</span>总之除了能指定下标范围都和 C 的数组差不多<span class="mojikumi-line-end">。</span></p>
<h3 id="逻辑运算" class="heading"><a href="#逻辑运算" class="heading-anchor" aria-label="章节： 逻辑运算" tabindex="-1"></a><span>逻辑运算</span></h3>
<p>含 <code>x</code> / <code>z</code> 或者全 0 的 vector<span class="mojikumi-line-start">（</span>或者 <code>1'b0</code><span class="mojikumi-line-end">）</span>是 false<span class="mojikumi-line-end">，</span>不含 <code>x</code> / <code>z</code> 且含 1 的 vector<span class="mojikumi-line-start">（</span>或者 <code>1'b1</code><span class="mojikumi-line-end">）</span>是 true<span class="mojikumi-line-end">。</span>false 的值是 <code>1'b0</code><span class="mojikumi-line-end">，</span>true 的值是 <code>1'b1</code><span class="mojikumi-line-end">。</span></p>
<p>逻辑运算符和比较运算符和 C 是一样的<span class="mojikumi-line-end">。</span>比较时如果一侧是 unsigned 则会按 unsigned 比较<span class="mojikumi-line-end">。</span>比较运算在电路中可能需要比较器<span class="mojikumi-line-start">（</span>尤其是两侧都不是常量时<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>所以可能是昂贵的<span class="mojikumi-line-end">。</span></p>
<p>三目运算符 <code>?:</code> 和 C 是一样的<span class="mojikumi-line-end">。</span></p>
<p>在 test bench 中<span class="mojikumi-line-end">，</span>带 <code>x</code> / <code>z</code> 的值在比较时结果为 <code>x</code><span class="mojikumi-line-start">（</span>用在条件判断时即为 false<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>可以使用 <code>===</code> / <code>!==</code> 来逐位比较<span class="mojikumi-line-start">（</span><code>x === x</code>, <code>z === z</code><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但它们不能用在 synthesizable module 中<span class="mojikumi-line-end">。</span></p>
<h3 id="compiler-directives" class="heading"><a href="#compiler-directives" class="heading-anchor" aria-label="章节： compiler directives" tabindex="-1"></a><span>compiler directives</span></h3>
<p><code>`include</code> 和 <code>`define</code><span class="mojikumi-line-end">，</span>和 C 是一样的<span class="mojikumi-line-end">。</span></p>
<h2 id="model" class="heading"><a href="#model" class="heading-anchor" aria-label="章节： model" tabindex="-1"></a><span>model</span></h2>
<h3 id="structural-model" class="heading"><a href="#structural-model" class="heading-anchor" aria-label="章节： structural model" tabindex="-1"></a><span>structural model</span></h3>
<p>可以使用 <i>instance statement</i> 来写 structural model<span class="mojikumi-line-end">，</span>说白了就是将其他 module 实例化并连线<span class="mojikumi-line-end">。</span></p>
<p>built-in gate 有<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>and</code><span class="mojikumi-line-end">、</span><code>nand</code><span class="mojikumi-line-end">、</span><code>or</code><span class="mojikumi-line-end">、</span><code>nor</code><span class="mojikumi-line-end">、</span><code>xor</code><span class="mojikumi-line-end">、</span><code>xnor</code><span class="mojikumi-line-end">，</span>接受任意个输入</li>
<li><code>buf</code><span class="mojikumi-line-end">、</span><code>not</code><span class="mojikumi-line-end">，</span>接受单个输入</li>
<li><code>bufif0</code><span class="mojikumi-line-end">、</span><code>bufif1</code><span class="mojikumi-line-end">、</span><code>notif0</code><span class="mojikumi-line-end">、</span><code>notif1</code><span class="mojikumi-line-end">，</span>三态门<span class="mojikumi-line-end">，</span>接受一个 data input 和一个 enable input<span class="mojikumi-line-start">（</span>data input 在前<span class="mojikumi-line-end">，</span>enable input 在后<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>if 表示 enable 的 active level</li>
</ul>
<p>使用 built-in gate 的例子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>built-in gate 的 port 没有名字<span class="mojikumi-line-end">，</span>只能通过顺序指定<span class="mojikumi-line-end">，</span>output 在前<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-11"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-11--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> inhibit (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  invin,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> notinvin;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U1</span><span style="color: #D6DEEB"> (notinvin, invin);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">and</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U2</span><span style="color: #D6DEEB"> (out, in, notinvin);</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> inhibit (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  invin,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> notinvin;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U1</span><span style="color: #403F53"> (notinvin, invin);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">and</span><span style="color: #403F53"> </span><span style="color: #4876D6">U2</span><span style="color: #403F53"> (out, in, notinvin);</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>使用其他 module 的例子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>可以指定每个 port 的名字从而不依赖于顺序<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-12"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-12--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> silly_xor (</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  in1,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in2,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> inh1, inh2, notinh2, notout;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U1 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(inh1),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(in1),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(in2)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U2 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(inh2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(in2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(in1)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U3</span><span style="color: #D6DEEB"> (notinh2, inh2);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">inhibit</span><span style="color: #D6DEEB"> U4 (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">out</span><span style="color: #D6DEEB">(notout),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">in</span><span style="color: #D6DEEB">(notinh2),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">invin</span><span style="color: #D6DEEB">(inh1)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C5E478">not</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">U5</span><span style="color: #D6DEEB"> (out, notout);</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> silly_xor (</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  in1,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in2,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> inh1, inh2, notinh2, notout;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U1 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(inh1),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(in1),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(in2)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U2 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(inh2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(in2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(in1)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U3</span><span style="color: #403F53"> (notinh2, inh2);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">inhibit</span><span style="color: #403F53"> U4 (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">out</span><span style="color: #403F53">(notout),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">in</span><span style="color: #403F53">(notinh2),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">invin</span><span style="color: #403F53">(inh1)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span><span style="color: #403F53">  </span><span style="color: #4876D6">not</span><span style="color: #403F53"> </span><span style="color: #4876D6">U5</span><span style="color: #403F53"> (out, notout);</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>修改 <code>parameter</code> 的例子<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-13"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-13--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> maj </span><span style="color: #7FDBCA">#</span><span style="color: #D6DEEB">(</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">WID</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span></span>
<span><span style="color: #D6DEEB">) (</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] out,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i0,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i1,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input</span><span style="color: #D6DEEB">  [</span><span style="color: #82AAFF">WID</span><span style="color: #C792EA">-</span><span style="color: #F78C6C">1</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] i2</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> out </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> i0 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i1 </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> i0 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i2 </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> i1 </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> i2;</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> maj </span><span style="color: #0C969B">#</span><span style="color: #403F53">(</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">WID</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span></span>
<span><span style="color: #403F53">) (</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] out,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i0,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i1,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input</span><span style="color: #403F53">  [</span><span style="color: #4876D6">WID</span><span style="color: #994CC3">-</span><span style="color: #AA0982">1</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] i2</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> out </span><span style="color: #994CC3">=</span><span style="color: #403F53"> i0 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i1 </span><span style="color: #994CC3">|</span><span style="color: #403F53"> i0 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i2 </span><span style="color: #994CC3">|</span><span style="color: #403F53"> i1 </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> i2;</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>然后就可以 <code>maj #(8) U1 (.out(W), .i0(X), .i1(Y), .i2(Z))</code> 或者 <code>maj #(.WID(8)) U1 (.out(W), .i0(X), .i1(Y), .i2(Z))</code> 了<span class="mojikumi-line-end">。</span></p>
<p>不指定 <code>parameter</code> 时会使用其默认值<span class="mojikumi-line-end">，</span><code>parameter</code> 只能在 instance statement 也就是 structural model 中被修改<span class="mojikumi-line-end">，</span>在其他类型的 model 中只能使用默认值<span class="mojikumi-line-end">。</span></p>
<p>可以使用 <code>generate</code> block<span class="mojikumi-line-end">，</span>作用类似于 <code>v-for</code><span class="mojikumi-line-end">、</span><code>v-if</code><span class="mojikumi-line-end">，</span>里面可以用 <code>for</code><span class="mojikumi-line-start">（</span>循环变量需要是 <code>genvar</code><span class="mojikumi">）</span><span class="mojikumi-line-end">、</span><code>if</code><span class="mojikumi-line-end">、</span><code>case</code><span class="mojikumi-line-start">（</span>被判断的要是 parameter<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-14"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-14--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">genvar</span><span style="color: #D6DEEB"> i;</span></span>
<span><span style="color: #C792EA">generate</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">for</span><span style="color: #D6DEEB"> (i </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">; i </span><span style="color: #C792EA">&lt;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">; i </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> i </span><span style="color: #C792EA">+</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">) </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">half_adder</span><span style="color: #D6DEEB"> u0 (a[i], b[i], sum[i], cout[i]);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endgenerate</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">genvar</span><span style="color: #403F53"> i;</span></span>
<span><span style="color: #994CC3">generate</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">for</span><span style="color: #403F53"> (i </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">; i </span><span style="color: #994CC3">&lt;</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">; i </span><span style="color: #994CC3">=</span><span style="color: #403F53"> i </span><span style="color: #994CC3">+</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">) </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">half_adder</span><span style="color: #403F53"> u0 (a[i], b[i], sum[i], cout[i]);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endgenerate</span></span></code></pre></div></section>
<h3 id="dataflow-model" class="heading"><a href="#dataflow-model" class="heading-anchor" aria-label="章节： dataflow model" tabindex="-1"></a><span>dataflow model</span></h3>
<p>可以使用 <i>continuous-assignment statement</i> 来写 dataflow model<span class="mojikumi-line-end">，</span>也就是 <code>assign</code><span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-15"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-15--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> is_prime (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">,</span></span>
<span><span style="color: #C5E478">    output</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">F</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">assign</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">3</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">?</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">^</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">])) </span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> (</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> (</span><span style="color: #C792EA">~</span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">] </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">N</span><span style="color: #D6DEEB">[</span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">]));</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> is_prime (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #4876D6">N</span><span style="color: #403F53">,</span></span>
<span><span style="color: #4876D6">    output</span><span style="color: #403F53"> </span><span style="color: #4876D6">F</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">assign</span><span style="color: #403F53"> </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">3</span><span style="color: #403F53">] </span><span style="color: #994CC3">?</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">1</span><span style="color: #403F53">] </span><span style="color: #994CC3">^</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">2</span><span style="color: #403F53">])) </span><span style="color: #994CC3">:</span><span style="color: #403F53"> (</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">0</span><span style="color: #403F53">] </span><span style="color: #994CC3">|</span><span style="color: #403F53"> (</span><span style="color: #994CC3">~</span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">2</span><span style="color: #403F53">] </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #4876D6">N</span><span style="color: #403F53">[</span><span style="color: #AA0982">1</span><span style="color: #403F53">]));</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<h3 id="behavioral-model" class="heading"><a href="#behavioral-model" class="heading-anchor" aria-label="章节： behavioral model" tabindex="-1"></a><span>behavioral model</span></h3>
<h4 id="always-begin-end-block" class="heading"><a href="#always-begin-end-block" class="heading-anchor" aria-label="章节： always &#x26; begin-end block" tabindex="-1"></a><span><code>always</code> &#x26; <code>begin</code>-<code>end</code> block</span></h4>
<p><code>always</code> statement 用来执行一句 procedural statement<span class="mojikumi-line-end">，</span>begin-end block 用来将若干 procedural statement 合成一句<span class="mojikumi-line-end">。</span>begin-end block 里的语句是顺序执行的<span class="mojikumi-line-end">，</span>而 <code>always</code> 是和 module 中的其他语句一起并行执行的<span class="mojikumi-line-end">。</span></p>
<p>在 SystemVerilog 中<span class="mojikumi-line-end">，</span>推荐使用 <code>always_comb</code><span class="mojikumi-line-end">、</span><code>always_ff</code><span class="mojikumi-line-end">、</span><code>always_latch</code> 来代替 <code>always</code><span class="mojikumi-line-end">，</span>分别用于组合逻辑<span class="mojikumi-line-end">、</span>ff 和 latch<span class="mojikumi-line-start">（</span>但一般不会特意去写 latch<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span><code>always_comb</code> 会检查条件判断语句没有漏情况<span class="mojikumi-line-end">，</span>避免意外生成 latch<span class="mojikumi-line-end">。</span><code>always_ff</code> 需要加形如 <code>always_ff @(posedge clk)</code> 的 sensitivity list<span class="mojikumi-line-end">。</span></p>
<p>如果 begin-end 里有 local <code>logic</code> 则需要给 block 起名字<span class="mojikumi-line-start">（</span>在 <code>begin</code> 的后面写上 <code>: name</code><span class="mojikumi-line-end">）</span>才能在 simulation 之类的地方看到可读的变量名<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h5><ile-root id="ile-16"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-16--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> alarm_circuit (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> panic,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> enable,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> exiting,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> window,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> door,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> garage,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> alarm</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">:</span><span style="color: #D6DEEB"> blk</span></span>
<span><span style="color: #C792EA">    logic</span><span style="color: #D6DEEB"> secure;</span></span>
<span><span style="color: #D6DEEB">    secure </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> window </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> door </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> garage;</span></span>
<span><span style="color: #D6DEEB">    alarm  </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> panic </span><span style="color: #C792EA">|</span><span style="color: #D6DEEB"> (enable </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">exiting </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">secure);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> alarm_circuit (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> panic,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> enable,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> exiting,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> window,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> door,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> garage,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> alarm</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span><span style="color: #403F53"> </span><span style="color: #0C969B">:</span><span style="color: #403F53"> blk</span></span>
<span><span style="color: #994CC3">    logic</span><span style="color: #403F53"> secure;</span></span>
<span><span style="color: #403F53">    secure </span><span style="color: #994CC3">=</span><span style="color: #403F53"> window </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> door </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> garage;</span></span>
<span><span style="color: #403F53">    alarm  </span><span style="color: #994CC3">=</span><span style="color: #403F53"> panic </span><span style="color: #994CC3">|</span><span style="color: #403F53"> (enable </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">exiting </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">secure);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<h4 id="赋值" class="heading"><a href="#赋值" class="heading-anchor" aria-label="章节： 赋值" tabindex="-1"></a><span>赋值</span></h4>
<p>procedural statement 中有两种赋值<span class="mojikumi-line-end">，</span>blocking 的 <code>=</code> 和 non-blocking 的 <code>&#x3C;=</code><span class="mojikumi-line-end">。</span><code>=</code> 表示立即赋值<span class="mojikumi-line-end">，</span>而 <code>&#x3C;=</code> 会将赋值推迟至整个 <code>always</code> 的结尾<span class="mojikumi-line-start">（</span>右侧表达式的计算是立刻进行的<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>从而在 <code>always</code> 剩下的部分中左侧变量的值依然是赋值前的<span class="mojikumi-line-end">。</span></p>
<p>赋值最好遵循下面的规则<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在组合逻辑中<span class="mojikumi-line-end">，</span>只使用 <code>=</code></li>
<li>在时序逻辑中<span class="mojikumi-line-end">，</span>只使用 <code>&#x3C;=</code></li>
<li>不要在同一个 block 中混合使用两种赋值</li>
<li>不要在不同的 <code>always</code> 中对同一个变量赋值</li>
</ul>
<h4 id="if-else-语句" class="heading"><a href="#if-else-语句" class="heading-anchor" aria-label="章节： if-else 语句" tabindex="-1"></a><span><code>if</code>-<code>else</code> 语句</span></h4>
<p>和 C 的语法是一样的<span class="mojikumi-line-end">，</span>唯一的不同就是大括号变成 <code>begin</code> - <code>end</code><span class="mojikumi-line-end">。</span></p>
<h4 id="case-语句" class="heading"><a href="#case-语句" class="heading-anchor" aria-label="章节： case 语句" tabindex="-1"></a><span><code>case</code> 语句</span></h4>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h5><ile-root id="ile-17"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-17--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> prime (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] n,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> f</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">case</span><span style="color: #D6DEEB"> (n)</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #F78C6C">4&#39;d2</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d3</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d5</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d7</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d11</span><span style="color: #D6DEEB">, </span><span style="color: #F78C6C">4&#39;d13</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB"> f </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">      </span><span style="color: #C792EA">default:</span><span style="color: #D6DEEB"> f </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C792EA">endcase</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> prime (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] n,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> f</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">case</span><span style="color: #403F53"> (n)</span></span>
<span><span style="color: #403F53">      </span><span style="color: #AA0982">4&#39;d2</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d3</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d5</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d7</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d11</span><span style="color: #403F53">, </span><span style="color: #AA0982">4&#39;d13</span><span style="color: #994CC3">:</span><span style="color: #403F53"> f </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">      </span><span style="color: #994CC3">default:</span><span style="color: #403F53"> f </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #994CC3">endcase</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>虽然并非必须<span class="mojikumi-line-end">，</span>但一般来说<span class="mojikumi-line-end">，</span>选项应当是不重复且指定了宽度的字面量<span class="mojikumi-line-end">。</span></p>
<p>即使选项覆盖了所有可能<span class="mojikumi-line-end">，</span>加上一个 <code>default</code> 可以在 simulation 中正确处理带 <code>x</code> 的值<span class="mojikumi-line-end">。</span></p>
<p><code>casez</code> 是允许使用通配符 <code>?</code> 的匹配<span class="mojikumi-line-end">，</span>例如选项可以是 <code>4'b10??</code><span class="mojikumi-line-end">。</span></p>
<h4 id="循环语句" class="heading"><a href="#循环语句" class="heading-anchor" aria-label="章节： 循环语句" tabindex="-1"></a><span>循环语句</span></h4>
<p>有很多种循环语句<span class="mojikumi-line-end">，</span>但推荐使用的只有一种<span class="mojikumi-line-end">，</span>就是 <code>for (integer i = 0; i &#x3C;= 7; i = i + 1)</code><span class="mojikumi-line-end">。</span></p>
<h4 id="function-和-task" class="heading"><a href="#function-和-task" class="heading-anchor" aria-label="章节： function 和 task" tabindex="-1"></a><span>function 和 task</span></h4>
<p>function 和 task 是一段可复用的 procedural statement<span class="mojikumi-line-end">，</span>写起来和 module 差不多<span class="mojikumi-line-end">，</span>需要定义在 module 内部<span class="mojikumi-line-start">（</span>可以通过 <code>`include</code> 来在不同 module 中复用<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>function 有单个返回值<span class="mojikumi-line-start">（</span>可以在函数名的前面给返回值设置类型<span class="mojikumi-line-end">，</span>也可以省略<span class="mojikumi-line-end">，</span>默认类型是 1-bit<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>但不能有 <code>output</code> / <code>inout</code> port<span class="mojikumi-line-end">，</span>而是以 function 自身的名字作为返回值的名字<span class="mojikumi-line-end">，</span>代码中需要对这个函数名进行赋值<span class="mojikumi-line-end">。</span>function 中不能设置延时<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h5><ile-root id="ile-18"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-18--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> sillier_xor (</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in1,</span></span>
<span><span style="color: #C5E478">    input</span><span style="color: #D6DEEB"> in2,</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">output</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">logic</span><span style="color: #D6DEEB"> out</span></span>
<span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">function</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">inhibit</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">input</span><span style="color: #D6DEEB"> in,</span><span style="color: #C5E478"> input</span><span style="color: #D6DEEB"> inv_in);</span></span>
<span><span style="color: #D6DEEB">    inhibit </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> in </span><span style="color: #C792EA">&amp;</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">inv_in;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endfunction</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">always_comb</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #C792EA">    logic</span><span style="color: #D6DEEB"> inh1, inh2;</span></span>
<span><span style="color: #D6DEEB">    inh1 </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(in1, in2);</span></span>
<span><span style="color: #D6DEEB">    inh2 </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(in2, in1);</span></span>
<span><span style="color: #D6DEEB">    out  </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">~</span><span style="color: #C5E478">inhibit</span><span style="color: #D6DEEB">(</span><span style="color: #C792EA">~</span><span style="color: #D6DEEB">inh2, inh1);</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> sillier_xor (</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in1,</span></span>
<span><span style="color: #4876D6">    input</span><span style="color: #403F53"> in2,</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">output</span><span style="color: #403F53"> </span><span style="color: #994CC3">logic</span><span style="color: #403F53"> out</span></span>
<span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">function</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(</span><span style="color: #4876D6">input</span><span style="color: #403F53"> in,</span><span style="color: #4876D6"> input</span><span style="color: #403F53"> inv_in);</span></span>
<span><span style="color: #403F53">    inhibit </span><span style="color: #994CC3">=</span><span style="color: #403F53"> in </span><span style="color: #994CC3">&amp;</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #403F53">inv_in;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endfunction</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">always_comb</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #994CC3">    logic</span><span style="color: #403F53"> inh1, inh2;</span></span>
<span><span style="color: #403F53">    inh1 </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(in1, in2);</span></span>
<span><span style="color: #403F53">    inh2 </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(in2, in1);</span></span>
<span><span style="color: #403F53">    out  </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #994CC3">~</span><span style="color: #4876D6">inhibit</span><span style="color: #403F53">(</span><span style="color: #994CC3">~</span><span style="color: #403F53">inh2, inh1);</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>task 没有返回值<span class="mojikumi-line-end">，</span>但可以有 <code>output</code> / <code>inout</code> port<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">（</span>用于 simulation 时<span class="mojikumi-line-end">）</span>可以设置延时<span class="mojikumi-line-end">。</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h5 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h5><ile-root id="ile-19"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-19--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> lock_sim;</span></span>
<span></span>
<span><span style="color: #D6DEEB">  ...</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  ...</span></span>
<span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">module</span><span style="color: #403F53"> lock_sim;</span></span>
<span></span>
<span><span style="color: #403F53">  ...</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  ...</span></span>
<span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>有一些内置的 task 和 function<span class="mojikumi-line-end">，</span>用于 simulation<span class="mojikumi-line-end">：</span></p>
<ul>
<li><code>$write</code><span class="mojikumi-line-end">：</span>和 <code>printf</code> 差不多<span class="mojikumi-line-end">。</span></li>
<li><code>$display</code><span class="mojikumi-line-end">：</span>在 <code>$write</code> 的基础上多个换行<span class="mojikumi-line-end">。</span></li>
<li><code>$monitor</code><span class="mojikumi-line-end">：</span>每次信号发生改变时都输出<span class="mojikumi-line-end">，</span>后指定的 monitor 会覆盖之前的<span class="mojikumi-line-end">。</span></li>
<li><code>$<wbr>monitoroff</code> / <code>$monitoron</code></li>
<li><code>$fflush</code><span class="mojikumi-line-end">：</span>flush 输出<span class="mojikumi-line-end">。</span></li>
<li><code>$time</code><span class="mojikumi-line-end">：</span>输出当前的 simulated time<span class="mojikumi-line-end">。</span></li>
<li><code>$random</code><span class="mojikumi-line-end">：</span>返回一个随机数<span class="mojikumi-line-end">，</span>接受种子作为参数<span class="mojikumi-line-end">，</span>不指定种子的话初次运行的种子是固定的<span class="mojikumi-line-end">。</span></li>
<li><code>$stop</code><span class="mojikumi-line-end">：</span>停止模拟<span class="mojikumi-line-end">，</span>如果传参 <code>(1)</code> 则会显示当前的 simulated time 和代码位置<span class="mojikumi-line-end">。</span></li>
</ul>
<h2 id="timescale-指定延迟" class="heading"><a href="#timescale-指定延迟" class="heading-anchor" aria-label="章节： timescale &#x26; 指定延迟" tabindex="-1"></a><span>timescale &#x26; 指定延迟</span></h2>
<p><code>`timescale 1ns / 10ps</code> 指定以 1ns 作为延时的单位<span class="mojikumi-line-end">，</span>以 10ps 作为模拟的精度<span class="mojikumi-line-end">。</span></p>
<p><code>assign</code> 时可以指定延迟<span class="mojikumi-line-end">：</span><code>assign #5 a = b &#x26; c;</code></p>
<p>procedural model 中可以用 delay statement (<code>#500;</code>) 来暂停<span class="mojikumi-line-end">。</span></p>
<h2 id="simulation-test-bench" class="heading"><a href="#simulation-test-bench" class="heading-anchor" aria-label="章节： simulation (test bench)" tabindex="-1"></a><span>simulation (test bench)</span></h2>
<p>语法上和 synthesizable module 没有区别<span class="mojikumi-line-start">（</span>只不过有个 <code>initial</code><span class="mojikumi-line-end">，</span>就是只执行一遍的 <code>always</code><span class="mojikumi-line-end">，</span>一般不用于 synthesizable module<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>写起来一般是一个没有输入输出<span class="mojikumi-line-end">、</span>有一个被测试 module 的实例<span class="mojikumi-line-end">、</span>有一个 <code>initial</code> block 的 module<span class="mojikumi-line-end">，</span>看看例子就行<span class="mojikumi-line-end">。</span></p>
<p>懒得改 DDPP 上的代码了<span class="mojikumi-line-end">，</span>直接复制一份数字逻辑实验的代码<span class="mojikumi-line-start">（</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h3 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h3><ile-root id="ile-20"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-20--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #82AAFF">`timescale</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1ns</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">/</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1ps</span></span>
<span></span>
<span><span style="color: #C792EA">module</span><span style="color: #D6DEEB"> lock_sim;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  logic</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">  wire</span><span style="color: #D6DEEB"> unlocked, incorrect, alert;</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">lock</span><span style="color: #D6DEEB"> </span><span style="color: #7FDBCA">#</span><span style="color: #D6DEEB">(</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">ADMIN_PASSWORD</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">  ) lock_inst (</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">clk</span><span style="color: #D6DEEB">(clk),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">rst</span><span style="color: #D6DEEB">(rst),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">mode</span><span style="color: #D6DEEB">(mode),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">digit_input</span><span style="color: #D6DEEB">(digit_input),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">unlocked</span><span style="color: #D6DEEB">(unlocked),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">incorrect</span><span style="color: #D6DEEB">(incorrect),</span></span>
<span><span style="color: #D6DEEB">      .</span><span style="color: #C5E478">alert</span><span style="color: #D6DEEB">(alert)</span></span>
<span><span style="color: #D6DEEB">  );</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    clk </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">reset</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    rst </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #7FDBCA">#</span><span style="color: #F78C6C">500</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">task</span><span style="color: #D6DEEB"> </span><span style="color: #82AAFF">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #C5E478">input</span><span style="color: #D6DEEB"> [</span><span style="color: #F78C6C">15</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">] password);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">reset</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">15</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">12</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">11</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">8</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">7</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">4</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">    digit_input </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> password[</span><span style="color: #F78C6C">3</span><span style="color: #C792EA">:</span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">];</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">clock</span><span style="color: #D6DEEB">();</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">endtask</span></span>
<span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">initial</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">begin</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// set password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// correct</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #637777">// incorrect three times</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);</span></span>
<span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// locked</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// cannot set password</span></span>
<span></span>
<span><span style="color: #D6DEEB">    mode </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// locked</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;ha73f</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// admin password</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h1234</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// correct</span></span>
<span><span style="color: #D6DEEB">    </span><span style="color: #C5E478">input_password</span><span style="color: #D6DEEB">(</span><span style="color: #F78C6C">16&#39;h4321</span><span style="color: #D6DEEB">);  </span><span style="color: #637777">// incorrect</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">end</span></span>
<span><span style="color: #C792EA">endmodule</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #4876D6">`timescale</span><span style="color: #403F53"> </span><span style="color: #AA0982">1ns</span><span style="color: #403F53"> </span><span style="color: #994CC3">/</span><span style="color: #403F53"> </span><span style="color: #AA0982">1ps</span></span>
<span></span>
<span><span style="color: #994CC3">module</span><span style="color: #403F53"> lock_sim;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  logic</span><span style="color: #403F53"> [</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">  wire</span><span style="color: #403F53"> unlocked, incorrect, alert;</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">lock</span><span style="color: #403F53"> </span><span style="color: #0C969B">#</span><span style="color: #403F53">(</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">ADMIN_PASSWORD</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">  ) lock_inst (</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">clk</span><span style="color: #403F53">(clk),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">rst</span><span style="color: #403F53">(rst),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">mode</span><span style="color: #403F53">(mode),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">digit_input</span><span style="color: #403F53">(digit_input),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">unlocked</span><span style="color: #403F53">(unlocked),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">incorrect</span><span style="color: #403F53">(incorrect),</span></span>
<span><span style="color: #403F53">      .</span><span style="color: #4876D6">alert</span><span style="color: #403F53">(alert)</span></span>
<span><span style="color: #403F53">  );</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    clk </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">reset</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    rst </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #0C969B">#</span><span style="color: #AA0982">500</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">task</span><span style="color: #403F53"> </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #4876D6">input</span><span style="color: #403F53"> [</span><span style="color: #AA0982">15</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">] password);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">reset</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">15</span><span style="color: #994CC3">:</span><span style="color: #AA0982">12</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">11</span><span style="color: #994CC3">:</span><span style="color: #AA0982">8</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">7</span><span style="color: #994CC3">:</span><span style="color: #AA0982">4</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">    digit_input </span><span style="color: #994CC3">=</span><span style="color: #403F53"> password[</span><span style="color: #AA0982">3</span><span style="color: #994CC3">:</span><span style="color: #AA0982">0</span><span style="color: #403F53">];</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">clock</span><span style="color: #403F53">();</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">endtask</span></span>
<span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">initial</span><span style="color: #403F53"> </span><span style="color: #994CC3">begin</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// set password</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// correct</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #939DBB">// incorrect three times</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);</span></span>
<span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// locked</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// cannot set password</span></span>
<span></span>
<span><span style="color: #403F53">    mode </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// locked</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;ha73f</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// admin password</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h1234</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// correct</span></span>
<span><span style="color: #403F53">    </span><span style="color: #4876D6">input_password</span><span style="color: #403F53">(</span><span style="color: #AA0982">16&#39;h4321</span><span style="color: #403F53">);  </span><span style="color: #939DBB">// incorrect</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">end</span></span>
<span><span style="color: #994CC3">endmodule</span></span></code></pre></div></section>
<p>通过使用 <code>$display</code><span class="mojikumi-line-end">，</span>可以更直观地输出结果<span class="mojikumi-line-end">，</span>从而不需要对着波形图看<span class="mojikumi-line-end">；</span>或者自动检查结果是否正确<span class="mojikumi-line-end">，</span>在出错时输出<span class="mojikumi-line-end">。</span></p>
<p>有时可以通过文件读写来更方便地编写测试数据<span class="mojikumi-line-end">、</span>检查输出结果<span class="mojikumi-line-end">。</span></p>
<h2 id="有关-synthesize-的一些注意事项" class="heading"><a href="#有关-synthesize-的一些注意事项" class="heading-anchor" aria-label="章节： 有关 synthesize 的一些注意事项" tabindex="-1"></a><span>有关 synthesize 的一些注意事项</span></h2>
<ul>
<li>长串的 <code>if</code><span class="mojikumi-line-end">、</span><code>else if</code><span class="mojikumi-line-end">、</span><code>else if</code>……可能导致电路也有一长串<span class="mojikumi-line-end">，</span>使用 <code>case</code> 可能会更优<span class="mojikumi-line-end">。</span></li>
<li>组合逻辑中的循环可能会创建同一套电路的多个副本<span class="mojikumi-line-end">，</span>如果要用同一个电路<span class="mojikumi-line-end">，</span>可能需要改写成时序逻辑<span class="mojikumi-line-end">。</span></li>
<li>根据具体使用的 tool<span class="mojikumi-line-end">，</span>有些 language feature 是不能被 synthesize 的<span class="mojikumi-line-end">。</span></li>
<li>为了更好的 synthesize 结果而需要把代码写成什么样<span class="mojikumi-line-end">，</span>需要依具体使用的 tool 而定<span class="mojikumi-line-end">。</span></li>
</ul>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第四章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp-4</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp-4</guid>
            <pubDate>Tue, 07 Feb 2023 07:58:32 GMT</pubDate>
            <description><![CDATA[







<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第四章 <span class="mojikumi">“</span>Digital Design Practices<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为数字设计的文档规范<span class="mojikumi-line-end">、</span>初步认识 circuit timing<span class="mojikumi-line-end">、</span>基于 HDL 的数字设计所使用的工具与设计流程<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[







<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第四章 <span class="mojikumi">“</span>Digital Design Practices<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为数字设计的文档规范<span class="mojikumi-line-end">、</span>初步认识 circuit timing<span class="mojikumi-line-end">、</span>基于 HDL 的数字设计所使用的工具与设计流程<span class="mojikumi-line-end">。</span></p>

<h2 id="documentation-standards" class="heading"><a href="#documentation-standards" class="heading-anchor" aria-label="章节： Documentation Standards" tabindex="-1"></a><span>Documentation Standards</span></h2>
<p>一个 <dfn>document package</dfn> 通常至少包含以下内容<span class="mojikumi-line-end">：</span></p>
<dl>
<dt>specification (<i>spec</i>)</dt>
<dd>准确地描述系统的所有输入和输出以及功能<span class="mojikumi-line-end">。</span>
</dd>
<dt>block diagram</dt>
<dd>大致描述系统的主要模块之间的连接<span class="mojikumi-line-end">。</span>
</dd>
<dt>logic-device description</dt>
<dd>分别描述每个 <span class="mojikumi">“</span>custom<span class="mojikumi">”</span> logic device 的功能<span class="mojikumi-line-end">，</span>这里 <span class="mojikumi">“</span>custom<span class="mojikumi">”</span> 是与现成的<span class="mojikumi-line-end">、</span>由其他制造商生产的相对<span class="mojikumi-line-end">，</span>例如 ASIC<span class="mojikumi-line-end">、</span>FPGA<span class="mojikumi-line-end">、</span>CPLD 等都是 custom 的<span class="mojikumi-line-end">。</span>
</dd>
<dt>schematic diagram</dt>
<dd>对每个模块的细节描述<span class="mojikumi-line-end">，</span>比 <i>logic diagram</i> 更加细致<span class="mojikumi-line-end">，</span>在 board-level design 中是包括 IC type<span class="mojikumi-line-end">、</span>reference designator<span class="mojikumi-line-end">、</span>signal name<span class="mojikumi-line-end">、</span>pin number 等细节信息的电路图<span class="mojikumi-line-end">，</span>在 FPGA<span class="mojikumi-line-end">、</span>CPLD 中则由 HDL model 来充当这一角色<span class="mojikumi-line-end">。</span>
</dd>
<dt>timing diagram</dt>
<dd>展示各个信号随时间的变化情况<span class="mojikumi-line-end">。</span>
</dd>
<dt>circuit description</dt>
<dd>解释电路的工作原理以及注意事项<span class="mojikumi-line-end">。</span>
</dd>
<dt>test plan</dt>
<dd>如何对系统进行测试<span class="mojikumi-line-end">。</span>
</dd>
</dl>
<p>感觉大致上来说<span class="mojikumi-line-end">，</span>与软件进行类比的话<span class="mojikumi-line-end">，</span>logic-device description 像是组件的 API 文档<span class="mojikumi-line-end">，</span>circuit description 像是代码内的注释<span class="mojikumi-line-end">，</span>block diagram 像是整个程序的结构图<span class="mojikumi-line-end">，</span>schematic 则是<span class="mojikumi-line-start">“</span>代码<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span>总之<span class="mojikumi-line-end">，</span>这个 document package 和软件的文档不一样<span class="mojikumi-line-end">，</span>还包含 schematic 这种具体实现<span class="mojikumi-line-end">。</span></p>
<h3 id="block-diagrams" class="heading"><a href="#block-diagrams" class="heading-anchor" aria-label="章节： Block Diagrams" tabindex="-1"></a><span>Block Diagrams</span></h3>
<p>大概就是 DDPP5 Fig.4-1 这种感觉<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-1.2330b557.webp"><img srcset="/assets/ddpp-fig-4-1.9607283c.png" loading="lazy" src="/assets/ddpp-fig-4-1.9607283c.png" width="914" height="856" alt="block diagram for a shift-and-add multiplier"></picture></p>
<p>整个系统被划分为若干 component<span class="mojikumi-line-end">，</span>block diagram 展示它们之间最主要的一些连线而略去细节<span class="mojikumi-line-end">。</span></p>
<p>在 block diagram 中<span class="mojikumi-line-end">，</span>信号的流动可以是任意方向的<span class="mojikumi-line-end">，</span>不需要都沿一个方向<span class="mojikumi-line-end">。</span></p>
<h3 id="gate-symbols" class="heading"><a href="#gate-symbols" class="heading-anchor" aria-label="章节： Gate Symbols" tabindex="-1"></a><span>Gate Symbols</span></h3>
<p>根据 generalized DeMorgan<span class="mojikumi-narrow-left">’</span>s theorem<span class="mojikumi-line-end">，</span>AND<span class="mojikumi-line-end">、</span>OR<span class="mojikumi-line-end">、</span>NAND<span class="mojikumi-line-end">、</span>NOR<span class="mojikumi-line-end">、</span>NOT (inverter)<span class="mojikumi-line-end">、</span>BUFFER (non-inverting buffer) 各自都有两种不同的画法<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-4 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-4.93ea8d42.webp"><img srcset="/assets/ddpp-fig-4-4.0796c532.png" loading="lazy" src="/assets/ddpp-fig-4-4.0796c532.png" width="1324" height="517" alt="在 generalized DeMorgan&#39;s theorem 下等价的 gate symbols"></picture></p>
<h3 id="signal-names-and-active-levels" class="heading"><a href="#signal-names-and-active-levels" class="heading-anchor" aria-label="章节： Signal Names and Active Levels" tabindex="-1"></a><span>Signal Names and Active Levels</span></h3>
<p>为了兼容更多的 HDL 和 EDA<span class="mojikumi-line-end">，</span>signal name 最好不要有特殊字符<span class="mojikumi-line-end">，</span>而是只使用字母<span class="mojikumi-line-end">、</span>数字<span class="mojikumi-line-end">、</span>下划线<span class="mojikumi-line-end">，</span>以字母开头<span class="mojikumi-line-end">。</span></p>
<p>signal name 往往代表某种状态或某种操作<span class="mojikumi-line-end">，</span>但并不总是在位于 HIGH 时表示相应的意思<span class="mojikumi-line-end">。</span>每个 signal name 会有一个 <dfn>active level</dfn><span class="mojikumi-line-end">，</span><dfn>active-high</dfn> 意味着这个 signal 位于 HIGH 时<span class="mojikumi-line-start">（</span>在 positive-logic 中即为 1 时<span class="mojikumi-line-end">）</span>表示这某种状态或某种操作<span class="mojikumi-line-end">，</span><dfn>active-low</dfn> 则与之相反<span class="mojikumi-line-end">。</span>一个 signal 位于其 active level 时<span class="mojikumi-line-end">，</span>我们说它 is <dfn>asserted</dfn><span class="mojikumi-line-end">，</span>反之则说它 is <dfn>negated</dfn> (<i>deasserted</i>)<span class="mojikumi-line-end">。</span></p>
<p>signal name 会以某种 naming convention 来表示其 active level<span class="mojikumi-line-end">，</span>DDPP5 采用的 convention 是 active-high 保持不变<span class="mojikumi-line-end">，</span>而 active-low 加上 <code>_L</code> 后缀<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span><code>READY</code> 为 1 / <code>READY_L</code> 为 0 表示 ready<span class="mojikumi-line-end">，</span><code>READY</code> 为 0 / <code>READY_L</code> 为 1 表示没有 ready<span class="mojikumi-line-end">。</span></p>
<p>一般来说 active-high 理解起来相对容易<span class="mojikumi-line-end">，</span>但由于性能<span class="mojikumi-line-end">、</span>兼容性等原因也经常会需要 active-low<span class="mojikumi-line-end">。</span></p>
<h3 id="active-levels-for-pins" class="heading"><a href="#active-levels-for-pins" class="heading-anchor" aria-label="章节： Active Levels for Pins" tabindex="-1"></a><span>Active Levels for Pins</span></h3>
<p>gate 或其他 logic element 的 pin 上有 inversion bubble 时<span class="mojikumi-line-end">，</span>除了理解成不同的逻辑函数<span class="mojikumi-line-end">，</span>也可以理解成 active-low 的输入/输出<span class="mojikumi-line-end">。</span></p>
<p>例如<span class="mojikumi-line-end">，</span>AND<span class="mojikumi-line-end">、</span>NAND<span class="mojikumi-line-end">、</span>NOR<span class="mojikumi-line-end">、</span>OR 可以表示四种不同 active level 的 AND<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-6<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-6.751e7c1c.webp"><img srcset="/assets/ddpp-fig-4-6.ab9cd084.png" loading="lazy" src="/assets/ddpp-fig-4-6.ab9cd084.png" width="1317" height="134" alt="四种不同 active level 的 AND: AND, NAND, NOR, OR"></picture></p>
<p>因为 inverting gate 往往性能更好<span class="mojikumi-line-end">，</span>可以将 noninverting gate 替换为 inverting gate<span class="mojikumi-line-end">，</span>而理解成输入输出的 active level 相反的 noninverting gate<span class="mojikumi-line-end">。</span></p>
<h3 id="bubble-to-bubble-logic-design" class="heading"><a href="#bubble-to-bubble-logic-design" class="heading-anchor" aria-label="章节： Bubble-to-Bubble Logic Design" tabindex="-1"></a><span>Bubble-to-Bubble Logic Design</span></h3>
<p>在画电路图时<span class="mojikumi-line-end">，</span>尽量将 active-low 的信号连接到 inversion bubble 上<span class="mojikumi-line-end">，</span>在理解电路时就可以少一些 logical negation<span class="mojikumi-line-start">（</span>本质上是因为 active-low 信号的两侧都有 inversion bubble<span class="mojikumi-line-end">，</span>从而能够消去<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>使电路更好理解<span class="mojikumi-line-end">。</span></p>
<h3 id="constant-logic-signals" class="heading"><a href="#constant-logic-signals" class="heading-anchor" aria-label="章节： Constant Logic Signals" tabindex="-1"></a><span>Constant Logic Signals</span></h3>
<p>电路设计中偶尔会用到 constant 0 <span class="mojikumi">（</span><i>ground</i><span class="mojikumi">）</span> 和 constant 1 <span class="mojikumi">（</span><i>power-supply voltage</i><span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>在电路图中它们的记号如下图所示<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-9 (b))</p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-9-b.998459d0.webp"><img srcset="/assets/ddpp-fig-4-9-b.84bd89c1.png" loading="lazy" src="/assets/ddpp-fig-4-9-b.84bd89c1.png" width="502" height="273" alt="constant 0 and 1 inputs with individual gates"></picture></p>
<h3 id="drawing-layout" class="heading"><a href="#drawing-layout" class="heading-anchor" aria-label="章节： Drawing Layout" tabindex="-1"></a><span>Drawing Layout</span></h3>
<p>logic diagram 和 schematic 一般要从左到右画<span class="mojikumi-line-end">，</span>所有输入都在最左侧<span class="mojikumi-line-end">，</span>所有输出都在最右侧<span class="mojikumi-line-end">。</span></p>
<p>在线路发生交叉时<span class="mojikumi-line-end">，</span>有两种区分重叠和连接的方法<span class="mojikumi-line-end">：</span></p>
<ul>
<li>连接处打点<span class="mojikumi-line-end">，</span>重叠不打点</li>
<li>连接都形如 ⟂ / ⊤<span class="mojikumi-line-end">，</span>重叠则形如 +</li>
</ul>
<p>由于 schematic 需要很多细节<span class="mojikumi-line-end">，</span>一张图可能画不下<span class="mojikumi-line-end">，</span>有两种处理方式<span class="mojikumi-line-end">：</span></p>
<ul>
<li>分为多张并列的图<span class="mojikumi-line-end">，</span>标注出跨越两张图的连线<span class="mojikumi-line-end">。</span></li>
<li>将图组织为树状<span class="mojikumi-line-start">（</span>与 Web 前端的 component 类似<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>树根与 block diagram 类似<span class="mojikumi-line-end">。</span>图中的 component 可以是另一张 schematic<span class="mojikumi-line-end">，</span>也可以是 standard logic device 或者 HDL model<span class="mojikumi-line-end">。</span></li>
</ul>
<h3 id="buses" class="heading"><a href="#buses" class="heading-anchor" aria-label="章节： Buses" tabindex="-1"></a><span>Buses</span></h3>
<p>为了方便画图<span class="mojikumi-line-end">，</span>多个并列的信号可以画成一个 <dfn>bus</dfn><span class="mojikumi-line-end">。</span></p>
<p>bus 的名字一般形如 <code>ADDR[15:0]</code><span class="mojikumi-line-end">，</span>表示 <code>ADDR15</code><span class="mojikumi-line-end">、</span><code>ADDR14</code><span class="mojikumi-line-end">、</span>……<span class="mojikumi-line-end">、</span><code>ADDR1</code><span class="mojikumi-line-end">、</span><code>ADDR0</code><span class="mojikumi-line-end">。</span></p>
<p>在图上 bus 用一条较粗的线表示<span class="mojikumi-line-end">，</span>从这条粗线上连出一条细线表示从中 <span class="mojikumi">“</span>pull<span class="mojikumi">”</span> 出单独一个信号<span class="mojikumi-line-end">。</span></p>
<h3 id="additional-schematic-information" class="heading"><a href="#additional-schematic-information" class="heading-anchor" aria-label="章节： Additional Schematic Information" tabindex="-1"></a><span>Additional Schematic Information</span></h3>
<p>在 board-level design 中<span class="mojikumi-line-end">，</span>一个 schematic 在电路图的基础上还需要标明 IC type<span class="mojikumi-line-end">、</span>reference designator<span class="mojikumi-line-end">、</span>pin number 等信息<span class="mojikumi-line-end">，</span>用来精确地描述电路<span class="mojikumi-line-end">。</span></p>
<p>其中<span class="mojikumi-line-end">，</span>IC type 描述了 IC 的功能<span class="mojikumi-line-end">，</span><dfn>reference designator</dfn> 用来在一类 IC 中指定特定的一个实例<span class="mojikumi-line-end">，</span><dfn>pin number</dfn> 用来指定从哪连到哪<span class="mojikumi-line-end">。</span></p>
<p>全都标上长这样<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>DDPP5 Fig.4-18<span class="mojikumi-line-end">）</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-18.957dcbfd.webp"><img srcset="/assets/ddpp-fig-4-18.e9c4823e.png" loading="lazy" src="/assets/ddpp-fig-4-18.e9c4823e.png" width="980" height="645" alt="schematic diagram for a circuit using several SSI parts"></picture></p>
<h2 id="circuit-timing" class="heading"><a href="#circuit-timing" class="heading-anchor" aria-label="章节： Circuit Timing" tabindex="-1"></a><span>Circuit Timing</span></h2>
<p>在时序电路中<span class="mojikumi-line-end">，</span>电路由一个 clock 控制<span class="mojikumi-line-end">，</span>而 clock 的频率会根据完成一步操作在最坏情况下的用时来制订<span class="mojikumi-line-end">，</span>所以计算<span class="mojikumi-line-end">、</span>优化电路的 timing 对电路的性能和正确性都非常重要<span class="mojikumi-line-end">。</span></p>
<h3 id="timing-diagrams" class="heading"><a href="#timing-diagrams" class="heading-anchor" aria-label="章节： Timing Diagrams" tabindex="-1"></a><span>Timing Diagrams</span></h3>
<p><i>timing diagram</i> 用来展示电路里各个信号随时间变化的情况<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-19 (b)(c) 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-19-bc.303e1075.webp"><img srcset="/assets/ddpp-fig-4-19-bc.010519a3.png" loading="lazy" src="/assets/ddpp-fig-4-19-bc.010519a3.png" width="907" height="729" alt="(b) 展示 causality 和 propagation delay 的 timing diagram (c) 展示 minimum / maximum delay 的 timing diagram"></picture></p>
<p>信号的转变不是瞬间发生的<span class="mojikumi-line-end">，</span>从一个状态到另一个状态的用时称作 <dfn>transition time</dfn><span class="mojikumi-line-end">，</span>从 LOW 到 HIGH 的用时叫做 <dfn>rise time</dfn><span class="mojikumi-line-end">，</span>从 HIGH 到 LOW 的用时叫做 <dfn>fall time</dfn><span class="mojikumi-line-end">。</span></p>
<p>在图 (b) 中<span class="mojikumi-line-end">，</span>不同的箭头用来表示 transition 之间的 causality <span class="mojikumi">（</span>因果关系<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<p>有因果关系的 transition 并不是立刻一个接着一个发生<span class="mojikumi-line-end">，</span>而是会有 <i>delay</i><span class="mojikumi-line-end">，</span>不同的信号<span class="mojikumi-line-end">、</span>路径会有不同的 delay<span class="mojikumi-line-end">。</span>delay 一般是指两个 transition 各自中点的距离<span class="mojikumi-line-end">。</span></p>
<p>很多因素都会对 delay 造成影响<span class="mojikumi-line-end">，</span>所以 delay 一般不是单个数字<span class="mojikumi-line-end">，</span>而是一个区间<span class="mojikumi-line-end">。</span>图 (c) 中标明了 minimum delay 和 maximum delay<span class="mojikumi-line-end">。</span></p>
<p>有时候 timing diagram 不需要区分 rise 和 fall<span class="mojikumi-line-end">，</span>例如用来存储数据的信号<span class="mojikumi-line-end">，</span>就可以如 DDPP5 Fig.4-20 (a) 这样画<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-20-a.b0a1e1fd.webp"><img srcset="/assets/ddpp-fig-4-20-a.8ccddcf9.png" loading="lazy" src="/assets/ddpp-fig-4-20-a.8ccddcf9.png" width="799" height="365" alt="不区分 rise 和 fall 的 timing diagram"></picture></p>
<p>可以将一个 bus 画在一起<span class="mojikumi-line-end">，</span>也可以用数字标注 bus 的取值<span class="mojikumi-line-end">，</span>如 DDPP5 Fig.4-20 (b) 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-4-20-b.97c7ef5b.webp"><img srcset="/assets/ddpp-fig-4-20-b.d8170ed4.png" loading="lazy" src="/assets/ddpp-fig-4-20-b.d8170ed4.png" width="794" height="229" alt="将 bus 画在一起的 timing diagram"></picture></p>
<h3 id="propagation-delay" class="heading"><a href="#propagation-delay" class="heading-anchor" aria-label="章节： Propagation Delay" tabindex="-1"></a><span>Propagation Delay</span></h3>
<p><dfn>propagation delay</dfn> 指的是电路的某个输入发生改变后沿着某个路径产生某个输出的 delay<span class="mojikumi-line-end">，</span>一般记作 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi mathvariant="normal">p</mi><mi mathvariant="normal">X</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{\mathrm{pX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">pX</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span><span class="mojikumi-line-end">，</span>其中 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">X</mi></mrow><annotation encoding="application/x-tex">\mathrm{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathrm">X</span></span></span></span></span> 用来标识这个路径<span class="mojikumi-line-end">。</span></p>
<p>影响 propagation delay 的因素有很多<span class="mojikumi-line-end">，</span>例如<span class="mojikumi-line-end">：</span></p>
<ul>
<li>Power-supply voltage: 包括标定的电压<span class="mojikumi-line-end">，</span>以及小的电压波动</li>
<li>Temperature: 包括环境温度和电路工作产生的热量</li>
<li>Output loading: 电路的输出可能与后续电路的很多个输入相连<span class="mojikumi-line-end">，</span>连接到的输入越多<span class="mojikumi-line-end">，</span>将信号传递过去就用时越长</li>
<li>Input rise and fall times: 如果输入的 transition 慢<span class="mojikumi-line-end">，</span>也会计入 propagation delay</li>
<li>Transition direction: 有时 rise 和 fall 的用时会不同</li>
<li>Speed-of-light delays: 如果电路的物理尺寸大<span class="mojikumi-line-end">，</span>或者电路速度非常快<span class="mojikumi-line-end">，</span>光速的限制就不能忽略</li>
<li>Noise and crosstalk: 环境中的各种干扰<span class="mojikumi-line-end">，</span>以及相邻线路之间的干扰</li>
<li>Manufacturing tolerances: 元件被制造出来的时候可能有细微的差异</li>
</ul>
<p>一般来说<span class="mojikumi-line-end">，</span>计算 propagation delay 可以不考虑这么多因素<span class="mojikumi-line-end">，</span>而只需根据生产商提供的元件的 <span class="mojikumi">“</span>maximum<span class="mojikumi">”</span> <span class="mojikumi">“</span>typical<span class="mojikumi">”</span> <span class="mojikumi">“</span>minimum<span class="mojikumi">”</span> propagation delay 来进行计算<span class="mojikumi-line-end">。</span></p>
<p>如果电路有多个输入输出<span class="mojikumi-line-end">，</span>就会有很多条路径需要计算 delay<span class="mojikumi-line-end">。</span></p>
<a id="glitch-与-delay" name="glitch-与-delay" aria-hidden="true"></a>
<aside role="note" data-v-a2ab257f><div class="shadow-md rd-1 b-l-6 my-6 bg-blue-1 dark:bg-blue-9 b-blue" data-v-a2ab257f><div class="p-3 flex justify-between items-center" data-v-a2ab257f><h4 class="flex items-center gap-1 font-bold" data-v-a2ab257f><span class="text-5 i-mdi-pencil text-blue" data-v-a2ab257f></span><span class="sr-only" data-v-a2ab257f>Note: </span><span data-v-a2ab257f>glitch 与 delay</span></h4><!--v-if--></div><div class="overflow-auto rd-br-1 bg-card px-6 dark:bg-bghover" data-v-a2ab257f><p>第三章中提到的 <a href="/post/2023/01/ddpp-3#timing-hazards">glitch</a> 是否实际发生<span class="mojikumi-line-end">，</span>与电路的 delay 密切相关<span class="mojikumi-line-end">。</span></p></div></div></aside>
<h3 id="timing-specifications" class="heading"><a href="#timing-specifications" class="heading-anchor" aria-label="章节： Timing Specifications" tabindex="-1"></a><span>Timing Specifications</span></h3>
<p>生产商一般会提供元件在某种条件下每个路径<span class="mojikumi-line-end">、</span>每种 transition 方向的 propagation delay 的范围<span class="mojikumi-line-end">，</span>一般会提供 maximum delay 和 minimum delay<span class="mojikumi-line-end">，</span>也可能提供一个 <span class="mojikumi">“</span>typical<span class="mojikumi">”</span> delay<span class="mojikumi-line-end">。</span></p>
<p>一般情况下<span class="mojikumi-line-end">，</span>maximum delay 是最重要的<span class="mojikumi-line-end">，</span>minimum delay 只在少数情况下需要考虑<span class="mojikumi-line-end">，</span>而依赖于 typical delay 是不靠谱的<span class="mojikumi-line-end">。</span></p>
<h3 id="timing-analysis-tools" class="heading"><a href="#timing-analysis-tools" class="heading-anchor" aria-label="章节： Timing Analysis Tools" tabindex="-1"></a><span>Timing Analysis Tools</span></h3>
<p>在复杂的电路中<span class="mojikumi-line-end">，</span>往往需要借助 EDA tool 来计算 timing<span class="mojikumi-line-end">。</span>比起手动计算<span class="mojikumi-line-end">，</span>EDA 可能会利用元件附带的比 min/max delay 更加详细的信息来更加精确地计算 delay<span class="mojikumi-line-end">。</span>可以使用模拟器<span class="mojikumi-line-end">，</span>手动设计输入<span class="mojikumi-line-end">，</span>来计算 delay<span class="mojikumi-line-end">。</span>也可以使用 timing analysis program<span class="mojikumi-line-end">，</span>来自动计算出所有可能的 delay<span class="mojikumi-line-end">。</span></p>
<p>在设计的不同阶段可能会对 timing 进行多次估计和计算<span class="mojikumi-line-end">，</span>在设计基本完成时如果发现 propagation delay 不符合设计要求<span class="mojikumi-line-end">，</span>可能需要进行调整<span class="mojikumi-line-end">，</span>例如针对 critical path 进行线路优化<span class="mojikumi-line-end">，</span>将 critical path 上的元件尽量放在相邻的位置<span class="mojikumi-line-end">，</span>将 high-fanout 的信号复制几分来减轻 output load……这样对 timing 进行调整的过程可能会反复进行很多遍<span class="mojikumi-line-end">，</span>被称作 <dfn>timing closure</dfn><span class="mojikumi-line-end">。</span></p>
<h2 id="hdl-based-digital-design" class="heading"><a href="#hdl-based-digital-design" class="heading-anchor" aria-label="章节： HDL-Based Digital Design" tabindex="-1"></a><span>HDL-Based Digital Design</span></h2>
<h3 id="eda-tool-suites-for-hdls" class="heading"><a href="#eda-tool-suites-for-hdls" class="heading-anchor" aria-label="章节： EDA Tool Suites for HDLs" tabindex="-1"></a><span>EDA Tool Suites for HDLs</span></h3>
<dl>
<dt>text editor</dt>
<dd>包含代码高亮等功能的 HDL source file 编辑器<span class="mojikumi-line-end">。</span>
</dd>
<dt>compiler</dt>
<dd>检查代码中的语法错误<span class="mojikumi-line-end">，</span>将 HDL 编译为 RTL <span class="mojikumi">（</span>register-transfer language<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>
</dd>
<dt>synthesizer (synthesis tool)</dt>
<dd>将 RTL design synthesis 到某个具体的 hardware technology 上<span class="mojikumi-line-end">，</span>通常分为若干步骤<span class="mojikumi-line-end">：</span>
<ol>
<li>mapping: 将 RTL design 对应到具体的 hardware element</li>
<li>placement: 在 FPGA / CPLD 设计中<span class="mojikumi-line-end">，</span>为每个 element 选择具体的 programmable resource instance<span class="mojikumi-line-end">；</span>在 ASIC 设计中<span class="mojikumi-line-end">，</span>为各种 basic building block 安排位置</li>
<li>routing: 在 FPGA / ASIC 设计中<span class="mojikumi-line-end">，</span>在 element 之间连线<span class="mojikumi-line-start">（</span>CPLD 中连线是固定的<span class="mojikumi-line-end">，</span>要根据连线选择 programmable resource<span class="mojikumi-line-end">）</span></li>
</ol>
</dd>
<dt>simulator</dt>
<dd>对给定的 HDL model 和随时间变化的输入<span class="mojikumi-line-end">，</span>计算出随时间变化的输出<span class="mojikumi-line-end">。</span>输入可以是手动编辑的<span class="mojikumi-line-end">，</span>由 <i>test bench</i> 生成的<span class="mojikumi-line-end">，</span>或者通过 <i>waveform editor</i> 编辑的<span class="mojikumi-line-end">。</span>输出可以是波形图或者列表<span class="mojikumi-line-end">，</span>还可能包含警告<span class="mojikumi-line-end">。</span>
</dd>
<dt>template generator</dt>
<dd>生成常用的代码模板<span class="mojikumi-line-end">。</span>
</dd>
<dt>schematic viewer</dt>
<dd>由 HDL model <span class="mojikumi">（</span>RTL<span class="mojikumi">）</span> 或 synthesized result 生成 schematic diagram<span class="mojikumi-line-end">，</span>synthesis 前后的 schematic diagram 可能会有很大的不同<span class="mojikumi-line-end">，</span>但功能是一致的<span class="mojikumi-line-end">。</span>
</dd>
<dt>chip viewer</dt>
<dd>查看 synthesized result 中的物理布局和连线<span class="mojikumi-line-end">。</span>
</dd>
<dt>constraints editor</dt>
<dd>给 synthesizer 调参<span class="mojikumi-line-end">，</span>例如设置 timing 要求<span class="mojikumi-line-end">，</span>调整优化目标<span class="mojikumi-line-end">。</span>
</dd>
<dt>timing analyzer</dt>
<dd>计算某些或全部路径的 delay<span class="mojikumi-line-end">。</span>
</dd>
<dt>back annotator</dt>
<dd>将 timing analyzer 的计算结果插入到 HDL model 中<span class="mojikumi-line-end">，</span>以在 simulation 中展现出 timing<span class="mojikumi-line-end">。</span>
</dd>
</dl>
<h3 id="hdl-based-design-flow" class="heading"><a href="#hdl-based-design-flow" class="heading-anchor" aria-label="章节： HDL-Based Design Flow" tabindex="-1"></a><span>HDL-Based Design Flow</span></h3>
<ol>
<li>specification / hierarchy / block diagram</li>
<li>coding</li>
<li>compilation</li>
<li>simulation / functional verification / pre-fitting timing verification</li>
<li>mapping</li>
<li>fitting / place &#x26; route</li>
<li>post-fitting timing verification</li>
</ol>
<p>其中<span class="mojikumi-line-end">，</span>前四步被称作 <dfn>front-end steps</dfn><span class="mojikumi-line-end">，</span>后三步被称作 <dfn>back-end steps</dfn><span class="mojikumi-line-end">。</span></p>
<p>设计过程一般不会是一步一步顺着来的<span class="mojikumi-line-end">，</span>而是会不断反复<span class="mojikumi-line-end">。</span>为了少折腾<span class="mojikumi-line-end">，</span>第一步中总体设计的合理性<span class="mojikumi-line-end">，</span>以及第四步中进入 back-end steps 前的测试<span class="mojikumi-line-end">，</span>都非常重要<span class="mojikumi-line-end">。</span>由于精确的 timing 计算依赖于具体的 fitting<span class="mojikumi-line-end">，</span>在第七步发现 timing 不符合要求而推倒重来也是很有可能的<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
        <item>
            <title><![CDATA[DDPP 第三章学习笔记]]></title>
            <link>https://ouuan.moe/post/2023/01/ddpp-3</link>
            <guid>https://ouuan.moe/post/2023/01/ddpp-3</guid>
            <pubDate>Sun, 29 Jan 2023 07:52:32 GMT</pubDate>
            <description><![CDATA[
<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第三章 <span class="mojikumi">“</span>Switching Algebra and Combinational Logic<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为逻辑代数<span class="mojikumi-line-end">、</span>逻辑代数在电路中的使用及化简<span class="mojikumi-line-end">、</span>timing hazard<span class="mojikumi-line-end">。</span></p>
]]></description>
            <content:encoded><![CDATA[
<p><a href="https://wakerly.org/DDPP/">DDPP5</a> 第三章 <span class="mojikumi">“</span>Switching Algebra and Combinational Logic<span class="mojikumi">”</span> 的学习笔记<span class="mojikumi-line-end">。</span></p>
<p>本章的主要内容为逻辑代数<span class="mojikumi-line-end">、</span>逻辑代数在电路中的使用及化简<span class="mojikumi-line-end">、</span>timing hazard<span class="mojikumi-line-end">。</span></p>

<h2 id="switching-algebra" class="heading"><a href="#switching-algebra" class="heading-anchor" aria-label="章节： Switching Algebra" tabindex="-1"></a><span>Switching Algebra</span></h2>
<p>这一节基本上就是离散数学 (1) 开头两章的内容<span class="mojikumi-line-end">，</span>术语和记号有很多不同<span class="mojikumi-line-end">，</span><s>幸好忘的差不多了<span class="mojikumi-line-end">，</span>不然都要搞混了</s><span class="mojikumi-line-end">。</span></p>
<h3 id="记号" class="heading"><a href="#记号" class="heading-anchor" aria-label="章节： 记号" tabindex="-1"></a><span>记号</span></h3>
<ul>
<li>AND<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi></mrow><annotation encoding="application/x-tex">X\ \cdot\ Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></span></li>
<li><span class="inline-block w-3"></span>OR<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X + Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></span></li>
<li>NOT<span class="mojikumi-line-end">：</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>AND 的优先级高于 OR</li>
</ul>
<p><span class="mojikumi-line-start">（</span>yysy 我还是更喜欢 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∨</mo><mo separator="true">,</mo><mo>∧</mo></mrow><annotation encoding="application/x-tex">\lor, \land</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord">∨</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∧</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 也还行<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 真的有点难以接受<span class="mojikumi">。</span><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span><s>它们明明是对偶的怎么搞得像个环一样<span class="mojikumi-line-end">。</span></s><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>主要还是下面这些定理用加号看起来真的好怪<span class="mojikumi">。</span><span class="mojikumi">）</span><wbr><span class="mojikumi-line-start">（</span>异或不是还号称二进制加法吗<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<h3 id="公理" class="heading"><a href="#公理" class="heading-anchor" aria-label="章节： 公理" tabindex="-1"></a><span>公理</span></h3>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A1)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo mathvariant="normal">≠</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>X</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A1D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>X</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A2)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A2D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>=</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A3)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A3D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A4)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A4D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A5)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mn>1</mn><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(A5D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{rl}
\text{(A1)} &#x26; X \ne 1 \implies X = 0 \\
\text{(A1D)} &#x26; X \ne 0 \implies X = 1 \\\\
\text{(A2)} &#x26; X = 0 \implies X' = 1 \\
\text{(A2D)} &#x26; X = 1 \implies X' = 0 \\\\
\text{(A3)} &#x26; 0 \ \cdot\  0 = 0 \\
\text{(A3D)} &#x26; 1 + 1 = 1 \\\\
\text{(A4)} &#x26; 1 \ \cdot\  1 = 1 \\
\text{(A4D)} &#x26; 0 + 0 = 0 \\\\
\text{(A5)} &#x26; 0 \ \cdot\  1 = 1 \ \cdot\  0 = 0 \\
\text{(A5D)} &#x26; 1 + 0 = 0 + 1 = 1
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.8em;vertical-align:-8.15em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.65em;"><span style="top:-10.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A1)</span></span></span></span><span style="top:-9.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A1D)</span></span></span></span><span style="top:-8.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-7.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A2)</span></span></span></span><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A2D)</span></span></span></span><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A3)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A3D)</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A4)</span></span></span></span><span style="top:1.19em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A4D)</span></span></span></span><span style="top:2.39em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:3.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A5)</span></span></span></span><span style="top:4.79em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(A5D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.65em;"><span style="top:-10.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-9.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-7.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-6.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-0.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:1.19em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:3.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:4.79em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<h3 id="定理" class="heading"><a href="#定理" class="heading-anchor" aria-label="章节： 定理" tabindex="-1"></a><span>定理</span></h3>
<p>中文名来自<span class="mojikumi-line-start">《</span>数理逻辑与集合论<span class="mojikumi-line-start">（</span>第二版<span class="mojikumi">）</span><span class="mojikumi-line-end">》</span>2.2 节<span class="mojikumi-line-start">“</span>等值公式<span class="mojikumi">”</span><span class="mojikumi-line-end">。</span></p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T1)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mn>0</mn><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T1D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>1</mn><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Identities（同一律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T2)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T2D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mn>0</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Null elements（零律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T3)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T3D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Idempotency（幂等律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="1em"></mspace><mtext> (T4)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Involution（双重否定律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T5)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T5D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Complements（补余律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T6)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>Y</mi><mo>=</mo><mi>Y</mi><mo>+</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T6D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mo>=</mo><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Commutativity（交换律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T7)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>Z</mi><mo>=</mo><mi>X</mi><mo>+</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T7D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mo>=</mo><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Associativity（结合律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T8)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mtext> </mtext><mtext> </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T8D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>Y</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Z</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Distributivity（分配律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T9)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext>(T9D)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Covering（吸收律）</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T10)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>Y</mi><mtext> </mtext><mtext> </mtext><mo>+</mo><mtext> </mtext><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><mtext> </mtext><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T10D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Combining</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T11)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi><mo>+</mo><mi>Y</mi><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T11D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>Y</mi><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><mtext> </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Consensus</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T12)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>+</mo><mi>X</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T12D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mo>=</mo><mi>X</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Generalized idempotency</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T13)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mtext>  </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><mtext>  </mtext><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>X</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T13D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>X</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>X</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>DeMorgan’s theorem</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>（摩根律）</mtext></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="0.5em"></mspace><mtext> (T14)</mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo stretchy="false">[</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo separator="true">,</mo><mo>+</mo><mo separator="true">,</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mo lspace="0em" rspace="0em">=</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>X</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msubsup><mi>X</mi><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mo separator="true">,</mo><mo>+</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Generalized</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>DeMorgan’s theorem</mtext></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{ll}

\begin{array}{rl}
\enspace\text{(T1)} &#x26; X + 0 = X \\
\enspace\text{(T1D)} &#x26; X \ \cdot\  1 = X
\end{array}
&#x26; \text{Identities（同一律）}
\\\\

\begin{array}{rl}
\enspace\text{(T2)} &#x26; X + 1 = 1 \\
\enspace\text{(T2D)} &#x26; X \ \cdot\  0 = 0
\end{array}
&#x26; \text{Null elements（零律）}
\\\\

\begin{array}{rl}
\enspace\text{(T3)} &#x26; X + X = X \\
\enspace\text{(T3D)} &#x26; X \ \cdot\  X = X
\end{array}
&#x26; \text{Idempotency（幂等律）}
\\\\

\begin{array}{rl}
\quad\ \text{(T4)} &#x26; (X')' = X
\end{array}
&#x26; \text{Involution（双重否定律）}
\\\\

\begin{array}{rl}
\enspace\text{(T5)} &#x26; X + X' = 1 \\
\enspace\text{(T5D)} &#x26; X \ \cdot\  X' = 0
\end{array}
&#x26; \text{Complements（补余律）}
\\\\

\begin{array}{rl}
\enspace\text{(T6)} &#x26; X + Y = Y + X \\
\enspace\text{(T6D)} &#x26; X \ \cdot\  Y = Y \ \cdot\  X
\end{array}
&#x26; \text{Commutativity（交换律）}
\\\\

\begin{array}{rl}
\enspace\text{(T7)} &#x26; (X + Y) + Z = X + (Y + Z) \\
\enspace\text{(T7D)} &#x26; (X \ \cdot\  Y) \ \cdot\  Z = X \ \cdot\  (Y \ \cdot\  Z)
\end{array}
&#x26; \text{Associativity（结合律）}
\\\\

\begin{array}{rl}
\enspace\text{(T8)} &#x26; X \ \cdot\  (Y + Z) = \,\: X \ \cdot\  Y \,\: + \,\: X \ \cdot\  Z \,\: \\
\enspace\text{(T8D)} &#x26; X + \,\: Y \ \cdot\  Z \,\: = (X + Y) \ \cdot\  (X + Z)
\end{array}
&#x26; \text{Distributivity（分配律）}
\\\\

\begin{array}{rl}
\enspace\text{(T9)} &#x26; X + \,\: X \ \cdot\  Y \,\: = X \\
\enspace\text{(T9D)} &#x26; X \ \cdot\  (X + Y) = X
\end{array}
&#x26; \text{Covering（吸收律）}
\\\\

\begin{array}{rl}
\text{(T10)} &#x26; \,\: X \ \cdot\  Y \,\: + \,\: X \ \cdot\  Y' \,\: = X \\
\text{(T10D)} &#x26; (X + Y) \ \cdot\  (X + Y') = X
\end{array}
&#x26; \text{Combining}
\\\\

\begin{array}{rl}
\text{(T11)} &#x26; \begin{aligned} &#x26; X \cdot Y + X' \cdot Z + Y \cdot Z \\[-0.2em] =\ &#x26; X \cdot Y + X' \cdot Z \end{aligned} \\
\text{(T11D)} &#x26; \begin{aligned} &#x26; (X + Y) \cdot (X' + Z) \cdot (Y + Z) \\[-0.2em] =\ &#x26; (X + Y) \cdot (X' + Z) \end{aligned}
\end{array}
&#x26; \text{Consensus}
\\\\

\begin{array}{rl}
\text{(T12)}  &#x26; X + X + \cdots + X = X \\
\text{(T12D)} &#x26; X \ \cdot\  X \ \cdot\ \cdots\ \cdot\  X = X
\end{array}
&#x26; \text{Generalized idempotency}
\\\\

\begin{array}{rl}
\text{(T13)} &#x26;
\begin{aligned}
&#x26; (X \ \ \cdot\  X \ \ \cdot\ \cdots\ \cdot\  X)' \\[-0.2em]
= &#x26; \,\: X' + X' + \cdots + X'
\end{aligned}
\\
\text{(T13D)} &#x26;
\begin{aligned}
&#x26; (X + X + \cdots + X)' \\[-0.2em]
= &#x26; \,\: X' \cdot\  X' \cdot\  \cdots \ \cdot\  X'
\end{aligned}
\end{array}
&#x26; \begin{array}{c} \text{DeMorgan’s theorem} \\ \text{（摩根律）} \end{array}
\\\\

\begin{array}{rl}
\enspace\ \text{(T14)} &#x26;
\begin{aligned}
 &#x26; [F(X_1, X_2, \ldots, X_n, +, \ \cdot\ )]' \\[-0.2em]
=&#x26;\ F(X_1', X_2', \ldots, X_n', \ \cdot\ , +)
\end{aligned}
\end{array}
&#x26; \begin{array}{c} \text{Generalized} \\ \text{DeMorgan’s theorem} \end{array}
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:54.81em;vertical-align:-27.155em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:27.655em;"><span style="top:-31.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T1)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T1D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-29.465em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-27.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T2)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T2D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-25.865em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-24.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T3)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T3D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-22.265em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-21.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord">(T4)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-19.855em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-18.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T5)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T5D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-16.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-14.445em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T6)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T6D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-12.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-10.845em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T7)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T7D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-9.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-7.245em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T8)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T8D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-5.455em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-3.645em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T9)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mord text"><span class="mord">(T9D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-1.855em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:-0.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T10)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T10D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:1.745em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:5.155em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T11)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T11D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace"> </span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:8.545em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:10.355em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T12)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T12D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:12.145em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:15.555em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T13)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord text"><span class="mord">(T13D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05em;"><span style="top:-5.05em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:18.945em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"></span></span><span style="top:20.955em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.65em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mspace" style="margin-right:0.5em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord">(T14)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.65em;"><span class="pstrut" style="height:3.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.65em;"><span style="top:-3.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mspace"> </span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.51em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:27.155em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:27.655em;"><span style="top:-31.255em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Identities</span><span class="mord cjk_fallback">（同一律）</span></span></span></span><span style="top:-27.655em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Null elements</span><span class="mord cjk_fallback">（零律）</span></span></span></span><span style="top:-24.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Idempotency</span><span class="mord cjk_fallback">（幂等律）</span></span></span></span><span style="top:-21.055em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Involution</span><span class="mord cjk_fallback">（双重否定律）</span></span></span></span><span style="top:-18.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Complements</span><span class="mord cjk_fallback">（补余律）</span></span></span></span><span style="top:-14.445em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Commutativity</span><span class="mord cjk_fallback">（交换律）</span></span></span></span><span style="top:-10.845em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Associativity</span><span class="mord cjk_fallback">（结合律）</span></span></span></span><span style="top:-7.245em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Distributivity</span><span class="mord cjk_fallback">（分配律）</span></span></span></span><span style="top:-3.645em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Covering</span><span class="mord cjk_fallback">（吸收律）</span></span></span></span><span style="top:-0.045em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Combining</span></span></span></span><span style="top:5.155em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Consensus</span></span></span></span><span style="top:10.355em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord text"><span class="mord">Generalized idempotency</span></span></span></span><span style="top:15.555em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DeMorgan’s theorem</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">（摩根律）</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:20.955em;"><span class="pstrut" style="height:5.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Generalized</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">DeMorgan’s theorem</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:27.155em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>Shannon’s expansion theorems</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T15)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><msub><mi>X</mi><mn>1</mn></msub><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mtext> </mtext><mo>⋅</mo><mtext> </mtext><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>(T15D)</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>⋅</mo><mo stretchy="false">[</mo><msubsup><mi>X</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{rl}
&#x26; \text{Shannon’s expansion theorems} \\[0.3em]
\text{(T15)} &#x26; F(X_1, X_2, \ldots, X_n) = \ X_1 \ \cdot\  F(1, X_2, \ldots, X_n) + X_1' \ \cdot\  F(0, X_2, \ldots, X_n) \\
\text{(T15D)} &#x26; F(X_1, X_2, \ldots, X_n) = [X_1 + F(1, X_2, \ldots, X_n)] \cdot [X_1' + F(0, X_2, \ldots, X_n)]
\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.9em;vertical-align:-1.7em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.36em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.86em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T15)</span></span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">(T15D)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.36em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Shannon’s expansion theorems</span></span></span></span><span style="top:-2.86em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></div>
<p><span class="mojikumi-line-start">（</span><s>草<span class="mojikumi-line-end">，</span>对齐好累<span class="mojikumi-line-end">，</span>我为什么要浪费这个时间<span class="mojikumi-line-end">。</span></s><span class="mojikumi-line-end">）</span></p>
<h3 id="duality" class="heading"><a href="#duality" class="heading-anchor" aria-label="章节： Duality" tabindex="-1"></a><span>Duality</span></h3>
<p>将一个等式中所有的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span><span class="mojikumi-line-end">、</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 换成 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span><span class="mojikumi-line-end">，</span>等式依然成立<span class="mojikumi-line-end">。</span></p>
<p>上面的定理中带 <span class="mojikumi">“</span>D<span class="mojikumi">”</span> 的都是上一条的对偶<span class="mojikumi-line-end">。</span></p>
<h3 id="standard-representations-of-logic-functions" class="heading"><a href="#standard-representations-of-logic-functions" class="heading-anchor" aria-label="章节： Standard Representations of Logic Functions" tabindex="-1"></a><span>Standard Representations of Logic Functions</span></h3>
<p>这里需要翻出来我离散 (1) 写的 <a href="https://ouuan.github.io/truth-table-generator/">真值表生成器</a><span class="mojikumi-line-start">（</span>其实可以去加上 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></span> 和 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord">⋅</span></span></span></span></span> 作为 alias<span class="mojikumi-line-end">，</span>但如果要加 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的话会很麻烦所以干脆不加了吧<span class="mojikumi-line-start">（</span></p>
<p>logic function 有若干精确的标准表示方法<span class="mojikumi-line-end">：</span></p>
<ul>
<li>真值表</li>
<li>canonical sum: 主析取范式<span class="mojikumi-line-end">，</span>极小项 (minterm) 的和</li>
<li>使用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span></span></span></span></span> 表示的 minterm list</li>
<li>canonical product: 主合取范式<span class="mojikumi-line-end">，</span>极大项 (maxterm) 的和</li>
<li>使用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></span> 表示的 maxterm list</li>
<li>Verilog <code>case</code> 语句</li>
</ul>
<p>这里用 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></span> 表示 maxterm list 的下标比离散 (1) 讲的舒服多了<span class="mojikumi-line-end">：</span>minterm 的 index 就是哪组变量取值下表达式值为 1<span class="mojikumi-line-end">，</span>maxterm 的 index 就是哪组变量取值下表达式为 0<span class="mojikumi-line-end">，</span>所以两种范式的下标刚好是补集<span class="mojikumi-line-end">。</span>例如<span class="mojikumi-line-end">，</span>有 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">X, Y, Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></span> 三个变量<span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X' \cdot Y \cdot Z'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的下标是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></span><span class="mojikumi-line-end">，</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>Y</mi><mo>+</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">X' + Y + Z'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span> 的下标是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span></span><span class="mojikumi-line-end">；</span><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><msup><mi>Y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Z</mi><mo>+</mo><msup><mi>X</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi>X</mi><mo>⋅</mo><mi>Y</mi><mo>⋅</mo><msup><mi>Z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msub><mo>∏</mo><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi></mrow></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{X,Y,Z}(1,2,6) = X' \cdot Y' \cdot Z + X' \cdot Y \cdot Z' + X \cdot Y \cdot Z' = \prod_{X,Y,Z}(0,3,4,5,7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1858em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1858em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span><span class="mclose">)</span></span></span></span></span><span class="mojikumi-line-end">。</span></p>
<p>Verilog 的 <code>case</code> 语句大概是这个样子<span class="mojikumi">：</span><wbr><span class="mojikumi-line-start">（</span>虽然还完全没学 Verilog<span class="mojikumi-line-end">，</span>但我感觉 Shiki 自带的 system-verilog 高亮看起来就比 verilog 正确许多<span class="mojikumi-line-end">，</span>以后可能也用 system-verilog 的高亮了<span class="mojikumi-line-end">）</span></p>
<section class="code-block relative my-6 shadow" itemprop="hasPart" itemscope itemtype="https://schema.org/SoftwareSourceCode" data-v-ad49d235><div class="h-6 items-center rd-t-1 bg-area px-4 dark:bg-#2A313A media-screen:important-flex" style="display:none;" data-v-ad49d235><h4 class="text-3 text-footer" itemprop="programmingLanguage" aria-label="SystemVerilog 代码块" data-v-ad49d235>SystemVerilog</h4><ile-root id="ile-21"><button title="复制到剪贴板" class="copy-button b-footer text-footer" data-v-9288569d><span class="i-mdi-content-copy" data-v-9288569d></span><span class="sr-only" role="status" data-v-9288569d></span></button></ile-root><!--ISLAND_HYDRATION_PLACEHOLDER_ile-21--></div><div class="light:hidden" itemprop="text" data-v-ad49d235><pre class="shiki dark" style="background-color: #011627" tabindex="0"><code><span><span style="color: #C792EA">case</span><span style="color: #D6DEEB"> (</span><span style="color: #C792EA">{</span><span style="color: #82AAFF">X</span><span style="color: #D6DEEB">,</span><span style="color: #82AAFF">Y</span><span style="color: #D6DEEB">,</span><span style="color: #82AAFF">Z</span><span style="color: #C792EA">}</span><span style="color: #D6DEEB">)</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">,</span><span style="color: #F78C6C">2</span><span style="color: #D6DEEB">,</span><span style="color: #F78C6C">6</span><span style="color: #C792EA">:</span><span style="color: #D6DEEB">    </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">1</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #D6DEEB">  </span><span style="color: #C792EA">default:</span><span style="color: #D6DEEB">  </span><span style="color: #82AAFF">F</span><span style="color: #D6DEEB"> </span><span style="color: #C792EA">=</span><span style="color: #D6DEEB"> </span><span style="color: #F78C6C">0</span><span style="color: #D6DEEB">;</span></span>
<span><span style="color: #C792EA">endcase</span></span></code></pre></div><div class="light:important-block" style="display:none;" data-v-ad49d235><pre class="shiki light" style="background-color: #FBFBFB" tabindex="0"><code><span><span style="color: #994CC3">case</span><span style="color: #403F53"> (</span><span style="color: #994CC3">{</span><span style="color: #4876D6">X</span><span style="color: #403F53">,</span><span style="color: #4876D6">Y</span><span style="color: #403F53">,</span><span style="color: #4876D6">Z</span><span style="color: #994CC3">}</span><span style="color: #403F53">)</span></span>
<span><span style="color: #403F53">  </span><span style="color: #AA0982">1</span><span style="color: #403F53">,</span><span style="color: #AA0982">2</span><span style="color: #403F53">,</span><span style="color: #AA0982">6</span><span style="color: #994CC3">:</span><span style="color: #403F53">    </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">1</span><span style="color: #403F53">;</span></span>
<span><span style="color: #403F53">  </span><span style="color: #994CC3">default:</span><span style="color: #403F53">  </span><span style="color: #4876D6">F</span><span style="color: #403F53"> </span><span style="color: #994CC3">=</span><span style="color: #403F53"> </span><span style="color: #AA0982">0</span><span style="color: #403F53">;</span></span>
<span><span style="color: #994CC3">endcase</span></span></code></pre></div></section>
<h2 id="combinational-circuit-analysis" class="heading"><a href="#combinational-circuit-analysis" class="heading-anchor" aria-label="章节： Combinational-Circuit Analysis" tabindex="-1"></a><span>Combinational-Circuit Analysis</span></h2>
<p>这一节就是说给你一个电路图怎么搞出它的 logic function<span class="mojikumi-line-end">。</span>其实没啥好说的<span class="mojikumi-line-end">，</span>就<span class="mojikumi-line-start">（</span>按拓扑序<span class="mojikumi-line-end">）</span>一个一个 gate 递推就行<span class="mojikumi-line-end">，</span>可以用真值表也可以用逻辑表达式<span class="mojikumi-line-end">。</span></p>
<p>有一个小 trick<span class="mojikumi-line-end">：</span>DeMorgan<span class="mojikumi-narrow-left">’</span>s theorem 在电路图中表现为<span class="mojikumi-line-end">，</span>将 inversion bubble 换到另一侧<span class="mojikumi-line-start">（</span>输入 / 输出<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且改变 gate 的类型<span class="mojikumi-line-start">（</span>AND / OR<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>这样的话<span class="mojikumi-line-end">，</span>如果两个 inversion bubble 在一条 wire 上就可以消掉<span class="mojikumi-line-end">。</span></p>
<h2 id="combinational-circuit-synthesis" class="heading"><a href="#combinational-circuit-synthesis" class="heading-anchor" aria-label="章节： Combinational-Circuit Synthesis" tabindex="-1"></a><span>Combinational-Circuit Synthesis</span></h2>
<p>在 digital design 中<span class="mojikumi">，</span><wbr><span class="mojikumi-line-start">“</span>Synthesis<span class="mojikumi">”</span> 有若干种含义<span class="mojikumi-line-start">（</span>例如从 HDL 到 FPGA<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>而在这一节只是指从 formal description 到 gate-level circuit<span class="mojikumi-line-end">。</span></p>
<h3 id="circuit-descriptions-and-designs" class="heading"><a href="#circuit-descriptions-and-designs" class="heading-anchor" aria-label="章节： Circuit Descriptions and Designs" tabindex="-1"></a><span>Circuit Descriptions and Designs</span></h3>
<p>自然语言描述 → 逻辑表达式 / 真值表<span class="mojikumi-line-start">（</span>canonical sum / product<span class="mojikumi">）</span> → 电路</p>
<p>很多时候写出逻辑表达式会比列出真值表简单一些<span class="mojikumi-line-end">，</span>但在面对较为复杂的逻辑关系时<span class="mojikumi-line-end">，</span>列出真值表可以强制设计师考虑到每种情况<span class="mojikumi-line-end">，</span>从而避免漏掉 corner case<span class="mojikumi-line-end">。</span></p>
<p>一个输出是某个逻辑表达式的电路被称作 <i>realize</i> 了这个表达式<span class="mojikumi-line-end">，</span>是这个表达式的 <i>realization</i> 或者 <i>implementation</i><span class="mojikumi-line-end">。</span></p>
<h3 id="circuit-manipulations" class="heading"><a href="#circuit-manipulations" class="heading-anchor" aria-label="章节： Circuit Manipulations" tabindex="-1"></a><span>Circuit Manipulations</span></h3>
<p>在多数电路技术<span class="mojikumi-line-start">（</span>包括 CMOS<span class="mojikumi-line-end">）</span>中<span class="mojikumi-line-end">，</span>NAND / NOR 比 AND / OR 效率更高<span class="mojikumi-line-end">，</span>所以一般会修改电路来尽量使用 inverting gate 而非 noninverting gate<span class="mojikumi-line-end">：</span></p>
<ul>
<li>在 wire 上移动 inversion bubble<span class="mojikumi-line-start">（</span>从上一个输出移到下一个输入<span class="mojikumi-line-end">）</span></li>
<li>在 wire 的两侧同时加上 inversion bubble<span class="mojikumi-line-start">（</span>或者 NOT gate<span class="mojikumi-line-end">）</span></li>
<li>消除同一根 wire 上的两个 inversion bubble</li>
<li>将 inversion bubble 换到另一侧<span class="mojikumi-line-start">（</span>输入 / 输出<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>并且改变 gate 的类型<span class="mojikumi-line-start">（</span>AND / OR<span class="mojikumi-line-end">）</span></li>
</ul>
<h3 id="combinational-circuit-minimization" class="heading"><a href="#combinational-circuit-minimization" class="heading-anchor" aria-label="章节： Combinational-Circuit Minimization" tabindex="-1"></a><span>Combinational-Circuit Minimization</span></h3>
<p>一般情况下<span class="mojikumi-line-end">，</span>逻辑表达式的化简主要用的是定理 T10<span class="mojikumi-line-start">（</span>Combining<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>就是在 sum of products 中找到仅有一项相反的两个 product 将它们合并<span class="mojikumi-line-end">，</span>最终得到的也是一个 sum of products<span class="mojikumi-line-end">，</span>实现为 2-level<span class="mojikumi-line-start">（</span>first-level 计算 product<span class="mojikumi-line-end">，</span>second-level 计算 sum<span class="mojikumi-line-end">）</span>的电路<span class="mojikumi-line-end">。</span></p>
<p>product of sums 电路是对偶的<span class="mojikumi-line-end">，</span>就不重复了<span class="mojikumi-line-end">，</span>下文也是一样<span class="mojikumi-line-end">。</span></p>
<h3 id="karnaugh-maps" class="heading"><a href="#karnaugh-maps" class="heading-anchor" aria-label="章节： Karnaugh Maps" tabindex="-1"></a><span>Karnaugh Maps</span></h3>
<p>如 DDPP5 Figure 3-23 所示<span class="mojikumi-line-end">：</span></p>
<p><picture><source type="image/webp" srcset="/assets/ddpp-fig-3-23.15ec6efa.webp"><img srcset="/assets/ddpp-fig-3-23.43ab9a40.png" loading="lazy" src="/assets/ddpp-fig-3-23.43ab9a40.png" width="1235" height="457" alt="2-variable, 3-variable, and 4-variable Karnaugh maps"></picture></p>
<p>在 Karnaugh map 中<span class="mojikumi-line-end">，</span>每一个表示一个 minterm<span class="mojikumi-line-end">，</span>相邻<span class="mojikumi-line-start">（</span>包括跨过边界到另一侧的相邻<span class="mojikumi-line-end">）</span>的格子仅有一位相反<span class="mojikumi-line-end">，</span>所以边长为 1 / 2 / 4 的矩形可以合并<span class="mojikumi-line-end">。</span></p>
<p>选出若干矩形<span class="mojikumi-line-end">，</span>恰好覆盖所有输出为 1 的格子<span class="mojikumi-line-end">，</span>就可以化简逻辑表达式<span class="mojikumi-line-end">。</span></p>
<p>如果一个矩形覆盖的全是 1<span class="mojikumi-line-end">，</span>并且是极大的<span class="mojikumi-line-start">（</span>在其对应的 product 中减少任何一个输入都会使其覆盖到 0<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>就称作一个 <i>prime implicant</i><span class="mojikumi-line-end">。</span>最简的逻辑表达式是若干 prime implicant 的 sum<span class="mojikumi-line-end">。</span></p>
<p>有的函数的 Karnaugh map 非常分散<span class="mojikumi-line-start">（</span>例如 parity function<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>没有连成一块的 1<span class="mojikumi-line-end">，</span>就需要多级而非 2-level 的电路来进行化简<span class="mojikumi-line-end">。</span></p>
<p>在 FPGA 中<span class="mojikumi-line-end">，</span>输入数量较少的电路都是通过 lookup table (LUT) 而非 gate-level circuit 来实现<span class="mojikumi-line-end">，</span>只需真值表就可以<span class="mojikumi-line-end">。</span>但复杂的电路需要由多个 LUT 组合起来<span class="mojikumi-line-end">，</span>此时逻辑表达式的化简依然有用<span class="mojikumi-line-end">。</span></p>
<h2 id="timing-hazards" class="heading"><a href="#timing-hazards" class="heading-anchor" aria-label="章节： Timing Hazards" tabindex="-1"></a><span>Timing Hazards</span></h2>
<p>真实的电路中会有 delay<span class="mojikumi-line-end">，</span>而上面研究的都是 combinational logic circuit 的 <i>steady-state behavior</i><span class="mojikumi-line-end">，</span>没有考虑到 <i>transient behavior</i><span class="mojikumi-line-end">。</span></p>
<p>因为 delay 的存在<span class="mojikumi-line-end">，</span>可能会发生这样的情况<span class="mojikumi-line-end">：</span>输入发生了改变<span class="mojikumi-line-end">，</span>稳态下的输出不变<span class="mojikumi-line-end">，</span>但在一瞬间内输出发生了变化<span class="mojikumi-line-start">（</span>产生了一个 short pulse<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span>这样的 pulse 被称作 <i>glitch</i><span class="mojikumi-line-end">。</span></p>
<p>如果一个电路有产生 glitch 的可能性<span class="mojikumi-line-end">，</span>则称这个电路存在 <i>hazard</i><span class="mojikumi-line-end">。</span>实际物理电路的 delay 大小等因素难以控制<span class="mojikumi-line-end">，</span>所以这里只是考虑产生 glitch 的可能性<span class="mojikumi-line-end">，</span>而非实际是否有 glitch 产生<span class="mojikumi-line-start">（</span>有点类似于并发编程中要保证所有可能的执行顺序下都不出错<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="static-hazards" class="heading"><a href="#static-hazards" class="heading-anchor" aria-label="章节： Static Hazards" tabindex="-1"></a><span>Static Hazards</span></h3>
<p><i>static-1 hazard</i><span class="mojikumi-line-end">：</span>稳态输出是 1<span class="mojikumi-line-end">，</span>改变某一个输入后稳态输出还是 1<span class="mojikumi-line-end">，</span>但这一个输入改变时可能会短暂地输出 0<span class="mojikumi-line-end">。</span>static-0 hazard 是类似的<span class="mojikumi-line-end">。</span></p>
<p>书上给了个例子<span class="mojikumi-line-end">，</span>但这个其实很好理解<span class="mojikumi-line-end">，</span>就是电路的一个输入作为多个 gate 的输入<span class="mojikumi-line-end">，</span>而这些 gate 的输出变化得有快有慢<span class="mojikumi-line-end">。</span></p>
<h3 id="finding-static-hazards-using-maps" class="heading"><a href="#finding-static-hazards-using-maps" class="heading-anchor" aria-label="章节： Finding Static Hazards Using Maps" tabindex="-1"></a><span>Finding Static Hazards Using Maps</span></h3>
<p>正常的 sum of products 电路中不会有 static-0 hazard<span class="mojikumi-line-end">，</span>可能有 static-1 hazard<span class="mojikumi-line-end">。</span></p>
<p>可以用 Karnaugh map 来找到 hazard<span class="mojikumi-line-end">：</span>如果两个相邻的 1 没有被同一个 gate 覆盖<span class="mojikumi-line-end">，</span>从其中一个变为另一个时就可能产生 glitch<span class="mojikumi">。</span><wbr><span class="mojikumi-line-start">（</span>因为极端情况下可能所有覆盖原来那一格的 gate 先全部变为 0<span class="mojikumi-line-end">，</span>覆盖后来那一格的 gate 才变为 1<span class="mojikumi">。</span><span class="mojikumi-line-end">）</span></p>
<p>消除 hazard 就是用冗余的 gate 来覆盖这样的相邻的 1<span class="mojikumi-line-end">，</span>类似于定理 T11<span class="mojikumi-line-start">（</span>Consensus<span class="mojikumi">）</span><span class="mojikumi-line-end">。</span></p>
<h3 id="dynamic-hazards" class="heading"><a href="#dynamic-hazards" class="heading-anchor" aria-label="章节： Dynamic Hazards" tabindex="-1"></a><span>Dynamic Hazards</span></h3>
<p>如果变化一个输入时可能产生不止一次 glitch<span class="mojikumi-line-end">，</span>就称作 <i>dynamic hazard</i><span class="mojikumi-line-end">。</span></p>
<p>一个正常的 2-level sum of products / product of sums 电路中不会有 dynamic hazard<span class="mojikumi-line-end">。</span></p>
<h3 id="designing-hazard-free-circuits" class="heading"><a href="#designing-hazard-free-circuits" class="heading-anchor" aria-label="章节： Designing Hazard-Free Circuits" tabindex="-1"></a><span>Designing Hazard-Free Circuits</span></h3>
<p>在多数电路中<span class="mojikumi-line-start">（</span>尤其是 synchronous digital system 中<span class="mojikumi">）</span><span class="mojikumi-line-end">，</span>hazard 不会造成什么影响<span class="mojikumi-line-end">。</span>但在某些电路<span class="mojikumi-line-start">（</span>asynchronous sequential circuits<span class="mojikumi-line-end">）</span>中<span class="mojikumi-line-end">，</span>需要避免 hazard 的存在<span class="mojikumi-line-end">。</span></p>
<p>在一般的电路中消除 hazard 是复杂的<span class="mojikumi-line-end">，</span>而在 sum of products 中<span class="mojikumi-line-end">，</span>可以用 Karnaugh map 或者取遍所有 prime implicant<span class="mojikumi-line-start">（</span>称作 <i>complete sum</i><span class="mojikumi-line-end">）</span>来消除 hazard<span class="mojikumi-line-end">。</span></p>]]></content:encoded>
            <category domain="https://ouuan.moe/tag/ddpp">ddpp</category>
            <category domain="https://ouuan.moe/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">学习笔记</category>
        </item>
    </channel>
</rss>